/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ 75029:
/***/ ((module) => {

function webpackEmptyContext(req) {
	var e = new Error("Cannot find module '" + req + "'");
	e.code = 'MODULE_NOT_FOUND';
	throw e;
}
webpackEmptyContext.keys = () => ([]);
webpackEmptyContext.resolve = webpackEmptyContext;
webpackEmptyContext.id = 75029;
module.exports = webpackEmptyContext;

/***/ }),

/***/ 3437:
/***/ ((module) => {

function webpackEmptyContext(req) {
	var e = new Error("Cannot find module '" + req + "'");
	e.code = 'MODULE_NOT_FOUND';
	throw e;
}
webpackEmptyContext.keys = () => ([]);
webpackEmptyContext.resolve = webpackEmptyContext;
webpackEmptyContext.id = 3437;
module.exports = webpackEmptyContext;

/***/ }),

/***/ 77107:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.createFileSystemAdapter = exports.FILE_SYSTEM_ADAPTER = void 0;
const fs = __webpack_require__(57147);
exports.FILE_SYSTEM_ADAPTER = {
    lstat: fs.lstat,
    stat: fs.stat,
    lstatSync: fs.lstatSync,
    statSync: fs.statSync,
    readdir: fs.readdir,
    readdirSync: fs.readdirSync
};
function createFileSystemAdapter(fsMethods) {
    if (fsMethods === undefined) {
        return exports.FILE_SYSTEM_ADAPTER;
    }
    return Object.assign(Object.assign({}, exports.FILE_SYSTEM_ADAPTER), fsMethods);
}
exports.createFileSystemAdapter = createFileSystemAdapter;


/***/ }),

/***/ 53513:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.IS_SUPPORT_READDIR_WITH_FILE_TYPES = void 0;
const NODE_PROCESS_VERSION_PARTS = process.versions.node.split('.');
if (NODE_PROCESS_VERSION_PARTS[0] === undefined || NODE_PROCESS_VERSION_PARTS[1] === undefined) {
    throw new Error(`Unexpected behavior. The 'process.versions.node' variable has invalid value: ${process.versions.node}`);
}
const MAJOR_VERSION = Number.parseInt(NODE_PROCESS_VERSION_PARTS[0], 10);
const MINOR_VERSION = Number.parseInt(NODE_PROCESS_VERSION_PARTS[1], 10);
const SUPPORTED_MAJOR_VERSION = 10;
const SUPPORTED_MINOR_VERSION = 10;
const IS_MATCHED_BY_MAJOR = MAJOR_VERSION > SUPPORTED_MAJOR_VERSION;
const IS_MATCHED_BY_MAJOR_AND_MINOR = MAJOR_VERSION === SUPPORTED_MAJOR_VERSION && MINOR_VERSION >= SUPPORTED_MINOR_VERSION;
/**
 * IS `true` for Node.js 10.10 and greater.
 */
exports.IS_SUPPORT_READDIR_WITH_FILE_TYPES = IS_MATCHED_BY_MAJOR || IS_MATCHED_BY_MAJOR_AND_MINOR;


/***/ }),

/***/ 31954:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Settings = exports.scandirSync = exports.scandir = void 0;
const async = __webpack_require__(18256);
const sync = __webpack_require__(68957);
const settings_1 = __webpack_require__(43009);
exports.Settings = settings_1.default;
function scandir(path, optionsOrSettingsOrCallback, callback) {
    if (typeof optionsOrSettingsOrCallback === 'function') {
        async.read(path, getSettings(), optionsOrSettingsOrCallback);
        return;
    }
    async.read(path, getSettings(optionsOrSettingsOrCallback), callback);
}
exports.scandir = scandir;
function scandirSync(path, optionsOrSettings) {
    const settings = getSettings(optionsOrSettings);
    return sync.read(path, settings);
}
exports.scandirSync = scandirSync;
function getSettings(settingsOrOptions = {}) {
    if (settingsOrOptions instanceof settings_1.default) {
        return settingsOrOptions;
    }
    return new settings_1.default(settingsOrOptions);
}


/***/ }),

/***/ 18256:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.readdir = exports.readdirWithFileTypes = exports.read = void 0;
const fsStat = __webpack_require__(51435);
const rpl = __webpack_require__(88842);
const constants_1 = __webpack_require__(53513);
const utils = __webpack_require__(41079);
const common = __webpack_require__(69329);
function read(directory, settings, callback) {
    if (!settings.stats && constants_1.IS_SUPPORT_READDIR_WITH_FILE_TYPES) {
        readdirWithFileTypes(directory, settings, callback);
        return;
    }
    readdir(directory, settings, callback);
}
exports.read = read;
function readdirWithFileTypes(directory, settings, callback) {
    settings.fs.readdir(directory, { withFileTypes: true }, (readdirError, dirents) => {
        if (readdirError !== null) {
            callFailureCallback(callback, readdirError);
            return;
        }
        const entries = dirents.map((dirent) => ({
            dirent,
            name: dirent.name,
            path: common.joinPathSegments(directory, dirent.name, settings.pathSegmentSeparator)
        }));
        if (!settings.followSymbolicLinks) {
            callSuccessCallback(callback, entries);
            return;
        }
        const tasks = entries.map((entry) => makeRplTaskEntry(entry, settings));
        rpl(tasks, (rplError, rplEntries) => {
            if (rplError !== null) {
                callFailureCallback(callback, rplError);
                return;
            }
            callSuccessCallback(callback, rplEntries);
        });
    });
}
exports.readdirWithFileTypes = readdirWithFileTypes;
function makeRplTaskEntry(entry, settings) {
    return (done) => {
        if (!entry.dirent.isSymbolicLink()) {
            done(null, entry);
            return;
        }
        settings.fs.stat(entry.path, (statError, stats) => {
            if (statError !== null) {
                if (settings.throwErrorOnBrokenSymbolicLink) {
                    done(statError);
                    return;
                }
                done(null, entry);
                return;
            }
            entry.dirent = utils.fs.createDirentFromStats(entry.name, stats);
            done(null, entry);
        });
    };
}
function readdir(directory, settings, callback) {
    settings.fs.readdir(directory, (readdirError, names) => {
        if (readdirError !== null) {
            callFailureCallback(callback, readdirError);
            return;
        }
        const tasks = names.map((name) => {
            const path = common.joinPathSegments(directory, name, settings.pathSegmentSeparator);
            return (done) => {
                fsStat.stat(path, settings.fsStatSettings, (error, stats) => {
                    if (error !== null) {
                        done(error);
                        return;
                    }
                    const entry = {
                        name,
                        path,
                        dirent: utils.fs.createDirentFromStats(name, stats)
                    };
                    if (settings.stats) {
                        entry.stats = stats;
                    }
                    done(null, entry);
                });
            };
        });
        rpl(tasks, (rplError, entries) => {
            if (rplError !== null) {
                callFailureCallback(callback, rplError);
                return;
            }
            callSuccessCallback(callback, entries);
        });
    });
}
exports.readdir = readdir;
function callFailureCallback(callback, error) {
    callback(error);
}
function callSuccessCallback(callback, result) {
    callback(null, result);
}


/***/ }),

/***/ 69329:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.joinPathSegments = void 0;
function joinPathSegments(a, b, separator) {
    /**
     * The correct handling of cases when the first segment is a root (`/`, `C:/`) or UNC path (`//?/C:/`).
     */
    if (a.endsWith(separator)) {
        return a + b;
    }
    return a + separator + b;
}
exports.joinPathSegments = joinPathSegments;


/***/ }),

/***/ 68957:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.readdir = exports.readdirWithFileTypes = exports.read = void 0;
const fsStat = __webpack_require__(51435);
const constants_1 = __webpack_require__(53513);
const utils = __webpack_require__(41079);
const common = __webpack_require__(69329);
function read(directory, settings) {
    if (!settings.stats && constants_1.IS_SUPPORT_READDIR_WITH_FILE_TYPES) {
        return readdirWithFileTypes(directory, settings);
    }
    return readdir(directory, settings);
}
exports.read = read;
function readdirWithFileTypes(directory, settings) {
    const dirents = settings.fs.readdirSync(directory, { withFileTypes: true });
    return dirents.map((dirent) => {
        const entry = {
            dirent,
            name: dirent.name,
            path: common.joinPathSegments(directory, dirent.name, settings.pathSegmentSeparator)
        };
        if (entry.dirent.isSymbolicLink() && settings.followSymbolicLinks) {
            try {
                const stats = settings.fs.statSync(entry.path);
                entry.dirent = utils.fs.createDirentFromStats(entry.name, stats);
            }
            catch (error) {
                if (settings.throwErrorOnBrokenSymbolicLink) {
                    throw error;
                }
            }
        }
        return entry;
    });
}
exports.readdirWithFileTypes = readdirWithFileTypes;
function readdir(directory, settings) {
    const names = settings.fs.readdirSync(directory);
    return names.map((name) => {
        const entryPath = common.joinPathSegments(directory, name, settings.pathSegmentSeparator);
        const stats = fsStat.statSync(entryPath, settings.fsStatSettings);
        const entry = {
            name,
            path: entryPath,
            dirent: utils.fs.createDirentFromStats(name, stats)
        };
        if (settings.stats) {
            entry.stats = stats;
        }
        return entry;
    });
}
exports.readdir = readdir;


/***/ }),

/***/ 43009:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const path = __webpack_require__(71017);
const fsStat = __webpack_require__(51435);
const fs = __webpack_require__(77107);
class Settings {
    constructor(_options = {}) {
        this._options = _options;
        this.followSymbolicLinks = this._getValue(this._options.followSymbolicLinks, false);
        this.fs = fs.createFileSystemAdapter(this._options.fs);
        this.pathSegmentSeparator = this._getValue(this._options.pathSegmentSeparator, path.sep);
        this.stats = this._getValue(this._options.stats, false);
        this.throwErrorOnBrokenSymbolicLink = this._getValue(this._options.throwErrorOnBrokenSymbolicLink, true);
        this.fsStatSettings = new fsStat.Settings({
            followSymbolicLink: this.followSymbolicLinks,
            fs: this.fs,
            throwErrorOnBrokenSymbolicLink: this.throwErrorOnBrokenSymbolicLink
        });
    }
    _getValue(option, value) {
        return option !== null && option !== void 0 ? option : value;
    }
}
exports["default"] = Settings;


/***/ }),

/***/ 84466:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.createDirentFromStats = void 0;
class DirentFromStats {
    constructor(name, stats) {
        this.name = name;
        this.isBlockDevice = stats.isBlockDevice.bind(stats);
        this.isCharacterDevice = stats.isCharacterDevice.bind(stats);
        this.isDirectory = stats.isDirectory.bind(stats);
        this.isFIFO = stats.isFIFO.bind(stats);
        this.isFile = stats.isFile.bind(stats);
        this.isSocket = stats.isSocket.bind(stats);
        this.isSymbolicLink = stats.isSymbolicLink.bind(stats);
    }
}
function createDirentFromStats(name, stats) {
    return new DirentFromStats(name, stats);
}
exports.createDirentFromStats = createDirentFromStats;


/***/ }),

/***/ 41079:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.fs = void 0;
const fs = __webpack_require__(84466);
exports.fs = fs;


/***/ }),

/***/ 91968:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.createFileSystemAdapter = exports.FILE_SYSTEM_ADAPTER = void 0;
const fs = __webpack_require__(57147);
exports.FILE_SYSTEM_ADAPTER = {
    lstat: fs.lstat,
    stat: fs.stat,
    lstatSync: fs.lstatSync,
    statSync: fs.statSync
};
function createFileSystemAdapter(fsMethods) {
    if (fsMethods === undefined) {
        return exports.FILE_SYSTEM_ADAPTER;
    }
    return Object.assign(Object.assign({}, exports.FILE_SYSTEM_ADAPTER), fsMethods);
}
exports.createFileSystemAdapter = createFileSystemAdapter;


/***/ }),

/***/ 51435:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.statSync = exports.stat = exports.Settings = void 0;
const async = __webpack_require__(35529);
const sync = __webpack_require__(97946);
const settings_1 = __webpack_require__(80467);
exports.Settings = settings_1.default;
function stat(path, optionsOrSettingsOrCallback, callback) {
    if (typeof optionsOrSettingsOrCallback === 'function') {
        async.read(path, getSettings(), optionsOrSettingsOrCallback);
        return;
    }
    async.read(path, getSettings(optionsOrSettingsOrCallback), callback);
}
exports.stat = stat;
function statSync(path, optionsOrSettings) {
    const settings = getSettings(optionsOrSettings);
    return sync.read(path, settings);
}
exports.statSync = statSync;
function getSettings(settingsOrOptions = {}) {
    if (settingsOrOptions instanceof settings_1.default) {
        return settingsOrOptions;
    }
    return new settings_1.default(settingsOrOptions);
}


/***/ }),

/***/ 35529:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.read = void 0;
function read(path, settings, callback) {
    settings.fs.lstat(path, (lstatError, lstat) => {
        if (lstatError !== null) {
            callFailureCallback(callback, lstatError);
            return;
        }
        if (!lstat.isSymbolicLink() || !settings.followSymbolicLink) {
            callSuccessCallback(callback, lstat);
            return;
        }
        settings.fs.stat(path, (statError, stat) => {
            if (statError !== null) {
                if (settings.throwErrorOnBrokenSymbolicLink) {
                    callFailureCallback(callback, statError);
                    return;
                }
                callSuccessCallback(callback, lstat);
                return;
            }
            if (settings.markSymbolicLink) {
                stat.isSymbolicLink = () => true;
            }
            callSuccessCallback(callback, stat);
        });
    });
}
exports.read = read;
function callFailureCallback(callback, error) {
    callback(error);
}
function callSuccessCallback(callback, result) {
    callback(null, result);
}


/***/ }),

/***/ 97946:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.read = void 0;
function read(path, settings) {
    const lstat = settings.fs.lstatSync(path);
    if (!lstat.isSymbolicLink() || !settings.followSymbolicLink) {
        return lstat;
    }
    try {
        const stat = settings.fs.statSync(path);
        if (settings.markSymbolicLink) {
            stat.isSymbolicLink = () => true;
        }
        return stat;
    }
    catch (error) {
        if (!settings.throwErrorOnBrokenSymbolicLink) {
            return lstat;
        }
        throw error;
    }
}
exports.read = read;


/***/ }),

/***/ 80467:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const fs = __webpack_require__(91968);
class Settings {
    constructor(_options = {}) {
        this._options = _options;
        this.followSymbolicLink = this._getValue(this._options.followSymbolicLink, true);
        this.fs = fs.createFileSystemAdapter(this._options.fs);
        this.markSymbolicLink = this._getValue(this._options.markSymbolicLink, false);
        this.throwErrorOnBrokenSymbolicLink = this._getValue(this._options.throwErrorOnBrokenSymbolicLink, true);
    }
    _getValue(option, value) {
        return option !== null && option !== void 0 ? option : value;
    }
}
exports["default"] = Settings;


/***/ }),

/***/ 26533:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Settings = exports.walkStream = exports.walkSync = exports.walk = void 0;
const async_1 = __webpack_require__(16666);
const stream_1 = __webpack_require__(13436);
const sync_1 = __webpack_require__(37623);
const settings_1 = __webpack_require__(92033);
exports.Settings = settings_1.default;
function walk(directory, optionsOrSettingsOrCallback, callback) {
    if (typeof optionsOrSettingsOrCallback === 'function') {
        new async_1.default(directory, getSettings()).read(optionsOrSettingsOrCallback);
        return;
    }
    new async_1.default(directory, getSettings(optionsOrSettingsOrCallback)).read(callback);
}
exports.walk = walk;
function walkSync(directory, optionsOrSettings) {
    const settings = getSettings(optionsOrSettings);
    const provider = new sync_1.default(directory, settings);
    return provider.read();
}
exports.walkSync = walkSync;
function walkStream(directory, optionsOrSettings) {
    const settings = getSettings(optionsOrSettings);
    const provider = new stream_1.default(directory, settings);
    return provider.read();
}
exports.walkStream = walkStream;
function getSettings(settingsOrOptions = {}) {
    if (settingsOrOptions instanceof settings_1.default) {
        return settingsOrOptions;
    }
    return new settings_1.default(settingsOrOptions);
}


/***/ }),

/***/ 16666:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const async_1 = __webpack_require__(97458);
class AsyncProvider {
    constructor(_root, _settings) {
        this._root = _root;
        this._settings = _settings;
        this._reader = new async_1.default(this._root, this._settings);
        this._storage = [];
    }
    read(callback) {
        this._reader.onError((error) => {
            callFailureCallback(callback, error);
        });
        this._reader.onEntry((entry) => {
            this._storage.push(entry);
        });
        this._reader.onEnd(() => {
            callSuccessCallback(callback, this._storage);
        });
        this._reader.read();
    }
}
exports["default"] = AsyncProvider;
function callFailureCallback(callback, error) {
    callback(error);
}
function callSuccessCallback(callback, entries) {
    callback(null, entries);
}


/***/ }),

/***/ 13436:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const stream_1 = __webpack_require__(12781);
const async_1 = __webpack_require__(97458);
class StreamProvider {
    constructor(_root, _settings) {
        this._root = _root;
        this._settings = _settings;
        this._reader = new async_1.default(this._root, this._settings);
        this._stream = new stream_1.Readable({
            objectMode: true,
            read: () => { },
            destroy: () => {
                if (!this._reader.isDestroyed) {
                    this._reader.destroy();
                }
            }
        });
    }
    read() {
        this._reader.onError((error) => {
            this._stream.emit('error', error);
        });
        this._reader.onEntry((entry) => {
            this._stream.push(entry);
        });
        this._reader.onEnd(() => {
            this._stream.push(null);
        });
        this._reader.read();
        return this._stream;
    }
}
exports["default"] = StreamProvider;


/***/ }),

/***/ 37623:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const sync_1 = __webpack_require__(34550);
class SyncProvider {
    constructor(_root, _settings) {
        this._root = _root;
        this._settings = _settings;
        this._reader = new sync_1.default(this._root, this._settings);
    }
    read() {
        return this._reader.read();
    }
}
exports["default"] = SyncProvider;


/***/ }),

/***/ 97458:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const events_1 = __webpack_require__(82361);
const fsScandir = __webpack_require__(31954);
const fastq = __webpack_require__(58740);
const common = __webpack_require__(76677);
const reader_1 = __webpack_require__(29444);
class AsyncReader extends reader_1.default {
    constructor(_root, _settings) {
        super(_root, _settings);
        this._settings = _settings;
        this._scandir = fsScandir.scandir;
        this._emitter = new events_1.EventEmitter();
        this._queue = fastq(this._worker.bind(this), this._settings.concurrency);
        this._isFatalError = false;
        this._isDestroyed = false;
        this._queue.drain = () => {
            if (!this._isFatalError) {
                this._emitter.emit('end');
            }
        };
    }
    read() {
        this._isFatalError = false;
        this._isDestroyed = false;
        setImmediate(() => {
            this._pushToQueue(this._root, this._settings.basePath);
        });
        return this._emitter;
    }
    get isDestroyed() {
        return this._isDestroyed;
    }
    destroy() {
        if (this._isDestroyed) {
            throw new Error('The reader is already destroyed');
        }
        this._isDestroyed = true;
        this._queue.killAndDrain();
    }
    onEntry(callback) {
        this._emitter.on('entry', callback);
    }
    onError(callback) {
        this._emitter.once('error', callback);
    }
    onEnd(callback) {
        this._emitter.once('end', callback);
    }
    _pushToQueue(directory, base) {
        const queueItem = { directory, base };
        this._queue.push(queueItem, (error) => {
            if (error !== null) {
                this._handleError(error);
            }
        });
    }
    _worker(item, done) {
        this._scandir(item.directory, this._settings.fsScandirSettings, (error, entries) => {
            if (error !== null) {
                done(error, undefined);
                return;
            }
            for (const entry of entries) {
                this._handleEntry(entry, item.base);
            }
            done(null, undefined);
        });
    }
    _handleError(error) {
        if (this._isDestroyed || !common.isFatalError(this._settings, error)) {
            return;
        }
        this._isFatalError = true;
        this._isDestroyed = true;
        this._emitter.emit('error', error);
    }
    _handleEntry(entry, base) {
        if (this._isDestroyed || this._isFatalError) {
            return;
        }
        const fullpath = entry.path;
        if (base !== undefined) {
            entry.path = common.joinPathSegments(base, entry.name, this._settings.pathSegmentSeparator);
        }
        if (common.isAppliedFilter(this._settings.entryFilter, entry)) {
            this._emitEntry(entry);
        }
        if (entry.dirent.isDirectory() && common.isAppliedFilter(this._settings.deepFilter, entry)) {
            this._pushToQueue(fullpath, base === undefined ? undefined : entry.path);
        }
    }
    _emitEntry(entry) {
        this._emitter.emit('entry', entry);
    }
}
exports["default"] = AsyncReader;


/***/ }),

/***/ 76677:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.joinPathSegments = exports.replacePathSegmentSeparator = exports.isAppliedFilter = exports.isFatalError = void 0;
function isFatalError(settings, error) {
    if (settings.errorFilter === null) {
        return true;
    }
    return !settings.errorFilter(error);
}
exports.isFatalError = isFatalError;
function isAppliedFilter(filter, value) {
    return filter === null || filter(value);
}
exports.isAppliedFilter = isAppliedFilter;
function replacePathSegmentSeparator(filepath, separator) {
    return filepath.split(/[/\\]/).join(separator);
}
exports.replacePathSegmentSeparator = replacePathSegmentSeparator;
function joinPathSegments(a, b, separator) {
    if (a === '') {
        return b;
    }
    /**
     * The correct handling of cases when the first segment is a root (`/`, `C:/`) or UNC path (`//?/C:/`).
     */
    if (a.endsWith(separator)) {
        return a + b;
    }
    return a + separator + b;
}
exports.joinPathSegments = joinPathSegments;


/***/ }),

/***/ 29444:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const common = __webpack_require__(76677);
class Reader {
    constructor(_root, _settings) {
        this._root = _root;
        this._settings = _settings;
        this._root = common.replacePathSegmentSeparator(_root, _settings.pathSegmentSeparator);
    }
}
exports["default"] = Reader;


/***/ }),

/***/ 34550:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const fsScandir = __webpack_require__(31954);
const common = __webpack_require__(76677);
const reader_1 = __webpack_require__(29444);
class SyncReader extends reader_1.default {
    constructor() {
        super(...arguments);
        this._scandir = fsScandir.scandirSync;
        this._storage = [];
        this._queue = new Set();
    }
    read() {
        this._pushToQueue(this._root, this._settings.basePath);
        this._handleQueue();
        return this._storage;
    }
    _pushToQueue(directory, base) {
        this._queue.add({ directory, base });
    }
    _handleQueue() {
        for (const item of this._queue.values()) {
            this._handleDirectory(item.directory, item.base);
        }
    }
    _handleDirectory(directory, base) {
        try {
            const entries = this._scandir(directory, this._settings.fsScandirSettings);
            for (const entry of entries) {
                this._handleEntry(entry, base);
            }
        }
        catch (error) {
            this._handleError(error);
        }
    }
    _handleError(error) {
        if (!common.isFatalError(this._settings, error)) {
            return;
        }
        throw error;
    }
    _handleEntry(entry, base) {
        const fullpath = entry.path;
        if (base !== undefined) {
            entry.path = common.joinPathSegments(base, entry.name, this._settings.pathSegmentSeparator);
        }
        if (common.isAppliedFilter(this._settings.entryFilter, entry)) {
            this._pushToStorage(entry);
        }
        if (entry.dirent.isDirectory() && common.isAppliedFilter(this._settings.deepFilter, entry)) {
            this._pushToQueue(fullpath, base === undefined ? undefined : entry.path);
        }
    }
    _pushToStorage(entry) {
        this._storage.push(entry);
    }
}
exports["default"] = SyncReader;


/***/ }),

/***/ 92033:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const path = __webpack_require__(71017);
const fsScandir = __webpack_require__(31954);
class Settings {
    constructor(_options = {}) {
        this._options = _options;
        this.basePath = this._getValue(this._options.basePath, undefined);
        this.concurrency = this._getValue(this._options.concurrency, Number.POSITIVE_INFINITY);
        this.deepFilter = this._getValue(this._options.deepFilter, null);
        this.entryFilter = this._getValue(this._options.entryFilter, null);
        this.errorFilter = this._getValue(this._options.errorFilter, null);
        this.pathSegmentSeparator = this._getValue(this._options.pathSegmentSeparator, path.sep);
        this.fsScandirSettings = new fsScandir.Settings({
            followSymbolicLinks: this._options.followSymbolicLinks,
            fs: this._options.fs,
            pathSegmentSeparator: this._options.pathSegmentSeparator,
            stats: this._options.stats,
            throwErrorOnBrokenSymbolicLink: this._options.throwErrorOnBrokenSymbolicLink
        });
    }
    _getValue(option, value) {
        return option !== null && option !== void 0 ? option : value;
    }
}
exports["default"] = Settings;


/***/ }),

/***/ 6603:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var oA=Object.create;var Ti=Object.defineProperty,uA=Object.defineProperties,cA=Object.getOwnPropertyDescriptor,lA=Object.getOwnPropertyDescriptors,fA=Object.getOwnPropertyNames,Op=Object.getOwnPropertySymbols,pA=Object.getPrototypeOf,Rp=Object.prototype.hasOwnProperty,dA=Object.prototype.propertyIsEnumerable;var Pp=(e,t,r)=>t in e?Ti(e,t,{enumerable:!0,configurable:!0,writable:!0,value:r}):e[t]=r,St=(e,t)=>{for(var r in t||(t={}))Rp.call(t,r)&&Pp(e,r,t[r]);if(Op)for(var r of Op(t))dA.call(t,r)&&Pp(e,r,t[r]);return e},Np=(e,t)=>uA(e,lA(t));var l=(e,t)=>()=>(t||e((t={exports:{}}).exports,t),t.exports),hA=(e,t)=>{for(var r in t)Ti(e,r,{get:t[r],enumerable:!0})},Dp=(e,t,r,n)=>{if(t&&typeof t=="object"||typeof t=="function")for(let i of fA(t))!Rp.call(e,i)&&i!==r&&Ti(e,i,{get:()=>t[i],enumerable:!(n=cA(t,i))||n.enumerable});return e};var nn=(e,t,r)=>(r=e!=null?oA(pA(e)):{},Dp(t||!e||!e.__esModule?Ti(r,"default",{value:e,enumerable:!0}):r,e)),_A=e=>Dp(Ti({},"__esModule",{value:!0}),e);var _e=l((eM,xp)=>{"use strict";var gA=function(){function e(){}return e.info=function(t){for(var r=[],n=1;n<arguments.length;n++)r[n-1]=arguments[n];e.enableDebug&&console.info(e.TAG+t,r)},e.warn=function(t){for(var r=[],n=1;n<arguments.length;n++)r[n-1]=arguments[n];e.disableWarnings||console.warn(e.TAG+t,r)},e.enableDebug=!1,e.disableWarnings=!1,e.disableErrors=!1,e.TAG="ApplicationInsights:",e}();xp.exports=gA});var vu=l(Vt=>{"use strict";var an=Vt&&Vt.__assign||function(){return an=Object.assign||function(e){for(var t,r=1,n=arguments.length;r<n;r++){t=arguments[r];for(var i in t)Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i])}return e},an.apply(this,arguments)};Object.defineProperty(Vt,"__esModule",{value:!0});Vt.AsyncScopeManager=Vt.OpenTelemetryScopeManagerWrapper=void 0;var gr=Er(),EA=__webpack_require__(82361),Mp=function(){function e(){}return e.prototype.active=function(){var t=this,r=gr.CorrelationContextManager.getCurrentContext();return an(an({},r),{getValue:function(n){return t._activeSymbol?n===t._activeSymbol?r:!1:(t._activeSymbol=n,r)},setValue:function(){}})},e.prototype.with=function(t,r){var n=t.parentSpanId,i=t.name,a=e._spanToContext(t,n,i);return gr.CorrelationContextManager.runWithContext(a,r)()},e.prototype.bind=function(t){return typeof t=="function"?gr.CorrelationContextManager.wrapCallback(t):(t instanceof EA.EventEmitter&&gr.CorrelationContextManager.wrapEmitter(t),t)},e.prototype.enable=function(){return gr.CorrelationContextManager.enable(),this},e.prototype.disable=function(){return gr.CorrelationContextManager.disable(),this},e._spanToContext=function(t,r,n){var i=r?"|"+t.spanContext().traceId+"."+r+".":t.spanContext().traceId,a=an(an({},t.spanContext()),{traceFlags:t.spanContext().traceFlags}),s=gr.CorrelationContextManager.spanToContextObject(a,i,n);return s},e}();Vt.OpenTelemetryScopeManagerWrapper=Mp;Vt.AsyncScopeManager=new Mp});var Wp=l((I,Qp)=>{I=Qp.exports=N;var k;typeof process=="object"&&process.env&&process.env.NODE_DEBUG&&/\bsemver\b/i.test(process.env.NODE_DEBUG)?k=function(){var e=Array.prototype.slice.call(arguments,0);e.unshift("SEMVER"),console.log.apply(console,e)}:k=function(){};I.SEMVER_SPEC_VERSION="2.0.0";var Eu=256,Ma=Number.MAX_SAFE_INTEGER||9007199254740991,gu=16,B=I.re=[],_=I.src=[],O=0,sn=O++;_[sn]="0|[1-9]\\d*";var on=O++;_[on]="[0-9]+";var Au=O++;_[Au]="\\d*[a-zA-Z-][a-zA-Z0-9-]*";var qp=O++;_[qp]="("+_[sn]+")\\.("+_[sn]+")\\.("+_[sn]+")";var jp=O++;_[jp]="("+_[on]+")\\.("+_[on]+")\\.("+_[on]+")";var mu=O++;_[mu]="(?:"+_[sn]+"|"+_[Au]+")";var yu=O++;_[yu]="(?:"+_[on]+"|"+_[Au]+")";var Su=O++;_[Su]="(?:-("+_[mu]+"(?:\\."+_[mu]+")*))";var Iu=O++;_[Iu]="(?:-?("+_[yu]+"(?:\\."+_[yu]+")*))";var Tu=O++;_[Tu]="[0-9A-Za-z-]+";var Ii=O++;_[Ii]="(?:\\+("+_[Tu]+"(?:\\."+_[Tu]+")*))";var Cu=O++,kp="v?"+_[qp]+_[Su]+"?"+_[Ii]+"?";_[Cu]="^"+kp+"$";var bu="[v=\\s]*"+_[jp]+_[Iu]+"?"+_[Ii]+"?",Ou=O++;_[Ou]="^"+bu+"$";var ln=O++;_[ln]="((?:<|>)?=?)";var La=O++;_[La]=_[on]+"|x|X|\\*";var qa=O++;_[qa]=_[sn]+"|x|X|\\*";var mr=O++;_[mr]="[v=\\s]*("+_[qa]+")(?:\\.("+_[qa]+")(?:\\.("+_[qa]+")(?:"+_[Su]+")?"+_[Ii]+"?)?)?";var cn=O++;_[cn]="[v=\\s]*("+_[La]+")(?:\\.("+_[La]+")(?:\\.("+_[La]+")(?:"+_[Iu]+")?"+_[Ii]+"?)?)?";var Hp=O++;_[Hp]="^"+_[ln]+"\\s*"+_[mr]+"$";var Up=O++;_[Up]="^"+_[ln]+"\\s*"+_[cn]+"$";var Bp=O++;_[Bp]="(?:^|[^\\d])(\\d{1,"+gu+"})(?:\\.(\\d{1,"+gu+"}))?(?:\\.(\\d{1,"+gu+"}))?(?:$|[^\\d])";var Fa=O++;_[Fa]="(?:~>?)";var ja=O++;_[ja]="(\\s*)"+_[Fa]+"\\s+";B[ja]=new RegExp(_[ja],"g");var mA="$1~",Fp=O++;_[Fp]="^"+_[Fa]+_[mr]+"$";var Gp=O++;_[Gp]="^"+_[Fa]+_[cn]+"$";var Ga=O++;_[Ga]="(?:\\^)";var ka=O++;_[ka]="(\\s*)"+_[Ga]+"\\s+";B[ka]=new RegExp(_[ka],"g");var yA="$1^",Vp=O++;_[Vp]="^"+_[Ga]+_[mr]+"$";var $p=O++;_[$p]="^"+_[Ga]+_[cn]+"$";var Pu=O++;_[Pu]="^"+_[ln]+"\\s*("+bu+")$|^$";var Ru=O++;_[Ru]="^"+_[ln]+"\\s*("+kp+")$|^$";var Ai=O++;_[Ai]="(\\s*)"+_[ln]+"\\s*("+bu+"|"+_[mr]+")";B[Ai]=new RegExp(_[Ai],"g");var TA="$1$2$3",zp=O++;_[zp]="^\\s*("+_[mr]+")\\s+-\\s+("+_[mr]+")\\s*$";var Xp=O++;_[Xp]="^\\s*("+_[cn]+")\\s+-\\s+("+_[cn]+")\\s*$";var Kp=O++;_[Kp]="(<|>)?=?\\s*\\*";for($t=0;$t<O;$t++)k($t,_[$t]),B[$t]||(B[$t]=new RegExp(_[$t]));var $t;I.parse=yr;function yr(e,t){if((!t||typeof t!="object")&&(t={loose:!!t,includePrerelease:!1}),e instanceof N)return e;if(typeof e!="string"||e.length>Eu)return null;var r=t.loose?B[Ou]:B[Cu];if(!r.test(e))return null;try{return new N(e,t)}catch{return null}}I.valid=AA;function AA(e,t){var r=yr(e,t);return r?r.version:null}I.clean=SA;function SA(e,t){var r=yr(e.trim().replace(/^[=v]+/,""),t);return r?r.version:null}I.SemVer=N;function N(e,t){if((!t||typeof t!="object")&&(t={loose:!!t,includePrerelease:!1}),e instanceof N){if(e.loose===t.loose)return e;e=e.version}else if(typeof e!="string")throw new TypeError("Invalid Version: "+e);if(e.length>Eu)throw new TypeError("version is longer than "+Eu+" characters");if(!(this instanceof N))return new N(e,t);k("SemVer",e,t),this.options=t,this.loose=!!t.loose;var r=e.trim().match(t.loose?B[Ou]:B[Cu]);if(!r)throw new TypeError("Invalid Version: "+e);if(this.raw=e,this.major=+r[1],this.minor=+r[2],this.patch=+r[3],this.major>Ma||this.major<0)throw new TypeError("Invalid major version");if(this.minor>Ma||this.minor<0)throw new TypeError("Invalid minor version");if(this.patch>Ma||this.patch<0)throw new TypeError("Invalid patch version");r[4]?this.prerelease=r[4].split(".").map(function(n){if(/^[0-9]+$/.test(n)){var i=+n;if(i>=0&&i<Ma)return i}return n}):this.prerelease=[],this.build=r[5]?r[5].split("."):[],this.format()}N.prototype.format=function(){return this.version=this.major+"."+this.minor+"."+this.patch,this.prerelease.length&&(this.version+="-"+this.prerelease.join(".")),this.version};N.prototype.toString=function(){return this.version};N.prototype.compare=function(e){return k("SemVer.compare",this.version,this.options,e),e instanceof N||(e=new N(e,this.options)),this.compareMain(e)||this.comparePre(e)};N.prototype.compareMain=function(e){return e instanceof N||(e=new N(e,this.options)),un(this.major,e.major)||un(this.minor,e.minor)||un(this.patch,e.patch)};N.prototype.comparePre=function(e){if(e instanceof N||(e=new N(e,this.options)),this.prerelease.length&&!e.prerelease.length)return-1;if(!this.prerelease.length&&e.prerelease.length)return 1;if(!this.prerelease.length&&!e.prerelease.length)return 0;var t=0;do{var r=this.prerelease[t],n=e.prerelease[t];if(k("prerelease compare",t,r,n),r===void 0&&n===void 0)return 0;if(n===void 0)return 1;if(r===void 0)return-1;if(r===n)continue;return un(r,n)}while(++t)};N.prototype.inc=function(e,t){switch(e){case"premajor":this.prerelease.length=0,this.patch=0,this.minor=0,this.major++,this.inc("pre",t);break;case"preminor":this.prerelease.length=0,this.patch=0,this.minor++,this.inc("pre",t);break;case"prepatch":this.prerelease.length=0,this.inc("patch",t),this.inc("pre",t);break;case"prerelease":this.prerelease.length===0&&this.inc("patch",t),this.inc("pre",t);break;case"major":(this.minor!==0||this.patch!==0||this.prerelease.length===0)&&this.major++,this.minor=0,this.patch=0,this.prerelease=[];break;case"minor":(this.patch!==0||this.prerelease.length===0)&&this.minor++,this.patch=0,this.prerelease=[];break;case"patch":this.prerelease.length===0&&this.patch++,this.prerelease=[];break;case"pre":if(this.prerelease.length===0)this.prerelease=[0];else{for(var r=this.prerelease.length;--r>=0;)typeof this.prerelease[r]=="number"&&(this.prerelease[r]++,r=-2);r===-1&&this.prerelease.push(0)}t&&(this.prerelease[0]===t?isNaN(this.prerelease[1])&&(this.prerelease=[t,0]):this.prerelease=[t,0]);break;default:throw new Error("invalid increment argument: "+e)}return this.format(),this.raw=this.version,this};I.inc=IA;function IA(e,t,r,n){typeof r=="string"&&(n=r,r=void 0);try{return new N(e,r).inc(t,n).version}catch{return null}}I.diff=CA;function CA(e,t){if(Nu(e,t))return null;var r=yr(e),n=yr(t),i="";if(r.prerelease.length||n.prerelease.length){i="pre";var a="prerelease"}for(var s in r)if((s==="major"||s==="minor"||s==="patch")&&r[s]!==n[s])return i+s;return a}I.compareIdentifiers=un;var Lp=/^[0-9]+$/;function un(e,t){var r=Lp.test(e),n=Lp.test(t);return r&&n&&(e=+e,t=+t),e===t?0:r&&!n?-1:n&&!r?1:e<t?-1:1}I.rcompareIdentifiers=bA;function bA(e,t){return un(t,e)}I.major=OA;function OA(e,t){return new N(e,t).major}I.minor=PA;function PA(e,t){return new N(e,t).minor}I.patch=RA;function RA(e,t){return new N(e,t).patch}I.compare=It;function It(e,t,r){return new N(e,r).compare(new N(t,r))}I.compareLoose=NA;function NA(e,t){return It(e,t,!0)}I.rcompare=DA;function DA(e,t,r){return It(t,e,r)}I.sort=wA;function wA(e,t){return e.sort(function(r,n){return I.compare(r,n,t)})}I.rsort=xA;function xA(e,t){return e.sort(function(r,n){return I.rcompare(r,n,t)})}I.gt=Si;function Si(e,t,r){return It(e,t,r)>0}I.lt=Ha;function Ha(e,t,r){return It(e,t,r)<0}I.eq=Nu;function Nu(e,t,r){return It(e,t,r)===0}I.neq=Yp;function Yp(e,t,r){return It(e,t,r)!==0}I.gte=Du;function Du(e,t,r){return It(e,t,r)>=0}I.lte=wu;function wu(e,t,r){return It(e,t,r)<=0}I.cmp=Ua;function Ua(e,t,r,n){switch(t){case"===":return typeof e=="object"&&(e=e.version),typeof r=="object"&&(r=r.version),e===r;case"!==":return typeof e=="object"&&(e=e.version),typeof r=="object"&&(r=r.version),e!==r;case"":case"=":case"==":return Nu(e,r,n);case"!=":return Yp(e,r,n);case">":return Si(e,r,n);case">=":return Du(e,r,n);case"<":return Ha(e,r,n);case"<=":return wu(e,r,n);default:throw new TypeError("Invalid operator: "+t)}}I.Comparator=Ve;function Ve(e,t){if((!t||typeof t!="object")&&(t={loose:!!t,includePrerelease:!1}),e instanceof Ve){if(e.loose===!!t.loose)return e;e=e.value}if(!(this instanceof Ve))return new Ve(e,t);k("comparator",e,t),this.options=t,this.loose=!!t.loose,this.parse(e),this.semver===Ci?this.value="":this.value=this.operator+this.semver.version,k("comp",this)}var Ci={};Ve.prototype.parse=function(e){var t=this.options.loose?B[Pu]:B[Ru],r=e.match(t);if(!r)throw new TypeError("Invalid comparator: "+e);this.operator=r[1],this.operator==="="&&(this.operator=""),r[2]?this.semver=new N(r[2],this.options.loose):this.semver=Ci};Ve.prototype.toString=function(){return this.value};Ve.prototype.test=function(e){return k("Comparator.test",e,this.options.loose),this.semver===Ci?!0:(typeof e=="string"&&(e=new N(e,this.options)),Ua(e,this.operator,this.semver,this.options))};Ve.prototype.intersects=function(e,t){if(!(e instanceof Ve))throw new TypeError("a Comparator is required");(!t||typeof t!="object")&&(t={loose:!!t,includePrerelease:!1});var r;if(this.operator==="")return r=new W(e.value,t),Ba(this.value,r,t);if(e.operator==="")return r=new W(this.value,t),Ba(e.semver,r,t);var n=(this.operator===">="||this.operator===">")&&(e.operator===">="||e.operator===">"),i=(this.operator==="<="||this.operator==="<")&&(e.operator==="<="||e.operator==="<"),a=this.semver.version===e.semver.version,s=(this.operator===">="||this.operator==="<=")&&(e.operator===">="||e.operator==="<="),o=Ua(this.semver,"<",e.semver,t)&&(this.operator===">="||this.operator===">")&&(e.operator==="<="||e.operator==="<"),u=Ua(this.semver,">",e.semver,t)&&(this.operator==="<="||this.operator==="<")&&(e.operator===">="||e.operator===">");return n||i||a&&s||o||u};I.Range=W;function W(e,t){if((!t||typeof t!="object")&&(t={loose:!!t,includePrerelease:!1}),e instanceof W)return e.loose===!!t.loose&&e.includePrerelease===!!t.includePrerelease?e:new W(e.raw,t);if(e instanceof Ve)return new W(e.value,t);if(!(this instanceof W))return new W(e,t);if(this.options=t,this.loose=!!t.loose,this.includePrerelease=!!t.includePrerelease,this.raw=e,this.set=e.split(/\s*\|\|\s*/).map(function(r){return this.parseRange(r.trim())},this).filter(function(r){return r.length}),!this.set.length)throw new TypeError("Invalid SemVer Range: "+e);this.format()}W.prototype.format=function(){return this.range=this.set.map(function(e){return e.join(" ").trim()}).join("||").trim(),this.range};W.prototype.toString=function(){return this.range};W.prototype.parseRange=function(e){var t=this.options.loose;e=e.trim();var r=t?B[Xp]:B[zp];e=e.replace(r,GA),k("hyphen replace",e),e=e.replace(B[Ai],TA),k("comparator trim",e,B[Ai]),e=e.replace(B[ja],mA),e=e.replace(B[ka],yA),e=e.split(/\s+/).join(" ");var n=t?B[Pu]:B[Ru],i=e.split(" ").map(function(a){return LA(a,this.options)},this).join(" ").split(/\s+/);return this.options.loose&&(i=i.filter(function(a){return!!a.match(n)})),i=i.map(function(a){return new Ve(a,this.options)},this),i};W.prototype.intersects=function(e,t){if(!(e instanceof W))throw new TypeError("a Range is required");return this.set.some(function(r){return r.every(function(n){return e.set.some(function(i){return i.every(function(a){return n.intersects(a,t)})})})})};I.toComparators=MA;function MA(e,t){return new W(e,t).set.map(function(r){return r.map(function(n){return n.value}).join(" ").trim().split(" ")})}function LA(e,t){return k("comp",e,t),e=kA(e,t),k("caret",e),e=qA(e,t),k("tildes",e),e=UA(e,t),k("xrange",e),e=FA(e,t),k("stars",e),e}function Re(e){return!e||e.toLowerCase()==="x"||e==="*"}function qA(e,t){return e.trim().split(/\s+/).map(function(r){return jA(r,t)}).join(" ")}function jA(e,t){var r=t.loose?B[Gp]:B[Fp];return e.replace(r,function(n,i,a,s,o){k("tilde",e,n,i,a,s,o);var u;return Re(i)?u="":Re(a)?u=">="+i+".0.0 <"+(+i+1)+".0.0":Re(s)?u=">="+i+"."+a+".0 <"+i+"."+(+a+1)+".0":o?(k("replaceTilde pr",o),u=">="+i+"."+a+"."+s+"-"+o+" <"+i+"."+(+a+1)+".0"):u=">="+i+"."+a+"."+s+" <"+i+"."+(+a+1)+".0",k("tilde return",u),u})}function kA(e,t){return e.trim().split(/\s+/).map(function(r){return HA(r,t)}).join(" ")}function HA(e,t){k("caret",e,t);var r=t.loose?B[$p]:B[Vp];return e.replace(r,function(n,i,a,s,o){k("caret",e,n,i,a,s,o);var u;return Re(i)?u="":Re(a)?u=">="+i+".0.0 <"+(+i+1)+".0.0":Re(s)?i==="0"?u=">="+i+"."+a+".0 <"+i+"."+(+a+1)+".0":u=">="+i+"."+a+".0 <"+(+i+1)+".0.0":o?(k("replaceCaret pr",o),i==="0"?a==="0"?u=">="+i+"."+a+"."+s+"-"+o+" <"+i+"."+a+"."+(+s+1):u=">="+i+"."+a+"."+s+"-"+o+" <"+i+"."+(+a+1)+".0":u=">="+i+"."+a+"."+s+"-"+o+" <"+(+i+1)+".0.0"):(k("no pr"),i==="0"?a==="0"?u=">="+i+"."+a+"."+s+" <"+i+"."+a+"."+(+s+1):u=">="+i+"."+a+"."+s+" <"+i+"."+(+a+1)+".0":u=">="+i+"."+a+"."+s+" <"+(+i+1)+".0.0"),k("caret return",u),u})}function UA(e,t){return k("replaceXRanges",e,t),e.split(/\s+/).map(function(r){return BA(r,t)}).join(" ")}function BA(e,t){e=e.trim();var r=t.loose?B[Up]:B[Hp];return e.replace(r,function(n,i,a,s,o,u){k("xRange",e,n,i,a,s,o,u);var c=Re(a),f=c||Re(s),p=f||Re(o),d=p;return i==="="&&d&&(i=""),c?i===">"||i==="<"?n="<0.0.0":n="*":i&&d?(f&&(s=0),o=0,i===">"?(i=">=",f?(a=+a+1,s=0,o=0):(s=+s+1,o=0)):i==="<="&&(i="<",f?a=+a+1:s=+s+1),n=i+a+"."+s+"."+o):f?n=">="+a+".0.0 <"+(+a+1)+".0.0":p&&(n=">="+a+"."+s+".0 <"+a+"."+(+s+1)+".0"),k("xRange return",n),n})}function FA(e,t){return k("replaceStars",e,t),e.trim().replace(B[Kp],"")}function GA(e,t,r,n,i,a,s,o,u,c,f,p,d){return Re(r)?t="":Re(n)?t=">="+r+".0.0":Re(i)?t=">="+r+"."+n+".0":t=">="+t,Re(u)?o="":Re(c)?o="<"+(+u+1)+".0.0":Re(f)?o="<"+u+"."+(+c+1)+".0":p?o="<="+u+"."+c+"."+f+"-"+p:o="<="+o,(t+" "+o).trim()}W.prototype.test=function(e){if(!e)return!1;typeof e=="string"&&(e=new N(e,this.options));for(var t=0;t<this.set.length;t++)if(VA(this.set[t],e,this.options))return!0;return!1};function VA(e,t,r){for(var n=0;n<e.length;n++)if(!e[n].test(t))return!1;if(t.prerelease.length&&!r.includePrerelease){for(n=0;n<e.length;n++)if(k(e[n].semver),e[n].semver!==Ci&&e[n].semver.prerelease.length>0){var i=e[n].semver;if(i.major===t.major&&i.minor===t.minor&&i.patch===t.patch)return!0}return!1}return!0}I.satisfies=Ba;function Ba(e,t,r){try{t=new W(t,r)}catch{return!1}return t.test(e)}I.maxSatisfying=$A;function $A(e,t,r){var n=null,i=null;try{var a=new W(t,r)}catch{return null}return e.forEach(function(s){a.test(s)&&(!n||i.compare(s)===-1)&&(n=s,i=new N(n,r))}),n}I.minSatisfying=zA;function zA(e,t,r){var n=null,i=null;try{var a=new W(t,r)}catch{return null}return e.forEach(function(s){a.test(s)&&(!n||i.compare(s)===1)&&(n=s,i=new N(n,r))}),n}I.minVersion=XA;function XA(e,t){e=new W(e,t);var r=new N("0.0.0");if(e.test(r)||(r=new N("0.0.0-0"),e.test(r)))return r;r=null;for(var n=0;n<e.set.length;++n){var i=e.set[n];i.forEach(function(a){var s=new N(a.semver.version);switch(a.operator){case">":s.prerelease.length===0?s.patch++:s.prerelease.push(0),s.raw=s.format();case"":case">=":(!r||Si(r,s))&&(r=s);break;case"<":case"<=":break;default:throw new Error("Unexpected operation: "+a.operator)}})}return r&&e.test(r)?r:null}I.validRange=KA;function KA(e,t){try{return new W(e,t).range||"*"}catch{return null}}I.ltr=YA;function YA(e,t,r){return xu(e,t,"<",r)}I.gtr=QA;function QA(e,t,r){return xu(e,t,">",r)}I.outside=xu;function xu(e,t,r,n){e=new N(e,n),t=new W(t,n);var i,a,s,o,u;switch(r){case">":i=Si,a=wu,s=Ha,o=">",u=">=";break;case"<":i=Ha,a=Du,s=Si,o="<",u="<=";break;default:throw new TypeError('Must provide a hilo val of "<" or ">"')}if(Ba(e,t,n))return!1;for(var c=0;c<t.set.length;++c){var f=t.set[c],p=null,d=null;if(f.forEach(function(h){h.semver===Ci&&(h=new Ve(">=0.0.0")),p=p||h,d=d||h,i(h.semver,p.semver,n)?p=h:s(h.semver,d.semver,n)&&(d=h)}),p.operator===o||p.operator===u||(!d.operator||d.operator===o)&&a(e,d.semver))return!1;if(d.operator===u&&s(e,d.semver))return!1}return!0}I.prerelease=WA;function WA(e,t){var r=yr(e,t);return r&&r.prerelease.length?r.prerelease:null}I.intersects=ZA;function ZA(e,t,r){return e=new W(e,r),t=new W(t,r),e.intersects(t)}I.coerce=JA;function JA(e){if(e instanceof N)return e;if(typeof e!="string")return null;var t=e.match(B[Bp]);return t==null?null:yr(t[1]+"."+(t[2]||"0")+"."+(t[3]||"0"))}});var Mu=l(Va=>{"use strict";Object.defineProperty(Va,"__esModule",{value:!0});Va.makePatchingRequire=void 0;var eS=__webpack_require__(71017),tS=Wp(),Jp=__webpack_require__(98188),rS=Object.keys(process.binding("natives")),Zp=Jp.prototype.require;function nS(e){var t={};return function(n){var i=Zp.apply(this,arguments);if(e[n]){var a=Jp._resolveFilename(n,this);if(t.hasOwnProperty(a))return t[a];var s=void 0;if(rS.indexOf(n)<0)try{s=Zp.call(this,eS.join(n,"package.json")).version}catch{return i}else s=process.version.substring(1);var o=s.indexOf("-");o>=0&&(s=s.substring(0,o));for(var u=i,c=0,f=e[n];c<f.length;c++){var p=f[c];tS.satisfies(s,p.versionSpecifier)&&(u=p.patch(u,a))}return t[a]=u}return i}}Va.makePatchingRequire=nS});var ed=l((nM,iS)=>{iS.exports={name:"diagnostic-channel",version:"1.0.0",main:"./dist/src/channel.js",types:"./dist/src/channel.d.ts",scripts:{build:"tsc",lint:"tslint -c tslint.json -p tsconfig.json",clean:"rimraf ./dist",test:"mocha ./dist/tests/**/*.js"},homepage:"https://github.com/Microsoft/node-diagnostic-channel",bugs:{url:"https://github.com/Microsoft/node-diagnostic-channel/issues"},repository:{type:"git",url:"https://github.com/Microsoft/node-diagnostic-channel.git"},description:"Provides a context-saving pub/sub channel to connect diagnostic event publishers and subscribers",dependencies:{semver:"^5.3.0"},devDependencies:{"@types/mocha":"^2.2.40","@types/node":"~8.0.0",mocha:"^3.2.0",rimraf:"^2.6.1",tslint:"^5.0.0",typescript:"4.1.2"},files:["dist/src/**/*.d.ts","dist/src/**/*.js","LICENSE","README.md","package.json"],license:"MIT"}});var oe=l(fn=>{"use strict";Object.defineProperty(fn,"__esModule",{value:!0});fn.channel=fn.makePatchingRequire=void 0;var aS=Mu(),sS=Mu();Object.defineProperty(fn,"makePatchingRequire",{enumerable:!0,get:function(){return sS.makePatchingRequire}});var td=function(e){return!0},oS=function(){function e(){this.version=ed().version,this.subscribers={},this.contextPreservationFunction=function(t){return t},this.knownPatches={},this.currentlyPublishing=!1}return e.prototype.shouldPublish=function(t){var r=this.subscribers[t];return r?r.some(function(n){var i=n.filter;return!i||i(!1)}):!1},e.prototype.publish=function(t,r){if(!this.currentlyPublishing){var n=this.subscribers[t];if(n){var i={timestamp:Date.now(),data:r};this.currentlyPublishing=!0,n.forEach(function(a){var s=a.listener,o=a.filter;try{o&&o(!0)&&s(i)}catch{}}),this.currentlyPublishing=!1}}},e.prototype.subscribe=function(t,r,n){n===void 0&&(n=td),this.subscribers[t]||(this.subscribers[t]=[]),this.subscribers[t].push({listener:r,filter:n})},e.prototype.unsubscribe=function(t,r,n){n===void 0&&(n=td);var i=this.subscribers[t];if(i){for(var a=0;a<i.length;++a)if(i[a].listener===r&&i[a].filter===n)return i.splice(a,1),!0}return!1},e.prototype.reset=function(){var t=this;this.subscribers={},this.contextPreservationFunction=function(r){return r},Object.getOwnPropertyNames(this.knownPatches).forEach(function(r){return delete t.knownPatches[r]})},e.prototype.bindToContext=function(t){return this.contextPreservationFunction(t)},e.prototype.addContextPreservation=function(t){var r=this.contextPreservationFunction;this.contextPreservationFunction=function(n){return t(r(n))}},e.prototype.registerMonkeyPatch=function(t,r){this.knownPatches[t]||(this.knownPatches[t]=[]),this.knownPatches[t].push(r)},e.prototype.getPatchesObject=function(){return this.knownPatches},e}();global.diagnosticsSource||(global.diagnosticsSource=new oS,rd=__webpack_require__(98188),rd.prototype.require=aS.makePatchingRequire(global.diagnosticsSource.getPatchesObject()));var rd;fn.channel=global.diagnosticsSource});var id=l(nd=>{"use strict";Object.defineProperty(nd,"__esModule",{value:!0})});var ad=l($a=>{"use strict";Object.defineProperty($a,"__esModule",{value:!0});$a._globalThis=void 0;$a._globalThis=typeof globalThis=="object"?globalThis:global});var sd=l(Tr=>{"use strict";var uS=Tr&&Tr.__createBinding||(Object.create?function(e,t,r,n){n===void 0&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){n===void 0&&(n=r),e[n]=t[r]}),cS=Tr&&Tr.__exportStar||function(e,t){for(var r in e)r!=="default"&&!Object.prototype.hasOwnProperty.call(t,r)&&uS(t,e,r)};Object.defineProperty(Tr,"__esModule",{value:!0});cS(ad(),Tr)});var od=l(Ar=>{"use strict";var lS=Ar&&Ar.__createBinding||(Object.create?function(e,t,r,n){n===void 0&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){n===void 0&&(n=r),e[n]=t[r]}),fS=Ar&&Ar.__exportStar||function(e,t){for(var r in e)r!=="default"&&!Object.prototype.hasOwnProperty.call(t,r)&&lS(t,e,r)};Object.defineProperty(Ar,"__esModule",{value:!0});fS(sd(),Ar)});var Lu=l(za=>{"use strict";Object.defineProperty(za,"__esModule",{value:!0});za.VERSION=void 0;za.VERSION="1.0.3"});var ld=l(pn=>{"use strict";Object.defineProperty(pn,"__esModule",{value:!0});pn.isCompatible=pn._makeCompatibilityCheck=void 0;var pS=Lu(),ud=/^(\d+)\.(\d+)\.(\d+)(-(.+))?$/;function cd(e){var t=new Set([e]),r=new Set,n=e.match(ud);if(!n)return function(){return!1};var i={major:+n[1],minor:+n[2],patch:+n[3],prerelease:n[4]};if(i.prerelease!=null)return function(u){return u===e};function a(o){return r.add(o),!1}function s(o){return t.add(o),!0}return function(u){if(t.has(u))return!0;if(r.has(u))return!1;var c=u.match(ud);if(!c)return a(u);var f={major:+c[1],minor:+c[2],patch:+c[3],prerelease:c[4]};return f.prerelease!=null||i.major!==f.major?a(u):i.major===0?i.minor===f.minor&&i.patch<=f.patch?s(u):a(u):i.minor<=f.minor?s(u):a(u)}}pn._makeCompatibilityCheck=cd;pn.isCompatible=cd(pS.VERSION)});var dn=l(zt=>{"use strict";Object.defineProperty(zt,"__esModule",{value:!0});zt.unregisterGlobal=zt.getGlobal=zt.registerGlobal=void 0;var dS=od(),bi=Lu(),hS=ld(),_S=bi.VERSION.split(".")[0],Oi=Symbol.for("opentelemetry.js.api."+_S),Pi=dS._globalThis;function vS(e,t,r,n){var i;n===void 0&&(n=!1);var a=Pi[Oi]=(i=Pi[Oi])!==null&&i!==void 0?i:{version:bi.VERSION};if(!n&&a[e]){var s=new Error("@opentelemetry/api: Attempted duplicate registration of API: "+e);return r.error(s.stack||s.message),!1}if(a.version!==bi.VERSION){var s=new Error("@opentelemetry/api: All API registration versions must match");return r.error(s.stack||s.message),!1}return a[e]=t,r.debug("@opentelemetry/api: Registered a global for "+e+" v"+bi.VERSION+"."),!0}zt.registerGlobal=vS;function gS(e){var t,r,n=(t=Pi[Oi])===null||t===void 0?void 0:t.version;if(!(!n||!hS.isCompatible(n)))return(r=Pi[Oi])===null||r===void 0?void 0:r[e]}zt.getGlobal=gS;function ES(e,t){t.debug("@opentelemetry/api: Unregistering a global for "+e+" v"+bi.VERSION+".");var r=Pi[Oi];r&&delete r[e]}zt.unregisterGlobal=ES});var fd=l(Xa=>{"use strict";Object.defineProperty(Xa,"__esModule",{value:!0});Xa.DiagComponentLogger=void 0;var mS=dn(),yS=function(){function e(t){this._namespace=t.namespace||"DiagComponentLogger"}return e.prototype.debug=function(){for(var t=[],r=0;r<arguments.length;r++)t[r]=arguments[r];return Ri("debug",this._namespace,t)},e.prototype.error=function(){for(var t=[],r=0;r<arguments.length;r++)t[r]=arguments[r];return Ri("error",this._namespace,t)},e.prototype.info=function(){for(var t=[],r=0;r<arguments.length;r++)t[r]=arguments[r];return Ri("info",this._namespace,t)},e.prototype.warn=function(){for(var t=[],r=0;r<arguments.length;r++)t[r]=arguments[r];return Ri("warn",this._namespace,t)},e.prototype.verbose=function(){for(var t=[],r=0;r<arguments.length;r++)t[r]=arguments[r];return Ri("verbose",this._namespace,t)},e}();Xa.DiagComponentLogger=yS;function Ri(e,t,r){var n=mS.getGlobal("diag");if(!!n)return r.unshift(t),n[e].apply(n,r)}});var Ka=l(Ni=>{"use strict";Object.defineProperty(Ni,"__esModule",{value:!0});Ni.DiagLogLevel=void 0;var TS;(function(e){e[e.NONE=0]="NONE",e[e.ERROR=30]="ERROR",e[e.WARN=50]="WARN",e[e.INFO=60]="INFO",e[e.DEBUG=70]="DEBUG",e[e.VERBOSE=80]="VERBOSE",e[e.ALL=9999]="ALL"})(TS=Ni.DiagLogLevel||(Ni.DiagLogLevel={}))});var pd=l(Ya=>{"use strict";Object.defineProperty(Ya,"__esModule",{value:!0});Ya.createLogLevelDiagLogger=void 0;var Ct=Ka();function AS(e,t){e<Ct.DiagLogLevel.NONE?e=Ct.DiagLogLevel.NONE:e>Ct.DiagLogLevel.ALL&&(e=Ct.DiagLogLevel.ALL),t=t||{};function r(n,i){var a=t[n];return typeof a=="function"&&e>=i?a.bind(t):function(){}}return{error:r("error",Ct.DiagLogLevel.ERROR),warn:r("warn",Ct.DiagLogLevel.WARN),info:r("info",Ct.DiagLogLevel.INFO),debug:r("debug",Ct.DiagLogLevel.DEBUG),verbose:r("verbose",Ct.DiagLogLevel.VERBOSE)}}Ya.createLogLevelDiagLogger=AS});var hn=l(Wa=>{"use strict";Object.defineProperty(Wa,"__esModule",{value:!0});Wa.DiagAPI=void 0;var SS=fd(),IS=pd(),CS=Ka(),Qa=dn(),bS="diag",OS=function(){function e(){function t(n){return function(){var i=Qa.getGlobal("diag");if(!!i)return i[n].apply(i,arguments)}}var r=this;r.setLogger=function(n,i){var a,s;if(i===void 0&&(i=CS.DiagLogLevel.INFO),n===r){var o=new Error("Cannot use diag as the logger for itself. Please use a DiagLogger implementation like ConsoleDiagLogger or a custom implementation");return r.error((a=o.stack)!==null&&a!==void 0?a:o.message),!1}var u=Qa.getGlobal("diag"),c=IS.createLogLevelDiagLogger(i,n);if(u){var f=(s=new Error().stack)!==null&&s!==void 0?s:"<failed to generate stacktrace>";u.warn("Current logger will be overwritten from "+f),c.warn("Current logger will overwrite one already registered from "+f)}return Qa.registerGlobal("diag",c,r,!0)},r.disable=function(){Qa.unregisterGlobal(bS,r)},r.createComponentLogger=function(n){return new SS.DiagComponentLogger(n)},r.verbose=t("verbose"),r.debug=t("debug"),r.info=t("info"),r.warn=t("warn"),r.error=t("error")}return e.instance=function(){return this._instance||(this._instance=new e),this._instance},e}();Wa.DiagAPI=OS});var dd=l(Za=>{"use strict";Object.defineProperty(Za,"__esModule",{value:!0});Za.BaggageImpl=void 0;var PS=function(){function e(t){this._entries=t?new Map(t):new Map}return e.prototype.getEntry=function(t){var r=this._entries.get(t);if(!!r)return Object.assign({},r)},e.prototype.getAllEntries=function(){return Array.from(this._entries.entries()).map(function(t){var r=t[0],n=t[1];return[r,n]})},e.prototype.setEntry=function(t,r){var n=new e(this._entries);return n._entries.set(t,r),n},e.prototype.removeEntry=function(t){var r=new e(this._entries);return r._entries.delete(t),r},e.prototype.removeEntries=function(){for(var t=[],r=0;r<arguments.length;r++)t[r]=arguments[r];for(var n=new e(this._entries),i=0,a=t;i<a.length;i++){var s=a[i];n._entries.delete(s)}return n},e.prototype.clear=function(){return new e},e}();Za.BaggageImpl=PS});var hd=l(Ja=>{"use strict";Object.defineProperty(Ja,"__esModule",{value:!0});Ja.baggageEntryMetadataSymbol=void 0;Ja.baggageEntryMetadataSymbol=Symbol("BaggageEntryMetadata")});var qu=l(_n=>{"use strict";Object.defineProperty(_n,"__esModule",{value:!0});_n.baggageEntryMetadataFromString=_n.createBaggage=void 0;var RS=hn(),NS=dd(),DS=hd(),wS=RS.DiagAPI.instance();function xS(e){return e===void 0&&(e={}),new NS.BaggageImpl(new Map(Object.entries(e)))}_n.createBaggage=xS;function MS(e){return typeof e!="string"&&(wS.error("Cannot create baggage metadata from unknown type: "+typeof e),e=""),{__TYPE__:DS.baggageEntryMetadataSymbol,toString:function(){return e}}}_n.baggageEntryMetadataFromString=MS});var vd=l(_d=>{"use strict";Object.defineProperty(_d,"__esModule",{value:!0})});var Ed=l(gd=>{"use strict";Object.defineProperty(gd,"__esModule",{value:!0})});var md=l(es=>{"use strict";Object.defineProperty(es,"__esModule",{value:!0});es.DiagConsoleLogger=void 0;var ju=[{n:"error",c:"error"},{n:"warn",c:"warn"},{n:"info",c:"info"},{n:"debug",c:"debug"},{n:"verbose",c:"trace"}],LS=function(){function e(){function t(n){return function(){var i=arguments;if(console){var a=console[n];if(typeof a!="function"&&(a=console.log),typeof a=="function")return a.apply(console,i)}}}for(var r=0;r<ju.length;r++)this[ju[r].n]=t(ju[r].c)}return e}();es.DiagConsoleLogger=LS});var Td=l(Xt=>{"use strict";var qS=Xt&&Xt.__createBinding||(Object.create?function(e,t,r,n){n===void 0&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){n===void 0&&(n=r),e[n]=t[r]}),yd=Xt&&Xt.__exportStar||function(e,t){for(var r in e)r!=="default"&&!Object.prototype.hasOwnProperty.call(t,r)&&qS(t,e,r)};Object.defineProperty(Xt,"__esModule",{value:!0});yd(md(),Xt);yd(Ka(),Xt)});var ku=l(vn=>{"use strict";Object.defineProperty(vn,"__esModule",{value:!0});vn.defaultTextMapSetter=vn.defaultTextMapGetter=void 0;vn.defaultTextMapGetter={get:function(e,t){if(e!=null)return e[t]},keys:function(e){return e==null?[]:Object.keys(e)}};vn.defaultTextMapSetter={set:function(e,t,r){e!=null&&(e[t]=r)}}});var Sd=l(Ad=>{"use strict";Object.defineProperty(Ad,"__esModule",{value:!0})});var Cd=l(Id=>{"use strict";Object.defineProperty(Id,"__esModule",{value:!0})});var Di=l(gn=>{"use strict";Object.defineProperty(gn,"__esModule",{value:!0});gn.ROOT_CONTEXT=gn.createContextKey=void 0;function jS(e){return Symbol.for(e)}gn.createContextKey=jS;var kS=function(){function e(t){var r=this;r._currentContext=t?new Map(t):new Map,r.getValue=function(n){return r._currentContext.get(n)},r.setValue=function(n,i){var a=new e(r._currentContext);return a._currentContext.set(n,i),a},r.deleteValue=function(n){var i=new e(r._currentContext);return i._currentContext.delete(n),i}}return e}();gn.ROOT_CONTEXT=new kS});var bd=l(En=>{"use strict";var HS=En&&En.__spreadArray||function(e,t){for(var r=0,n=t.length,i=e.length;r<n;r++,i++)e[i]=t[r];return e};Object.defineProperty(En,"__esModule",{value:!0});En.NoopContextManager=void 0;var US=Di(),BS=function(){function e(){}return e.prototype.active=function(){return US.ROOT_CONTEXT},e.prototype.with=function(t,r,n){for(var i=[],a=3;a<arguments.length;a++)i[a-3]=arguments[a];return r.call.apply(r,HS([n],i))},e.prototype.bind=function(t,r){return r},e.prototype.enable=function(){return this},e.prototype.disable=function(){return this},e}();En.NoopContextManager=BS});var Bu=l(mn=>{"use strict";var FS=mn&&mn.__spreadArray||function(e,t){for(var r=0,n=t.length,i=e.length;r<n;r++,i++)e[i]=t[r];return e};Object.defineProperty(mn,"__esModule",{value:!0});mn.ContextAPI=void 0;var GS=bd(),Hu=dn(),Od=hn(),Uu="context",VS=new GS.NoopContextManager,$S=function(){function e(){}return e.getInstance=function(){return this._instance||(this._instance=new e),this._instance},e.prototype.setGlobalContextManager=function(t){return Hu.registerGlobal(Uu,t,Od.DiagAPI.instance())},e.prototype.active=function(){return this._getContextManager().active()},e.prototype.with=function(t,r,n){for(var i,a=[],s=3;s<arguments.length;s++)a[s-3]=arguments[s];return(i=this._getContextManager()).with.apply(i,FS([t,r,n],a))},e.prototype.bind=function(t,r){return this._getContextManager().bind(t,r)},e.prototype._getContextManager=function(){return Hu.getGlobal(Uu)||VS},e.prototype.disable=function(){this._getContextManager().disable(),Hu.unregisterGlobal(Uu,Od.DiagAPI.instance())},e}();mn.ContextAPI=$S});var Fu=l(wi=>{"use strict";Object.defineProperty(wi,"__esModule",{value:!0});wi.TraceFlags=void 0;var zS;(function(e){e[e.NONE=0]="NONE",e[e.SAMPLED=1]="SAMPLED"})(zS=wi.TraceFlags||(wi.TraceFlags={}))});var ts=l(ct=>{"use strict";Object.defineProperty(ct,"__esModule",{value:!0});ct.INVALID_SPAN_CONTEXT=ct.INVALID_TRACEID=ct.INVALID_SPANID=void 0;var XS=Fu();ct.INVALID_SPANID="0000000000000000";ct.INVALID_TRACEID="00000000000000000000000000000000";ct.INVALID_SPAN_CONTEXT={traceId:ct.INVALID_TRACEID,spanId:ct.INVALID_SPANID,traceFlags:XS.TraceFlags.NONE}});var ns=l(rs=>{"use strict";Object.defineProperty(rs,"__esModule",{value:!0});rs.NonRecordingSpan=void 0;var KS=ts(),YS=function(){function e(t){t===void 0&&(t=KS.INVALID_SPAN_CONTEXT),this._spanContext=t}return e.prototype.spanContext=function(){return this._spanContext},e.prototype.setAttribute=function(t,r){return this},e.prototype.setAttributes=function(t){return this},e.prototype.addEvent=function(t,r){return this},e.prototype.setStatus=function(t){return this},e.prototype.updateName=function(t){return this},e.prototype.end=function(t){},e.prototype.isRecording=function(){return!1},e.prototype.recordException=function(t,r){},e}();rs.NonRecordingSpan=YS});var Vu=l($e=>{"use strict";Object.defineProperty($e,"__esModule",{value:!0});$e.getSpanContext=$e.setSpanContext=$e.deleteSpan=$e.setSpan=$e.getSpan=void 0;var QS=Di(),WS=ns(),Gu=QS.createContextKey("OpenTelemetry Context Key SPAN");function Pd(e){return e.getValue(Gu)||void 0}$e.getSpan=Pd;function Rd(e,t){return e.setValue(Gu,t)}$e.setSpan=Rd;function ZS(e){return e.deleteValue(Gu)}$e.deleteSpan=ZS;function JS(e,t){return Rd(e,new WS.NonRecordingSpan(t))}$e.setSpanContext=JS;function eI(e){var t;return(t=Pd(e))===null||t===void 0?void 0:t.spanContext()}$e.getSpanContext=eI});var is=l(lt=>{"use strict";Object.defineProperty(lt,"__esModule",{value:!0});lt.wrapSpanContext=lt.isSpanContextValid=lt.isValidSpanId=lt.isValidTraceId=void 0;var Nd=ts(),tI=ns(),rI=/^([0-9a-f]{32})$/i,nI=/^[0-9a-f]{16}$/i;function Dd(e){return rI.test(e)&&e!==Nd.INVALID_TRACEID}lt.isValidTraceId=Dd;function wd(e){return nI.test(e)&&e!==Nd.INVALID_SPANID}lt.isValidSpanId=wd;function iI(e){return Dd(e.traceId)&&wd(e.spanId)}lt.isSpanContextValid=iI;function aI(e){return new tI.NonRecordingSpan(e)}lt.wrapSpanContext=aI});var zu=l(as=>{"use strict";Object.defineProperty(as,"__esModule",{value:!0});as.NoopTracer=void 0;var sI=Bu(),xd=Vu(),$u=ns(),oI=is(),Md=sI.ContextAPI.getInstance(),uI=function(){function e(){}return e.prototype.startSpan=function(t,r,n){var i=Boolean(r==null?void 0:r.root);if(i)return new $u.NonRecordingSpan;var a=n&&xd.getSpanContext(n);return cI(a)&&oI.isSpanContextValid(a)?new $u.NonRecordingSpan(a):new $u.NonRecordingSpan},e.prototype.startActiveSpan=function(t,r,n,i){var a,s,o;if(!(arguments.length<2)){arguments.length===2?o=r:arguments.length===3?(a=r,o=n):(a=r,s=n,o=i);var u=s??Md.active(),c=this.startSpan(t,a,u),f=xd.setSpan(u,c);return Md.with(f,o,void 0,c)}},e}();as.NoopTracer=uI;function cI(e){return typeof e=="object"&&typeof e.spanId=="string"&&typeof e.traceId=="string"&&typeof e.traceFlags=="number"}});var Xu=l(ss=>{"use strict";Object.defineProperty(ss,"__esModule",{value:!0});ss.ProxyTracer=void 0;var lI=zu(),fI=new lI.NoopTracer,pI=function(){function e(t,r,n){this._provider=t,this.name=r,this.version=n}return e.prototype.startSpan=function(t,r,n){return this._getTracer().startSpan(t,r,n)},e.prototype.startActiveSpan=function(t,r,n,i){var a=this._getTracer();return Reflect.apply(a.startActiveSpan,a,arguments)},e.prototype._getTracer=function(){if(this._delegate)return this._delegate;var t=this._provider.getDelegateTracer(this.name,this.version);return t?(this._delegate=t,this._delegate):fI},e}();ss.ProxyTracer=pI});var Ld=l(os=>{"use strict";Object.defineProperty(os,"__esModule",{value:!0});os.NoopTracerProvider=void 0;var dI=zu(),hI=function(){function e(){}return e.prototype.getTracer=function(t,r){return new dI.NoopTracer},e}();os.NoopTracerProvider=hI});var Ku=l(us=>{"use strict";Object.defineProperty(us,"__esModule",{value:!0});us.ProxyTracerProvider=void 0;var _I=Xu(),vI=Ld(),gI=new vI.NoopTracerProvider,EI=function(){function e(){}return e.prototype.getTracer=function(t,r){var n;return(n=this.getDelegateTracer(t,r))!==null&&n!==void 0?n:new _I.ProxyTracer(this,t,r)},e.prototype.getDelegate=function(){var t;return(t=this._delegate)!==null&&t!==void 0?t:gI},e.prototype.setDelegate=function(t){this._delegate=t},e.prototype.getDelegateTracer=function(t,r){var n;return(n=this._delegate)===null||n===void 0?void 0:n.getTracer(t,r)},e}();us.ProxyTracerProvider=EI});var jd=l(qd=>{"use strict";Object.defineProperty(qd,"__esModule",{value:!0})});var kd=l(xi=>{"use strict";Object.defineProperty(xi,"__esModule",{value:!0});xi.SamplingDecision=void 0;var mI;(function(e){e[e.NOT_RECORD=0]="NOT_RECORD",e[e.RECORD=1]="RECORD",e[e.RECORD_AND_SAMPLED=2]="RECORD_AND_SAMPLED"})(mI=xi.SamplingDecision||(xi.SamplingDecision={}))});var Ud=l(Hd=>{"use strict";Object.defineProperty(Hd,"__esModule",{value:!0})});var Bd=l(Mi=>{"use strict";Object.defineProperty(Mi,"__esModule",{value:!0});Mi.SpanKind=void 0;var yI;(function(e){e[e.INTERNAL=0]="INTERNAL",e[e.SERVER=1]="SERVER",e[e.CLIENT=2]="CLIENT",e[e.PRODUCER=3]="PRODUCER",e[e.CONSUMER=4]="CONSUMER"})(yI=Mi.SpanKind||(Mi.SpanKind={}))});var Gd=l(Fd=>{"use strict";Object.defineProperty(Fd,"__esModule",{value:!0})});var $d=l(Vd=>{"use strict";Object.defineProperty(Vd,"__esModule",{value:!0})});var zd=l(Li=>{"use strict";Object.defineProperty(Li,"__esModule",{value:!0});Li.SpanStatusCode=void 0;var TI;(function(e){e[e.UNSET=0]="UNSET",e[e.OK=1]="OK",e[e.ERROR=2]="ERROR"})(TI=Li.SpanStatusCode||(Li.SpanStatusCode={}))});var Kd=l(Xd=>{"use strict";Object.defineProperty(Xd,"__esModule",{value:!0})});var Qd=l(Yd=>{"use strict";Object.defineProperty(Yd,"__esModule",{value:!0})});var Zd=l(Wd=>{"use strict";Object.defineProperty(Wd,"__esModule",{value:!0})});var eh=l(Jd=>{"use strict";Object.defineProperty(Jd,"__esModule",{value:!0})});var ih=l(cs=>{"use strict";Object.defineProperty(cs,"__esModule",{value:!0});cs.TraceAPI=void 0;var Yu=dn(),th=Ku(),rh=is(),qi=Vu(),nh=hn(),Qu="trace",AI=function(){function e(){this._proxyTracerProvider=new th.ProxyTracerProvider,this.wrapSpanContext=rh.wrapSpanContext,this.isSpanContextValid=rh.isSpanContextValid,this.deleteSpan=qi.deleteSpan,this.getSpan=qi.getSpan,this.getSpanContext=qi.getSpanContext,this.setSpan=qi.setSpan,this.setSpanContext=qi.setSpanContext}return e.getInstance=function(){return this._instance||(this._instance=new e),this._instance},e.prototype.setGlobalTracerProvider=function(t){var r=Yu.registerGlobal(Qu,this._proxyTracerProvider,nh.DiagAPI.instance());return r&&this._proxyTracerProvider.setDelegate(t),r},e.prototype.getTracerProvider=function(){return Yu.getGlobal(Qu)||this._proxyTracerProvider},e.prototype.getTracer=function(t,r){return this.getTracerProvider().getTracer(t,r)},e.prototype.disable=function(){Yu.unregisterGlobal(Qu,nh.DiagAPI.instance()),this._proxyTracerProvider=new th.ProxyTracerProvider},e}();cs.TraceAPI=AI});var ah=l(ls=>{"use strict";Object.defineProperty(ls,"__esModule",{value:!0});ls.NoopTextMapPropagator=void 0;var SI=function(){function e(){}return e.prototype.inject=function(t,r){},e.prototype.extract=function(t,r){return t},e.prototype.fields=function(){return[]},e}();ls.NoopTextMapPropagator=SI});var sh=l(Kt=>{"use strict";Object.defineProperty(Kt,"__esModule",{value:!0});Kt.deleteBaggage=Kt.setBaggage=Kt.getBaggage=void 0;var II=Di(),Wu=II.createContextKey("OpenTelemetry Baggage Key");function CI(e){return e.getValue(Wu)||void 0}Kt.getBaggage=CI;function bI(e,t){return e.setValue(Wu,t)}Kt.setBaggage=bI;function OI(e){return e.deleteValue(Wu)}Kt.deleteBaggage=OI});var ch=l(fs=>{"use strict";Object.defineProperty(fs,"__esModule",{value:!0});fs.PropagationAPI=void 0;var Zu=dn(),PI=ah(),oh=ku(),Ju=sh(),RI=qu(),uh=hn(),ec="propagation",NI=new PI.NoopTextMapPropagator,DI=function(){function e(){this.createBaggage=RI.createBaggage,this.getBaggage=Ju.getBaggage,this.setBaggage=Ju.setBaggage,this.deleteBaggage=Ju.deleteBaggage}return e.getInstance=function(){return this._instance||(this._instance=new e),this._instance},e.prototype.setGlobalPropagator=function(t){return Zu.registerGlobal(ec,t,uh.DiagAPI.instance())},e.prototype.inject=function(t,r,n){return n===void 0&&(n=oh.defaultTextMapSetter),this._getGlobalPropagator().inject(t,r,n)},e.prototype.extract=function(t,r,n){return n===void 0&&(n=oh.defaultTextMapGetter),this._getGlobalPropagator().extract(t,r,n)},e.prototype.fields=function(){return this._getGlobalPropagator().fields()},e.prototype.disable=function(){Zu.unregisterGlobal(ec,uh.DiagAPI.instance())},e.prototype._getGlobalPropagator=function(){return Zu.getGlobal(ec)||NI},e}();fs.PropagationAPI=DI});var z=l(y=>{"use strict";var wI=y&&y.__createBinding||(Object.create?function(e,t,r,n){n===void 0&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){n===void 0&&(n=r),e[n]=t[r]}),re=y&&y.__exportStar||function(e,t){for(var r in e)r!=="default"&&!Object.prototype.hasOwnProperty.call(t,r)&&wI(t,e,r)};Object.defineProperty(y,"__esModule",{value:!0});y.diag=y.propagation=y.trace=y.context=y.INVALID_SPAN_CONTEXT=y.INVALID_TRACEID=y.INVALID_SPANID=y.isValidSpanId=y.isValidTraceId=y.isSpanContextValid=y.baggageEntryMetadataFromString=void 0;re(id(),y);var xI=qu();Object.defineProperty(y,"baggageEntryMetadataFromString",{enumerable:!0,get:function(){return xI.baggageEntryMetadataFromString}});re(vd(),y);re(Ed(),y);re(Td(),y);re(ku(),y);re(Sd(),y);re(Cd(),y);re(Xu(),y);re(Ku(),y);re(jd(),y);re(kd(),y);re(Ud(),y);re(Bd(),y);re(Gd(),y);re($d(),y);re(zd(),y);re(Fu(),y);re(Kd(),y);re(Qd(),y);re(Zd(),y);var tc=is();Object.defineProperty(y,"isSpanContextValid",{enumerable:!0,get:function(){return tc.isSpanContextValid}});Object.defineProperty(y,"isValidTraceId",{enumerable:!0,get:function(){return tc.isValidTraceId}});Object.defineProperty(y,"isValidSpanId",{enumerable:!0,get:function(){return tc.isValidSpanId}});var rc=ts();Object.defineProperty(y,"INVALID_SPANID",{enumerable:!0,get:function(){return rc.INVALID_SPANID}});Object.defineProperty(y,"INVALID_TRACEID",{enumerable:!0,get:function(){return rc.INVALID_TRACEID}});Object.defineProperty(y,"INVALID_SPAN_CONTEXT",{enumerable:!0,get:function(){return rc.INVALID_SPAN_CONTEXT}});re(Di(),y);re(eh(),y);var MI=Bu();y.context=MI.ContextAPI.getInstance();var LI=ih();y.trace=LI.TraceAPI.getInstance();var qI=ch();y.propagation=qI.PropagationAPI.getInstance();var jI=hn();y.diag=jI.DiagAPI.instance();y.default={trace:y.trace,context:y.context,propagation:y.propagation,diag:y.diag}});var ps=l(Yt=>{"use strict";Object.defineProperty(Yt,"__esModule",{value:!0});Yt.isTracingSuppressed=Yt.unsuppressTracing=Yt.suppressTracing=void 0;var kI=z(),nc=kI.createContextKey("OpenTelemetry SDK Context Key SUPPRESS_TRACING");function HI(e){return e.setValue(nc,!0)}Yt.suppressTracing=HI;function UI(e){return e.deleteValue(nc)}Yt.unsuppressTracing=UI;function BI(e){return e.getValue(nc)===!0}Yt.isTracingSuppressed=BI});var ic=l(Ie=>{"use strict";Object.defineProperty(Ie,"__esModule",{value:!0});Ie.BAGGAGE_MAX_TOTAL_LENGTH=Ie.BAGGAGE_MAX_PER_NAME_VALUE_PAIRS=Ie.BAGGAGE_MAX_NAME_VALUE_PAIRS=Ie.BAGGAGE_HEADER=Ie.BAGGAGE_ITEMS_SEPARATOR=Ie.BAGGAGE_PROPERTIES_SEPARATOR=Ie.BAGGAGE_KEY_PAIR_SEPARATOR=void 0;Ie.BAGGAGE_KEY_PAIR_SEPARATOR="=";Ie.BAGGAGE_PROPERTIES_SEPARATOR=";";Ie.BAGGAGE_ITEMS_SEPARATOR=",";Ie.BAGGAGE_HEADER="baggage";Ie.BAGGAGE_MAX_NAME_VALUE_PAIRS=180;Ie.BAGGAGE_MAX_PER_NAME_VALUE_PAIRS=4096;Ie.BAGGAGE_MAX_TOTAL_LENGTH=8192});var ac=l(rt=>{"use strict";Object.defineProperty(rt,"__esModule",{value:!0});rt.parseKeyPairsIntoRecord=rt.parsePairKeyValue=rt.getKeyPairs=rt.serializeKeyPairs=void 0;var FI=z(),yn=ic(),GI=e=>e.reduce((t,r)=>{let n=`${t}${t!==""?yn.BAGGAGE_ITEMS_SEPARATOR:""}${r}`;return n.length>yn.BAGGAGE_MAX_TOTAL_LENGTH?t:n},"");rt.serializeKeyPairs=GI;var VI=e=>e.getAllEntries().map(([t,r])=>`${encodeURIComponent(t)}=${encodeURIComponent(r.value)}`);rt.getKeyPairs=VI;var $I=e=>{let t=e.split(yn.BAGGAGE_PROPERTIES_SEPARATOR);if(t.length<=0)return;let r=t.shift();if(!r)return;let n=r.split(yn.BAGGAGE_KEY_PAIR_SEPARATOR);if(n.length!==2)return;let i=decodeURIComponent(n[0].trim()),a=decodeURIComponent(n[1].trim()),s;return t.length>0&&(s=FI.baggageEntryMetadataFromString(t.join(yn.BAGGAGE_PROPERTIES_SEPARATOR))),{key:i,value:a,metadata:s}};rt.parsePairKeyValue=$I;var zI=e=>typeof e!="string"||e.length===0?{}:e.split(yn.BAGGAGE_ITEMS_SEPARATOR).map(t=>rt.parsePairKeyValue(t)).filter(t=>t!==void 0&&t.value.length>0).reduce((t,r)=>(t[r.key]=r.value,t),{});rt.parseKeyPairsIntoRecord=zI});var lh=l(ds=>{"use strict";Object.defineProperty(ds,"__esModule",{value:!0});ds.HttpBaggagePropagator=void 0;var sc=z(),XI=ps(),Tn=ic(),oc=ac(),uc=class{inject(t,r,n){let i=sc.propagation.getBaggage(t);if(!i||XI.isTracingSuppressed(t))return;let a=oc.getKeyPairs(i).filter(o=>o.length<=Tn.BAGGAGE_MAX_PER_NAME_VALUE_PAIRS).slice(0,Tn.BAGGAGE_MAX_NAME_VALUE_PAIRS),s=oc.serializeKeyPairs(a);s.length>0&&n.set(r,Tn.BAGGAGE_HEADER,s)}extract(t,r,n){let i=n.get(r,Tn.BAGGAGE_HEADER);if(!i)return t;let a={};return i.length===0||(i.split(Tn.BAGGAGE_ITEMS_SEPARATOR).forEach(o=>{let u=oc.parsePairKeyValue(o);if(u){let c={value:u.value};u.metadata&&(c.metadata=u.metadata),a[u.key]=c}}),Object.entries(a).length===0)?t:sc.propagation.setBaggage(t,sc.propagation.createBaggage(a))}fields(){return[Tn.BAGGAGE_HEADER]}};ds.HttpBaggagePropagator=uc});var dh=l(An=>{"use strict";Object.defineProperty(An,"__esModule",{value:!0});An.isAttributeValue=An.sanitizeAttributes=void 0;function KI(e){let t={};if(e==null||typeof e!="object")return t;for(let[r,n]of Object.entries(e))fh(n)&&(Array.isArray(n)?t[r]=n.slice():t[r]=n);return t}An.sanitizeAttributes=KI;function fh(e){return e==null?!0:Array.isArray(e)?YI(e):ph(e)}An.isAttributeValue=fh;function YI(e){let t;for(let r of e)if(r!=null){if(!t){if(ph(r)){t=typeof r;continue}return!1}if(typeof r!==t)return!1}return!0}function ph(e){switch(typeof e){case"number":return!0;case"boolean":return!0;case"string":return!0}return!1}});var cc=l(hs=>{"use strict";Object.defineProperty(hs,"__esModule",{value:!0});hs.loggingErrorHandler=void 0;var QI=z();function WI(){return e=>{QI.diag.error(ZI(e))}}hs.loggingErrorHandler=WI;function ZI(e){return typeof e=="string"?e:JSON.stringify(JI(e))}function JI(e){let t={},r=e;for(;r!==null;)Object.getOwnPropertyNames(r).forEach(n=>{if(t[n])return;let i=r[n];i&&(t[n]=String(i))}),r=Object.getPrototypeOf(r);return t}});var lc=l(Sn=>{"use strict";Object.defineProperty(Sn,"__esModule",{value:!0});Sn.globalErrorHandler=Sn.setGlobalErrorHandler=void 0;var eC=cc(),hh=eC.loggingErrorHandler();function tC(e){hh=e}Sn.setGlobalErrorHandler=tC;var rC=e=>{try{hh(e)}catch{}};Sn.globalErrorHandler=rC});var fc=l(ji=>{"use strict";Object.defineProperty(ji,"__esModule",{value:!0});ji.TracesSamplerValues=void 0;var nC;(function(e){e.AlwaysOff="always_off",e.AlwaysOn="always_on",e.ParentBasedAlwaysOff="parentbased_always_off",e.ParentBasedAlwaysOn="parentbased_always_on",e.ParentBasedTraceIdRatio="parentbased_traceidratio",e.TraceIdRatio="traceidratio"})(nC=ji.TracesSamplerValues||(ji.TracesSamplerValues={}))});var pc=l(Sr=>{"use strict";Object.defineProperty(Sr,"__esModule",{value:!0});Sr.parseEnvironment=Sr.DEFAULT_ENVIRONMENT=void 0;var Qt=z(),iC=fc(),aC=",",sC=["OTEL_BSP_EXPORT_TIMEOUT","OTEL_BSP_MAX_EXPORT_BATCH_SIZE","OTEL_BSP_MAX_QUEUE_SIZE","OTEL_BSP_SCHEDULE_DELAY","OTEL_SPAN_ATTRIBUTE_COUNT_LIMIT","OTEL_SPAN_EVENT_COUNT_LIMIT","OTEL_SPAN_LINK_COUNT_LIMIT"];function oC(e){return sC.indexOf(e)>-1}var uC=["OTEL_NO_PATCH_MODULES","OTEL_PROPAGATORS"];function cC(e){return uC.indexOf(e)>-1}Sr.DEFAULT_ENVIRONMENT={CONTAINER_NAME:"",ECS_CONTAINER_METADATA_URI_V4:"",ECS_CONTAINER_METADATA_URI:"",HOSTNAME:"",KUBERNETES_SERVICE_HOST:"",NAMESPACE:"",OTEL_BSP_EXPORT_TIMEOUT:3e4,OTEL_BSP_MAX_EXPORT_BATCH_SIZE:512,OTEL_BSP_MAX_QUEUE_SIZE:2048,OTEL_BSP_SCHEDULE_DELAY:5e3,OTEL_EXPORTER_JAEGER_AGENT_HOST:"",OTEL_EXPORTER_JAEGER_ENDPOINT:"",OTEL_EXPORTER_JAEGER_PASSWORD:"",OTEL_EXPORTER_JAEGER_USER:"",OTEL_EXPORTER_OTLP_ENDPOINT:"",OTEL_EXPORTER_OTLP_TRACES_ENDPOINT:"",OTEL_EXPORTER_OTLP_METRICS_ENDPOINT:"",OTEL_EXPORTER_OTLP_HEADERS:"",OTEL_EXPORTER_OTLP_TRACES_HEADERS:"",OTEL_EXPORTER_OTLP_METRICS_HEADERS:"",OTEL_EXPORTER_ZIPKIN_ENDPOINT:"http://localhost:9411/api/v2/spans",OTEL_LOG_LEVEL:Qt.DiagLogLevel.INFO,OTEL_NO_PATCH_MODULES:[],OTEL_PROPAGATORS:["tracecontext","baggage"],OTEL_RESOURCE_ATTRIBUTES:"",OTEL_SERVICE_NAME:"",OTEL_SPAN_ATTRIBUTE_COUNT_LIMIT:128,OTEL_SPAN_EVENT_COUNT_LIMIT:128,OTEL_SPAN_LINK_COUNT_LIMIT:128,OTEL_TRACES_EXPORTER:"none",OTEL_TRACES_SAMPLER:iC.TracesSamplerValues.ParentBasedAlwaysOn,OTEL_TRACES_SAMPLER_ARG:""};function lC(e,t,r,n=-1/0,i=1/0){if(typeof r[e]<"u"){let a=Number(r[e]);isNaN(a)||(a<n?t[e]=n:a>i?t[e]=i:t[e]=a)}}function fC(e,t,r,n=aC){let i=r[e];typeof i=="string"&&(t[e]=i.split(n).map(a=>a.trim()))}var pC={ALL:Qt.DiagLogLevel.ALL,VERBOSE:Qt.DiagLogLevel.VERBOSE,DEBUG:Qt.DiagLogLevel.DEBUG,INFO:Qt.DiagLogLevel.INFO,WARN:Qt.DiagLogLevel.WARN,ERROR:Qt.DiagLogLevel.ERROR,NONE:Qt.DiagLogLevel.NONE};function dC(e,t,r){let n=r[e];if(typeof n=="string"){let i=pC[n.toUpperCase()];i!=null&&(t[e]=i)}}function hC(e){let t={};for(let r in Sr.DEFAULT_ENVIRONMENT){let n=r;switch(n){case"OTEL_LOG_LEVEL":dC(n,t,e);break;default:if(oC(n))lC(n,t,e);else if(cC(n))fC(n,t,e);else{let i=e[n];typeof i<"u"&&i!==null&&(t[n]=String(i))}}}return t}Sr.parseEnvironment=hC});var vh=l(_s=>{"use strict";Object.defineProperty(_s,"__esModule",{value:!0});_s.getEnv=void 0;var _C=__webpack_require__(22037),_h=pc();function vC(){let e=_h.parseEnvironment(process.env);return Object.assign({HOSTNAME:_C.hostname()},_h.DEFAULT_ENVIRONMENT,e)}_s.getEnv=vC});var gh=l(vs=>{"use strict";Object.defineProperty(vs,"__esModule",{value:!0});vs.hexToBase64=void 0;function gC(e){let t=e.length,r="";for(let n=0;n<t;n+=2){let i=e.substring(n,n+2),a=parseInt(i,16);r+=String.fromCharCode(a)}return Buffer.from(r,"ascii").toString("base64")}vs.hexToBase64=gC});var yh=l(Es=>{"use strict";Object.defineProperty(Es,"__esModule",{value:!0});Es.RandomIdGenerator=void 0;var EC=8,mh=16,dc=class{constructor(){this.generateTraceId=Eh(mh),this.generateSpanId=Eh(EC)}};Es.RandomIdGenerator=dc;var gs=Buffer.allocUnsafe(mh);function Eh(e){return function(){for(let r=0;r<e/4;r++)gs.writeUInt32BE(Math.random()*2**32>>>0,r*4);for(let r=0;r<e&&!(gs[r]>0);r++)r===e-1&&(gs[e-1]=1);return gs.toString("hex",0,e)}}});var Th=l(ms=>{"use strict";Object.defineProperty(ms,"__esModule",{value:!0});ms.otperformance=void 0;var mC=__webpack_require__(4074);ms.otperformance=mC.performance});var Ts=l(ys=>{"use strict";Object.defineProperty(ys,"__esModule",{value:!0});ys.VERSION=void 0;ys.VERSION="0.23.0"});var Ah=l(x=>{"use strict";Object.defineProperty(x,"__esModule",{value:!0});x.RpcGrpcStatusCodeValues=x.MessagingOperationValues=x.MessagingDestinationKindValues=x.HttpFlavorValues=x.NetTransportValues=x.FaasInvokedProviderValues=x.FaasDocumentOperationValues=x.FaasTriggerValues=x.DbCassandraConsistencyLevelValues=x.DbSystemValues=x.SemanticAttributes=void 0;x.SemanticAttributes={DB_SYSTEM:"db.system",DB_CONNECTION_STRING:"db.connection_string",DB_USER:"db.user",DB_JDBC_DRIVER_CLASSNAME:"db.jdbc.driver_classname",DB_NAME:"db.name",DB_STATEMENT:"db.statement",DB_OPERATION:"db.operation",DB_MSSQL_INSTANCE_NAME:"db.mssql.instance_name",DB_CASSANDRA_KEYSPACE:"db.cassandra.keyspace",DB_CASSANDRA_PAGE_SIZE:"db.cassandra.page_size",DB_CASSANDRA_CONSISTENCY_LEVEL:"db.cassandra.consistency_level",DB_CASSANDRA_TABLE:"db.cassandra.table",DB_CASSANDRA_IDEMPOTENCE:"db.cassandra.idempotence",DB_CASSANDRA_SPECULATIVE_EXECUTION_COUNT:"db.cassandra.speculative_execution_count",DB_CASSANDRA_COORDINATOR_ID:"db.cassandra.coordinator.id",DB_CASSANDRA_COORDINATOR_DC:"db.cassandra.coordinator.dc",DB_HBASE_NAMESPACE:"db.hbase.namespace",DB_REDIS_DATABASE_INDEX:"db.redis.database_index",DB_MONGODB_COLLECTION:"db.mongodb.collection",DB_SQL_TABLE:"db.sql.table",EXCEPTION_TYPE:"exception.type",EXCEPTION_MESSAGE:"exception.message",EXCEPTION_STACKTRACE:"exception.stacktrace",EXCEPTION_ESCAPED:"exception.escaped",FAAS_TRIGGER:"faas.trigger",FAAS_EXECUTION:"faas.execution",FAAS_DOCUMENT_COLLECTION:"faas.document.collection",FAAS_DOCUMENT_OPERATION:"faas.document.operation",FAAS_DOCUMENT_TIME:"faas.document.time",FAAS_DOCUMENT_NAME:"faas.document.name",FAAS_TIME:"faas.time",FAAS_CRON:"faas.cron",FAAS_COLDSTART:"faas.coldstart",FAAS_INVOKED_NAME:"faas.invoked_name",FAAS_INVOKED_PROVIDER:"faas.invoked_provider",FAAS_INVOKED_REGION:"faas.invoked_region",NET_TRANSPORT:"net.transport",NET_PEER_IP:"net.peer.ip",NET_PEER_PORT:"net.peer.port",NET_PEER_NAME:"net.peer.name",NET_HOST_IP:"net.host.ip",NET_HOST_PORT:"net.host.port",NET_HOST_NAME:"net.host.name",PEER_SERVICE:"peer.service",ENDUSER_ID:"enduser.id",ENDUSER_ROLE:"enduser.role",ENDUSER_SCOPE:"enduser.scope",THREAD_ID:"thread.id",THREAD_NAME:"thread.name",CODE_FUNCTION:"code.function",CODE_NAMESPACE:"code.namespace",CODE_FILEPATH:"code.filepath",CODE_LINENO:"code.lineno",HTTP_METHOD:"http.method",HTTP_URL:"http.url",HTTP_TARGET:"http.target",HTTP_HOST:"http.host",HTTP_SCHEME:"http.scheme",HTTP_STATUS_CODE:"http.status_code",HTTP_FLAVOR:"http.flavor",HTTP_USER_AGENT:"http.user_agent",HTTP_REQUEST_CONTENT_LENGTH:"http.request_content_length",HTTP_REQUEST_CONTENT_LENGTH_UNCOMPRESSED:"http.request_content_length_uncompressed",HTTP_RESPONSE_CONTENT_LENGTH:"http.response_content_length",HTTP_RESPONSE_CONTENT_LENGTH_UNCOMPRESSED:"http.response_content_length_uncompressed",HTTP_SERVER_NAME:"http.server_name",HTTP_ROUTE:"http.route",HTTP_CLIENT_IP:"http.client_ip",AWS_DYNAMODB_TABLE_NAMES:"aws.dynamodb.table_names",AWS_DYNAMODB_CONSUMED_CAPACITY:"aws.dynamodb.consumed_capacity",AWS_DYNAMODB_ITEM_COLLECTION_METRICS:"aws.dynamodb.item_collection_metrics",AWS_DYNAMODB_PROVISIONED_READ_CAPACITY:"aws.dynamodb.provisioned_read_capacity",AWS_DYNAMODB_PROVISIONED_WRITE_CAPACITY:"aws.dynamodb.provisioned_write_capacity",AWS_DYNAMODB_CONSISTENT_READ:"aws.dynamodb.consistent_read",AWS_DYNAMODB_PROJECTION:"aws.dynamodb.projection",AWS_DYNAMODB_LIMIT:"aws.dynamodb.limit",AWS_DYNAMODB_ATTRIBUTES_TO_GET:"aws.dynamodb.attributes_to_get",AWS_DYNAMODB_INDEX_NAME:"aws.dynamodb.index_name",AWS_DYNAMODB_SELECT:"aws.dynamodb.select",AWS_DYNAMODB_GLOBAL_SECONDARY_INDEXES:"aws.dynamodb.global_secondary_indexes",AWS_DYNAMODB_LOCAL_SECONDARY_INDEXES:"aws.dynamodb.local_secondary_indexes",AWS_DYNAMODB_EXCLUSIVE_START_TABLE:"aws.dynamodb.exclusive_start_table",AWS_DYNAMODB_TABLE_COUNT:"aws.dynamodb.table_count",AWS_DYNAMODB_SCAN_FORWARD:"aws.dynamodb.scan_forward",AWS_DYNAMODB_SEGMENT:"aws.dynamodb.segment",AWS_DYNAMODB_TOTAL_SEGMENTS:"aws.dynamodb.total_segments",AWS_DYNAMODB_COUNT:"aws.dynamodb.count",AWS_DYNAMODB_SCANNED_COUNT:"aws.dynamodb.scanned_count",AWS_DYNAMODB_ATTRIBUTE_DEFINITIONS:"aws.dynamodb.attribute_definitions",AWS_DYNAMODB_GLOBAL_SECONDARY_INDEX_UPDATES:"aws.dynamodb.global_secondary_index_updates",MESSAGING_SYSTEM:"messaging.system",MESSAGING_DESTINATION:"messaging.destination",MESSAGING_DESTINATION_KIND:"messaging.destination_kind",MESSAGING_TEMP_DESTINATION:"messaging.temp_destination",MESSAGING_PROTOCOL:"messaging.protocol",MESSAGING_PROTOCOL_VERSION:"messaging.protocol_version",MESSAGING_URL:"messaging.url",MESSAGING_MESSAGE_ID:"messaging.message_id",MESSAGING_CONVERSATION_ID:"messaging.conversation_id",MESSAGING_MESSAGE_PAYLOAD_SIZE_BYTES:"messaging.message_payload_size_bytes",MESSAGING_MESSAGE_PAYLOAD_COMPRESSED_SIZE_BYTES:"messaging.message_payload_compressed_size_bytes",MESSAGING_OPERATION:"messaging.operation",MESSAGING_RABBITMQ_ROUTING_KEY:"messaging.rabbitmq.routing_key",MESSAGING_KAFKA_MESSAGE_KEY:"messaging.kafka.message_key",MESSAGING_KAFKA_CONSUMER_GROUP:"messaging.kafka.consumer_group",MESSAGING_KAFKA_CLIENT_ID:"messaging.kafka.client_id",MESSAGING_KAFKA_PARTITION:"messaging.kafka.partition",MESSAGING_KAFKA_TOMBSTONE:"messaging.kafka.tombstone",RPC_SYSTEM:"rpc.system",RPC_SERVICE:"rpc.service",RPC_METHOD:"rpc.method",RPC_GRPC_STATUS_CODE:"rpc.grpc.status_code",RPC_JSONRPC_VERSION:"rpc.jsonrpc.version",RPC_JSONRPC_METHOD:"rpc.jsonrpc.method",RPC_JSONRPC_REQUEST_ID:"rpc.jsonrpc.request_id",RPC_JSONRPC_ERROR_CODE:"rpc.jsonrpc.error_code",RPC_JSONRPC_ERROR_MESSAGE:"rpc.jsonrpc.error_message"};var yC;(function(e){e.OTHER_SQL="other_sql",e.MSSQL="mssql",e.MYSQL="mysql",e.ORACLE="oracle",e.DB2="db2",e.POSTGRESQL="postgresql",e.REDSHIFT="redshift",e.HIVE="hive",e.CLOUDSCAPE="cloudscape",e.HSQLDB="hsqldb",e.PROGRESS="progress",e.MAXDB="maxdb",e.HANADB="hanadb",e.INGRES="ingres",e.FIRSTSQL="firstsql",e.EDB="edb",e.CACHE="cache",e.ADABAS="adabas",e.FIREBIRD="firebird",e.DERBY="derby",e.FILEMAKER="filemaker",e.INFORMIX="informix",e.INSTANTDB="instantdb",e.INTERBASE="interbase",e.MARIADB="mariadb",e.NETEZZA="netezza",e.PERVASIVE="pervasive",e.POINTBASE="pointbase",e.SQLITE="sqlite",e.SYBASE="sybase",e.TERADATA="teradata",e.VERTICA="vertica",e.H2="h2",e.COLDFUSION="coldfusion",e.CASSANDRA="cassandra",e.HBASE="hbase",e.MONGODB="mongodb",e.REDIS="redis",e.COUCHBASE="couchbase",e.COUCHDB="couchdb",e.COSMOSDB="cosmosdb",e.DYNAMODB="dynamodb",e.NEO4J="neo4j",e.GEODE="geode",e.ELASTICSEARCH="elasticsearch",e.MEMCACHED="memcached",e.COCKROACHDB="cockroachdb"})(yC=x.DbSystemValues||(x.DbSystemValues={}));var TC;(function(e){e.ALL="all",e.EACH_QUORUM="each_quorum",e.QUORUM="quorum",e.LOCAL_QUORUM="local_quorum",e.ONE="one",e.TWO="two",e.THREE="three",e.LOCAL_ONE="local_one",e.ANY="any",e.SERIAL="serial",e.LOCAL_SERIAL="local_serial"})(TC=x.DbCassandraConsistencyLevelValues||(x.DbCassandraConsistencyLevelValues={}));var AC;(function(e){e.DATASOURCE="datasource",e.HTTP="http",e.PUBSUB="pubsub",e.TIMER="timer",e.OTHER="other"})(AC=x.FaasTriggerValues||(x.FaasTriggerValues={}));var SC;(function(e){e.INSERT="insert",e.EDIT="edit",e.DELETE="delete"})(SC=x.FaasDocumentOperationValues||(x.FaasDocumentOperationValues={}));var IC;(function(e){e.AWS="aws",e.AZURE="azure",e.GCP="gcp"})(IC=x.FaasInvokedProviderValues||(x.FaasInvokedProviderValues={}));var CC;(function(e){e.IP_TCP="ip_tcp",e.IP_UDP="ip_udp",e.IP="ip",e.UNIX="unix",e.PIPE="pipe",e.INPROC="inproc",e.OTHER="other"})(CC=x.NetTransportValues||(x.NetTransportValues={}));var bC;(function(e){e.HTTP_1_0="1.0",e.HTTP_1_1="1.1",e.HTTP_2_0="2.0",e.SPDY="SPDY",e.QUIC="QUIC"})(bC=x.HttpFlavorValues||(x.HttpFlavorValues={}));var OC;(function(e){e.QUEUE="queue",e.TOPIC="topic"})(OC=x.MessagingDestinationKindValues||(x.MessagingDestinationKindValues={}));var PC;(function(e){e.RECEIVE="receive",e.PROCESS="process"})(PC=x.MessagingOperationValues||(x.MessagingOperationValues={}));var RC;(function(e){e[e.OK=0]="OK",e[e.CANCELLED=1]="CANCELLED",e[e.UNKNOWN=2]="UNKNOWN",e[e.INVALID_ARGUMENT=3]="INVALID_ARGUMENT",e[e.DEADLINE_EXCEEDED=4]="DEADLINE_EXCEEDED",e[e.NOT_FOUND=5]="NOT_FOUND",e[e.ALREADY_EXISTS=6]="ALREADY_EXISTS",e[e.PERMISSION_DENIED=7]="PERMISSION_DENIED",e[e.RESOURCE_EXHAUSTED=8]="RESOURCE_EXHAUSTED",e[e.FAILED_PRECONDITION=9]="FAILED_PRECONDITION",e[e.ABORTED=10]="ABORTED",e[e.OUT_OF_RANGE=11]="OUT_OF_RANGE",e[e.UNIMPLEMENTED=12]="UNIMPLEMENTED",e[e.INTERNAL=13]="INTERNAL",e[e.UNAVAILABLE=14]="UNAVAILABLE",e[e.DATA_LOSS=15]="DATA_LOSS",e[e.UNAUTHENTICATED=16]="UNAUTHENTICATED"})(RC=x.RpcGrpcStatusCodeValues||(x.RpcGrpcStatusCodeValues={}))});var Sh=l(Ir=>{"use strict";var NC=Ir&&Ir.__createBinding||(Object.create?function(e,t,r,n){n===void 0&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){n===void 0&&(n=r),e[n]=t[r]}),DC=Ir&&Ir.__exportStar||function(e,t){for(var r in e)r!=="default"&&!Object.prototype.hasOwnProperty.call(t,r)&&NC(t,e,r)};Object.defineProperty(Ir,"__esModule",{value:!0});DC(Ah(),Ir)});var Ih=l(ne=>{"use strict";Object.defineProperty(ne,"__esModule",{value:!0});ne.TelemetrySdkLanguageValues=ne.OsTypeValues=ne.HostArchValues=ne.AwsEcsLaunchtypeValues=ne.CloudPlatformValues=ne.CloudProviderValues=ne.ResourceAttributes=void 0;ne.ResourceAttributes={CLOUD_PROVIDER:"cloud.provider",CLOUD_ACCOUNT_ID:"cloud.account.id",CLOUD_REGION:"cloud.region",CLOUD_AVAILABILITY_ZONE:"cloud.availability_zone",CLOUD_PLATFORM:"cloud.platform",AWS_ECS_CONTAINER_ARN:"aws.ecs.container.arn",AWS_ECS_CLUSTER_ARN:"aws.ecs.cluster.arn",AWS_ECS_LAUNCHTYPE:"aws.ecs.launchtype",AWS_ECS_TASK_ARN:"aws.ecs.task.arn",AWS_ECS_TASK_FAMILY:"aws.ecs.task.family",AWS_ECS_TASK_REVISION:"aws.ecs.task.revision",AWS_EKS_CLUSTER_ARN:"aws.eks.cluster.arn",AWS_LOG_GROUP_NAMES:"aws.log.group.names",AWS_LOG_GROUP_ARNS:"aws.log.group.arns",AWS_LOG_STREAM_NAMES:"aws.log.stream.names",AWS_LOG_STREAM_ARNS:"aws.log.stream.arns",CONTAINER_NAME:"container.name",CONTAINER_ID:"container.id",CONTAINER_RUNTIME:"container.runtime",CONTAINER_IMAGE_NAME:"container.image.name",CONTAINER_IMAGE_TAG:"container.image.tag",DEPLOYMENT_ENVIRONMENT:"deployment.environment",DEVICE_ID:"device.id",DEVICE_MODEL_IDENTIFIER:"device.model.identifier",DEVICE_MODEL_NAME:"device.model.name",FAAS_NAME:"faas.name",FAAS_ID:"faas.id",FAAS_VERSION:"faas.version",FAAS_INSTANCE:"faas.instance",FAAS_MAX_MEMORY:"faas.max_memory",HOST_ID:"host.id",HOST_NAME:"host.name",HOST_TYPE:"host.type",HOST_ARCH:"host.arch",HOST_IMAGE_NAME:"host.image.name",HOST_IMAGE_ID:"host.image.id",HOST_IMAGE_VERSION:"host.image.version",K8S_CLUSTER_NAME:"k8s.cluster.name",K8S_NODE_NAME:"k8s.node.name",K8S_NODE_UID:"k8s.node.uid",K8S_NAMESPACE_NAME:"k8s.namespace.name",K8S_POD_UID:"k8s.pod.uid",K8S_POD_NAME:"k8s.pod.name",K8S_CONTAINER_NAME:"k8s.container.name",K8S_REPLICASET_UID:"k8s.replicaset.uid",K8S_REPLICASET_NAME:"k8s.replicaset.name",K8S_DEPLOYMENT_UID:"k8s.deployment.uid",K8S_DEPLOYMENT_NAME:"k8s.deployment.name",K8S_STATEFULSET_UID:"k8s.statefulset.uid",K8S_STATEFULSET_NAME:"k8s.statefulset.name",K8S_DAEMONSET_UID:"k8s.daemonset.uid",K8S_DAEMONSET_NAME:"k8s.daemonset.name",K8S_JOB_UID:"k8s.job.uid",K8S_JOB_NAME:"k8s.job.name",K8S_CRONJOB_UID:"k8s.cronjob.uid",K8S_CRONJOB_NAME:"k8s.cronjob.name",OS_TYPE:"os.type",OS_DESCRIPTION:"os.description",OS_NAME:"os.name",OS_VERSION:"os.version",PROCESS_PID:"process.pid",PROCESS_EXECUTABLE_NAME:"process.executable.name",PROCESS_EXECUTABLE_PATH:"process.executable.path",PROCESS_COMMAND:"process.command",PROCESS_COMMAND_LINE:"process.command_line",PROCESS_COMMAND_ARGS:"process.command_args",PROCESS_OWNER:"process.owner",PROCESS_RUNTIME_NAME:"process.runtime.name",PROCESS_RUNTIME_VERSION:"process.runtime.version",PROCESS_RUNTIME_DESCRIPTION:"process.runtime.description",SERVICE_NAME:"service.name",SERVICE_NAMESPACE:"service.namespace",SERVICE_INSTANCE_ID:"service.instance.id",SERVICE_VERSION:"service.version",TELEMETRY_SDK_NAME:"telemetry.sdk.name",TELEMETRY_SDK_LANGUAGE:"telemetry.sdk.language",TELEMETRY_SDK_VERSION:"telemetry.sdk.version",TELEMETRY_AUTO_VERSION:"telemetry.auto.version",WEBENGINE_NAME:"webengine.name",WEBENGINE_VERSION:"webengine.version",WEBENGINE_DESCRIPTION:"webengine.description"};var wC;(function(e){e.AWS="aws",e.AZURE="azure",e.GCP="gcp"})(wC=ne.CloudProviderValues||(ne.CloudProviderValues={}));var xC;(function(e){e.AWS_EC2="aws_ec2",e.AWS_ECS="aws_ecs",e.AWS_EKS="aws_eks",e.AWS_LAMBDA="aws_lambda",e.AWS_ELASTIC_BEANSTALK="aws_elastic_beanstalk",e.AZURE_VM="azure_vm",e.AZURE_CONTAINER_INSTANCES="azure_container_instances",e.AZURE_AKS="azure_aks",e.AZURE_FUNCTIONS="azure_functions",e.AZURE_APP_SERVICE="azure_app_service",e.GCP_COMPUTE_ENGINE="gcp_compute_engine",e.GCP_CLOUD_RUN="gcp_cloud_run",e.GCP_KUBERNETES_ENGINE="gcp_kubernetes_engine",e.GCP_CLOUD_FUNCTIONS="gcp_cloud_functions",e.GCP_APP_ENGINE="gcp_app_engine"})(xC=ne.CloudPlatformValues||(ne.CloudPlatformValues={}));var MC;(function(e){e.EC2="ec2",e.FARGATE="fargate"})(MC=ne.AwsEcsLaunchtypeValues||(ne.AwsEcsLaunchtypeValues={}));var LC;(function(e){e.AMD64="amd64",e.ARM32="arm32",e.ARM64="arm64",e.IA64="ia64",e.PPC32="ppc32",e.PPC64="ppc64",e.X86="x86"})(LC=ne.HostArchValues||(ne.HostArchValues={}));var qC;(function(e){e.WINDOWS="windows",e.LINUX="linux",e.DARWIN="darwin",e.FREEBSD="freebsd",e.NETBSD="netbsd",e.OPENBSD="openbsd",e.DRAGONFLYBSD="dragonflybsd",e.HPUX="hpux",e.AIX="aix",e.SOLARIS="solaris",e.Z_OS="z_os"})(qC=ne.OsTypeValues||(ne.OsTypeValues={}));var jC;(function(e){e.CPP="cpp",e.DOTNET="dotnet",e.ERLANG="erlang",e.GO="go",e.JAVA="java",e.NODEJS="nodejs",e.PHP="php",e.PYTHON="python",e.RUBY="ruby",e.WEBJS="webjs"})(jC=ne.TelemetrySdkLanguageValues||(ne.TelemetrySdkLanguageValues={}))});var Ch=l(Cr=>{"use strict";var kC=Cr&&Cr.__createBinding||(Object.create?function(e,t,r,n){n===void 0&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){n===void 0&&(n=r),e[n]=t[r]}),HC=Cr&&Cr.__exportStar||function(e,t){for(var r in e)r!=="default"&&!Object.prototype.hasOwnProperty.call(t,r)&&kC(t,e,r)};Object.defineProperty(Cr,"__esModule",{value:!0});HC(Ih(),Cr)});var In=l(Wt=>{"use strict";var UC=Wt&&Wt.__createBinding||(Object.create?function(e,t,r,n){n===void 0&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){n===void 0&&(n=r),e[n]=t[r]}),bh=Wt&&Wt.__exportStar||function(e,t){for(var r in e)r!=="default"&&!Object.prototype.hasOwnProperty.call(t,r)&&UC(t,e,r)};Object.defineProperty(Wt,"__esModule",{value:!0});bh(Sh(),Wt);bh(Ch(),Wt)});var Oh=l(As=>{"use strict";Object.defineProperty(As,"__esModule",{value:!0});As.SDK_INFO=void 0;var BC=Ts(),ki=In();As.SDK_INFO={[ki.ResourceAttributes.TELEMETRY_SDK_NAME]:"opentelemetry",[ki.ResourceAttributes.PROCESS_RUNTIME_NAME]:"node",[ki.ResourceAttributes.TELEMETRY_SDK_LANGUAGE]:ki.TelemetrySdkLanguageValues.NODEJS,[ki.ResourceAttributes.TELEMETRY_SDK_VERSION]:BC.VERSION}});var Ph=l(Ss=>{"use strict";Object.defineProperty(Ss,"__esModule",{value:!0});Ss.unrefTimer=void 0;function FC(e){e.unref()}Ss.unrefTimer=FC});var Rh=l(ze=>{"use strict";var GC=ze&&ze.__createBinding||(Object.create?function(e,t,r,n){n===void 0&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){n===void 0&&(n=r),e[n]=t[r]}),Cn=ze&&ze.__exportStar||function(e,t){for(var r in e)r!=="default"&&!Object.prototype.hasOwnProperty.call(t,r)&&GC(t,e,r)};Object.defineProperty(ze,"__esModule",{value:!0});Cn(vh(),ze);Cn(gh(),ze);Cn(yh(),ze);Cn(Th(),ze);Cn(Oh(),ze);Cn(Ph(),ze)});var hc=l(br=>{"use strict";var VC=br&&br.__createBinding||(Object.create?function(e,t,r,n){n===void 0&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){n===void 0&&(n=r),e[n]=t[r]}),$C=br&&br.__exportStar||function(e,t){for(var r in e)r!=="default"&&!Object.prototype.hasOwnProperty.call(t,r)&&VC(t,e,r)};Object.defineProperty(br,"__esModule",{value:!0});$C(Rh(),br)});var wh=l(le=>{"use strict";Object.defineProperty(le,"__esModule",{value:!0});le.isTimeInput=le.isTimeInputHrTime=le.hrTimeToMicroseconds=le.hrTimeToMilliseconds=le.hrTimeToNanoseconds=le.hrTimeToTimeStamp=le.hrTimeDuration=le.timeInputToHrTime=le.hrTime=void 0;var _c=hc(),vc=9,Hi=Math.pow(10,vc);function Is(e){let t=e/1e3,r=Math.trunc(t),n=Number((t-r).toFixed(vc))*Hi;return[r,n]}function Nh(){let e=_c.otperformance.timeOrigin;if(typeof e!="number"){let t=_c.otperformance;e=t.timing&&t.timing.fetchStart}return e}function Dh(e){let t=Is(Nh()),r=Is(typeof e=="number"?e:_c.otperformance.now()),n=t[0]+r[0],i=t[1]+r[1];return i>Hi&&(i-=Hi,n+=1),[n,i]}le.hrTime=Dh;function zC(e){if(gc(e))return e;if(typeof e=="number")return e<Nh()?Dh(e):Is(e);if(e instanceof Date)return Is(e.getTime());throw TypeError("Invalid input type")}le.timeInputToHrTime=zC;function XC(e,t){let r=t[0]-e[0],n=t[1]-e[1];return n<0&&(r-=1,n+=Hi),[r,n]}le.hrTimeDuration=XC;function KC(e){let t=vc,r=`${"0".repeat(t)}${e[1]}Z`,n=r.substr(r.length-t-1);return new Date(e[0]*1e3).toISOString().replace("000Z",n)}le.hrTimeToTimeStamp=KC;function YC(e){return e[0]*Hi+e[1]}le.hrTimeToNanoseconds=YC;function QC(e){return Math.round(e[0]*1e3+e[1]/1e6)}le.hrTimeToMilliseconds=QC;function WC(e){return Math.round(e[0]*1e6+e[1]/1e3)}le.hrTimeToMicroseconds=WC;function gc(e){return Array.isArray(e)&&e.length===2&&typeof e[0]=="number"&&typeof e[1]=="number"}le.isTimeInputHrTime=gc;function ZC(e){return gc(e)||typeof e=="number"||e instanceof Date}le.isTimeInput=ZC});var Mh=l(xh=>{"use strict";Object.defineProperty(xh,"__esModule",{value:!0})});var Lh=l(Ui=>{"use strict";Object.defineProperty(Ui,"__esModule",{value:!0});Ui.ExportResultCode=void 0;var JC;(function(e){e[e.SUCCESS=0]="SUCCESS",e[e.FAILED=1]="FAILED"})(JC=Ui.ExportResultCode||(Ui.ExportResultCode={}))});var jh=l(Cs=>{"use strict";Object.defineProperty(Cs,"__esModule",{value:!0});Cs.CompositePropagator=void 0;var qh=z(),Ec=class{constructor(t={}){var r;this._propagators=(r=t.propagators)!==null&&r!==void 0?r:[],this._fields=Array.from(new Set(this._propagators.map(n=>typeof n.fields=="function"?n.fields():[]).reduce((n,i)=>n.concat(i),[])))}inject(t,r,n){for(let i of this._propagators)try{i.inject(t,r,n)}catch(a){qh.diag.warn(`Failed to inject with ${i.constructor.name}. Err: ${a.message}`)}}extract(t,r,n){return this._propagators.reduce((i,a)=>{try{return a.extract(i,r,n)}catch(s){qh.diag.warn(`Failed to inject with ${a.constructor.name}. Err: ${s.message}`)}return i},t)}fields(){return this._fields.slice()}};Cs.CompositePropagator=Ec});var kh=l(bn=>{"use strict";Object.defineProperty(bn,"__esModule",{value:!0});bn.validateValue=bn.validateKey=void 0;var mc="[_0-9a-z-*/]",eb=`[a-z]${mc}{0,255}`,tb=`[a-z0-9]${mc}{0,240}@[a-z]${mc}{0,13}`,rb=new RegExp(`^(?:${eb}|${tb})$`),nb=/^[ -~]{0,255}[!-~]$/,ib=/,|=/;function ab(e){return rb.test(e)}bn.validateKey=ab;function sb(e){return nb.test(e)&&!ib.test(e)}bn.validateValue=sb});var yc=l(bs=>{"use strict";Object.defineProperty(bs,"__esModule",{value:!0});bs.TraceState=void 0;var Hh=kh(),Uh=32,ob=512,Bh=",",Fh="=",Bi=class{constructor(t){this._internalState=new Map,t&&this._parse(t)}set(t,r){let n=this._clone();return n._internalState.has(t)&&n._internalState.delete(t),n._internalState.set(t,r),n}unset(t){let r=this._clone();return r._internalState.delete(t),r}get(t){return this._internalState.get(t)}serialize(){return this._keys().reduce((t,r)=>(t.push(r+Fh+this.get(r)),t),[]).join(Bh)}_parse(t){t.length>ob||(this._internalState=t.split(Bh).reverse().reduce((r,n)=>{let i=n.trim(),a=i.indexOf(Fh);if(a!==-1){let s=i.slice(0,a),o=i.slice(a+1,n.length);Hh.validateKey(s)&&Hh.validateValue(o)&&r.set(s,o)}return r},new Map),this._internalState.size>Uh&&(this._internalState=new Map(Array.from(this._internalState.entries()).reverse().slice(0,Uh))))}_keys(){return Array.from(this._internalState.keys()).reverse()}_clone(){let t=new Bi;return t._internalState=new Map(this._internalState),t}};bs.TraceState=Bi});var Vh=l(Ce=>{"use strict";Object.defineProperty(Ce,"__esModule",{value:!0});Ce.HttpTraceContextPropagator=Ce.parseTraceParent=Ce.TRACE_STATE_HEADER=Ce.TRACE_PARENT_HEADER=void 0;var Os=z(),ub=ps(),cb=yc();Ce.TRACE_PARENT_HEADER="traceparent";Ce.TRACE_STATE_HEADER="tracestate";var lb="00",fb="(?!ff)[\\da-f]{2}",pb="(?![0]{32})[\\da-f]{32}",db="(?![0]{16})[\\da-f]{16}",hb="[\\da-f]{2}",_b=new RegExp(`^\\s?(${fb})-(${pb})-(${db})-(${hb})(-.*)?\\s?$`);function Gh(e){let t=_b.exec(e);return!t||t[1]==="00"&&t[5]?null:{traceId:t[2],spanId:t[3],traceFlags:parseInt(t[4],16)}}Ce.parseTraceParent=Gh;var Tc=class{inject(t,r,n){let i=Os.trace.getSpanContext(t);if(!i||ub.isTracingSuppressed(t)||!Os.isSpanContextValid(i))return;let a=`${lb}-${i.traceId}-${i.spanId}-0${Number(i.traceFlags||Os.TraceFlags.NONE).toString(16)}`;n.set(r,Ce.TRACE_PARENT_HEADER,a),i.traceState&&n.set(r,Ce.TRACE_STATE_HEADER,i.traceState.serialize())}extract(t,r,n){let i=n.get(r,Ce.TRACE_PARENT_HEADER);if(!i)return t;let a=Array.isArray(i)?i[0]:i;if(typeof a!="string")return t;let s=Gh(a);if(!s)return t;s.isRemote=!0;let o=n.get(r,Ce.TRACE_STATE_HEADER);if(o){let u=Array.isArray(o)?o.join(","):o;s.traceState=new cb.TraceState(typeof u=="string"?u:void 0)}return Os.trace.setSpanContext(t,s)}fields(){return[Ce.TRACE_PARENT_HEADER,Ce.TRACE_STATE_HEADER]}};Ce.HttpTraceContextPropagator=Tc});var zh=l($h=>{"use strict";Object.defineProperty($h,"__esModule",{value:!0})});var Xh=l(nt=>{"use strict";Object.defineProperty(nt,"__esModule",{value:!0});nt.getRPCMetadata=nt.deleteRPCMetadata=nt.setRPCMetadata=nt.RPCType=void 0;var vb=z(),Ac=vb.createContextKey("OpenTelemetry SDK Context Key RPC_METADATA"),gb;(function(e){e.HTTP="http"})(gb=nt.RPCType||(nt.RPCType={}));function Eb(e,t){return e.setValue(Ac,t)}nt.setRPCMetadata=Eb;function mb(e){return e.deleteValue(Ac)}nt.deleteRPCMetadata=mb;function yb(e){return e.getValue(Ac)}nt.getRPCMetadata=yb});var Ic=l(Ps=>{"use strict";Object.defineProperty(Ps,"__esModule",{value:!0});Ps.AlwaysOffSampler=void 0;var Tb=z(),Sc=class{shouldSample(){return{decision:Tb.SamplingDecision.NOT_RECORD}}toString(){return"AlwaysOffSampler"}};Ps.AlwaysOffSampler=Sc});var bc=l(Rs=>{"use strict";Object.defineProperty(Rs,"__esModule",{value:!0});Rs.AlwaysOnSampler=void 0;var Ab=z(),Cc=class{shouldSample(){return{decision:Ab.SamplingDecision.RECORD_AND_SAMPLED}}toString(){return"AlwaysOnSampler"}};Rs.AlwaysOnSampler=Cc});var Yh=l(Ds=>{"use strict";Object.defineProperty(Ds,"__esModule",{value:!0});Ds.ParentBasedSampler=void 0;var Ns=z(),Sb=lc(),Kh=Ic(),Oc=bc(),Pc=class{constructor(t){var r,n,i,a;this._root=t.root,this._root||(Sb.globalErrorHandler(new Error("ParentBasedSampler must have a root sampler configured")),this._root=new Oc.AlwaysOnSampler),this._remoteParentSampled=(r=t.remoteParentSampled)!==null&&r!==void 0?r:new Oc.AlwaysOnSampler,this._remoteParentNotSampled=(n=t.remoteParentNotSampled)!==null&&n!==void 0?n:new Kh.AlwaysOffSampler,this._localParentSampled=(i=t.localParentSampled)!==null&&i!==void 0?i:new Oc.AlwaysOnSampler,this._localParentNotSampled=(a=t.localParentNotSampled)!==null&&a!==void 0?a:new Kh.AlwaysOffSampler}shouldSample(t,r,n,i,a,s){let o=Ns.trace.getSpanContext(t);return!o||!Ns.isSpanContextValid(o)?this._root.shouldSample(t,r,n,i,a,s):o.isRemote?o.traceFlags&Ns.TraceFlags.SAMPLED?this._remoteParentSampled.shouldSample(t,r,n,i,a,s):this._remoteParentNotSampled.shouldSample(t,r,n,i,a,s):o.traceFlags&Ns.TraceFlags.SAMPLED?this._localParentSampled.shouldSample(t,r,n,i,a,s):this._localParentNotSampled.shouldSample(t,r,n,i,a,s)}toString(){return`ParentBased{root=${this._root.toString()}, remoteParentSampled=${this._remoteParentSampled.toString()}, remoteParentNotSampled=${this._remoteParentNotSampled.toString()}, localParentSampled=${this._localParentSampled.toString()}, localParentNotSampled=${this._localParentNotSampled.toString()}}`}};Ds.ParentBasedSampler=Pc});var Qh=l(ws=>{"use strict";Object.defineProperty(ws,"__esModule",{value:!0});ws.TraceIdRatioBasedSampler=void 0;var Rc=z(),Nc=class{constructor(t=0){this._ratio=t,this._ratio=this._normalize(t),this._upperBound=Math.floor(this._ratio*4294967295)}shouldSample(t,r){return{decision:Rc.isValidTraceId(r)&&this._accumulate(r)<this._upperBound?Rc.SamplingDecision.RECORD_AND_SAMPLED:Rc.SamplingDecision.NOT_RECORD}}toString(){return`TraceIdRatioBased{${this._ratio}}`}_normalize(t){return typeof t!="number"||isNaN(t)?0:t>=1?1:t<=0?0:t}_accumulate(t){let r=0;for(let n=0;n<t.length/8;n++){let i=n*8,a=parseInt(t.slice(i,i+8),16);r=(r^a)>>>0}return r}};ws.TraceIdRatioBasedSampler=Nc});var Zh=l(On=>{"use strict";Object.defineProperty(On,"__esModule",{value:!0});On.isUrlIgnored=On.urlMatches=void 0;function Wh(e,t){return typeof t=="string"?e===t:t.test(e)}On.urlMatches=Wh;function Ib(e,t){if(!t)return!1;for(let r of t)if(Wh(e,r))return!0;return!1}On.isUrlIgnored=Ib});var Jh=l(xs=>{"use strict";Object.defineProperty(xs,"__esModule",{value:!0});xs.isWrapped=void 0;function Cb(e){return typeof e=="function"&&typeof e.__original=="function"&&typeof e.__unwrap=="function"&&e.__wrapped===!0}xs.isWrapped=Cb});var Xe=l(M=>{"use strict";var bb=M&&M.__createBinding||(Object.create?function(e,t,r,n){n===void 0&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){n===void 0&&(n=r),e[n]=t[r]}),Y=M&&M.__exportStar||function(e,t){for(var r in e)r!=="default"&&!Object.prototype.hasOwnProperty.call(t,r)&&bb(t,e,r)};Object.defineProperty(M,"__esModule",{value:!0});M.baggageUtils=void 0;Y(lh(),M);Y(dh(),M);Y(lc(),M);Y(cc(),M);Y(wh(),M);Y(Mh(),M);Y(Lh(),M);Y(Ts(),M);M.baggageUtils=ac();Y(hc(),M);Y(jh(),M);Y(Vh(),M);Y(zh(),M);Y(Xh(),M);Y(Ic(),M);Y(bc(),M);Y(Yh(),M);Y(Qh(),M);Y(ps(),M);Y(yc(),M);Y(pc(),M);Y(fc(),M);Y(Zh(),M);Y(Jh(),M);Y(Ts(),M)});var e_=l(Ms=>{"use strict";Object.defineProperty(Ms,"__esModule",{value:!0});Ms.ExceptionEventName=void 0;Ms.ExceptionEventName="exception"});var wc=l(Ls=>{"use strict";Object.defineProperty(Ls,"__esModule",{value:!0});Ls.Span=void 0;var Zt=z(),ft=Xe(),Or=In(),Ob=e_(),Dc=class{constructor(t,r,n,i,a,s,o=[],u=ft.hrTime()){this.attributes={},this.links=[],this.events=[],this.status={code:Zt.SpanStatusCode.UNSET},this.endTime=[0,0],this._ended=!1,this._duration=[-1,-1],this.name=n,this._spanContext=i,this.parentSpanId=s,this.kind=a,this.links=o,this.startTime=ft.timeInputToHrTime(u),this.resource=t.resource,this.instrumentationLibrary=t.instrumentationLibrary,this._spanLimits=t.getSpanLimits(),this._spanProcessor=t.getActiveSpanProcessor(),this._spanProcessor.onStart(this,r)}spanContext(){return this._spanContext}setAttribute(t,r){return r==null||this._isSpanEnded()?this:t.length===0?(Zt.diag.warn(`Invalid attribute key: ${t}`),this):ft.isAttributeValue(r)?Object.keys(this.attributes).length>=this._spanLimits.attributeCountLimit&&!Object.prototype.hasOwnProperty.call(this.attributes,t)?this:(this.attributes[t]=r,this):(Zt.diag.warn(`Invalid attribute value set for key: ${t}`),this)}setAttributes(t){for(let[r,n]of Object.entries(t))this.setAttribute(r,n);return this}addEvent(t,r,n){return this._isSpanEnded()?this:(this.events.length>=this._spanLimits.eventCountLimit&&(Zt.diag.warn("Dropping extra events."),this.events.shift()),ft.isTimeInput(r)&&(typeof n>"u"&&(n=r),r=void 0),typeof n>"u"&&(n=ft.hrTime()),this.events.push({name:t,attributes:r,time:ft.timeInputToHrTime(n)}),this)}setStatus(t){return this._isSpanEnded()?this:(this.status=t,this)}updateName(t){return this._isSpanEnded()?this:(this.name=t,this)}end(t=ft.hrTime()){if(this._isSpanEnded()){Zt.diag.error("You can only call end() on a span once.");return}this._ended=!0,this.endTime=ft.timeInputToHrTime(t),this._duration=ft.hrTimeDuration(this.startTime,this.endTime),this._duration[0]<0&&Zt.diag.warn("Inconsistent start and end time, startTime > endTime",this.startTime,this.endTime),this._spanProcessor.onEnd(this)}isRecording(){return this._ended===!1}recordException(t,r=ft.hrTime()){let n={};typeof t=="string"?n[Or.SemanticAttributes.EXCEPTION_MESSAGE]=t:t&&(t.code?n[Or.SemanticAttributes.EXCEPTION_TYPE]=t.code.toString():t.name&&(n[Or.SemanticAttributes.EXCEPTION_TYPE]=t.name),t.message&&(n[Or.SemanticAttributes.EXCEPTION_MESSAGE]=t.message),t.stack&&(n[Or.SemanticAttributes.EXCEPTION_STACKTRACE]=t.stack)),n[Or.SemanticAttributes.EXCEPTION_TYPE]||n[Or.SemanticAttributes.EXCEPTION_MESSAGE]?this.addEvent(Ob.ExceptionEventName,n,r):Zt.diag.warn(`Failed to record an exception ${t}`)}get duration(){return this._duration}get ended(){return this._ended}_isSpanEnded(){return this._ended&&Zt.diag.warn("Can not execute the operation on ended Span {traceId: %s, spanId: %s}",this._spanContext.traceId,this._spanContext.spanId),this._ended}};Ls.Span=Dc});var xc=l(Rn=>{"use strict";Object.defineProperty(Rn,"__esModule",{value:!0});Rn.buildSamplerFromEnv=Rn.DEFAULT_CONFIG=void 0;var qs=z(),ie=Xe(),Pb=ie.getEnv(),Rb=ie.TracesSamplerValues.AlwaysOn;Rn.DEFAULT_CONFIG={sampler:r_(Pb),forceFlushTimeoutMillis:3e4,spanLimits:{attributeCountLimit:ie.getEnv().OTEL_SPAN_ATTRIBUTE_COUNT_LIMIT,linkCountLimit:ie.getEnv().OTEL_SPAN_LINK_COUNT_LIMIT,eventCountLimit:ie.getEnv().OTEL_SPAN_EVENT_COUNT_LIMIT}};function r_(e=ie.getEnv()){switch(e.OTEL_TRACES_SAMPLER){case ie.TracesSamplerValues.AlwaysOn:return new ie.AlwaysOnSampler;case ie.TracesSamplerValues.AlwaysOff:return new ie.AlwaysOffSampler;case ie.TracesSamplerValues.ParentBasedAlwaysOn:return new ie.ParentBasedSampler({root:new ie.AlwaysOnSampler});case ie.TracesSamplerValues.ParentBasedAlwaysOff:return new ie.ParentBasedSampler({root:new ie.AlwaysOffSampler});case ie.TracesSamplerValues.TraceIdRatio:return new ie.TraceIdRatioBasedSampler(t_(e));case ie.TracesSamplerValues.ParentBasedTraceIdRatio:return new ie.ParentBasedSampler({root:new ie.TraceIdRatioBasedSampler(t_(e))});default:return qs.diag.error(`OTEL_TRACES_SAMPLER value "${e.OTEL_TRACES_SAMPLER} invalid, defaulting to ${Rb}".`),new ie.AlwaysOnSampler}}Rn.buildSamplerFromEnv=r_;var Pn=1;function t_(e){if(e.OTEL_TRACES_SAMPLER_ARG===void 0||e.OTEL_TRACES_SAMPLER_ARG==="")return qs.diag.error(`OTEL_TRACES_SAMPLER_ARG is blank, defaulting to ${Pn}.`),Pn;let t=Number(e.OTEL_TRACES_SAMPLER_ARG);return isNaN(t)?(qs.diag.error(`OTEL_TRACES_SAMPLER_ARG=${e.OTEL_TRACES_SAMPLER_ARG} was given, but it is invalid, defaulting to ${Pn}.`),Pn):t<0||t>1?(qs.diag.error(`OTEL_TRACES_SAMPLER_ARG=${e.OTEL_TRACES_SAMPLER_ARG} was given, but it is out of range ([0..1]), defaulting to ${Pn}.`),Pn):t}});var n_=l(js=>{"use strict";Object.defineProperty(js,"__esModule",{value:!0});js.mergeConfig=void 0;var Mc=xc();function Nb(e){let t={sampler:Mc.buildSamplerFromEnv()},r=Object.assign({},Mc.DEFAULT_CONFIG,t,e);return r.spanLimits=Object.assign({},Mc.DEFAULT_CONFIG.spanLimits,e.spanLimits||{}),r}js.mergeConfig=Nb});var i_=l(ks=>{"use strict";Object.defineProperty(ks,"__esModule",{value:!0});ks.Tracer=void 0;var ve=z(),Lc=Xe(),Db=wc(),wb=n_(),qc=class{constructor(t,r,n){this._tracerProvider=n;let i=wb.mergeConfig(r);this._sampler=i.sampler,this._spanLimits=i.spanLimits,this._idGenerator=r.idGenerator||new Lc.RandomIdGenerator,this.resource=n.resource,this.instrumentationLibrary=t}startSpan(t,r={},n=ve.context.active()){var i,a;if(Lc.isTracingSuppressed(n))return ve.diag.debug("Instrumentation suppressed, returning Noop Span"),ve.trace.wrapSpanContext(ve.INVALID_SPAN_CONTEXT);let s=xb(r,n),o=this._idGenerator.generateSpanId(),u,c,f;!s||!ve.trace.isSpanContextValid(s)?u=this._idGenerator.generateTraceId():(u=s.traceId,c=s.traceState,f=s.spanId);let p=(i=r.kind)!==null&&i!==void 0?i:ve.SpanKind.INTERNAL,d=(a=r.links)!==null&&a!==void 0?a:[],h=Lc.sanitizeAttributes(r.attributes),E=this._sampler.shouldSample(r.root?ve.trace.setSpanContext(n,ve.INVALID_SPAN_CONTEXT):n,u,t,p,h,d),A=E.decision===ve.SamplingDecision.RECORD_AND_SAMPLED?ve.TraceFlags.SAMPLED:ve.TraceFlags.NONE,j={traceId:u,spanId:o,traceFlags:A,traceState:c};if(E.decision===ve.SamplingDecision.NOT_RECORD)return ve.diag.debug("Recording is off, propagating context in a non-recording span"),ve.trace.wrapSpanContext(j);let se=new Db.Span(this,n,t,j,p,f,d,r.startTime);return se.setAttributes(Object.assign(h,E.attributes)),se}startActiveSpan(t,r,n,i){let a,s,o;if(arguments.length<2)return;arguments.length===2?o=r:arguments.length===3?(a=r,o=n):(a=r,s=n,o=i);let u=s??ve.context.active(),c=this.startSpan(t,a,u),f=ve.trace.setSpan(u,c);return ve.context.with(f,o,void 0,c)}getSpanLimits(){return this._spanLimits}getActiveSpanProcessor(){return this._tracerProvider.getActiveSpanProcessor()}};ks.Tracer=qc;function xb(e,t){if(!e.root)return ve.trace.getSpanContext(t)}});var a_=l(Hs=>{"use strict";Object.defineProperty(Hs,"__esModule",{value:!0});Hs.defaultServiceName=void 0;function Mb(){return`unknown_service:${process.argv0}`}Hs.defaultServiceName=Mb});var o_=l(Us=>{"use strict";Object.defineProperty(Us,"__esModule",{value:!0});Us.detectResources=void 0;var s_=kc(),jc=z(),Lb=__webpack_require__(73837),qb=async(e={})=>{let t=Object.assign(e),r=await Promise.all((t.detectors||[]).map(async n=>{try{let i=await n.detect(t);return jc.diag.debug(`${n.constructor.name} found resource.`,i),i}catch(i){return jc.diag.debug(`${n.constructor.name} failed: ${i.message}`),s_.Resource.empty()}}));return jb(r),r.reduce((n,i)=>n.merge(i),s_.Resource.empty())};Us.detectResources=qb;var jb=e=>{e.forEach(t=>{if(Object.keys(t.attributes).length>0){let r=Lb.inspect(t.attributes,{depth:2,breakLength:1/0,sorted:!0,compact:!1});jc.diag.verbose(r)}})}});var u_=l(Bs=>{"use strict";Object.defineProperty(Bs,"__esModule",{value:!0});Bs.envDetector=void 0;var kb=z(),Hb=Xe(),Ub=In(),Bb=Fs(),Hc=class{constructor(){this._MAX_LENGTH=255,this._COMMA_SEPARATOR=",",this._LABEL_KEY_VALUE_SPLITTER="=",this._ERROR_MESSAGE_INVALID_CHARS="should be a ASCII string with a length greater than 0 and not exceed "+this._MAX_LENGTH+" characters.",this._ERROR_MESSAGE_INVALID_VALUE="should be a ASCII string with a length not exceed "+this._MAX_LENGTH+" characters."}async detect(t){let r={},n=Hb.getEnv(),i=n.OTEL_RESOURCE_ATTRIBUTES,a=n.OTEL_SERVICE_NAME;if(i)try{let s=this._parseResourceAttributes(i);Object.assign(r,s)}catch(s){kb.diag.debug(`EnvDetector failed: ${s.message}`)}return a&&(r[Ub.ResourceAttributes.SERVICE_NAME]=a),new Bb.Resource(r)}_parseResourceAttributes(t){if(!t)return{};let r={},n=t.split(this._COMMA_SEPARATOR,-1);for(let i of n){let a=i.split(this._LABEL_KEY_VALUE_SPLITTER,-1);if(a.length!==2)continue;let[s,o]=a;if(s=s.trim(),o=o.trim().split('^"|"$').join(""),!this._isValidAndNotEmpty(s))throw new Error(`Attribute key ${this._ERROR_MESSAGE_INVALID_CHARS}`);if(!this._isValid(o))throw new Error(`Attribute value ${this._ERROR_MESSAGE_INVALID_VALUE}`);r[s]=o}return r}_isValid(t){return t.length<=this._MAX_LENGTH&&this._isPrintableString(t)}_isPrintableString(t){for(let r=0;r<t.length;r++){let n=t.charAt(r);if(n<=" "||n>="~")return!1}return!0}_isValidAndNotEmpty(t){return t.length>0&&this._isValid(t)}};Bs.envDetector=new Hc});var l_=l(Gs=>{"use strict";Object.defineProperty(Gs,"__esModule",{value:!0});Gs.processDetector=void 0;var Fb=z(),Jt=In(),c_=Fs(),Uc=class{async detect(t){let r={[Jt.ResourceAttributes.PROCESS_PID]:process.pid,[Jt.ResourceAttributes.PROCESS_EXECUTABLE_NAME]:process.title||"",[Jt.ResourceAttributes.PROCESS_COMMAND]:process.argv[1]||"",[Jt.ResourceAttributes.PROCESS_COMMAND_LINE]:process.argv.join(" ")||""};return this._getResourceAttributes(r,t)}_getResourceAttributes(t,r){return t[Jt.ResourceAttributes.PROCESS_EXECUTABLE_NAME]===""||t[Jt.ResourceAttributes.PROCESS_EXECUTABLE_PATH]===""||t[Jt.ResourceAttributes.PROCESS_COMMAND]===""||t[Jt.ResourceAttributes.PROCESS_COMMAND_LINE]===""?(Fb.diag.debug("ProcessDetector failed: Unable to find required process resources. "),c_.Resource.empty()):new c_.Resource(Object.assign({},t))}};Gs.processDetector=new Uc});var p_=l(er=>{"use strict";var Gb=er&&er.__createBinding||(Object.create?function(e,t,r,n){n===void 0&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){n===void 0&&(n=r),e[n]=t[r]}),f_=er&&er.__exportStar||function(e,t){for(var r in e)r!=="default"&&!Object.prototype.hasOwnProperty.call(t,r)&&Gb(t,e,r)};Object.defineProperty(er,"__esModule",{value:!0});f_(u_(),er);f_(l_(),er)});var d_=l(bt=>{"use strict";var Vb=bt&&bt.__createBinding||(Object.create?function(e,t,r,n){n===void 0&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){n===void 0&&(n=r),e[n]=t[r]}),Bc=bt&&bt.__exportStar||function(e,t){for(var r in e)r!=="default"&&!Object.prototype.hasOwnProperty.call(t,r)&&Vb(t,e,r)};Object.defineProperty(bt,"__esModule",{value:!0});Bc(a_(),bt);Bc(o_(),bt);Bc(p_(),bt)});var Fc=l(Pr=>{"use strict";var $b=Pr&&Pr.__createBinding||(Object.create?function(e,t,r,n){n===void 0&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){n===void 0&&(n=r),e[n]=t[r]}),zb=Pr&&Pr.__exportStar||function(e,t){for(var r in e)r!=="default"&&!Object.prototype.hasOwnProperty.call(t,r)&&$b(t,e,r)};Object.defineProperty(Pr,"__esModule",{value:!0});zb(d_(),Pr)});var kc=l(Vs=>{"use strict";Object.defineProperty(Vs,"__esModule",{value:!0});Vs.Resource=void 0;var Rr=In(),Gc=Xe(),Xb=Fc(),Ot=class{constructor(t){this.attributes=t}static empty(){return Ot.EMPTY}static default(){return new Ot({[Rr.ResourceAttributes.SERVICE_NAME]:Xb.defaultServiceName(),[Rr.ResourceAttributes.TELEMETRY_SDK_LANGUAGE]:Gc.SDK_INFO[Rr.ResourceAttributes.TELEMETRY_SDK_LANGUAGE],[Rr.ResourceAttributes.TELEMETRY_SDK_NAME]:Gc.SDK_INFO[Rr.ResourceAttributes.TELEMETRY_SDK_NAME],[Rr.ResourceAttributes.TELEMETRY_SDK_VERSION]:Gc.SDK_INFO[Rr.ResourceAttributes.TELEMETRY_SDK_VERSION]})}merge(t){if(!t||!Object.keys(t.attributes).length)return this;let r=Object.assign({},this.attributes,t.attributes);return new Ot(r)}};Vs.Resource=Ot;Ot.EMPTY=new Ot({})});var __=l(h_=>{"use strict";Object.defineProperty(h_,"__esModule",{value:!0})});var g_=l(v_=>{"use strict";Object.defineProperty(v_,"__esModule",{value:!0})});var Fs=l(pt=>{"use strict";var Kb=pt&&pt.__createBinding||(Object.create?function(e,t,r,n){n===void 0&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){n===void 0&&(n=r),e[n]=t[r]}),$s=pt&&pt.__exportStar||function(e,t){for(var r in e)r!=="default"&&!Object.prototype.hasOwnProperty.call(t,r)&&Kb(t,e,r)};Object.defineProperty(pt,"__esModule",{value:!0});$s(kc(),pt);$s(Fc(),pt);$s(__(),pt);$s(g_(),pt)});var E_=l(zs=>{"use strict";Object.defineProperty(zs,"__esModule",{value:!0});zs.MultiSpanProcessor=void 0;var Yb=Xe(),Vc=class{constructor(t){this._spanProcessors=t}forceFlush(){let t=[];for(let r of this._spanProcessors)t.push(r.forceFlush());return new Promise(r=>{Promise.all(t).then(()=>{r()}).catch(n=>{Yb.globalErrorHandler(n||new Error("MultiSpanProcessor: forceFlush failed")),r()})})}onStart(t,r){for(let n of this._spanProcessors)n.onStart(t,r)}onEnd(t){for(let r of this._spanProcessors)r.onEnd(t)}shutdown(){let t=[];for(let r of this._spanProcessors)t.push(r.shutdown());return new Promise((r,n)=>{Promise.all(t).then(()=>{r()},n)})}};zs.MultiSpanProcessor=Vc});var zc=l(Xs=>{"use strict";Object.defineProperty(Xs,"__esModule",{value:!0});Xs.NoopSpanProcessor=void 0;var $c=class{onStart(t,r){}onEnd(t){}shutdown(){return Promise.resolve()}forceFlush(){return Promise.resolve()}};Xs.NoopSpanProcessor=$c});var X_=l((Fi,Nn)=>{var Qb=200,P_="__lodash_hash_undefined__",Wb=800,Zb=16,R_=9007199254740991,N_="[object Arguments]",Jb="[object Array]",eO="[object AsyncFunction]",tO="[object Boolean]",rO="[object Date]",nO="[object Error]",D_="[object Function]",iO="[object GeneratorFunction]",aO="[object Map]",sO="[object Number]",oO="[object Null]",w_="[object Object]",uO="[object Proxy]",cO="[object RegExp]",lO="[object Set]",fO="[object String]",pO="[object Undefined]",dO="[object WeakMap]",hO="[object ArrayBuffer]",_O="[object DataView]",vO="[object Float32Array]",gO="[object Float64Array]",EO="[object Int8Array]",mO="[object Int16Array]",yO="[object Int32Array]",TO="[object Uint8Array]",AO="[object Uint8ClampedArray]",SO="[object Uint16Array]",IO="[object Uint32Array]",CO=/[\\^$.*+?()[\]{}|]/g,bO=/^\[object .+?Constructor\]$/,OO=/^(?:0|[1-9]\d*)$/,X={};X[vO]=X[gO]=X[EO]=X[mO]=X[yO]=X[TO]=X[AO]=X[SO]=X[IO]=!0;X[N_]=X[Jb]=X[hO]=X[tO]=X[_O]=X[rO]=X[nO]=X[D_]=X[aO]=X[sO]=X[w_]=X[cO]=X[lO]=X[fO]=X[dO]=!1;var x_=typeof global=="object"&&global&&global.Object===Object&&global,PO=typeof self=="object"&&self&&self.Object===Object&&self,$i=x_||PO||Function("return this")(),M_=typeof Fi=="object"&&Fi&&!Fi.nodeType&&Fi,Gi=M_&&typeof Nn=="object"&&Nn&&!Nn.nodeType&&Nn,L_=Gi&&Gi.exports===M_,Xc=L_&&x_.process,m_=function(){try{var e=Gi&&Gi.require&&Gi.require("util").types;return e||Xc&&Xc.binding&&Xc.binding("util")}catch{}}(),y_=m_&&m_.isTypedArray;function RO(e,t,r){switch(r.length){case 0:return e.call(t);case 1:return e.call(t,r[0]);case 2:return e.call(t,r[0],r[1]);case 3:return e.call(t,r[0],r[1],r[2])}return e.apply(t,r)}function NO(e,t){for(var r=-1,n=Array(e);++r<e;)n[r]=t(r);return n}function DO(e){return function(t){return e(t)}}function wO(e,t){return e==null?void 0:e[t]}function xO(e,t){return function(r){return e(t(r))}}var MO=Array.prototype,LO=Function.prototype,Qs=Object.prototype,Kc=$i["__core-js_shared__"],Ws=LO.toString,Pt=Qs.hasOwnProperty,T_=function(){var e=/[^.]+$/.exec(Kc&&Kc.keys&&Kc.keys.IE_PROTO||"");return e?"Symbol(src)_1."+e:""}(),q_=Qs.toString,qO=Ws.call(Object),jO=RegExp("^"+Ws.call(Pt).replace(CO,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),Ks=L_?$i.Buffer:void 0,A_=$i.Symbol,S_=$i.Uint8Array,I_=Ks?Ks.allocUnsafe:void 0,j_=xO(Object.getPrototypeOf,Object),C_=Object.create,kO=Qs.propertyIsEnumerable,HO=MO.splice,Nr=A_?A_.toStringTag:void 0,Ys=function(){try{var e=el(Object,"defineProperty");return e({},"",{}),e}catch{}}(),UO=Ks?Ks.isBuffer:void 0,b_=Math.max,BO=Date.now,k_=el($i,"Map"),Vi=el(Object,"create"),FO=function(){function e(){}return function(t){if(!wr(t))return{};if(C_)return C_(t);e.prototype=t;var r=new e;return e.prototype=void 0,r}}();function Dr(e){var t=-1,r=e==null?0:e.length;for(this.clear();++t<r;){var n=e[t];this.set(n[0],n[1])}}function GO(){this.__data__=Vi?Vi(null):{},this.size=0}function VO(e){var t=this.has(e)&&delete this.__data__[e];return this.size-=t?1:0,t}function $O(e){var t=this.__data__;if(Vi){var r=t[e];return r===P_?void 0:r}return Pt.call(t,e)?t[e]:void 0}function zO(e){var t=this.__data__;return Vi?t[e]!==void 0:Pt.call(t,e)}function XO(e,t){var r=this.__data__;return this.size+=this.has(e)?0:1,r[e]=Vi&&t===void 0?P_:t,this}Dr.prototype.clear=GO;Dr.prototype.delete=VO;Dr.prototype.get=$O;Dr.prototype.has=zO;Dr.prototype.set=XO;function Rt(e){var t=-1,r=e==null?0:e.length;for(this.clear();++t<r;){var n=e[t];this.set(n[0],n[1])}}function KO(){this.__data__=[],this.size=0}function YO(e){var t=this.__data__,r=Zs(t,e);if(r<0)return!1;var n=t.length-1;return r==n?t.pop():HO.call(t,r,1),--this.size,!0}function QO(e){var t=this.__data__,r=Zs(t,e);return r<0?void 0:t[r][1]}function WO(e){return Zs(this.__data__,e)>-1}function ZO(e,t){var r=this.__data__,n=Zs(r,e);return n<0?(++this.size,r.push([e,t])):r[n][1]=t,this}Rt.prototype.clear=KO;Rt.prototype.delete=YO;Rt.prototype.get=QO;Rt.prototype.has=WO;Rt.prototype.set=ZO;function Dn(e){var t=-1,r=e==null?0:e.length;for(this.clear();++t<r;){var n=e[t];this.set(n[0],n[1])}}function JO(){this.size=0,this.__data__={hash:new Dr,map:new(k_||Rt),string:new Dr}}function e0(e){var t=eo(this,e).delete(e);return this.size-=t?1:0,t}function t0(e){return eo(this,e).get(e)}function r0(e){return eo(this,e).has(e)}function n0(e,t){var r=eo(this,e),n=r.size;return r.set(e,t),this.size+=r.size==n?0:1,this}Dn.prototype.clear=JO;Dn.prototype.delete=e0;Dn.prototype.get=t0;Dn.prototype.has=r0;Dn.prototype.set=n0;function wn(e){var t=this.__data__=new Rt(e);this.size=t.size}function i0(){this.__data__=new Rt,this.size=0}function a0(e){var t=this.__data__,r=t.delete(e);return this.size=t.size,r}function s0(e){return this.__data__.get(e)}function o0(e){return this.__data__.has(e)}function u0(e,t){var r=this.__data__;if(r instanceof Rt){var n=r.__data__;if(!k_||n.length<Qb-1)return n.push([e,t]),this.size=++r.size,this;r=this.__data__=new Dn(n)}return r.set(e,t),this.size=r.size,this}wn.prototype.clear=i0;wn.prototype.delete=a0;wn.prototype.get=s0;wn.prototype.has=o0;wn.prototype.set=u0;function c0(e,t){var r=Zc(e),n=!r&&Wc(e),i=!r&&!n&&F_(e),a=!r&&!n&&!i&&V_(e),s=r||n||i||a,o=s?NO(e.length,String):[],u=o.length;for(var c in e)(t||Pt.call(e,c))&&!(s&&(c=="length"||i&&(c=="offset"||c=="parent")||a&&(c=="buffer"||c=="byteLength"||c=="byteOffset")||U_(c,u)))&&o.push(c);return o}function Yc(e,t,r){(r!==void 0&&!to(e[t],r)||r===void 0&&!(t in e))&&Jc(e,t,r)}function l0(e,t,r){var n=e[t];(!(Pt.call(e,t)&&to(n,r))||r===void 0&&!(t in e))&&Jc(e,t,r)}function Zs(e,t){for(var r=e.length;r--;)if(to(e[r][0],t))return r;return-1}function Jc(e,t,r){t=="__proto__"&&Ys?Ys(e,t,{configurable:!0,enumerable:!0,value:r,writable:!0}):e[t]=r}var f0=I0();function Js(e){return e==null?e===void 0?pO:oO:Nr&&Nr in Object(e)?C0(e):D0(e)}function O_(e){return zi(e)&&Js(e)==N_}function p0(e){if(!wr(e)||R0(e))return!1;var t=rl(e)?jO:bO;return t.test(L0(e))}function d0(e){return zi(e)&&G_(e.length)&&!!X[Js(e)]}function h0(e){if(!wr(e))return N0(e);var t=B_(e),r=[];for(var n in e)n=="constructor"&&(t||!Pt.call(e,n))||r.push(n);return r}function H_(e,t,r,n,i){e!==t&&f0(t,function(a,s){if(i||(i=new wn),wr(a))_0(e,t,s,r,H_,n,i);else{var o=n?n(Qc(e,s),a,s+"",e,t,i):void 0;o===void 0&&(o=a),Yc(e,s,o)}},$_)}function _0(e,t,r,n,i,a,s){var o=Qc(e,r),u=Qc(t,r),c=s.get(u);if(c){Yc(e,r,c);return}var f=a?a(o,u,r+"",e,t,s):void 0,p=f===void 0;if(p){var d=Zc(u),h=!d&&F_(u),E=!d&&!h&&V_(u);f=u,d||h||E?Zc(o)?f=o:q0(o)?f=T0(o):h?(p=!1,f=E0(u,!0)):E?(p=!1,f=y0(u,!0)):f=[]:j0(u)||Wc(u)?(f=o,Wc(o)?f=k0(o):(!wr(o)||rl(o))&&(f=b0(u))):p=!1}p&&(s.set(u,f),i(f,u,n,a,s),s.delete(u)),Yc(e,r,f)}function v0(e,t){return x0(w0(e,t,z_),e+"")}var g0=Ys?function(e,t){return Ys(e,"toString",{configurable:!0,enumerable:!1,value:U0(t),writable:!0})}:z_;function E0(e,t){if(t)return e.slice();var r=e.length,n=I_?I_(r):new e.constructor(r);return e.copy(n),n}function m0(e){var t=new e.constructor(e.byteLength);return new S_(t).set(new S_(e)),t}function y0(e,t){var r=t?m0(e.buffer):e.buffer;return new e.constructor(r,e.byteOffset,e.length)}function T0(e,t){var r=-1,n=e.length;for(t||(t=Array(n));++r<n;)t[r]=e[r];return t}function A0(e,t,r,n){var i=!r;r||(r={});for(var a=-1,s=t.length;++a<s;){var o=t[a],u=n?n(r[o],e[o],o,r,e):void 0;u===void 0&&(u=e[o]),i?Jc(r,o,u):l0(r,o,u)}return r}function S0(e){return v0(function(t,r){var n=-1,i=r.length,a=i>1?r[i-1]:void 0,s=i>2?r[2]:void 0;for(a=e.length>3&&typeof a=="function"?(i--,a):void 0,s&&O0(r[0],r[1],s)&&(a=i<3?void 0:a,i=1),t=Object(t);++n<i;){var o=r[n];o&&e(t,o,n,a)}return t})}function I0(e){return function(t,r,n){for(var i=-1,a=Object(t),s=n(t),o=s.length;o--;){var u=s[e?o:++i];if(r(a[u],u,a)===!1)break}return t}}function eo(e,t){var r=e.__data__;return P0(t)?r[typeof t=="string"?"string":"hash"]:r.map}function el(e,t){var r=wO(e,t);return p0(r)?r:void 0}function C0(e){var t=Pt.call(e,Nr),r=e[Nr];try{e[Nr]=void 0;var n=!0}catch{}var i=q_.call(e);return n&&(t?e[Nr]=r:delete e[Nr]),i}function b0(e){return typeof e.constructor=="function"&&!B_(e)?FO(j_(e)):{}}function U_(e,t){var r=typeof e;return t=t??R_,!!t&&(r=="number"||r!="symbol"&&OO.test(e))&&e>-1&&e%1==0&&e<t}function O0(e,t,r){if(!wr(r))return!1;var n=typeof t;return(n=="number"?tl(r)&&U_(t,r.length):n=="string"&&t in r)?to(r[t],e):!1}function P0(e){var t=typeof e;return t=="string"||t=="number"||t=="symbol"||t=="boolean"?e!=="__proto__":e===null}function R0(e){return!!T_&&T_ in e}function B_(e){var t=e&&e.constructor,r=typeof t=="function"&&t.prototype||Qs;return e===r}function N0(e){var t=[];if(e!=null)for(var r in Object(e))t.push(r);return t}function D0(e){return q_.call(e)}function w0(e,t,r){return t=b_(t===void 0?e.length-1:t,0),function(){for(var n=arguments,i=-1,a=b_(n.length-t,0),s=Array(a);++i<a;)s[i]=n[t+i];i=-1;for(var o=Array(t+1);++i<t;)o[i]=n[i];return o[t]=r(s),RO(e,this,o)}}function Qc(e,t){if(!(t==="constructor"&&typeof e[t]=="function")&&t!="__proto__")return e[t]}var x0=M0(g0);function M0(e){var t=0,r=0;return function(){var n=BO(),i=Zb-(n-r);if(r=n,i>0){if(++t>=Wb)return arguments[0]}else t=0;return e.apply(void 0,arguments)}}function L0(e){if(e!=null){try{return Ws.call(e)}catch{}try{return e+""}catch{}}return""}function to(e,t){return e===t||e!==e&&t!==t}var Wc=O_(function(){return arguments}())?O_:function(e){return zi(e)&&Pt.call(e,"callee")&&!kO.call(e,"callee")},Zc=Array.isArray;function tl(e){return e!=null&&G_(e.length)&&!rl(e)}function q0(e){return zi(e)&&tl(e)}var F_=UO||B0;function rl(e){if(!wr(e))return!1;var t=Js(e);return t==D_||t==iO||t==eO||t==uO}function G_(e){return typeof e=="number"&&e>-1&&e%1==0&&e<=R_}function wr(e){var t=typeof e;return e!=null&&(t=="object"||t=="function")}function zi(e){return e!=null&&typeof e=="object"}function j0(e){if(!zi(e)||Js(e)!=w_)return!1;var t=j_(e);if(t===null)return!0;var r=Pt.call(t,"constructor")&&t.constructor;return typeof r=="function"&&r instanceof r&&Ws.call(r)==qO}var V_=y_?DO(y_):d0;function k0(e){return A0(e,$_(e))}function $_(e){return tl(e)?c0(e,!0):h0(e)}var H0=S0(function(e,t,r){H_(e,t,r)});function U0(e){return function(){return e}}function z_(e){return e}function B0(){return!1}Nn.exports=H0});var Y_=l(ro=>{"use strict";Object.defineProperty(ro,"__esModule",{value:!0});ro.BatchSpanProcessorBase=void 0;var K_=z(),Xi=Xe(),nl=class{constructor(t,r){this._exporter=t,this._finishedSpans=[],this._isShutdown=!1,this._shuttingDownPromise=Promise.resolve();let n=Xi.getEnv();this._maxExportBatchSize=typeof(r==null?void 0:r.maxExportBatchSize)=="number"?r.maxExportBatchSize:n.OTEL_BSP_MAX_EXPORT_BATCH_SIZE,this._maxQueueSize=typeof(r==null?void 0:r.maxQueueSize)=="number"?r.maxQueueSize:n.OTEL_BSP_MAX_QUEUE_SIZE,this._scheduledDelayMillis=typeof(r==null?void 0:r.scheduledDelayMillis)=="number"?r.scheduledDelayMillis:n.OTEL_BSP_SCHEDULE_DELAY,this._exportTimeoutMillis=typeof(r==null?void 0:r.exportTimeoutMillis)=="number"?r.exportTimeoutMillis:n.OTEL_BSP_EXPORT_TIMEOUT}forceFlush(){return this._isShutdown?this._shuttingDownPromise:this._flushAll()}onStart(t){}onEnd(t){this._isShutdown||this._addToBuffer(t)}shutdown(){return this._isShutdown?this._shuttingDownPromise:(this._isShutdown=!0,this._shuttingDownPromise=new Promise((t,r)=>{Promise.resolve().then(()=>this.onShutdown()).then(()=>this._flushAll()).then(()=>this._exporter.shutdown()).then(t).catch(n=>{r(n)})}),this._shuttingDownPromise)}_addToBuffer(t){this._finishedSpans.length>=this._maxQueueSize||(this._finishedSpans.push(t),this._maybeStartTimer())}_flushAll(){return new Promise((t,r)=>{let n=[],i=Math.ceil(this._finishedSpans.length/this._maxExportBatchSize);for(let a=0,s=i;a<s;a++)n.push(this._flushOneBatch());Promise.all(n).then(()=>{t()}).catch(r)})}_flushOneBatch(){return this._clearTimer(),this._finishedSpans.length===0?Promise.resolve():new Promise((t,r)=>{let n=setTimeout(()=>{r(new Error("Timeout"))},this._exportTimeoutMillis);K_.context.with(Xi.suppressTracing(K_.context.active()),()=>{this._exporter.export(this._finishedSpans.splice(0,this._maxExportBatchSize),i=>{var a;clearTimeout(n),i.code===Xi.ExportResultCode.SUCCESS?t():r((a=i.error)!==null&&a!==void 0?a:new Error("BatchSpanProcessor: span export failed"))})})})}_maybeStartTimer(){this._timer===void 0&&(this._timer=setTimeout(()=>{this._flushOneBatch().then(()=>{this._finishedSpans.length>0&&(this._clearTimer(),this._maybeStartTimer())}).catch(t=>{Xi.globalErrorHandler(t)})},this._scheduledDelayMillis),Xi.unrefTimer(this._timer))}_clearTimer(){this._timer!==void 0&&(clearTimeout(this._timer),this._timer=void 0)}};ro.BatchSpanProcessorBase=nl});var Q_=l(no=>{"use strict";Object.defineProperty(no,"__esModule",{value:!0});no.BatchSpanProcessor=void 0;var F0=Y_(),il=class extends F0.BatchSpanProcessorBase{onShutdown(){}};no.BatchSpanProcessor=il});var W_=l(xr=>{"use strict";var G0=xr&&xr.__createBinding||(Object.create?function(e,t,r,n){n===void 0&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){n===void 0&&(n=r),e[n]=t[r]}),V0=xr&&xr.__exportStar||function(e,t){for(var r in e)r!=="default"&&!Object.prototype.hasOwnProperty.call(t,r)&&G0(t,e,r)};Object.defineProperty(xr,"__esModule",{value:!0});V0(Q_(),xr)});var al=l(Mr=>{"use strict";var $0=Mr&&Mr.__createBinding||(Object.create?function(e,t,r,n){n===void 0&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){n===void 0&&(n=r),e[n]=t[r]}),z0=Mr&&Mr.__exportStar||function(e,t){for(var r in e)r!=="default"&&!Object.prototype.hasOwnProperty.call(t,r)&&$0(t,e,r)};Object.defineProperty(Mr,"__esModule",{value:!0});z0(W_(),Mr)});var J_=l(Lr=>{"use strict";Object.defineProperty(Lr,"__esModule",{value:!0});Lr.BasicTracerProvider=Lr.ForceFlushState=void 0;var xn=z(),Ki=Xe(),Z_=Fs(),X0=sl(),K0=xc(),Y0=E_(),Q0=zc(),W0=X_(),Z0=al(),Mn;(function(e){e[e.resolved=0]="resolved",e[e.timeout=1]="timeout",e[e.error=2]="error",e[e.unresolved=3]="unresolved"})(Mn=Lr.ForceFlushState||(Lr.ForceFlushState={}));var tr=class{constructor(t={}){var r;this._registeredSpanProcessors=[],this._tracers=new Map;let n=W0({},K0.DEFAULT_CONFIG,t);this.resource=(r=n.resource)!==null&&r!==void 0?r:Z_.Resource.empty(),this.resource=Z_.Resource.default().merge(this.resource),this._config=Object.assign({},n,{resource:this.resource});let i=this._buildExporterFromEnv();if(i!==void 0){let a=new Z0.BatchSpanProcessor(i);this.activeSpanProcessor=a}else this.activeSpanProcessor=new Q0.NoopSpanProcessor}getTracer(t,r){let n=`${t}@${r||""}`;return this._tracers.has(n)||this._tracers.set(n,new X0.Tracer({name:t,version:r},this._config,this)),this._tracers.get(n)}addSpanProcessor(t){this._registeredSpanProcessors.length===0&&this.activeSpanProcessor.shutdown().catch(r=>xn.diag.error("Error while trying to shutdown current span processor",r)),this._registeredSpanProcessors.push(t),this.activeSpanProcessor=new Y0.MultiSpanProcessor(this._registeredSpanProcessors)}getActiveSpanProcessor(){return this.activeSpanProcessor}register(t={}){xn.trace.setGlobalTracerProvider(this),t.propagator===void 0&&(t.propagator=this._buildPropagatorFromEnv()),t.contextManager&&xn.context.setGlobalContextManager(t.contextManager),t.propagator&&xn.propagation.setGlobalPropagator(t.propagator)}forceFlush(){let t=this._config.forceFlushTimeoutMillis,r=this._registeredSpanProcessors.map(n=>new Promise(i=>{let a,s=setTimeout(()=>{i(new Error(`Span processor did not completed within timeout period of ${t} ms`)),a=Mn.timeout},t);n.forceFlush().then(()=>{clearTimeout(s),a!==Mn.timeout&&(a=Mn.resolved,i(a))}).catch(o=>{clearTimeout(s),a=Mn.error,i(o)})}));return new Promise((n,i)=>{Promise.all(r).then(a=>{let s=a.filter(o=>o!==Mn.resolved);s.length>0?i(s):n()}).catch(a=>i([a]))})}shutdown(){return this.activeSpanProcessor.shutdown()}_getPropagator(t){var r;return(r=tr._registeredPropagators.get(t))===null||r===void 0?void 0:r()}_getSpanExporter(t){var r;return(r=tr._registeredExporters.get(t))===null||r===void 0?void 0:r()}_buildPropagatorFromEnv(){let t=Array.from(new Set(Ki.getEnv().OTEL_PROPAGATORS)),n=t.map(i=>{let a=this._getPropagator(i);return a||xn.diag.warn(`Propagator "${i}" requested through environment variable is unavailable.`),a}).reduce((i,a)=>(a&&i.push(a),i),[]);if(n.length!==0)return t.length===1?n[0]:new Ki.CompositePropagator({propagators:n})}_buildExporterFromEnv(){let t=Ki.getEnv().OTEL_TRACES_EXPORTER;if(t==="none")return;let r=this._getSpanExporter(t);return r||xn.diag.error(`Exporter "${t}" requested through environment variable is unavailable.`),r}};Lr.BasicTracerProvider=tr;tr._registeredPropagators=new Map([["tracecontext",()=>new Ki.HttpTraceContextPropagator],["baggage",()=>new Ki.HttpBaggagePropagator]]);tr._registeredExporters=new Map});var ev=l(io=>{"use strict";Object.defineProperty(io,"__esModule",{value:!0});io.ConsoleSpanExporter=void 0;var ol=Xe(),ul=class{export(t,r){return this._sendSpans(t,r)}shutdown(){return this._sendSpans([]),Promise.resolve()}_exportInfo(t){return{traceId:t.spanContext().traceId,parentId:t.parentSpanId,name:t.name,id:t.spanContext().spanId,kind:t.kind,timestamp:ol.hrTimeToMicroseconds(t.startTime),duration:ol.hrTimeToMicroseconds(t.duration),attributes:t.attributes,status:t.status,events:t.events}}_sendSpans(t,r){for(let n of t)console.log(this._exportInfo(n));if(r)return r({code:ol.ExportResultCode.SUCCESS})}};io.ConsoleSpanExporter=ul});var rv=l(ao=>{"use strict";Object.defineProperty(ao,"__esModule",{value:!0});ao.InMemorySpanExporter=void 0;var tv=Xe(),cl=class{constructor(){this._finishedSpans=[],this._stopped=!1}export(t,r){if(this._stopped)return r({code:tv.ExportResultCode.FAILED,error:new Error("Exporter has been stopped")});this._finishedSpans.push(...t),setTimeout(()=>r({code:tv.ExportResultCode.SUCCESS}),0)}shutdown(){return this._stopped=!0,this._finishedSpans=[],Promise.resolve()}reset(){this._finishedSpans=[]}getFinishedSpans(){return this._finishedSpans}};ao.InMemorySpanExporter=cl});var iv=l(nv=>{"use strict";Object.defineProperty(nv,"__esModule",{value:!0})});var sv=l(so=>{"use strict";Object.defineProperty(so,"__esModule",{value:!0});so.SimpleSpanProcessor=void 0;var av=z(),ll=Xe(),fl=class{constructor(t){this._exporter=t,this._isShutdown=!1,this._shuttingDownPromise=Promise.resolve()}forceFlush(){return Promise.resolve()}onStart(t){}onEnd(t){this._isShutdown||av.context.with(ll.suppressTracing(av.context.active()),()=>{this._exporter.export([t],r=>{var n;r.code!==ll.ExportResultCode.SUCCESS&&ll.globalErrorHandler((n=r.error)!==null&&n!==void 0?n:new Error(`SimpleSpanProcessor: span export failed (status ${r})`))})})}shutdown(){return this._isShutdown?this._shuttingDownPromise:(this._isShutdown=!0,this._shuttingDownPromise=new Promise((t,r)=>{Promise.resolve().then(()=>this._exporter.shutdown()).then(t).catch(n=>{r(n)})}),this._shuttingDownPromise)}};so.SimpleSpanProcessor=fl});var uv=l(ov=>{"use strict";Object.defineProperty(ov,"__esModule",{value:!0})});var lv=l(cv=>{"use strict";Object.defineProperty(cv,"__esModule",{value:!0})});var pv=l(fv=>{"use strict";Object.defineProperty(fv,"__esModule",{value:!0})});var hv=l(dv=>{"use strict";Object.defineProperty(dv,"__esModule",{value:!0})});var sl=l(de=>{"use strict";var J0=de&&de.__createBinding||(Object.create?function(e,t,r,n){n===void 0&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){n===void 0&&(n=r),e[n]=t[r]}),He=de&&de.__exportStar||function(e,t){for(var r in e)r!=="default"&&!Object.prototype.hasOwnProperty.call(t,r)&&J0(t,e,r)};Object.defineProperty(de,"__esModule",{value:!0});He(i_(),de);He(J_(),de);He(al(),de);He(ev(),de);He(rv(),de);He(iv(),de);He(sv(),de);He(uv(),de);He(zc(),de);He(wc(),de);He(lv(),de);He(pv(),de);He(hv(),de)});var gv=l(dt=>{"use strict";Object.defineProperty(dt,"__esModule",{value:!0});dt.enable=dt.azureCoreTracing=dt.AzureMonitorSymbol=void 0;var vv=oe();dt.AzureMonitorSymbol="Azure_Monitor_Tracer";var _v=!1,eP=function(e){if(_v)return e;try{var t=sl(),r=z(),n=new t.BasicTracerProvider,i=n.getTracer("applicationinsights tracer"),a=e.setTracer;e.setTracer=function(s){var o=s.startSpan;s.startSpan=function(u,c,f){var p=o.call(this,u,c,f),d=p.end;return p.end=function(){var h=d.apply(this,arguments);return vv.channel.publish("azure-coretracing",p),h},p},s[dt.AzureMonitorSymbol]=!0,a.call(this,s)},r.trace.getSpan(r.context.active()),e.setTracer(i),_v=!0}catch{}return e};dt.azureCoreTracing={versionSpecifier:">= 1.0.0 < 2.0.0",patch:eP};function tP(){vv.channel.registerMonkeyPatch("@azure/core-tracing",dt.azureCoreTracing)}dt.enable=tP});var mv=l(qr=>{"use strict";Object.defineProperty(qr,"__esModule",{value:!0});qr.enable=qr.bunyan=void 0;var Ev=oe(),rP=function(e){var t=e.prototype._emit;return e.prototype._emit=function(r,n){var i=t.apply(this,arguments);if(!n){var a=i;a||(a=t.call(this,r,!0)),Ev.channel.publish("bunyan",{level:r.level,result:a})}return i},e};qr.bunyan={versionSpecifier:">= 1.0.0 < 2.0.0",patch:rP};function nP(){Ev.channel.registerMonkeyPatch("bunyan",qr.bunyan)}qr.enable=nP});var Tv=l(jr=>{"use strict";Object.defineProperty(jr,"__esModule",{value:!0});jr.enable=jr.console=void 0;var pl=oe(),yv=__webpack_require__(12781),iP=function(e){var t=new yv.Writable,r=new yv.Writable;t.write=function(c){if(!c)return!0;var f=c.toString();return pl.channel.publish("console",{message:f}),!0},r.write=function(c){if(!c)return!0;var f=c.toString();return pl.channel.publish("console",{message:f,stderr:!0}),!0};for(var n=new e.Console(t,r),i=["log","info","warn","error","dir","time","timeEnd","trace","assert"],a=function(c){var f=e[c];f&&(e[c]=function(){if(n[c])try{n[c].apply(n,arguments)}catch{}return f.apply(e,arguments)})},s=0,o=i;s<o.length;s++){var u=o[s];a(u)}return e};jr.console={versionSpecifier:">= 4.0.0",patch:iP};function aP(){pl.channel.registerMonkeyPatch("console",jr.console),__webpack_require__(96206)}jr.enable=aP});var Av=l(kr=>{"use strict";Object.defineProperty(kr,"__esModule",{value:!0});kr.enable=kr.mongoCore=void 0;var dl=oe(),sP=function(e){var t=e.Server.prototype.connect;return e.Server.prototype.connect=function(){var n=t.apply(this,arguments),i=this.s.pool.write;this.s.pool.write=function(){var o=typeof arguments[1]=="function"?1:2;return typeof arguments[o]=="function"&&(arguments[o]=dl.channel.bindToContext(arguments[o])),i.apply(this,arguments)};var a=this.s.pool.logout;return this.s.pool.logout=function(){return typeof arguments[1]=="function"&&(arguments[1]=dl.channel.bindToContext(arguments[1])),a.apply(this,arguments)},n},e};kr.mongoCore={versionSpecifier:">= 2.0.0 < 4.0.0",patch:sP};function oP(){dl.channel.registerMonkeyPatch("mongodb-core",kr.mongoCore)}kr.enable=oP});var Sv=l(Ne=>{"use strict";var Ln=Ne&&Ne.__assign||function(){return Ln=Object.assign||function(e){for(var t,r=1,n=arguments.length;r<n;r++){t=arguments[r];for(var i in t)Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i])}return e},Ln.apply(this,arguments)};Object.defineProperty(Ne,"__esModule",{value:!0});Ne.enable=Ne.mongo330=Ne.mongo3=Ne.mongo2=void 0;var be=oe(),uP=function(e){var t=e.instrument({operationIdGenerator:{next:function(){return be.channel.bindToContext(function(n){return n()})}}}),r={};return t.on("started",function(n){r[n.requestId]||(r[n.requestId]=Ln(Ln({},n),{time:new Date}))}),t.on("succeeded",function(n){var i=r[n.requestId];i&&delete r[n.requestId],typeof n.operationId=="function"?n.operationId(function(){return be.channel.publish("mongodb",{startedData:i,event:n,succeeded:!0})}):be.channel.publish("mongodb",{startedData:i,event:n,succeeded:!0})}),t.on("failed",function(n){var i=r[n.requestId];i&&delete r[n.requestId],typeof n.operationId=="function"?n.operationId(function(){return be.channel.publish("mongodb",{startedData:i,event:n,succeeded:!1})}):be.channel.publish("mongodb",{startedData:i,event:n,succeeded:!1})}),e},cP=function(e){var t=e.instrument(),r={},n={};return t.on("started",function(i){r[i.requestId]||(n[i.requestId]=be.channel.bindToContext(function(a){return a()}),r[i.requestId]=Ln(Ln({},i),{time:new Date}))}),t.on("succeeded",function(i){var a=r[i.requestId];a&&delete r[i.requestId],typeof i=="object"&&typeof n[i.requestId]=="function"&&(n[i.requestId](function(){return be.channel.publish("mongodb",{startedData:a,event:i,succeeded:!0})}),delete n[i.requestId])}),t.on("failed",function(i){var a=r[i.requestId];a&&delete r[i.requestId],typeof i=="object"&&typeof n[i.requestId]=="function"&&(n[i.requestId](function(){return be.channel.publish("mongodb",{startedData:a,event:i,succeeded:!1})}),delete n[i.requestId])}),e},lP=function(e){var t=e.Server.prototype.connect;return e.Server.prototype.connect=function(){var n=t.apply(this,arguments),i=this.s.coreTopology.s.pool.write;this.s.coreTopology.s.pool.write=function(){var o=typeof arguments[1]=="function"?1:2;return typeof arguments[o]=="function"&&(arguments[o]=be.channel.bindToContext(arguments[o])),i.apply(this,arguments)};var a=this.s.coreTopology.s.pool.logout;return this.s.coreTopology.s.pool.logout=function(){return typeof arguments[1]=="function"&&(arguments[1]=be.channel.bindToContext(arguments[1])),a.apply(this,arguments)},n},e},fP=function(e){lP(e);var t=e.instrument(),r={},n={};return t.on("started",function(i){r[i.requestId]||(n[i.requestId]=be.channel.bindToContext(function(a){return a()}),r[i.requestId]=i)}),t.on("succeeded",function(i){var a=r[i.requestId];a&&delete r[i.requestId],typeof i=="object"&&typeof n[i.requestId]=="function"&&(n[i.requestId](function(){return be.channel.publish("mongodb",{startedData:a,event:i,succeeded:!0})}),delete n[i.requestId])}),t.on("failed",function(i){var a=r[i.requestId];a&&delete r[i.requestId],typeof i=="object"&&typeof n[i.requestId]=="function"&&(n[i.requestId](function(){return be.channel.publish("mongodb",{startedData:a,event:i,succeeded:!1})}),delete n[i.requestId])}),e};Ne.mongo2={versionSpecifier:">= 2.0.0 <= 3.0.5",patch:uP};Ne.mongo3={versionSpecifier:"> 3.0.5 < 3.3.0",patch:cP};Ne.mongo330={versionSpecifier:">= 3.3.0 < 4.0.0",patch:fP};function pP(){be.channel.registerMonkeyPatch("mongodb",Ne.mongo2),be.channel.registerMonkeyPatch("mongodb",Ne.mongo3),be.channel.registerMonkeyPatch("mongodb",Ne.mongo330)}Ne.enable=pP});var Cv=l(Hr=>{"use strict";Object.defineProperty(Hr,"__esModule",{value:!0});Hr.enable=Hr.mysql=void 0;var oo=oe(),Iv=__webpack_require__(71017),dP=function(e,t){var r=function(u,c){return function(f,p){var d=u[f];d&&(u[f]=function(){for(var E=arguments.length-1,A=arguments.length-1;A>=0;--A)if(typeof arguments[A]=="function"){E=A;break}else if(typeof arguments[A]<"u")break;var j=arguments[E],se={result:null,startTime:null,startDate:null};typeof j=="function"&&(p?(se.startTime=process.hrtime(),se.startDate=new Date,arguments[E]=oo.channel.bindToContext(p(se,j))):arguments[E]=oo.channel.bindToContext(j));var Ae=d.apply(this,arguments);return se.result=Ae,Ae})}},n=function(u,c){return r(u.prototype,c+".prototype")},i=["connect","changeUser","ping","statistics","end"],a=__webpack_require__(75029)(Iv.dirname(t)+"/lib/Connection");i.forEach(function(u){return n(a,"Connection")(u)}),r(a,"Connection")("createQuery",function(u,c){return function(f){var p=process.hrtime(u.startTime),d=p[0]*1e3+p[1]/1e6|0;oo.channel.publish("mysql",{query:u.result,callbackArgs:arguments,err:f,duration:d,time:u.startDate}),c.apply(this,arguments)}});var s=["_enqueueCallback"],o=__webpack_require__(3437)(Iv.dirname(t)+"/lib/Pool");return s.forEach(function(u){return n(o,"Pool")(u)}),e};Hr.mysql={versionSpecifier:">= 2.0.0 < 3.0.0",patch:dP};function hP(){oo.channel.registerMonkeyPatch("mysql",Hr.mysql)}Hr.enable=hP});var Ov=l(Ur=>{"use strict";Object.defineProperty(Ur,"__esModule",{value:!0});Ur.enable=Ur.postgresPool1=void 0;var bv=oe();function _P(e){var t=e.prototype.connect;return e.prototype.connect=function(n){return n&&(arguments[0]=bv.channel.bindToContext(n)),t.apply(this,arguments)},e}Ur.postgresPool1={versionSpecifier:">= 1.0.0 < 3.0.0",patch:_P};function vP(){bv.channel.registerMonkeyPatch("pg-pool",Ur.postgresPool1)}Ur.enable=vP});var Rv=l(ht=>{"use strict";Object.defineProperty(ht,"__esModule",{value:!0});ht.enable=ht.postgres7=ht.postgres6=void 0;var qn=oe(),Pv=__webpack_require__(82361);function gP(e,t){var r=e.Client.prototype.query,n="__diagnosticOriginalFunc";return e.Client.prototype.query=function(a,s,o){var u={query:{},database:{host:this.connectionParameters.host,port:this.connectionParameters.port},result:null,error:null,duration:0,time:new Date},c=process.hrtime(),f;function p(d){d&&d[n]&&(d=d[n]);var h=qn.channel.bindToContext(function(E,A){var j=process.hrtime(c);if(u.result=A&&{rowCount:A.rowCount,command:A.command},u.error=E,u.duration=Math.ceil(j[0]*1e3+j[1]/1e6),qn.channel.publish("postgres",u),E){if(d)return d.apply(this,arguments);f&&f instanceof Pv.EventEmitter&&f.emit("error",E)}else d&&d.apply(this,arguments)});try{return Object.defineProperty(h,n,{value:d}),h}catch{return d}}try{typeof a=="string"?s instanceof Array?(u.query.preparable={text:a,args:s},o=p(o)):(u.query.text=a,o?o=p(o):s=p(s)):(typeof a.name=="string"?u.query.plan=a.name:a.values instanceof Array?u.query.preparable={text:a.text,args:a.values}:u.query.text=a.text,o?o=p(o):s?s=p(s):a.callback=p(a.callback))}catch{return r.apply(this,arguments)}return arguments[0]=a,arguments[1]=s,arguments[2]=o,arguments.length=arguments.length>3?arguments.length:3,f=r.apply(this,arguments),f},e}function EP(e,t){var r=e.Client.prototype.query,n="__diagnosticOriginalFunc";return e.Client.prototype.query=function(a,s,o){var u=this,c=!!o,f={query:{},database:{host:this.connectionParameters.host,port:this.connectionParameters.port},result:null,error:null,duration:0,time:new Date},p=process.hrtime(),d;function h(E){E&&E[n]&&(E=E[n]);var A=qn.channel.bindToContext(function(j,se){var Ae=process.hrtime(p);if(f.result=se&&{rowCount:se.rowCount,command:se.command},f.error=j,f.duration=Math.ceil(Ae[0]*1e3+Ae[1]/1e6),qn.channel.publish("postgres",f),j){if(E)return E.apply(this,arguments);d&&d instanceof Pv.EventEmitter&&d.emit("error",j)}else E&&E.apply(this,arguments)});try{return Object.defineProperty(A,n,{value:E}),A}catch{return E}}try{typeof a=="string"?s instanceof Array?(f.query.preparable={text:a,args:s},c=typeof o=="function",o=c?h(o):o):(f.query.text=a,o?(c=typeof o=="function",o=c?h(o):o):(c=typeof s=="function",s=c?h(s):s)):(typeof a.name=="string"?f.query.plan=a.name:a.values instanceof Array?f.query.preparable={text:a.text,args:a.values}:f.query.text=a.text,o?(c=typeof o=="function",o=h(o)):s?(c=typeof s=="function",s=c?h(s):s):(c=typeof a.callback=="function",a.callback=c?h(a.callback):a.callback))}catch{return r.apply(this,arguments)}return arguments[0]=a,arguments[1]=s,arguments[2]=o,arguments.length=arguments.length>3?arguments.length:3,d=r.apply(this,arguments),c?d:d.then(function(E){return h()(void 0,E),new u._Promise(function(A,j){A(E)})}).catch(function(E){return h()(E,void 0),new u._Promise(function(A,j){j(E)})})},e}ht.postgres6={versionSpecifier:"6.*",patch:gP};ht.postgres7={versionSpecifier:">=7.* <=8.*",patch:EP};function mP(){qn.channel.registerMonkeyPatch("pg",ht.postgres6),qn.channel.registerMonkeyPatch("pg",ht.postgres7)}ht.enable=mP});var Nv=l(Br=>{"use strict";Object.defineProperty(Br,"__esModule",{value:!0});Br.enable=Br.redis=void 0;var hl=oe(),yP=function(e){var t=e.RedisClient.prototype.internal_send_command;return e.RedisClient.prototype.internal_send_command=function(r){if(r){var n=r.callback;if(!n||!n.pubsubBound){var i=this.address,a=process.hrtime(),s=new Date;r.callback=hl.channel.bindToContext(function(o,u){var c=process.hrtime(a),f=c[0]*1e3+c[1]/1e6|0;hl.channel.publish("redis",{duration:f,address:i,commandObj:r,err:o,result:u,time:s}),typeof n=="function"&&n.apply(this,arguments)}),r.callback.pubsubBound=!0}}return t.call(this,r)},e};Br.redis={versionSpecifier:">= 2.0.0 < 4.0.0",patch:yP};function TP(){hl.channel.registerMonkeyPatch("redis",Br.redis)}Br.enable=TP});var Dv=l(Nt=>{"use strict";var uo=Nt&&Nt.__assign||function(){return uo=Object.assign||function(e){for(var t,r=1,n=arguments.length;r<n;r++){t=arguments[r];for(var i in t)Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i])}return e},uo.apply(this,arguments)};Object.defineProperty(Nt,"__esModule",{value:!0});Nt.enable=Nt.tedious=void 0;var _l=oe(),AP=function(e){var t=e.Connection.prototype.makeRequest;return e.Connection.prototype.makeRequest=function(){function n(a){var s=process.hrtime(),o={query:{},database:{host:null,port:null},result:null,error:null,duration:0};return _l.channel.bindToContext(function(u,c,f){var p=process.hrtime(s);o=uo(uo({},o),{database:{host:this.connection.config.server,port:this.connection.config.options.port},result:!u&&{rowCount:c,rows:f},query:{text:this.parametersByName.statement.value},error:u,duration:Math.ceil(p[0]*1e3+p[1]/1e6)}),_l.channel.publish("tedious",o),a.call(this,u,c,f)})}var i=arguments[0];arguments[0].callback=n(i.callback),t.apply(this,arguments)},e};Nt.tedious={versionSpecifier:">= 6.0.0 < 9.0.0",patch:AP};function SP(){_l.channel.registerMonkeyPatch("tedious",Nt.tedious)}Nt.enable=SP});var wv=l(Le=>{"use strict";var IP=Le&&Le.__extends||function(){var e=function(t,r){return e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(n,i){n.__proto__=i}||function(n,i){for(var a in i)Object.prototype.hasOwnProperty.call(i,a)&&(n[a]=i[a])},e(t,r)};return function(t,r){e(t,r);function n(){this.constructor=t}t.prototype=r===null?Object.create(r):(n.prototype=r.prototype,new n)}}(),CP=Le&&Le.__rest||function(e,t){var r={};for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&t.indexOf(n)<0&&(r[n]=e[n]);if(e!=null&&typeof Object.getOwnPropertySymbols=="function")for(var i=0,n=Object.getOwnPropertySymbols(e);i<n.length;i++)t.indexOf(n[i])<0&&Object.prototype.propertyIsEnumerable.call(e,n[i])&&(r[n[i]]=e[n[i]]);return r};Object.defineProperty(Le,"__esModule",{value:!0});Le.enable=Le.winston2=Le.winston3=void 0;var co=oe(),bP=function(e){var t=e.Logger.prototype.log,r,n=function(i,a,s){var o;return r===e.config.npm.levels?o="npm":r===e.config.syslog.levels?o="syslog":o="unknown",co.channel.publish("winston",{level:i,message:a,meta:s,levelKind:o}),a};return e.Logger.prototype.log=function(){return r=this.levels,!this.filters||this.filters.length===0?this.filters=[n]:this.filters[this.filters.length-1]!==n&&(this.filters=this.filters.filter(function(a){return a!==n}),this.filters.push(n)),t.apply(this,arguments)},e},OP=function(e){var t=function(s,o){var u;return s.config.npm.levels[o]!=null?u="npm":s.config.syslog.levels[o]!=null?u="syslog":u="unknown",u},r=function(s){IP(o,s);function o(u,c){var f=s.call(this,c)||this;return f.winston=u,f}return o.prototype.log=function(u,c){var f=u.message,p=u.level,d=u.meta,h=CP(u,["message","level","meta"]);p=typeof Symbol.for=="function"?u[Symbol.for("level")]:p,f=u instanceof Error?u:f;var E=t(this.winston,p);d=d||{};for(var A in h)h.hasOwnProperty(A)&&(d[A]=h[A]);co.channel.publish("winston",{message:f,level:p,levelKind:E,meta:d}),c()},o}(e.Transport);function n(){var s=arguments[0].levels||e.config.npm.levels,o;for(var u in s)s.hasOwnProperty(u)&&(o=o===void 0||s[u]>s[o]?u:o);this.add(new r(e,{level:o}))}var i=e.createLogger;e.createLogger=function(){var o=arguments[0].levels||e.config.npm.levels,u;for(var c in o)o.hasOwnProperty(c)&&(u=u===void 0||o[c]>o[u]?c:u);var f=i.apply(this,arguments);f.add(new r(e,{level:u}));var p=f.configure;return f.configure=function(){p.apply(this,arguments),n.apply(this,arguments)},f};var a=e.configure;return e.configure=function(){a.apply(this,arguments),n.apply(this,arguments)},e.add(new r(e)),e};Le.winston3={versionSpecifier:"3.x",patch:OP};Le.winston2={versionSpecifier:"2.x",patch:bP};function PP(){co.channel.registerMonkeyPatch("winston",Le.winston2),co.channel.registerMonkeyPatch("winston",Le.winston3)}Le.enable=PP});var Vv=l($=>{"use strict";Object.defineProperty($,"__esModule",{value:!0});$.enable=$.tedious=$.pgPool=$.pg=$.winston=$.redis=$.mysql=$.mongodb=$.mongodbCore=$.console=$.bunyan=$.azuresdk=void 0;var xv=gv();$.azuresdk=xv;var Mv=mv();$.bunyan=Mv;var Lv=Tv();$.console=Lv;var qv=Av();$.mongodbCore=qv;var jv=Sv();$.mongodb=jv;var kv=Cv();$.mysql=kv;var Hv=Ov();$.pgPool=Hv;var Uv=Rv();$.pg=Uv;var Bv=Nv();$.redis=Bv;var Fv=Dv();$.tedious=Fv;var Gv=wv();$.winston=Gv;function RP(){Mv.enable(),Lv.enable(),qv.enable(),jv.enable(),kv.enable(),Uv.enable(),Hv.enable(),Bv.enable(),Gv.enable(),xv.enable(),Fv.enable()}$.enable=RP});var po=l(rr=>{"use strict";Object.defineProperty(rr,"__esModule",{value:!0});rr.registerContextPreservation=rr.IsInitialized=void 0;var NP=vu(),vl=_e();rr.IsInitialized=!process.env.APPLICATION_INSIGHTS_NO_DIAGNOSTIC_CHANNEL;var gl="DiagnosticChannel";if(rr.IsInitialized){it=Vv(),$v=process.env.APPLICATION_INSIGHTS_NO_PATCH_MODULES||"",lo=$v.split(","),El={bunyan:it.bunyan,console:it.console,mongodb:it.mongodb,mongodbCore:it.mongodbCore,mysql:it.mysql,redis:it.redis,pg:it.pg,pgPool:it.pgPool,winston:it.winston,azuresdk:it.azuresdk};for(fo in El)lo.indexOf(fo)===-1&&(El[fo].enable(),vl.info(gl,"Subscribed to "+fo+" events"));lo.length>0&&vl.info(gl,"Some modules will not be patched",lo)}else vl.info(gl,"Not subscribing to dependency autocollection because APPLICATION_INSIGHTS_NO_DIAGNOSTIC_CHANNEL was set");var it,$v,lo,El,fo;function DP(e){if(!!rr.IsInitialized){var t=oe();t.channel.addContextPreservation(e),t.channel.spanContextPropagator=NP.AsyncScopeManager}}rr.registerContextPreservation=DP});var jn=l((Nq,zv)=>{"use strict";zv.exports={requestContextHeader:"request-context",requestContextSourceKey:"appId",requestContextTargetKey:"appId",requestIdHeader:"request-id",parentIdHeader:"x-ms-request-id",rootIdHeader:"x-ms-request-root-id",correlationContextHeader:"correlation-context",traceparentHeader:"traceparent",traceStateHeader:"tracestate"}});var Ue=l((yl,Kv)=>{"use strict";var nr=yl&&yl.__assign||function(){return nr=Object.assign||function(e){for(var t,r=1,n=arguments.length;r<n;r++){t=arguments[r];for(var i in t)Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i])}return e},nr.apply(this,arguments)},wP=__webpack_require__(13685),Xv=__webpack_require__(95687),ml=__webpack_require__(57310),ho=__webpack_require__(22057),Yi=_e(),kn=jn(),xP=function(){function e(){}return e.getCookie=function(t,r){var n="";if(t&&t.length&&typeof r=="string")for(var i=t+"=",a=r.split(";"),s=0;s<a.length;s++){var r=a[s];if(r=e.trim(r),r&&r.indexOf(i)===0){n=r.substring(i.length,a[s].length);break}}return n},e.trim=function(t){return typeof t=="string"?t.replace(/^\s+|\s+$/g,""):""},e.int32ArrayToBase64=function(t){var r=function(o,u){return String.fromCharCode(o>>u&255)},n=function(o){return r(o,24)+r(o,16)+r(o,8)+r(o,0)},i=t.map(n).join(""),a=Buffer.from?Buffer.from(i,"binary"):new Buffer(i,"binary"),s=a.toString("base64");return s.substr(0,s.indexOf("="))},e.random32=function(){return 4294967296*Math.random()|0},e.randomu32=function(){return e.random32()+2147483648},e.w3cTraceId=function(){for(var t=["0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f"],r="",n,i=0;i<4;i++)n=e.random32(),r+=t[n&15]+t[n>>4&15]+t[n>>8&15]+t[n>>12&15]+t[n>>16&15]+t[n>>20&15]+t[n>>24&15]+t[n>>28&15];var a=t[8+Math.random()*4|0];return r.substr(0,8)+r.substr(9,4)+"4"+r.substr(13,3)+a+r.substr(16,3)+r.substr(19,12)},e.w3cSpanId=function(){return e.w3cTraceId().substring(16)},e.isValidW3CId=function(t){return t.length===32&&t!=="00000000000000000000000000000000"},e.isArray=function(t){return Object.prototype.toString.call(t)==="[object Array]"},e.isError=function(t){return t instanceof Error},e.isPrimitive=function(t){var r=typeof t;return r==="string"||r==="number"||r==="boolean"},e.isDate=function(t){return Object.prototype.toString.call(t)==="[object Date]"},e.msToTimeSpan=function(t){(isNaN(t)||t<0)&&(t=0);var r=(t/1e3%60).toFixed(7).replace(/0{0,4}$/,""),n=""+Math.floor(t/(1e3*60))%60,i=""+Math.floor(t/(1e3*60*60))%24,a=Math.floor(t/(1e3*60*60*24));r=r.indexOf(".")<2?"0"+r:r,n=n.length<2?"0"+n:n,i=i.length<2?"0"+i:i;var s=a>0?a+".":"";return s+i+":"+n+":"+r},e.extractError=function(t){var r=t;return{message:t.message,code:r.code||r.id||""}},e.extractObject=function(t){return t instanceof Error?e.extractError(t):typeof t.toJSON=="function"?t.toJSON():t},e.validateStringMap=function(t){if(typeof t!="object"){Yi.info("Invalid properties dropped from payload");return}var r={};for(var n in t){var i="",a=t[n],s=typeof a;if(e.isPrimitive(a))i=a.toString();else if(a===null||s==="undefined")i="";else if(s==="function"){Yi.info("key: "+n+" was function; will not serialize");continue}else{var o=e.isArray(a)?a:e.extractObject(a);try{e.isPrimitive(o)?i=o:i=JSON.stringify(o)}catch(u){i=a.constructor.name.toString()+" (Error: "+u.message+")",Yi.info("key: "+n+", could not be serialized")}}r[n]=i.substring(0,e.MAX_PROPERTY_LENGTH)}return r},e.canIncludeCorrelationHeader=function(t,r){var n=t&&t.config&&t.config.correlationHeaderExcludedDomains;if(!n||n.length==0||!r)return!0;for(var i=0;i<n.length;i++){var a=new RegExp(n[i].replace(/\./g,".").replace(/\*/g,".*"));if(a.test(ml.parse(r).hostname))return!1}return!0},e.getCorrelationContextTarget=function(t,r){var n=t.headers&&t.headers[kn.requestContextHeader];if(n)for(var i=n.split(","),a=0;a<i.length;++a){var s=i[a].split("=");if(s.length==2&&s[0]==r)return s[1]}},e.makeRequest=function(t,r,n,i){r&&r.indexOf("//")===0&&(r="https:"+r);var a=ml.parse(r),s=nr(nr({},n),{host:a.hostname,port:a.port,path:a.pathname}),o=void 0;if(a.protocol==="https:"&&(o=t.proxyHttpsUrl||void 0),a.protocol==="http:"&&(o=t.proxyHttpUrl||void 0),o){o.indexOf("//")===0&&(o="http:"+o);var u=ml.parse(o);u.protocol==="https:"?(Yi.info("Proxies that use HTTPS are not supported"),o=void 0):s=nr(nr({},s),{host:u.hostname,port:u.port||"80",path:r,headers:nr(nr({},s.headers),{Host:a.hostname})})}var c=a.protocol==="https:"&&!o;return c&&t.httpsAgent!==void 0?s.agent=t.httpsAgent:!c&&t.httpAgent!==void 0?s.agent=t.httpAgent:c&&(s.agent=e.tlsRestrictedAgent),c?Xv.request(s,i):wP.request(s,i)},e.safeIncludeCorrelationHeader=function(t,r,n){var i;if(typeof n=="string")i=n;else if(n instanceof Array)i=n.join(",");else if(n&&typeof n.toString=="function")try{i=n.toString()}catch(a){Yi.warn("Outgoing request-context header could not be read. Correlation of requests may be lost.",a,n)}i?e.addCorrelationIdHeaderFromString(t,r,i):r.setHeader(kn.requestContextHeader,kn.requestContextSourceKey+"="+t.config.correlationId)},e.dumpObj=function(t){var r=Object.prototype.toString.call(t),n="";return r==="[object Error]"?n="{ stack: '"+t.stack+"', message: '"+t.message+"', name: '"+t.name+"'":n=JSON.stringify(t),r+n},e.addCorrelationIdHeaderFromString=function(t,r,n){var i=n.split(","),a=kn.requestContextSourceKey+"=",s=i.some(function(o){return o.substring(0,a.length)===a});s||r.setHeader(kn.requestContextHeader,n+","+kn.requestContextSourceKey+"="+t.config.correlationId)},e.MAX_PROPERTY_LENGTH=8192,e.tlsRestrictedAgent=new Xv.Agent({keepAlive:!0,maxSockets:25,secureOptions:ho.SSL_OP_NO_SSLv2|ho.SSL_OP_NO_SSLv3|ho.SSL_OP_NO_TLSv1|ho.SSL_OP_NO_TLSv1_1}),e}();Kv.exports=xP});var Fr=l((Dq,Yv)=>{"use strict";var _o=Ue(),Tl=_e(),MP=function(){function e(){}return e.queryCorrelationId=function(t,r){var n=t.profileQueryEndpoint+"/api/profiles/"+t.instrumentationKey+"/appId";if(e.completedLookups.hasOwnProperty(n)){r(e.completedLookups[n]);return}else if(e.pendingLookups[n]){e.pendingLookups[n].push(r);return}e.pendingLookups[n]=[r];var i=function(){if(!!e.pendingLookups[n]){var a={method:"GET",disableAppInsightsAutoCollection:!0};Tl.info(e.TAG,a);var s=_o.makeRequest(t,n,a,function(o){if(o.statusCode===200){var u="";o.setEncoding("utf-8"),o.on("data",function(c){u+=c}),o.on("end",function(){Tl.info(e.TAG,u);var c=e.correlationIdPrefix+u;e.completedLookups[n]=c,e.pendingLookups[n]&&e.pendingLookups[n].forEach(function(f){return f(c)}),delete e.pendingLookups[n]})}else o.statusCode>=400&&o.statusCode<500?(e.completedLookups[n]=void 0,delete e.pendingLookups[n]):setTimeout(i,t.correlationIdRetryIntervalMs)});s&&(s.on("error",function(o){Tl.warn(e.TAG,o)}),s.end())}};setTimeout(i,0)},e.cancelCorrelationIdQuery=function(t,r){var n=t.profileQueryEndpoint+"/api/profiles/"+t.instrumentationKey+"/appId",i=e.pendingLookups[n];i&&(e.pendingLookups[n]=i.filter(function(a){return a!=r}),e.pendingLookups[n].length==0&&delete e.pendingLookups[n])},e.generateRequestId=function(t){if(t){t=t[0]=="|"?t:"|"+t,t[t.length-1]!=="."&&(t+=".");var r=(e.currentRootId++).toString(16);return e.appendSuffix(t,r,"_")}else return e.generateRootId()},e.getRootId=function(t){var r=t.indexOf(".");r<0&&(r=t.length);var n=t[0]==="|"?1:0;return t.substring(n,r)},e.generateRootId=function(){return"|"+_o.w3cTraceId()+"."},e.appendSuffix=function(t,r,n){if(t.length+r.length<e.requestIdMaxLength)return t+r+n;var i=e.requestIdMaxLength-9;if(t.length>i)for(;i>1;--i){var a=t[i-1];if(a==="."||a==="_")break}if(i<=1)return e.generateRootId();for(r=_o.randomu32().toString(16);r.length<8;)r="0"+r;return t.substring(0,i)+r+"#"},e.TAG="CorrelationIdManager",e.correlationIdPrefix="cid-v1:",e.w3cEnabled=!0,e.pendingLookups={},e.completedLookups={},e.requestIdMaxLength=1024,e.currentRootId=_o.randomu32(),e}();Yv.exports=MP});var Qi=l((wq,Qv)=>{"use strict";var me=Ue(),LP=Fr(),qP=function(){function e(t,r){if(this.traceFlag=e.DEFAULT_TRACE_FLAG,this.version=e.DEFAULT_VERSION,t&&typeof t=="string")if(t.split(",").length>1)this.traceId=me.w3cTraceId(),this.spanId=me.w3cTraceId().substr(0,16);else{var n=t.trim().split("-"),i=n.length;i>=4?(this.version=n[0],this.traceId=n[1],this.spanId=n[2],this.traceFlag=n[3]):(this.traceId=me.w3cTraceId(),this.spanId=me.w3cTraceId().substr(0,16)),this.version.match(/^[0-9a-f]{2}$/g)||(this.version=e.DEFAULT_VERSION,this.traceId=me.w3cTraceId()),this.version==="00"&&i!==4&&(this.traceId=me.w3cTraceId(),this.spanId=me.w3cTraceId().substr(0,16)),this.version==="ff"&&(this.version=e.DEFAULT_VERSION,this.traceId=me.w3cTraceId(),this.spanId=me.w3cTraceId().substr(0,16)),this.version.match(/^0[0-9a-f]$/g)||(this.version=e.DEFAULT_VERSION),this.traceFlag.match(/^[0-9a-f]{2}$/g)||(this.traceFlag=e.DEFAULT_TRACE_FLAG,this.traceId=me.w3cTraceId()),e.isValidTraceId(this.traceId)||(this.traceId=me.w3cTraceId()),e.isValidSpanId(this.spanId)||(this.spanId=me.w3cTraceId().substr(0,16),this.traceId=me.w3cTraceId()),this.parentId=this.getBackCompatRequestId()}else if(r){this.parentId=r.slice();var a=LP.getRootId(r);e.isValidTraceId(a)||(this.legacyRootId=a,a=me.w3cTraceId()),r.indexOf("|")!==-1&&(r=r.substring(1+r.substring(0,r.length-1).lastIndexOf("."),r.length-1)),this.traceId=a,this.spanId=r}else this.traceId=me.w3cTraceId(),this.spanId=me.w3cTraceId().substr(0,16)}return e.isValidTraceId=function(t){return t.match(/^[0-9a-f]{32}$/)&&t!=="00000000000000000000000000000000"},e.isValidSpanId=function(t){return t.match(/^[0-9a-f]{16}$/)&&t!=="0000000000000000"},e.formatOpenTelemetryTraceFlags=function(t){var r="0"+t.toString(16);return r.substring(r.length-2)},e.prototype.getBackCompatRequestId=function(){return"|"+this.traceId+"."+this.spanId+"."},e.prototype.toString=function(){return this.version+"-"+this.traceId+"-"+this.spanId+"-"+this.traceFlag},e.prototype.updateSpanId=function(){this.spanId=me.w3cTraceId().substr(0,16)},e.DEFAULT_TRACE_FLAG="01",e.DEFAULT_VERSION="00",e}();Qv.exports=qP});var Al=l((xq,Wv)=>{"use strict";var jP=function(){function e(t){this.fieldmap=[],t&&(this.fieldmap=this.parseHeader(t))}return e.prototype.toString=function(){var t=this.fieldmap;return!t||t.length==0?null:t.join(", ")},e.validateKeyChars=function(t){var r=t.split("@");if(r.length==2){var n=r[0].trim(),i=r[1].trim(),a=Boolean(n.match(/^[\ ]?[a-z0-9\*\-\_/]{1,241}$/)),s=Boolean(i.match(/^[\ ]?[a-z0-9\*\-\_/]{1,14}$/));return a&&s}else if(r.length==1)return Boolean(t.match(/^[\ ]?[a-z0-9\*\-\_/]{1,256}$/));return!1},e.prototype.parseHeader=function(t){var r=[],n={},i=t.split(",");if(i.length>32)return null;for(var a=0,s=i;a<s.length;a++){var o=s[a],u=o.trim();if(u.length!==0){var c=u.split("=");if(c.length!==2||!e.validateKeyChars(c[0])||n[c[0]])return null;n[c[0]]=!0,r.push(u)}}return r},e.strict=!0,e}();Wv.exports=jP});var Dt=l((Mq,Zv)=>{"use strict";var kP=function(){function e(){}return e}();Zv.exports=kP});var eg=l((Sl,Jv)=>{"use strict";var HP=Sl&&Sl.__extends||function(){var e=function(t,r){return e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(n,i){n.__proto__=i}||function(n,i){for(var a in i)Object.prototype.hasOwnProperty.call(i,a)&&(n[a]=i[a])},e(t,r)};return function(t,r){e(t,r);function n(){this.constructor=t}t.prototype=r===null?Object.create(r):(n.prototype=r.prototype,new n)}}(),UP=Dt(),BP=function(e){HP(t,e);function t(){var r=e.call(this)||this;return r.ver=2,r.properties={},r.measurements={},r}return t}(UP);Jv.exports=BP});var Il=l((Lq,tg)=>{"use strict";var FP=function(){function e(){}return e}();tg.exports=FP});var ng=l((qq,rg)=>{"use strict";var GP=function(){function e(){this.applicationVersion="ai.application.ver",this.deviceId="ai.device.id",this.deviceLocale="ai.device.locale",this.deviceModel="ai.device.model",this.deviceOEMName="ai.device.oemName",this.deviceOSVersion="ai.device.osVersion",this.deviceType="ai.device.type",this.locationIp="ai.location.ip",this.operationId="ai.operation.id",this.operationName="ai.operation.name",this.operationParentId="ai.operation.parentId",this.operationSyntheticSource="ai.operation.syntheticSource",this.operationCorrelationVector="ai.operation.correlationVector",this.sessionId="ai.session.id",this.sessionIsFirst="ai.session.isFirst",this.userAccountId="ai.user.accountId",this.userId="ai.user.id",this.userAuthUserId="ai.user.authUserId",this.cloudRole="ai.cloud.role",this.cloudRoleInstance="ai.cloud.roleInstance",this.internalSdkVersion="ai.internal.sdkVersion",this.internalAgentVersion="ai.internal.agentVersion",this.internalNodeName="ai.internal.nodeName"}return e}();rg.exports=GP});var ag=l((Cl,ig)=>{"use strict";var VP=Cl&&Cl.__extends||function(){var e=function(t,r){return e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(n,i){n.__proto__=i}||function(n,i){for(var a in i)Object.prototype.hasOwnProperty.call(i,a)&&(n[a]=i[a])},e(t,r)};return function(t,r){e(t,r);function n(){this.constructor=t}t.prototype=r===null?Object.create(r):(n.prototype=r.prototype,new n)}}(),$P=Il(),zP=function(e){VP(t,e);function t(){return e.call(this)||this}return t}($P);ig.exports=zP});var Ol=l((jq,sg)=>{"use strict";var bl;(function(e){e[e.Measurement=0]="Measurement",e[e.Aggregation=1]="Aggregation"})(bl||(bl={}));sg.exports=bl});var ug=l((kq,og)=>{"use strict";var XP=Ol(),KP=function(){function e(){this.kind=XP.Measurement}return e}();og.exports=KP});var lg=l((Hq,cg)=>{"use strict";var YP=function(){function e(){this.ver=1,this.sampleRate=100,this.tags={}}return e}();cg.exports=YP});var Rl=l((Pl,fg)=>{"use strict";var QP=Pl&&Pl.__extends||function(){var e=function(t,r){return e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(n,i){n.__proto__=i}||function(n,i){for(var a in i)Object.prototype.hasOwnProperty.call(i,a)&&(n[a]=i[a])},e(t,r)};return function(t,r){e(t,r);function n(){this.constructor=t}t.prototype=r===null?Object.create(r):(n.prototype=r.prototype,new n)}}(),WP=Dt(),ZP=function(e){QP(t,e);function t(){var r=e.call(this)||this;return r.ver=2,r.properties={},r.measurements={},r}return t}(WP);fg.exports=ZP});var dg=l((Nl,pg)=>{"use strict";var JP=Nl&&Nl.__extends||function(){var e=function(t,r){return e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(n,i){n.__proto__=i}||function(n,i){for(var a in i)Object.prototype.hasOwnProperty.call(i,a)&&(n[a]=i[a])},e(t,r)};return function(t,r){e(t,r);function n(){this.constructor=t}t.prototype=r===null?Object.create(r):(n.prototype=r.prototype,new n)}}(),eR=Dt(),tR=function(e){JP(t,e);function t(){var r=e.call(this)||this;return r.ver=2,r.exceptions=[],r.properties={},r.measurements={},r}return t}(eR);pg.exports=tR});var _g=l((Uq,hg)=>{"use strict";var rR=function(){function e(){this.hasFullStack=!0,this.parsedStack=[]}return e}();hg.exports=rR});var gg=l((Dl,vg)=>{"use strict";var nR=Dl&&Dl.__extends||function(){var e=function(t,r){return e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(n,i){n.__proto__=i}||function(n,i){for(var a in i)Object.prototype.hasOwnProperty.call(i,a)&&(n[a]=i[a])},e(t,r)};return function(t,r){e(t,r);function n(){this.constructor=t}t.prototype=r===null?Object.create(r):(n.prototype=r.prototype,new n)}}(),iR=Dt(),aR=function(e){nR(t,e);function t(){var r=e.call(this)||this;return r.ver=2,r.properties={},r}return t}(iR);vg.exports=aR});var mg=l((wl,Eg)=>{"use strict";var sR=wl&&wl.__extends||function(){var e=function(t,r){return e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(n,i){n.__proto__=i}||function(n,i){for(var a in i)Object.prototype.hasOwnProperty.call(i,a)&&(n[a]=i[a])},e(t,r)};return function(t,r){e(t,r);function n(){this.constructor=t}t.prototype=r===null?Object.create(r):(n.prototype=r.prototype,new n)}}(),oR=Dt(),uR=function(e){sR(t,e);function t(){var r=e.call(this)||this;return r.ver=2,r.metrics=[],r.properties={},r}return t}(oR);Eg.exports=uR});var Tg=l((xl,yg)=>{"use strict";var cR=xl&&xl.__extends||function(){var e=function(t,r){return e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(n,i){n.__proto__=i}||function(n,i){for(var a in i)Object.prototype.hasOwnProperty.call(i,a)&&(n[a]=i[a])},e(t,r)};return function(t,r){e(t,r);function n(){this.constructor=t}t.prototype=r===null?Object.create(r):(n.prototype=r.prototype,new n)}}(),lR=Rl(),fR=function(e){cR(t,e);function t(){var r=e.call(this)||this;return r.ver=2,r.properties={},r.measurements={},r}return t}(lR);yg.exports=fR});var Sg=l((Ml,Ag)=>{"use strict";var pR=Ml&&Ml.__extends||function(){var e=function(t,r){return e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(n,i){n.__proto__=i}||function(n,i){for(var a in i)Object.prototype.hasOwnProperty.call(i,a)&&(n[a]=i[a])},e(t,r)};return function(t,r){e(t,r);function n(){this.constructor=t}t.prototype=r===null?Object.create(r):(n.prototype=r.prototype,new n)}}(),dR=Dt(),hR=function(e){pR(t,e);function t(){var r=e.call(this)||this;return r.ver=2,r.success=!0,r.properties={},r.measurements={},r}return t}(dR);Ag.exports=hR});var Cg=l((Ll,Ig)=>{"use strict";var _R=Ll&&Ll.__extends||function(){var e=function(t,r){return e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(n,i){n.__proto__=i}||function(n,i){for(var a in i)Object.prototype.hasOwnProperty.call(i,a)&&(n[a]=i[a])},e(t,r)};return function(t,r){e(t,r);function n(){this.constructor=t}t.prototype=r===null?Object.create(r):(n.prototype=r.prototype,new n)}}(),vR=Dt(),gR=function(e){_R(t,e);function t(){var r=e.call(this)||this;return r.ver=2,r.properties={},r.measurements={},r}return t}(vR);Ig.exports=gR});var Og=l((Bq,bg)=>{"use strict";var ql;(function(e){e[e.Verbose=0]="Verbose",e[e.Information=1]="Information",e[e.Warning=2]="Warning",e[e.Error=3]="Error",e[e.Critical=4]="Critical"})(ql||(ql={}));bg.exports=ql});var Rg=l((Fq,Pg)=>{"use strict";var ER=function(){function e(){}return e}();Pg.exports=ER});var jl=l(fe=>{"use strict";Object.defineProperty(fe,"__esModule",{value:!0});fe.AvailabilityData=eg();fe.Base=Il();fe.ContextTagKeys=ng();fe.Data=ag();fe.DataPoint=ug();fe.DataPointType=Ol();fe.Domain=Dt();fe.Envelope=lg();fe.EventData=Rl();fe.ExceptionData=dg();fe.ExceptionDetails=_g();fe.MessageData=gg();fe.MetricData=mg();fe.PageViewData=Tg();fe.RemoteDependencyData=Sg();fe.RequestData=Cg();fe.SeverityLevel=Og();fe.StackFrame=Rg()});var Ng=l(Hn=>{"use strict";Object.defineProperty(Hn,"__esModule",{value:!0});Hn.domainSupportsProperties=Hn.RemoteDependencyDataConstants=void 0;var Gr=jl(),mR=function(){function e(){}return e.TYPE_HTTP="Http",e.TYPE_AI="Http (tracked component)",e}();Hn.RemoteDependencyDataConstants=mR;function yR(e){return"properties"in e||e instanceof Gr.EventData||e instanceof Gr.ExceptionData||e instanceof Gr.MessageData||e instanceof Gr.MetricData||e instanceof Gr.PageViewData||e instanceof Gr.RemoteDependencyData||e instanceof Gr.RequestData}Hn.domainSupportsProperties=yR});var wg=l(Dg=>{"use strict";Object.defineProperty(Dg,"__esModule",{value:!0})});var Mg=l(xg=>{"use strict";Object.defineProperty(xg,"__esModule",{value:!0})});var qg=l(Lg=>{"use strict";Object.defineProperty(Lg,"__esModule",{value:!0})});var kg=l(jg=>{"use strict";Object.defineProperty(jg,"__esModule",{value:!0})});var Ug=l(Hg=>{"use strict";Object.defineProperty(Hg,"__esModule",{value:!0})});var Fg=l(Bg=>{"use strict";Object.defineProperty(Bg,"__esModule",{value:!0})});var Vg=l(Gg=>{"use strict";Object.defineProperty(Gg,"__esModule",{value:!0})});var zg=l($g=>{"use strict";Object.defineProperty($g,"__esModule",{value:!0})});var Kg=l(Xg=>{"use strict";Object.defineProperty(Xg,"__esModule",{value:!0})});var Qg=l(Yg=>{"use strict";Object.defineProperty(Yg,"__esModule",{value:!0})});var Zg=l(Wg=>{"use strict";Object.defineProperty(Wg,"__esModule",{value:!0})});var eE=l(Jg=>{"use strict";Object.defineProperty(Jg,"__esModule",{value:!0})});var tE=l(at=>{"use strict";Object.defineProperty(at,"__esModule",{value:!0});at.TelemetryType=at.TelemetryTypeString=at.baseTypeToTelemetryType=at.telemetryTypeToBaseType=void 0;function TR(e){switch(e){case ye.Event:return"EventData";case ye.Exception:return"ExceptionData";case ye.Trace:return"MessageData";case ye.Metric:return"MetricData";case ye.Request:return"RequestData";case ye.Dependency:return"RemoteDependencyData";case ye.Availability:return"AvailabilityData";case ye.PageView:return"PageViewData"}}at.telemetryTypeToBaseType=TR;function AR(e){switch(e){case"EventData":return ye.Event;case"ExceptionData":return ye.Exception;case"MessageData":return ye.Trace;case"MetricData":return ye.Metric;case"RequestData":return ye.Request;case"RemoteDependencyData":return ye.Dependency;case"AvailabilityData":return ye.Availability;case"PageViewData":return ye.PageView}}at.baseTypeToTelemetryType=AR;at.TelemetryTypeString={Event:"EventData",Exception:"ExceptionData",Trace:"MessageData",Metric:"MetricData",Request:"RequestData",Dependency:"RemoteDependencyData",Availability:"AvailabilityData",PageView:"PageViewData"};var ye;(function(e){e[e.Event=0]="Event",e[e.Exception=1]="Exception",e[e.Trace=2]="Trace",e[e.Metric=3]="Metric",e[e.Request=4]="Request",e[e.Dependency=5]="Dependency",e[e.Availability=6]="Availability",e[e.PageView=7]="PageView"})(ye=at.TelemetryType||(at.TelemetryType={}))});var rE=l(he=>{"use strict";var SR=he&&he.__createBinding||(Object.create?function(e,t,r,n){n===void 0&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){n===void 0&&(n=r),e[n]=t[r]}),Be=he&&he.__exportStar||function(e,t){for(var r in e)r!=="default"&&!Object.prototype.hasOwnProperty.call(t,r)&&SR(t,e,r)};Object.defineProperty(he,"__esModule",{value:!0});Be(wg(),he);Be(Mg(),he);Be(qg(),he);Be(kg(),he);Be(Ug(),he);Be(Fg(),he);Be(Vg(),he);Be(zg(),he);Be(Kg(),he);Be(Qg(),he);Be(Zg(),he);Be(eE(),he);Be(tE(),he)});var iE=l(nE=>{"use strict";Object.defineProperty(nE,"__esModule",{value:!0})});var sE=l(aE=>{"use strict";Object.defineProperty(aE,"__esModule",{value:!0})});var uE=l(oE=>{"use strict";Object.defineProperty(oE,"__esModule",{value:!0})});var lE=l(cE=>{"use strict";Object.defineProperty(cE,"__esModule",{value:!0})});var pE=l(fE=>{"use strict";Object.defineProperty(fE,"__esModule",{value:!0})});var hE=l(dE=>{"use strict";Object.defineProperty(dE,"__esModule",{value:!0})});var vE=l(_E=>{"use strict";Object.defineProperty(_E,"__esModule",{value:!0})});var EE=l(gE=>{"use strict";Object.defineProperty(gE,"__esModule",{value:!0})});var mE=l(qe=>{"use strict";var IR=qe&&qe.__createBinding||(Object.create?function(e,t,r,n){n===void 0&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){n===void 0&&(n=r),e[n]=t[r]}),ir=qe&&qe.__exportStar||function(e,t){for(var r in e)r!=="default"&&!Object.prototype.hasOwnProperty.call(t,r)&&IR(t,e,r)};Object.defineProperty(qe,"__esModule",{value:!0});ir(iE(),qe);ir(sE(),qe);ir(uE(),qe);ir(lE(),qe);ir(pE(),qe);ir(hE(),qe);ir(vE(),qe);ir(EE(),qe)});var De=l(_t=>{"use strict";var CR=_t&&_t.__createBinding||(Object.create?function(e,t,r,n){n===void 0&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){n===void 0&&(n=r),e[n]=t[r]}),vo=_t&&_t.__exportStar||function(e,t){for(var r in e)r!=="default"&&!Object.prototype.hasOwnProperty.call(t,r)&&CR(t,e,r)};Object.defineProperty(_t,"__esModule",{value:!0});vo(Ng(),_t);vo(jl(),_t);vo(rE(),_t);vo(mE(),_t)});var kl=l((_1,yE)=>{"use strict";var bR=function(){function e(){}return e.prototype.getUrl=function(){return this.url},e.prototype.RequestParser=function(){this.startTime=+new Date},e.prototype._setStatus=function(t,r){var n=+new Date;this.duration=n-this.startTime,this.statusCode=t;var i=this.properties||{};if(r){if(typeof r=="string")i.error=r;else if(r instanceof Error)i.error=r.message;else if(typeof r=="object")for(var a in r)i[a]=r[a]&&r[a].toString&&r[a].toString()}this.properties=i},e.prototype._isSuccess=function(){return 0<this.statusCode&&this.statusCode<400},e}();yE.exports=bR});var Bl=l((Ul,AE)=>{"use strict";var OR=Ul&&Ul.__extends||function(){var e=function(t,r){return e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(n,i){n.__proto__=i}||function(n,i){for(var a in i)Object.prototype.hasOwnProperty.call(i,a)&&(n[a]=i[a])},e(t,r)};return function(t,r){e(t,r);function n(){this.constructor=t}t.prototype=r===null?Object.create(r):(n.prototype=r.prototype,new n)}}(),go=__webpack_require__(57310),PR=De(),TE=Ue(),Fe=jn(),RR=kl(),ar=Fr(),NR=Al(),Hl=Qi(),DR=function(e){OR(t,e);function t(r,n){var i=e.call(this)||this;return r&&(i.method=r.method,i.url=i._getAbsoluteUrl(r),i.startTime=+new Date,i.socketRemoteAddress=r.socket&&r.socket.remoteAddress,i.parseHeaders(r,n),r.connection&&(i.connectionRemoteAddress=r.connection.remoteAddress,i.legacySocketRemoteAddress=r.connection.socket&&r.connection.socket.remoteAddress)),i}return t.prototype.onError=function(r,n){this._setStatus(void 0,r),n&&(this.duration=n)},t.prototype.onResponse=function(r,n){this._setStatus(r.statusCode,void 0),n&&(this.duration=n)},t.prototype.getRequestTelemetry=function(r){var n={id:this.requestId,name:this.method+" "+go.parse(this.url).pathname,url:this.url,source:this.sourceCorrelationId,duration:this.duration,resultCode:this.statusCode?this.statusCode.toString():null,success:this._isSuccess(),properties:this.properties};if(r&&r.time?n.time=r.time:this.startTime&&(n.time=new Date(this.startTime)),r){for(var i in r)n[i]||(n[i]=r[i]);if(r.properties)for(var i in r.properties)n.properties[i]=r.properties[i]}return n},t.prototype.getRequestTags=function(r){var n={};for(var i in r)n[i]=r[i];return n[t.keys.locationIp]=r[t.keys.locationIp]||this._getIp(),n[t.keys.sessionId]=r[t.keys.sessionId]||this._getId("ai_session"),n[t.keys.userId]=r[t.keys.userId]||this._getId("ai_user"),n[t.keys.userAuthUserId]=r[t.keys.userAuthUserId]||this._getId("ai_authUser"),n[t.keys.operationName]=this.getOperationName(r),n[t.keys.operationParentId]=this.getOperationParentId(r),n[t.keys.operationId]=this.getOperationId(r),n},t.prototype.getOperationId=function(r){return r[t.keys.operationId]||this.operationId},t.prototype.getOperationParentId=function(r){return r[t.keys.operationParentId]||this.parentId||this.getOperationId(r)},t.prototype.getOperationName=function(r){return r[t.keys.operationName]||this.method+" "+go.parse(this.url).pathname},t.prototype.getRequestId=function(){return this.requestId},t.prototype.getCorrelationContextHeader=function(){return this.correlationContextHeader},t.prototype.getTraceparent=function(){return this.traceparent},t.prototype.getTracestate=function(){return this.tracestate},t.prototype.getLegacyRootId=function(){return this.legacyRootId},t.prototype._getAbsoluteUrl=function(r){if(!r.headers)return r.url;var n=r.connection?r.connection.encrypted:null,i=go.parse(r.url),a=i.pathname,s=i.search,o=n||r.headers["x-forwarded-proto"]=="https"?"https":"http",u=go.format({protocol:o,host:r.headers.host,pathname:a,search:s});return u},t.prototype._getIp=function(){var r=/[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}/,n=function(a){var s=r.exec(a);if(s)return s[0]},i=n(this.rawHeaders["x-forwarded-for"])||n(this.rawHeaders["x-client-ip"])||n(this.rawHeaders["x-real-ip"])||n(this.connectionRemoteAddress)||n(this.socketRemoteAddress)||n(this.legacySocketRemoteAddress);return!i&&this.connectionRemoteAddress&&this.connectionRemoteAddress.substr&&this.connectionRemoteAddress.substr(0,2)==="::"&&(i="127.0.0.1"),i},t.prototype._getId=function(r){var n=this.rawHeaders&&this.rawHeaders.cookie&&typeof this.rawHeaders.cookie=="string"&&this.rawHeaders.cookie||"",i=t.parseId(TE.getCookie(r,n));return i},t.prototype.setBackCompatFromThisTraceContext=function(){this.operationId=this.traceparent.traceId,this.traceparent.legacyRootId&&(this.legacyRootId=this.traceparent.legacyRootId),this.parentId=this.traceparent.parentId,this.traceparent.updateSpanId(),this.requestId=this.traceparent.getBackCompatRequestId()},t.prototype.parseHeaders=function(r,n){if(this.rawHeaders=r.headers||r.rawHeaders,this.userAgent=r.headers&&r.headers["user-agent"],this.sourceCorrelationId=TE.getCorrelationContextTarget(r,Fe.requestContextSourceKey),r.headers){var i=r.headers[Fe.traceStateHeader]?r.headers[Fe.traceStateHeader].toString():null,a=r.headers[Fe.traceparentHeader]?r.headers[Fe.traceparentHeader].toString():null,s=r.headers[Fe.requestIdHeader]?r.headers[Fe.requestIdHeader].toString():null,o=r.headers[Fe.parentIdHeader]?r.headers[Fe.parentIdHeader].toString():null,u=r.headers[Fe.rootIdHeader]?r.headers[Fe.rootIdHeader].toString():null;this.correlationContextHeader=r.headers[Fe.correlationContextHeader]?r.headers[Fe.correlationContextHeader].toString():null,ar.w3cEnabled&&(a||i)?(this.traceparent=new Hl(a?a.toString():null),this.tracestate=a&&i&&new NR(i?i.toString():null),this.setBackCompatFromThisTraceContext()):s?ar.w3cEnabled?(this.traceparent=new Hl(null,s),this.setBackCompatFromThisTraceContext()):(this.parentId=s,this.requestId=ar.generateRequestId(this.parentId),this.operationId=ar.getRootId(this.requestId)):ar.w3cEnabled?(this.traceparent=new Hl,this.traceparent.parentId=o,this.traceparent.legacyRootId=u||o,this.setBackCompatFromThisTraceContext()):(this.parentId=o,this.requestId=ar.generateRequestId(u||this.parentId),this.correlationContextHeader=null,this.operationId=ar.getRootId(this.requestId)),n&&(this.requestId=n,this.operationId=ar.getRootId(this.requestId))}},t.parseId=function(r){var n=r.split("|");return n.length>0?n[0]:""},t.keys=new PR.ContextTagKeys,t}(RR);AE.exports=DR});var HE=l((C,kE)=>{C=kE.exports=D;var H;typeof process=="object"&&process.env&&process.env.NODE_DEBUG&&/\bsemver\b/i.test(process.env.NODE_DEBUG)?H=function(){var e=Array.prototype.slice.call(arguments,0);e.unshift("SEMVER"),console.log.apply(console,e)}:H=function(){};C.SEMVER_SPEC_VERSION="2.0.0";var Gl=256,Eo=Number.MAX_SAFE_INTEGER||9007199254740991,Fl=16,F=C.re=[],v=C.src=[],P=0,Un=P++;v[Un]="0|[1-9]\\d*";var Bn=P++;v[Bn]="[0-9]+";var Xl=P++;v[Xl]="\\d*[a-zA-Z-][a-zA-Z0-9-]*";var IE=P++;v[IE]="("+v[Un]+")\\.("+v[Un]+")\\.("+v[Un]+")";var CE=P++;v[CE]="("+v[Bn]+")\\.("+v[Bn]+")\\.("+v[Bn]+")";var Vl=P++;v[Vl]="(?:"+v[Un]+"|"+v[Xl]+")";var $l=P++;v[$l]="(?:"+v[Bn]+"|"+v[Xl]+")";var Kl=P++;v[Kl]="(?:-("+v[Vl]+"(?:\\."+v[Vl]+")*))";var Yl=P++;v[Yl]="(?:-?("+v[$l]+"(?:\\."+v[$l]+")*))";var zl=P++;v[zl]="[0-9A-Za-z-]+";var Ji=P++;v[Ji]="(?:\\+("+v[zl]+"(?:\\."+v[zl]+")*))";var Ql=P++,bE="v?"+v[IE]+v[Kl]+"?"+v[Ji]+"?";v[Ql]="^"+bE+"$";var Wl="[v=\\s]*"+v[CE]+v[Yl]+"?"+v[Ji]+"?",Zl=P++;v[Zl]="^"+Wl+"$";var Vn=P++;v[Vn]="((?:<|>)?=?)";var mo=P++;v[mo]=v[Bn]+"|x|X|\\*";var yo=P++;v[yo]=v[Un]+"|x|X|\\*";var Vr=P++;v[Vr]="[v=\\s]*("+v[yo]+")(?:\\.("+v[yo]+")(?:\\.("+v[yo]+")(?:"+v[Kl]+")?"+v[Ji]+"?)?)?";var Gn=P++;v[Gn]="[v=\\s]*("+v[mo]+")(?:\\.("+v[mo]+")(?:\\.("+v[mo]+")(?:"+v[Yl]+")?"+v[Ji]+"?)?)?";var OE=P++;v[OE]="^"+v[Vn]+"\\s*"+v[Vr]+"$";var PE=P++;v[PE]="^"+v[Vn]+"\\s*"+v[Gn]+"$";var RE=P++;v[RE]="(?:^|[^\\d])(\\d{1,"+Fl+"})(?:\\.(\\d{1,"+Fl+"}))?(?:\\.(\\d{1,"+Fl+"}))?(?:$|[^\\d])";var bo=P++;v[bo]="(?:~>?)";var To=P++;v[To]="(\\s*)"+v[bo]+"\\s+";F[To]=new RegExp(v[To],"g");var wR="$1~",NE=P++;v[NE]="^"+v[bo]+v[Vr]+"$";var DE=P++;v[DE]="^"+v[bo]+v[Gn]+"$";var Oo=P++;v[Oo]="(?:\\^)";var Ao=P++;v[Ao]="(\\s*)"+v[Oo]+"\\s+";F[Ao]=new RegExp(v[Ao],"g");var xR="$1^",wE=P++;v[wE]="^"+v[Oo]+v[Vr]+"$";var xE=P++;v[xE]="^"+v[Oo]+v[Gn]+"$";var Jl=P++;v[Jl]="^"+v[Vn]+"\\s*("+Wl+")$|^$";var ef=P++;v[ef]="^"+v[Vn]+"\\s*("+bE+")$|^$";var Wi=P++;v[Wi]="(\\s*)"+v[Vn]+"\\s*("+Wl+"|"+v[Vr]+")";F[Wi]=new RegExp(v[Wi],"g");var MR="$1$2$3",ME=P++;v[ME]="^\\s*("+v[Vr]+")\\s+-\\s+("+v[Vr]+")\\s*$";var LE=P++;v[LE]="^\\s*("+v[Gn]+")\\s+-\\s+("+v[Gn]+")\\s*$";var qE=P++;v[qE]="(<|>)?=?\\s*\\*";for(sr=0;sr<P;sr++)H(sr,v[sr]),F[sr]||(F[sr]=new RegExp(v[sr]));var sr;C.parse=$r;function $r(e,t){if((!t||typeof t!="object")&&(t={loose:!!t,includePrerelease:!1}),e instanceof D)return e;if(typeof e!="string"||e.length>Gl)return null;var r=t.loose?F[Zl]:F[Ql];if(!r.test(e))return null;try{return new D(e,t)}catch{return null}}C.valid=LR;function LR(e,t){var r=$r(e,t);return r?r.version:null}C.clean=qR;function qR(e,t){var r=$r(e.trim().replace(/^[=v]+/,""),t);return r?r.version:null}C.SemVer=D;function D(e,t){if((!t||typeof t!="object")&&(t={loose:!!t,includePrerelease:!1}),e instanceof D){if(e.loose===t.loose)return e;e=e.version}else if(typeof e!="string")throw new TypeError("Invalid Version: "+e);if(e.length>Gl)throw new TypeError("version is longer than "+Gl+" characters");if(!(this instanceof D))return new D(e,t);H("SemVer",e,t),this.options=t,this.loose=!!t.loose;var r=e.trim().match(t.loose?F[Zl]:F[Ql]);if(!r)throw new TypeError("Invalid Version: "+e);if(this.raw=e,this.major=+r[1],this.minor=+r[2],this.patch=+r[3],this.major>Eo||this.major<0)throw new TypeError("Invalid major version");if(this.minor>Eo||this.minor<0)throw new TypeError("Invalid minor version");if(this.patch>Eo||this.patch<0)throw new TypeError("Invalid patch version");r[4]?this.prerelease=r[4].split(".").map(function(n){if(/^[0-9]+$/.test(n)){var i=+n;if(i>=0&&i<Eo)return i}return n}):this.prerelease=[],this.build=r[5]?r[5].split("."):[],this.format()}D.prototype.format=function(){return this.version=this.major+"."+this.minor+"."+this.patch,this.prerelease.length&&(this.version+="-"+this.prerelease.join(".")),this.version};D.prototype.toString=function(){return this.version};D.prototype.compare=function(e){return H("SemVer.compare",this.version,this.options,e),e instanceof D||(e=new D(e,this.options)),this.compareMain(e)||this.comparePre(e)};D.prototype.compareMain=function(e){return e instanceof D||(e=new D(e,this.options)),Fn(this.major,e.major)||Fn(this.minor,e.minor)||Fn(this.patch,e.patch)};D.prototype.comparePre=function(e){if(e instanceof D||(e=new D(e,this.options)),this.prerelease.length&&!e.prerelease.length)return-1;if(!this.prerelease.length&&e.prerelease.length)return 1;if(!this.prerelease.length&&!e.prerelease.length)return 0;var t=0;do{var r=this.prerelease[t],n=e.prerelease[t];if(H("prerelease compare",t,r,n),r===void 0&&n===void 0)return 0;if(n===void 0)return 1;if(r===void 0)return-1;if(r===n)continue;return Fn(r,n)}while(++t)};D.prototype.inc=function(e,t){switch(e){case"premajor":this.prerelease.length=0,this.patch=0,this.minor=0,this.major++,this.inc("pre",t);break;case"preminor":this.prerelease.length=0,this.patch=0,this.minor++,this.inc("pre",t);break;case"prepatch":this.prerelease.length=0,this.inc("patch",t),this.inc("pre",t);break;case"prerelease":this.prerelease.length===0&&this.inc("patch",t),this.inc("pre",t);break;case"major":(this.minor!==0||this.patch!==0||this.prerelease.length===0)&&this.major++,this.minor=0,this.patch=0,this.prerelease=[];break;case"minor":(this.patch!==0||this.prerelease.length===0)&&this.minor++,this.patch=0,this.prerelease=[];break;case"patch":this.prerelease.length===0&&this.patch++,this.prerelease=[];break;case"pre":if(this.prerelease.length===0)this.prerelease=[0];else{for(var r=this.prerelease.length;--r>=0;)typeof this.prerelease[r]=="number"&&(this.prerelease[r]++,r=-2);r===-1&&this.prerelease.push(0)}t&&(this.prerelease[0]===t?isNaN(this.prerelease[1])&&(this.prerelease=[t,0]):this.prerelease=[t,0]);break;default:throw new Error("invalid increment argument: "+e)}return this.format(),this.raw=this.version,this};C.inc=jR;function jR(e,t,r,n){typeof r=="string"&&(n=r,r=void 0);try{return new D(e,r).inc(t,n).version}catch{return null}}C.diff=kR;function kR(e,t){if(tf(e,t))return null;var r=$r(e),n=$r(t),i="";if(r.prerelease.length||n.prerelease.length){i="pre";var a="prerelease"}for(var s in r)if((s==="major"||s==="minor"||s==="patch")&&r[s]!==n[s])return i+s;return a}C.compareIdentifiers=Fn;var SE=/^[0-9]+$/;function Fn(e,t){var r=SE.test(e),n=SE.test(t);return r&&n&&(e=+e,t=+t),e===t?0:r&&!n?-1:n&&!r?1:e<t?-1:1}C.rcompareIdentifiers=HR;function HR(e,t){return Fn(t,e)}C.major=UR;function UR(e,t){return new D(e,t).major}C.minor=BR;function BR(e,t){return new D(e,t).minor}C.patch=FR;function FR(e,t){return new D(e,t).patch}C.compare=wt;function wt(e,t,r){return new D(e,r).compare(new D(t,r))}C.compareLoose=GR;function GR(e,t){return wt(e,t,!0)}C.rcompare=VR;function VR(e,t,r){return wt(t,e,r)}C.sort=$R;function $R(e,t){return e.sort(function(r,n){return C.compare(r,n,t)})}C.rsort=zR;function zR(e,t){return e.sort(function(r,n){return C.rcompare(r,n,t)})}C.gt=Zi;function Zi(e,t,r){return wt(e,t,r)>0}C.lt=So;function So(e,t,r){return wt(e,t,r)<0}C.eq=tf;function tf(e,t,r){return wt(e,t,r)===0}C.neq=jE;function jE(e,t,r){return wt(e,t,r)!==0}C.gte=rf;function rf(e,t,r){return wt(e,t,r)>=0}C.lte=nf;function nf(e,t,r){return wt(e,t,r)<=0}C.cmp=Io;function Io(e,t,r,n){switch(t){case"===":return typeof e=="object"&&(e=e.version),typeof r=="object"&&(r=r.version),e===r;case"!==":return typeof e=="object"&&(e=e.version),typeof r=="object"&&(r=r.version),e!==r;case"":case"=":case"==":return tf(e,r,n);case"!=":return jE(e,r,n);case">":return Zi(e,r,n);case">=":return rf(e,r,n);case"<":return So(e,r,n);case"<=":return nf(e,r,n);default:throw new TypeError("Invalid operator: "+t)}}C.Comparator=Ke;function Ke(e,t){if((!t||typeof t!="object")&&(t={loose:!!t,includePrerelease:!1}),e instanceof Ke){if(e.loose===!!t.loose)return e;e=e.value}if(!(this instanceof Ke))return new Ke(e,t);H("comparator",e,t),this.options=t,this.loose=!!t.loose,this.parse(e),this.semver===ea?this.value="":this.value=this.operator+this.semver.version,H("comp",this)}var ea={};Ke.prototype.parse=function(e){var t=this.options.loose?F[Jl]:F[ef],r=e.match(t);if(!r)throw new TypeError("Invalid comparator: "+e);this.operator=r[1],this.operator==="="&&(this.operator=""),r[2]?this.semver=new D(r[2],this.options.loose):this.semver=ea};Ke.prototype.toString=function(){return this.value};Ke.prototype.test=function(e){return H("Comparator.test",e,this.options.loose),this.semver===ea?!0:(typeof e=="string"&&(e=new D(e,this.options)),Io(e,this.operator,this.semver,this.options))};Ke.prototype.intersects=function(e,t){if(!(e instanceof Ke))throw new TypeError("a Comparator is required");(!t||typeof t!="object")&&(t={loose:!!t,includePrerelease:!1});var r;if(this.operator==="")return r=new Z(e.value,t),Co(this.value,r,t);if(e.operator==="")return r=new Z(this.value,t),Co(e.semver,r,t);var n=(this.operator===">="||this.operator===">")&&(e.operator===">="||e.operator===">"),i=(this.operator==="<="||this.operator==="<")&&(e.operator==="<="||e.operator==="<"),a=this.semver.version===e.semver.version,s=(this.operator===">="||this.operator==="<=")&&(e.operator===">="||e.operator==="<="),o=Io(this.semver,"<",e.semver,t)&&(this.operator===">="||this.operator===">")&&(e.operator==="<="||e.operator==="<"),u=Io(this.semver,">",e.semver,t)&&(this.operator==="<="||this.operator==="<")&&(e.operator===">="||e.operator===">");return n||i||a&&s||o||u};C.Range=Z;function Z(e,t){if((!t||typeof t!="object")&&(t={loose:!!t,includePrerelease:!1}),e instanceof Z)return e.loose===!!t.loose&&e.includePrerelease===!!t.includePrerelease?e:new Z(e.raw,t);if(e instanceof Ke)return new Z(e.value,t);if(!(this instanceof Z))return new Z(e,t);if(this.options=t,this.loose=!!t.loose,this.includePrerelease=!!t.includePrerelease,this.raw=e,this.set=e.split(/\s*\|\|\s*/).map(function(r){return this.parseRange(r.trim())},this).filter(function(r){return r.length}),!this.set.length)throw new TypeError("Invalid SemVer Range: "+e);this.format()}Z.prototype.format=function(){return this.range=this.set.map(function(e){return e.join(" ").trim()}).join("||").trim(),this.range};Z.prototype.toString=function(){return this.range};Z.prototype.parseRange=function(e){var t=this.options.loose;e=e.trim();var r=t?F[LE]:F[ME];e=e.replace(r,rN),H("hyphen replace",e),e=e.replace(F[Wi],MR),H("comparator trim",e,F[Wi]),e=e.replace(F[To],wR),e=e.replace(F[Ao],xR),e=e.split(/\s+/).join(" ");var n=t?F[Jl]:F[ef],i=e.split(" ").map(function(a){return KR(a,this.options)},this).join(" ").split(/\s+/);return this.options.loose&&(i=i.filter(function(a){return!!a.match(n)})),i=i.map(function(a){return new Ke(a,this.options)},this),i};Z.prototype.intersects=function(e,t){if(!(e instanceof Z))throw new TypeError("a Range is required");return this.set.some(function(r){return r.every(function(n){return e.set.some(function(i){return i.every(function(a){return n.intersects(a,t)})})})})};C.toComparators=XR;function XR(e,t){return new Z(e,t).set.map(function(r){return r.map(function(n){return n.value}).join(" ").trim().split(" ")})}function KR(e,t){return H("comp",e,t),e=WR(e,t),H("caret",e),e=YR(e,t),H("tildes",e),e=JR(e,t),H("xrange",e),e=tN(e,t),H("stars",e),e}function we(e){return!e||e.toLowerCase()==="x"||e==="*"}function YR(e,t){return e.trim().split(/\s+/).map(function(r){return QR(r,t)}).join(" ")}function QR(e,t){var r=t.loose?F[DE]:F[NE];return e.replace(r,function(n,i,a,s,o){H("tilde",e,n,i,a,s,o);var u;return we(i)?u="":we(a)?u=">="+i+".0.0 <"+(+i+1)+".0.0":we(s)?u=">="+i+"."+a+".0 <"+i+"."+(+a+1)+".0":o?(H("replaceTilde pr",o),u=">="+i+"."+a+"."+s+"-"+o+" <"+i+"."+(+a+1)+".0"):u=">="+i+"."+a+"."+s+" <"+i+"."+(+a+1)+".0",H("tilde return",u),u})}function WR(e,t){return e.trim().split(/\s+/).map(function(r){return ZR(r,t)}).join(" ")}function ZR(e,t){H("caret",e,t);var r=t.loose?F[xE]:F[wE];return e.replace(r,function(n,i,a,s,o){H("caret",e,n,i,a,s,o);var u;return we(i)?u="":we(a)?u=">="+i+".0.0 <"+(+i+1)+".0.0":we(s)?i==="0"?u=">="+i+"."+a+".0 <"+i+"."+(+a+1)+".0":u=">="+i+"."+a+".0 <"+(+i+1)+".0.0":o?(H("replaceCaret pr",o),i==="0"?a==="0"?u=">="+i+"."+a+"."+s+"-"+o+" <"+i+"."+a+"."+(+s+1):u=">="+i+"."+a+"."+s+"-"+o+" <"+i+"."+(+a+1)+".0":u=">="+i+"."+a+"."+s+"-"+o+" <"+(+i+1)+".0.0"):(H("no pr"),i==="0"?a==="0"?u=">="+i+"."+a+"."+s+" <"+i+"."+a+"."+(+s+1):u=">="+i+"."+a+"."+s+" <"+i+"."+(+a+1)+".0":u=">="+i+"."+a+"."+s+" <"+(+i+1)+".0.0"),H("caret return",u),u})}function JR(e,t){return H("replaceXRanges",e,t),e.split(/\s+/).map(function(r){return eN(r,t)}).join(" ")}function eN(e,t){e=e.trim();var r=t.loose?F[PE]:F[OE];return e.replace(r,function(n,i,a,s,o,u){H("xRange",e,n,i,a,s,o,u);var c=we(a),f=c||we(s),p=f||we(o),d=p;return i==="="&&d&&(i=""),c?i===">"||i==="<"?n="<0.0.0":n="*":i&&d?(f&&(s=0),o=0,i===">"?(i=">=",f?(a=+a+1,s=0,o=0):(s=+s+1,o=0)):i==="<="&&(i="<",f?a=+a+1:s=+s+1),n=i+a+"."+s+"."+o):f?n=">="+a+".0.0 <"+(+a+1)+".0.0":p&&(n=">="+a+"."+s+".0 <"+a+"."+(+s+1)+".0"),H("xRange return",n),n})}function tN(e,t){return H("replaceStars",e,t),e.trim().replace(F[qE],"")}function rN(e,t,r,n,i,a,s,o,u,c,f,p,d){return we(r)?t="":we(n)?t=">="+r+".0.0":we(i)?t=">="+r+"."+n+".0":t=">="+t,we(u)?o="":we(c)?o="<"+(+u+1)+".0.0":we(f)?o="<"+u+"."+(+c+1)+".0":p?o="<="+u+"."+c+"."+f+"-"+p:o="<="+o,(t+" "+o).trim()}Z.prototype.test=function(e){if(!e)return!1;typeof e=="string"&&(e=new D(e,this.options));for(var t=0;t<this.set.length;t++)if(nN(this.set[t],e,this.options))return!0;return!1};function nN(e,t,r){for(var n=0;n<e.length;n++)if(!e[n].test(t))return!1;if(t.prerelease.length&&!r.includePrerelease){for(n=0;n<e.length;n++)if(H(e[n].semver),e[n].semver!==ea&&e[n].semver.prerelease.length>0){var i=e[n].semver;if(i.major===t.major&&i.minor===t.minor&&i.patch===t.patch)return!0}return!1}return!0}C.satisfies=Co;function Co(e,t,r){try{t=new Z(t,r)}catch{return!1}return t.test(e)}C.maxSatisfying=iN;function iN(e,t,r){var n=null,i=null;try{var a=new Z(t,r)}catch{return null}return e.forEach(function(s){a.test(s)&&(!n||i.compare(s)===-1)&&(n=s,i=new D(n,r))}),n}C.minSatisfying=aN;function aN(e,t,r){var n=null,i=null;try{var a=new Z(t,r)}catch{return null}return e.forEach(function(s){a.test(s)&&(!n||i.compare(s)===1)&&(n=s,i=new D(n,r))}),n}C.minVersion=sN;function sN(e,t){e=new Z(e,t);var r=new D("0.0.0");if(e.test(r)||(r=new D("0.0.0-0"),e.test(r)))return r;r=null;for(var n=0;n<e.set.length;++n){var i=e.set[n];i.forEach(function(a){var s=new D(a.semver.version);switch(a.operator){case">":s.prerelease.length===0?s.patch++:s.prerelease.push(0),s.raw=s.format();case"":case">=":(!r||Zi(r,s))&&(r=s);break;case"<":case"<=":break;default:throw new Error("Unexpected operation: "+a.operator)}})}return r&&e.test(r)?r:null}C.validRange=oN;function oN(e,t){try{return new Z(e,t).range||"*"}catch{return null}}C.ltr=uN;function uN(e,t,r){return af(e,t,"<",r)}C.gtr=cN;function cN(e,t,r){return af(e,t,">",r)}C.outside=af;function af(e,t,r,n){e=new D(e,n),t=new Z(t,n);var i,a,s,o,u;switch(r){case">":i=Zi,a=nf,s=So,o=">",u=">=";break;case"<":i=So,a=rf,s=Zi,o="<",u="<=";break;default:throw new TypeError('Must provide a hilo val of "<" or ">"')}if(Co(e,t,n))return!1;for(var c=0;c<t.set.length;++c){var f=t.set[c],p=null,d=null;if(f.forEach(function(h){h.semver===ea&&(h=new Ke(">=0.0.0")),p=p||h,d=d||h,i(h.semver,p.semver,n)?p=h:s(h.semver,d.semver,n)&&(d=h)}),p.operator===o||p.operator===u||(!d.operator||d.operator===o)&&a(e,d.semver))return!1;if(d.operator===u&&s(e,d.semver))return!1}return!0}C.prerelease=lN;function lN(e,t){var r=$r(e,t);return r&&r.prerelease.length?r.prerelease:null}C.intersects=fN;function fN(e,t,r){return e=new Z(e,r),t=new Z(t,r),e.intersects(t)}C.coerce=pN;function pN(e){if(e instanceof D)return e;if(typeof e!="string")return null;var t=e.match(F[RE]);return t==null?null:$r(t[1]+"."+(t[2]||"0")+"."+(t[3]||"0"))}});var Po=l((v1,FE)=>{"use strict";function sf(e){return typeof e=="function"}var xe=console.error.bind(console);function ta(e,t,r){var n=!!e[t]&&e.propertyIsEnumerable(t);Object.defineProperty(e,t,{configurable:!0,enumerable:n,writable:!0,value:r})}function ra(e){e&&e.logger&&(sf(e.logger)?xe=e.logger:xe("new logger isn't a function, not replacing"))}function UE(e,t,r){if(!e||!e[t]){xe("no original function "+t+" to wrap");return}if(!r){xe("no wrapper function"),xe(new Error().stack);return}if(!sf(e[t])||!sf(r)){xe("original object and wrapper must be functions");return}var n=e[t],i=r(n,t);return ta(i,"__original",n),ta(i,"__unwrap",function(){e[t]===i&&ta(e,t,n)}),ta(i,"__wrapped",!0),ta(e,t,i),i}function dN(e,t,r){if(e)Array.isArray(e)||(e=[e]);else{xe("must provide one or more modules to patch"),xe(new Error().stack);return}if(!(t&&Array.isArray(t))){xe("must provide one or more functions to wrap on modules");return}e.forEach(function(n){t.forEach(function(i){UE(n,i,r)})})}function BE(e,t){if(!e||!e[t]){xe("no function to unwrap."),xe(new Error().stack);return}if(!e[t].__unwrap)xe("no original to unwrap to -- has "+t+" already been unwrapped?");else return e[t].__unwrap()}function hN(e,t){if(e)Array.isArray(e)||(e=[e]);else{xe("must provide one or more modules to patch"),xe(new Error().stack);return}if(!(t&&Array.isArray(t))){xe("must provide one or more functions to unwrap on modules");return}e.forEach(function(r){t.forEach(function(n){BE(r,n)})})}ra.wrap=UE;ra.massWrap=dN;ra.unwrap=BE;ra.massUnwrap=hN;FE.exports=ra});var Do=l((g1,zE)=>{"use strict";var VE=Po(),$n=VE.wrap,Ro=VE.unwrap,xt="wrap@before";function No(e,t,r){var n=!!e[t]&&e.propertyIsEnumerable(t);Object.defineProperty(e,t,{configurable:!0,enumerable:n,writable:!0,value:r})}function _N(e,t){for(var r=t.length,n=0;n<r;n++){var i=t[n],a=e[xt];if(typeof a=="function")a(i);else if(Array.isArray(a))for(var s=a.length,o=0;o<s;o++)a[o](i)}}function $E(e,t){var r;return r=e._events&&e._events[t],Array.isArray(r)||(r?r=[r]:r=[]),r}function vN(e,t,r){var n=$E(e,t),i=n.filter(function(a){return r.indexOf(a)===-1});i.length>0&&_N(e,i)}function GE(e,t){if(!!e){var r=e;if(typeof e=="function")r=t(e);else if(Array.isArray(e)){r=[];for(var n=0;n<e.length;n++)r[n]=t(e[n])}return r}}zE.exports=function(t,r,n){if(!t||!t.on||!t.addListener||!t.removeListener||!t.emit)throw new Error("can only wrap real EEs");if(!r)throw new Error("must have function to run on listener addition");if(!n)throw new Error("must have function to wrap listeners when emitting");function i(s){return function(u,c){var f=$E(this,u).slice();try{var p=s.call(this,u,c);return vN(this,u,f),p}finally{this.on.__wrapped||$n(this,"on",i),this.addListener.__wrapped||$n(this,"addListener",i)}}}function a(s){return function(u){if(!this._events||!this._events[u])return s.apply(this,arguments);var c=this._events[u];function f(p){return function(){this._events[u]=c;try{return p.apply(this,arguments)}finally{c=this._events[u],this._events[u]=GE(c,n)}}}$n(this,"removeListener",f);try{return this._events[u]=GE(c,n),s.apply(this,arguments)}finally{Ro(this,"removeListener"),this._events[u]=c}}}t[xt]?typeof t[xt]=="function"?No(t,xt,[t[xt],r]):Array.isArray(t[xt])&&t[xt].push(r):No(t,xt,r),t.__wrapped||($n(t,"addListener",i),$n(t,"on",i),$n(t,"emit",a),No(t,"__unwrap",function(){Ro(t,"addListener"),Ro(t,"on"),Ro(t,"emit"),delete t[xt],delete t.__wrapped}),No(t,"__wrapped",!0))}});var QE=l((E1,YE)=>{"use strict";var q=__webpack_require__(73837),Mt=__webpack_require__(39491),gN=Do(),K=__webpack_require__(50852),na="cls@contexts",ia="error@context",J=process.env.DEBUG_CLS_HOOKED,L=-1;YE.exports={getNamespace:XE,createNamespace:EN,destroyNamespace:KE,reset:mN,ERROR_SYMBOL:ia};function Ye(e){this.name=e,this.active=null,this._set=[],this.id=null,this._contexts=new Map,this._indent=0}Ye.prototype.set=function(t,r){if(!this.active)throw new Error("No context available. ns.run() or ns.bind() must be called first.");if(this.active[t]=r,J){let n=" ".repeat(this._indent<0?0:this._indent);Q(n+"CONTEXT-SET KEY:"+t+"="+r+" in ns:"+this.name+" currentUid:"+L+" active:"+q.inspect(this.active,{showHidden:!0,depth:2,colors:!0}))}return r};Ye.prototype.get=function(t){if(!this.active){if(J){let r=K.currentId(),n=K.triggerAsyncId(),i=" ".repeat(this._indent<0?0:this._indent);Q(`${i}CONTEXT-GETTING KEY NO ACTIVE NS: (${this.name}) ${t}=undefined currentUid:${L} asyncHooksCurrentId:${r} triggerId:${n} len:${this._set.length}`)}return}if(J){let r=K.executionAsyncId(),n=K.triggerAsyncId(),i=" ".repeat(this._indent<0?0:this._indent);Q(i+"CONTEXT-GETTING KEY:"+t+"="+this.active[t]+" ("+this.name+") currentUid:"+L+" active:"+q.inspect(this.active,{showHidden:!0,depth:2,colors:!0})),Q(`${i}CONTEXT-GETTING KEY: (${this.name}) ${t}=${this.active[t]} currentUid:${L} asyncHooksCurrentId:${r} triggerId:${n} len:${this._set.length} active:${q.inspect(this.active)}`)}return this.active[t]};Ye.prototype.createContext=function(){let t=Object.create(this.active?this.active:Object.prototype);if(t._ns_name=this.name,t.id=L,J){let r=K.executionAsyncId(),n=K.triggerAsyncId(),i=" ".repeat(this._indent<0?0:this._indent);Q(`${i}CONTEXT-CREATED Context: (${this.name}) currentUid:${L} asyncHooksCurrentId:${r} triggerId:${n} len:${this._set.length} context:${q.inspect(t,{showHidden:!0,depth:2,colors:!0})}`)}return t};Ye.prototype.run=function(t){let r=this.createContext();this.enter(r);try{if(J){let n=K.triggerAsyncId(),i=K.executionAsyncId(),a=" ".repeat(this._indent<0?0:this._indent);Q(`${a}CONTEXT-RUN BEGIN: (${this.name}) currentUid:${L} triggerId:${n} asyncHooksCurrentId:${i} len:${this._set.length} context:${q.inspect(r)}`)}return t(r),r}catch(n){throw n&&(n[ia]=r),n}finally{if(J){let n=K.triggerAsyncId(),i=K.executionAsyncId(),a=" ".repeat(this._indent<0?0:this._indent);Q(`${a}CONTEXT-RUN END: (${this.name}) currentUid:${L} triggerId:${n} asyncHooksCurrentId:${i} len:${this._set.length} ${q.inspect(r)}`)}this.exit(r)}};Ye.prototype.runAndReturn=function(t){let r;return this.run(function(n){r=t(n)}),r};Ye.prototype.runPromise=function(t){let r=this.createContext();this.enter(r);let n=t(r);if(!n||!n.then||!n.catch)throw new Error("fn must return a promise.");return J&&Q("CONTEXT-runPromise BEFORE: ("+this.name+") currentUid:"+L+" len:"+this._set.length+" "+q.inspect(r)),n.then(i=>(J&&Q("CONTEXT-runPromise AFTER then: ("+this.name+") currentUid:"+L+" len:"+this._set.length+" "+q.inspect(r)),this.exit(r),i)).catch(i=>{throw i[ia]=r,J&&Q("CONTEXT-runPromise AFTER catch: ("+this.name+") currentUid:"+L+" len:"+this._set.length+" "+q.inspect(r)),this.exit(r),i})};Ye.prototype.bind=function(t,r){r||(this.active?r=this.active:r=this.createContext());let n=this;return function(){n.enter(r);try{return t.apply(this,arguments)}catch(a){throw a&&(a[ia]=r),a}finally{n.exit(r)}}};Ye.prototype.enter=function(t){if(Mt.ok(t,"context must be provided for entering"),J){let r=K.executionAsyncId(),n=K.triggerAsyncId(),i=" ".repeat(this._indent<0?0:this._indent);Q(`${i}CONTEXT-ENTER: (${this.name}) currentUid:${L} triggerId:${n} asyncHooksCurrentId:${r} len:${this._set.length} ${q.inspect(t)}`)}this._set.push(this.active),this.active=t};Ye.prototype.exit=function(t){if(Mt.ok(t,"context must be provided for exiting"),J){let n=K.executionAsyncId(),i=K.triggerAsyncId(),a=" ".repeat(this._indent<0?0:this._indent);Q(`${a}CONTEXT-EXIT: (${this.name}) currentUid:${L} triggerId:${i} asyncHooksCurrentId:${n} len:${this._set.length} ${q.inspect(t)}`)}if(this.active===t){Mt.ok(this._set.length,"can't remove top context"),this.active=this._set.pop();return}let r=this._set.lastIndexOf(t);r<0?(J&&Q("??ERROR?? context exiting but not entered - ignoring: "+q.inspect(t)),Mt.ok(r>=0,`context not currently entered; can't exit. 
`+q.inspect(this)+`
`+q.inspect(t))):(Mt.ok(r,"can't remove top context"),this._set.splice(r,1))};Ye.prototype.bindEmitter=function(t){Mt.ok(t.on&&t.addListener&&t.emit,"can only bind real EEs");let r=this,n="context@"+this.name;function i(s){!s||(s[na]||(s[na]=Object.create(null)),s[na][n]={namespace:r,context:r.active})}function a(s){if(!(s&&s[na]))return s;let o=s,u=s[na];return Object.keys(u).forEach(function(c){let f=u[c];o=f.namespace.bind(o,f.context)}),o}gN(t,i,a)};Ye.prototype.fromException=function(t){return t[ia]};function XE(e){return process.namespaces[e]}function EN(e){Mt.ok(e,"namespace must be given a name."),J&&Q(`NS-CREATING NAMESPACE (${e})`);let t=new Ye(e);return t.id=L,K.createHook({init(n,i,a,s){if(L=K.executionAsyncId(),t.active){if(t._contexts.set(n,t.active),J){let o=" ".repeat(t._indent<0?0:t._indent);Q(`${o}INIT [${i}] (${e}) asyncId:${n} currentUid:${L} triggerId:${a} active:${q.inspect(t.active,{showHidden:!0,depth:2,colors:!0})} resource:${s}`)}}else if(L===0){let o=K.triggerAsyncId(),u=t._contexts.get(o);if(u){if(t._contexts.set(n,u),J){let c=" ".repeat(t._indent<0?0:t._indent);Q(`${c}INIT USING CONTEXT FROM TRIGGERID [${i}] (${e}) asyncId:${n} currentUid:${L} triggerId:${o} active:${q.inspect(t.active,{showHidden:!0,depth:2,colors:!0})} resource:${s}`)}}else if(J){let c=" ".repeat(t._indent<0?0:t._indent);Q(`${c}INIT MISSING CONTEXT [${i}] (${e}) asyncId:${n} currentUid:${L} triggerId:${o} active:${q.inspect(t.active,{showHidden:!0,depth:2,colors:!0})} resource:${s}`)}}if(J&&i==="PROMISE"){Q(q.inspect(s,{showHidden:!0}));let o=s.parentId,u=" ".repeat(t._indent<0?0:t._indent);Q(`${u}INIT RESOURCE-PROMISE [${i}] (${e}) parentId:${o} asyncId:${n} currentUid:${L} triggerId:${a} active:${q.inspect(t.active,{showHidden:!0,depth:2,colors:!0})} resource:${s}`)}},before(n){L=K.executionAsyncId();let i;if(i=t._contexts.get(n)||t._contexts.get(L),i){if(J){let a=K.triggerAsyncId(),s=" ".repeat(t._indent<0?0:t._indent);Q(`${s}BEFORE (${e}) asyncId:${n} currentUid:${L} triggerId:${a} active:${q.inspect(t.active,{showHidden:!0,depth:2,colors:!0})} context:${q.inspect(i)}`),t._indent+=2}t.enter(i)}else if(J){let a=K.triggerAsyncId(),s=" ".repeat(t._indent<0?0:t._indent);Q(`${s}BEFORE MISSING CONTEXT (${e}) asyncId:${n} currentUid:${L} triggerId:${a} active:${q.inspect(t.active,{showHidden:!0,depth:2,colors:!0})} namespace._contexts:${q.inspect(t._contexts,{showHidden:!0,depth:2,colors:!0})}`),t._indent+=2}},after(n){L=K.executionAsyncId();let i;if(i=t._contexts.get(n)||t._contexts.get(L),i){if(J){let a=K.triggerAsyncId();t._indent-=2;let s=" ".repeat(t._indent<0?0:t._indent);Q(`${s}AFTER (${e}) asyncId:${n} currentUid:${L} triggerId:${a} active:${q.inspect(t.active,{showHidden:!0,depth:2,colors:!0})} context:${q.inspect(i)}`)}t.exit(i)}else if(J){let a=K.triggerAsyncId();t._indent-=2;let s=" ".repeat(t._indent<0?0:t._indent);Q(`${s}AFTER MISSING CONTEXT (${e}) asyncId:${n} currentUid:${L} triggerId:${a} active:${q.inspect(t.active,{showHidden:!0,depth:2,colors:!0})} context:${q.inspect(i)}`)}},destroy(n){if(L=K.executionAsyncId(),J){let i=K.triggerAsyncId(),a=" ".repeat(t._indent<0?0:t._indent);Q(`${a}DESTROY (${e}) currentUid:${L} asyncId:${n} triggerId:${i} active:${q.inspect(t.active,{showHidden:!0,depth:2,colors:!0})} context:${q.inspect(t._contexts.get(L))}`)}t._contexts.delete(n)}}).enable(),process.namespaces[e]=t,t}function KE(e){let t=XE(e);Mt.ok(t,`can't delete nonexistent namespace! "`+e+'"'),Mt.ok(t.id,"don't assign to process.namespaces directly! "+q.inspect(t)),process.namespaces[e]=null}function mN(){process.namespaces&&Object.keys(process.namespaces).forEach(function(e){KE(e)}),process.namespaces=Object.create(null)}process.namespaces={};function Q(...e){J&&process._rawDebug(`${q.format(...e)}`)}});var ZE=l((m1,WE)=>{"use strict";function yN(){}WE.exports=function(){let t=this._hooks,r=this._state,n=process.nextTick;process.nextTick=function(){if(!r.enabled)return n.apply(process,arguments);let i=new Array(arguments.length);for(let u=0;u<arguments.length;u++)i[u]=arguments[u];let a=i[0];if(typeof a!="function")throw new TypeError("callback is not a function");let s=new yN,o=--r.counter;return t.init.call(s,o,0,null,null),i[0]=function(){t.pre.call(s,o);let u=!0;try{a.apply(this,arguments),u=!1}finally{u&&process.listenerCount("uncaughtException")>0&&process.once("uncaughtException",function(){t.post.call(s,o,!0),t.destroy.call(null,o)})}t.post.call(s,o,!1),t.destroy.call(null,o)},n.apply(process,i)}}});var em=l((y1,JE)=>{"use strict";function TN(){}JE.exports=function(){let t=this._hooks,r=this._state,n=global.Promise,i=n.prototype.then;n.prototype.then=u;function a(c,f,p,d){return typeof c!="function"?d?s(p):o(p):function(){t.pre.call(f,p);try{return c.apply(this,arguments)}finally{t.post.call(f,p,!1),t.destroy.call(null,p)}}}function s(c){return function(p){return t.destroy.call(null,c),p}}function o(c){return function(p){throw t.destroy.call(null,c),p}}function u(c,f){if(!r.enabled)return i.call(this,c,f);let p=new TN,d=--r.counter;return t.init.call(p,d,0,null,null),i.call(this,a(c,p,d,!0),a(f,p,d,!1))}}});var rm=l((T1,tm)=>{"use strict";var Ge=__webpack_require__(39512);function AN(){}function SN(){}function IN(){}var CN=new Map,bN=new Map,ON=new Map,of=null,uf=!1;tm.exports=function(){cf(this._hooks,this._state,"setTimeout","clearTimeout",AN,CN,!0),cf(this._hooks,this._state,"setInterval","clearInterval",SN,bN,!1),cf(this._hooks,this._state,"setImmediate","clearImmediate",IN,ON,!0),global.setTimeout=Ge.setTimeout,global.setInterval=Ge.setInterval,global.setImmediate=Ge.setImmediate,global.clearTimeout=Ge.clearTimeout,global.clearInterval=Ge.clearInterval,global.clearImmediate=Ge.clearImmediate};function cf(e,t,r,n,i,a,s){let o=Ge[r],u=Ge[n];Ge[r]=function(){if(!t.enabled)return o.apply(Ge,arguments);let c=new Array(arguments.length);for(let E=0;E<arguments.length;E++)c[E]=arguments[E];let f=c[0];if(typeof f!="function")throw new TypeError('"callback" argument must be a function');let p=new i,d=--t.counter,h;return e.init.call(p,d,0,null,null),c[0]=function(){of=h,e.pre.call(p,d);let E=!0;try{f.apply(this,arguments),E=!1}finally{E&&process.listenerCount("uncaughtException")>0&&process.once("uncaughtException",function(){e.post.call(p,d,!0),a.delete(h),e.destroy.call(null,d)})}e.post.call(p,d,!1),of=null,(s||uf)&&(uf=!1,a.delete(h),e.destroy.call(null,d))},h=o.apply(Ge,c),a.set(h,d),h},Ge[n]=function(c){if(of===c&&c!==null)uf=!0;else if(a.has(c)){let f=a.get(c);a.delete(c),e.destroy.call(null,f)}u.apply(Ge,arguments)}}});var lf=l((A1,PN)=>{PN.exports={name:"async-hook-jl",description:"Inspect the life of handle objects in node",version:"1.7.6",author:"Andreas Madsen <amwebdk@gmail.com>",main:"./index.js",scripts:{test:"node ./test/runner.js && eslint ."},repository:{type:"git",url:"git://github.com/jeff-lewis/async-hook-jl.git"},keywords:["async","async hooks","inspect","async wrap"],license:"MIT",dependencies:{"stack-chain":"^1.3.7"},devDependencies:{async:"1.5.x","cli-color":"1.1.x",eslint:"^3.4.0",endpoint:"0.4.x"},engines:{node:"^4.7 || >=6.9 || >=7.3"}}});var am=l((S1,im)=>{"use strict";var sa=process.binding("async_wrap"),RN=sa.Providers.TIMERWRAP,nm={nextTick:ZE(),promise:em(),timers:rm()},aa=new Set;function NN(){this.enabled=!1,this.counter=0}function ff(){let e=this.initFns=[],t=this.preFns=[],r=this.postFns=[],n=this.destroyFns=[];this.init=function(i,a,s,o){if(a===RN){aa.add(i);return}for(let u of e)u(i,this,a,s,o)},this.pre=function(i){if(!aa.has(i))for(let a of t)a(i,this)},this.post=function(i,a){if(!aa.has(i))for(let s of r)s(i,this,a)},this.destroy=function(i){if(aa.has(i)){aa.delete(i);return}for(let a of n)a(i)}}ff.prototype.add=function(e){e.init&&this.initFns.push(e.init),e.pre&&this.preFns.push(e.pre),e.post&&this.postFns.push(e.post),e.destroy&&this.destroyFns.push(e.destroy)};function wo(e,t){let r=e.indexOf(t);r!==-1&&e.splice(r,1)}ff.prototype.remove=function(e){e.init&&wo(this.initFns,e.init),e.pre&&wo(this.preFns,e.pre),e.post&&wo(this.postFns,e.post),e.destroy&&wo(this.destroyFns,e.destroy)};function oa(){this._state=new NN,this._hooks=new ff,this.version=lf().version,this.providers=sa.Providers;for(let e of Object.keys(nm))nm[e].call(this);process.env.hasOwnProperty("NODE_ASYNC_HOOK_WARNING")&&console.warn("warning: you are using async-hook-jl which is unstable."),sa.setupHooks({init:this._hooks.init,pre:this._hooks.pre,post:this._hooks.post,destroy:this._hooks.destroy})}im.exports=oa;oa.prototype.addHooks=function(e){this._hooks.add(e)};oa.prototype.removeHooks=function(e){this._hooks.remove(e)};oa.prototype.enable=function(){this._state.enabled=!0,sa.enable()};oa.prototype.disable=function(){this._state.enabled=!1,sa.disable()}});var pf=l((I1,DN)=>{DN.exports={name:"stack-chain",description:"API for combining call site modifiers",version:"1.3.7",author:"Andreas Madsen <amwebdk@gmail.com>",scripts:{test:"tap ./test/simple"},repository:{type:"git",url:"git://github.com/AndreasMadsen/stack-chain.git"},keywords:["stack","chain","trace","call site","concat","format"],devDependencies:{tap:"2.x.x","uglify-js":"2.5.x"},license:"MIT"}});var om=l((C1,sm)=>{function wN(e){try{return Error.prototype.toString.call(e)}catch(t){try{return"<error: "+t+">"}catch{return"<error>"}}}sm.exports=function(t,r){var n=[];n.push(wN(t));for(var i=0;i<r.length;i++){var a=r[i],s;try{s=a.toString()}catch(o){try{s="<error: "+o+">"}catch{s="<error>"}}n.push("    at "+s)}return n.join(`
`)}});var fm=l((b1,lm)=>{var xo=om();function cm(){this.extend=new ua,this.filter=new ua,this.format=new ca,this.version=pf().version}var hf=!1;cm.prototype.callSite=function e(t){t||(t={}),hf=!0;var r={};Error.captureStackTrace(r,e);var n=r.stack;return hf=!1,n=n.slice(t.slice||0),t.extend&&(n=this.extend._modify(r,n)),t.filter&&(n=this.filter._modify(r,n)),n};var or=new cm;function ua(){this._modifiers=[]}ua.prototype._modify=function(e,t){for(var r=0,n=this._modifiers.length;r<n;r++)t=this._modifiers[r](e,t);return t};ua.prototype.attach=function(e){this._modifiers.push(e)};ua.prototype.deattach=function(e){var t=this._modifiers.indexOf(e);return t===-1?!1:(this._modifiers.splice(t,1),!0)};function ca(){this._formater=xo,this._previous=void 0}ca.prototype.replace=function(e){e?this._formater=e:this.restore()};ca.prototype.restore=function(){this._formater=xo,this._previous=void 0};ca.prototype._backup=function(){this._previous=this._formater};ca.prototype._roolback=function(){this._previous===xo?this.replace(void 0):this.replace(this._previous),this._previous=void 0};Error.prepareStackTrace&&or.format.replace(Error.prepareStackTrace);var df=!1;function um(e,t){if(hf)return t;if(df)return xo(e,t);var r=t.concat();r=or.extend._modify(e,r),r=or.filter._modify(e,r),r=r.slice(0,Error.stackTraceLimit),Object.isExtensible(e)&&Object.getOwnPropertyDescriptor(e,"callSite")===void 0&&(e.callSite={original:t,mutated:r}),df=!0;var n=or.format._formater(e,r);return df=!1,n}Object.defineProperty(Error,"prepareStackTrace",{get:function(){return um},set:function(e){e===um?or.format._roolback():(or.format._backup(),or.format.replace(e))}});function xN(){return this.stack,this.callSite}Object.defineProperty(Error.prototype,"callSite",{get:xN,set:function(e){Object.defineProperty(this,"callSite",{value:e,writable:!0,configurable:!0})},configurable:!0});lm.exports=or});var vf=l((O1,_f)=>{if(global._stackChain)if(global._stackChain.version===pf().version)_f.exports=global._stackChain;else throw new Error("Conflicting version of stack-chain found");else _f.exports=global._stackChain=fm()});var pm=l((P1,gf)=>{"use strict";var MN=am();if(global._asyncHook)if(global._asyncHook.version===lf().version)gf.exports=global._asyncHook;else throw new Error("Conflicting version of async-hook-jl found");else vf().filter.attach(function(t,r){return r.filter(function(n){let i=n.getFileName();return!(i&&i.slice(0,__dirname.length)===__dirname)})}),gf.exports=global._asyncHook=new MN});var Em=l((R1,gm)=>{"use strict";var ce=__webpack_require__(73837),Lt=__webpack_require__(39491),LN=Do(),zn=pm(),la="cls@contexts",fa="error@context",hm=[];for(let e in zn.providers)hm[zn.providers[e]]=e;var ae=process.env.DEBUG_CLS_HOOKED,pe=-1;gm.exports={getNamespace:_m,createNamespace:qN,destroyNamespace:vm,reset:jN,ERROR_SYMBOL:fa};function Qe(e){this.name=e,this.active=null,this._set=[],this.id=null,this._contexts=new Map}Qe.prototype.set=function(t,r){if(!this.active)throw new Error("No context available. ns.run() or ns.bind() must be called first.");return ae&&ue("    SETTING KEY:"+t+"="+r+" in ns:"+this.name+" uid:"+pe+" active:"+ce.inspect(this.active,!0)),this.active[t]=r,r};Qe.prototype.get=function(t){if(!this.active){ae&&ue("    GETTING KEY:"+t+"=undefined "+this.name+" uid:"+pe+" active:"+ce.inspect(this.active,!0));return}return ae&&ue("    GETTING KEY:"+t+"="+this.active[t]+" "+this.name+" uid:"+pe+" active:"+ce.inspect(this.active,!0)),this.active[t]};Qe.prototype.createContext=function(){ae&&ue("   CREATING Context: "+this.name+" uid:"+pe+" len:"+this._set.length+"  active:"+ce.inspect(this.active,!0,2,!0));let t=Object.create(this.active?this.active:Object.prototype);return t._ns_name=this.name,t.id=pe,ae&&ue("   CREATED Context: "+this.name+" uid:"+pe+" len:"+this._set.length+"  context:"+ce.inspect(t,!0,2,!0)),t};Qe.prototype.run=function(t){let r=this.createContext();this.enter(r);try{return ae&&ue(" BEFORE RUN: "+this.name+" uid:"+pe+" len:"+this._set.length+" "+ce.inspect(r)),t(r),r}catch(n){throw n&&(n[fa]=r),n}finally{ae&&ue(" AFTER RUN: "+this.name+" uid:"+pe+" len:"+this._set.length+" "+ce.inspect(r)),this.exit(r)}};Qe.prototype.runAndReturn=function(t){var r;return this.run(function(n){r=t(n)}),r};Qe.prototype.runPromise=function(t){let r=this.createContext();this.enter(r);let n=t(r);if(!n||!n.then||!n.catch)throw new Error("fn must return a promise.");return ae&&ue(" BEFORE runPromise: "+this.name+" uid:"+pe+" len:"+this._set.length+" "+ce.inspect(r)),n.then(i=>(ae&&ue(" AFTER runPromise: "+this.name+" uid:"+pe+" len:"+this._set.length+" "+ce.inspect(r)),this.exit(r),i)).catch(i=>{throw i[fa]=r,ae&&ue(" AFTER runPromise: "+this.name+" uid:"+pe+" len:"+this._set.length+" "+ce.inspect(r)),this.exit(r),i})};Qe.prototype.bind=function(t,r){r||(this.active?r=this.active:r=this.createContext());let n=this;return function(){n.enter(r);try{return t.apply(this,arguments)}catch(a){throw a&&(a[fa]=r),a}finally{n.exit(r)}}};Qe.prototype.enter=function(t){Lt.ok(t,"context must be provided for entering"),ae&&ue("  ENTER "+this.name+" uid:"+pe+" len:"+this._set.length+" context: "+ce.inspect(t)),this._set.push(this.active),this.active=t};Qe.prototype.exit=function(t){if(Lt.ok(t,"context must be provided for exiting"),ae&&ue("  EXIT "+this.name+" uid:"+pe+" len:"+this._set.length+" context: "+ce.inspect(t)),this.active===t){Lt.ok(this._set.length,"can't remove top context"),this.active=this._set.pop();return}let r=this._set.lastIndexOf(t);r<0?(ae&&ue("??ERROR?? context exiting but not entered - ignoring: "+ce.inspect(t)),Lt.ok(r>=0,`context not currently entered; can't exit. 
`+ce.inspect(this)+`
`+ce.inspect(t))):(Lt.ok(r,"can't remove top context"),this._set.splice(r,1))};Qe.prototype.bindEmitter=function(t){Lt.ok(t.on&&t.addListener&&t.emit,"can only bind real EEs");let r=this,n="context@"+this.name;function i(s){!s||(s[la]||(s[la]=Object.create(null)),s[la][n]={namespace:r,context:r.active})}function a(s){if(!(s&&s[la]))return s;let o=s,u=s[la];return Object.keys(u).forEach(function(c){let f=u[c];o=f.namespace.bind(o,f.context)}),o}LN(t,i,a)};Qe.prototype.fromException=function(t){return t[fa]};function _m(e){return process.namespaces[e]}function qN(e){Lt.ok(e,"namespace must be given a name."),ae&&ue("CREATING NAMESPACE "+e);let t=new Qe(e);return t.id=pe,zn.addHooks({init(r,n,i,a,s){pe=r,a?(t._contexts.set(r,t._contexts.get(a)),ae&&ue("PARENTID: "+e+" uid:"+r+" parent:"+a+" provider:"+i)):t._contexts.set(pe,t.active),ae&&ue("INIT "+e+" uid:"+r+" parent:"+a+" provider:"+hm[i]+" active:"+ce.inspect(t.active,!0))},pre(r,n){pe=r;let i=t._contexts.get(r);i?(ae&&ue(" PRE "+e+" uid:"+r+" handle:"+Mo(n)+" context:"+ce.inspect(i)),t.enter(i)):ae&&ue(" PRE MISSING CONTEXT "+e+" uid:"+r+" handle:"+Mo(n))},post(r,n){pe=r;let i=t._contexts.get(r);i?(ae&&ue(" POST "+e+" uid:"+r+" handle:"+Mo(n)+" context:"+ce.inspect(i)),t.exit(i)):ae&&ue(" POST MISSING CONTEXT "+e+" uid:"+r+" handle:"+Mo(n))},destroy(r){pe=r,ae&&ue("DESTROY "+e+" uid:"+r+" context:"+ce.inspect(t._contexts.get(pe))+" active:"+ce.inspect(t.active,!0)),t._contexts.delete(r)}}),process.namespaces[e]=t,t}function vm(e){let t=_m(e);Lt.ok(t,`can't delete nonexistent namespace! "`+e+'"'),Lt.ok(t.id,"don't assign to process.namespaces directly! "+ce.inspect(t)),process.namespaces[e]=null}function jN(){process.namespaces&&Object.keys(process.namespaces).forEach(function(e){vm(e)}),process.namespaces=Object.create(null)}process.namespaces={};zn._state&&!zn._state.enabled&&zn.enable();function ue(e){process.env.DEBUG&&process._rawDebug(e)}function Mo(e){if(!e)return e;if(typeof e=="function")return e.name?e.name:(e.toString().trim().match(/^function\s*([^\s(]+)/)||[])[1];if(e.constructor&&e.constructor.name)return e.constructor.name}if(ae){Ef=vf();for(dm in Ef.filter._modifiers)Ef.filter.deattach(dm)}var Ef,dm});var mm=l((N1,mf)=>{"use strict";var kN=HE();process&&kN.gte(process.versions.node,"8.0.0")?mf.exports=QE():mf.exports=Em()});var qm=l((b,Lm)=>{b=Lm.exports=w;var U;typeof process=="object"&&process.env&&process.env.NODE_DEBUG&&/\bsemver\b/i.test(process.env.NODE_DEBUG)?U=function(){var e=Array.prototype.slice.call(arguments,0);e.unshift("SEMVER"),console.log.apply(console,e)}:U=function(){};b.SEMVER_SPEC_VERSION="2.0.0";var Tf=256,Lo=Number.MAX_SAFE_INTEGER||9007199254740991,yf=16,G=b.re=[],g=b.src=[],R=0,Xn=R++;g[Xn]="0|[1-9]\\d*";var Kn=R++;g[Kn]="[0-9]+";var Cf=R++;g[Cf]="\\d*[a-zA-Z-][a-zA-Z0-9-]*";var Tm=R++;g[Tm]="("+g[Xn]+")\\.("+g[Xn]+")\\.("+g[Xn]+")";var Am=R++;g[Am]="("+g[Kn]+")\\.("+g[Kn]+")\\.("+g[Kn]+")";var Af=R++;g[Af]="(?:"+g[Xn]+"|"+g[Cf]+")";var Sf=R++;g[Sf]="(?:"+g[Kn]+"|"+g[Cf]+")";var bf=R++;g[bf]="(?:-("+g[Af]+"(?:\\."+g[Af]+")*))";var Of=R++;g[Of]="(?:-?("+g[Sf]+"(?:\\."+g[Sf]+")*))";var If=R++;g[If]="[0-9A-Za-z-]+";var ha=R++;g[ha]="(?:\\+("+g[If]+"(?:\\."+g[If]+")*))";var Pf=R++,Sm="v?"+g[Tm]+g[bf]+"?"+g[ha]+"?";g[Pf]="^"+Sm+"$";var Rf="[v=\\s]*"+g[Am]+g[Of]+"?"+g[ha]+"?",Nf=R++;g[Nf]="^"+Rf+"$";var Wn=R++;g[Wn]="((?:<|>)?=?)";var qo=R++;g[qo]=g[Kn]+"|x|X|\\*";var jo=R++;g[jo]=g[Xn]+"|x|X|\\*";var zr=R++;g[zr]="[v=\\s]*("+g[jo]+")(?:\\.("+g[jo]+")(?:\\.("+g[jo]+")(?:"+g[bf]+")?"+g[ha]+"?)?)?";var Qn=R++;g[Qn]="[v=\\s]*("+g[qo]+")(?:\\.("+g[qo]+")(?:\\.("+g[qo]+")(?:"+g[Of]+")?"+g[ha]+"?)?)?";var Im=R++;g[Im]="^"+g[Wn]+"\\s*"+g[zr]+"$";var Cm=R++;g[Cm]="^"+g[Wn]+"\\s*"+g[Qn]+"$";var bm=R++;g[bm]="(?:^|[^\\d])(\\d{1,"+yf+"})(?:\\.(\\d{1,"+yf+"}))?(?:\\.(\\d{1,"+yf+"}))?(?:$|[^\\d])";var Go=R++;g[Go]="(?:~>?)";var ko=R++;g[ko]="(\\s*)"+g[Go]+"\\s+";G[ko]=new RegExp(g[ko],"g");var HN="$1~",Om=R++;g[Om]="^"+g[Go]+g[zr]+"$";var Pm=R++;g[Pm]="^"+g[Go]+g[Qn]+"$";var Vo=R++;g[Vo]="(?:\\^)";var Ho=R++;g[Ho]="(\\s*)"+g[Vo]+"\\s+";G[Ho]=new RegExp(g[Ho],"g");var UN="$1^",Rm=R++;g[Rm]="^"+g[Vo]+g[zr]+"$";var Nm=R++;g[Nm]="^"+g[Vo]+g[Qn]+"$";var Df=R++;g[Df]="^"+g[Wn]+"\\s*("+Rf+")$|^$";var wf=R++;g[wf]="^"+g[Wn]+"\\s*("+Sm+")$|^$";var pa=R++;g[pa]="(\\s*)"+g[Wn]+"\\s*("+Rf+"|"+g[zr]+")";G[pa]=new RegExp(g[pa],"g");var BN="$1$2$3",Dm=R++;g[Dm]="^\\s*("+g[zr]+")\\s+-\\s+("+g[zr]+")\\s*$";var wm=R++;g[wm]="^\\s*("+g[Qn]+")\\s+-\\s+("+g[Qn]+")\\s*$";var xm=R++;g[xm]="(<|>)?=?\\s*\\*";for(ur=0;ur<R;ur++)U(ur,g[ur]),G[ur]||(G[ur]=new RegExp(g[ur]));var ur;b.parse=Xr;function Xr(e,t){if((!t||typeof t!="object")&&(t={loose:!!t,includePrerelease:!1}),e instanceof w)return e;if(typeof e!="string"||e.length>Tf)return null;var r=t.loose?G[Nf]:G[Pf];if(!r.test(e))return null;try{return new w(e,t)}catch{return null}}b.valid=FN;function FN(e,t){var r=Xr(e,t);return r?r.version:null}b.clean=GN;function GN(e,t){var r=Xr(e.trim().replace(/^[=v]+/,""),t);return r?r.version:null}b.SemVer=w;function w(e,t){if((!t||typeof t!="object")&&(t={loose:!!t,includePrerelease:!1}),e instanceof w){if(e.loose===t.loose)return e;e=e.version}else if(typeof e!="string")throw new TypeError("Invalid Version: "+e);if(e.length>Tf)throw new TypeError("version is longer than "+Tf+" characters");if(!(this instanceof w))return new w(e,t);U("SemVer",e,t),this.options=t,this.loose=!!t.loose;var r=e.trim().match(t.loose?G[Nf]:G[Pf]);if(!r)throw new TypeError("Invalid Version: "+e);if(this.raw=e,this.major=+r[1],this.minor=+r[2],this.patch=+r[3],this.major>Lo||this.major<0)throw new TypeError("Invalid major version");if(this.minor>Lo||this.minor<0)throw new TypeError("Invalid minor version");if(this.patch>Lo||this.patch<0)throw new TypeError("Invalid patch version");r[4]?this.prerelease=r[4].split(".").map(function(n){if(/^[0-9]+$/.test(n)){var i=+n;if(i>=0&&i<Lo)return i}return n}):this.prerelease=[],this.build=r[5]?r[5].split("."):[],this.format()}w.prototype.format=function(){return this.version=this.major+"."+this.minor+"."+this.patch,this.prerelease.length&&(this.version+="-"+this.prerelease.join(".")),this.version};w.prototype.toString=function(){return this.version};w.prototype.compare=function(e){return U("SemVer.compare",this.version,this.options,e),e instanceof w||(e=new w(e,this.options)),this.compareMain(e)||this.comparePre(e)};w.prototype.compareMain=function(e){return e instanceof w||(e=new w(e,this.options)),Yn(this.major,e.major)||Yn(this.minor,e.minor)||Yn(this.patch,e.patch)};w.prototype.comparePre=function(e){if(e instanceof w||(e=new w(e,this.options)),this.prerelease.length&&!e.prerelease.length)return-1;if(!this.prerelease.length&&e.prerelease.length)return 1;if(!this.prerelease.length&&!e.prerelease.length)return 0;var t=0;do{var r=this.prerelease[t],n=e.prerelease[t];if(U("prerelease compare",t,r,n),r===void 0&&n===void 0)return 0;if(n===void 0)return 1;if(r===void 0)return-1;if(r===n)continue;return Yn(r,n)}while(++t)};w.prototype.inc=function(e,t){switch(e){case"premajor":this.prerelease.length=0,this.patch=0,this.minor=0,this.major++,this.inc("pre",t);break;case"preminor":this.prerelease.length=0,this.patch=0,this.minor++,this.inc("pre",t);break;case"prepatch":this.prerelease.length=0,this.inc("patch",t),this.inc("pre",t);break;case"prerelease":this.prerelease.length===0&&this.inc("patch",t),this.inc("pre",t);break;case"major":(this.minor!==0||this.patch!==0||this.prerelease.length===0)&&this.major++,this.minor=0,this.patch=0,this.prerelease=[];break;case"minor":(this.patch!==0||this.prerelease.length===0)&&this.minor++,this.patch=0,this.prerelease=[];break;case"patch":this.prerelease.length===0&&this.patch++,this.prerelease=[];break;case"pre":if(this.prerelease.length===0)this.prerelease=[0];else{for(var r=this.prerelease.length;--r>=0;)typeof this.prerelease[r]=="number"&&(this.prerelease[r]++,r=-2);r===-1&&this.prerelease.push(0)}t&&(this.prerelease[0]===t?isNaN(this.prerelease[1])&&(this.prerelease=[t,0]):this.prerelease=[t,0]);break;default:throw new Error("invalid increment argument: "+e)}return this.format(),this.raw=this.version,this};b.inc=VN;function VN(e,t,r,n){typeof r=="string"&&(n=r,r=void 0);try{return new w(e,r).inc(t,n).version}catch{return null}}b.diff=$N;function $N(e,t){if(xf(e,t))return null;var r=Xr(e),n=Xr(t),i="";if(r.prerelease.length||n.prerelease.length){i="pre";var a="prerelease"}for(var s in r)if((s==="major"||s==="minor"||s==="patch")&&r[s]!==n[s])return i+s;return a}b.compareIdentifiers=Yn;var ym=/^[0-9]+$/;function Yn(e,t){var r=ym.test(e),n=ym.test(t);return r&&n&&(e=+e,t=+t),e===t?0:r&&!n?-1:n&&!r?1:e<t?-1:1}b.rcompareIdentifiers=zN;function zN(e,t){return Yn(t,e)}b.major=XN;function XN(e,t){return new w(e,t).major}b.minor=KN;function KN(e,t){return new w(e,t).minor}b.patch=YN;function YN(e,t){return new w(e,t).patch}b.compare=qt;function qt(e,t,r){return new w(e,r).compare(new w(t,r))}b.compareLoose=QN;function QN(e,t){return qt(e,t,!0)}b.rcompare=WN;function WN(e,t,r){return qt(t,e,r)}b.sort=ZN;function ZN(e,t){return e.sort(function(r,n){return b.compare(r,n,t)})}b.rsort=JN;function JN(e,t){return e.sort(function(r,n){return b.rcompare(r,n,t)})}b.gt=da;function da(e,t,r){return qt(e,t,r)>0}b.lt=Uo;function Uo(e,t,r){return qt(e,t,r)<0}b.eq=xf;function xf(e,t,r){return qt(e,t,r)===0}b.neq=Mm;function Mm(e,t,r){return qt(e,t,r)!==0}b.gte=Mf;function Mf(e,t,r){return qt(e,t,r)>=0}b.lte=Lf;function Lf(e,t,r){return qt(e,t,r)<=0}b.cmp=Bo;function Bo(e,t,r,n){switch(t){case"===":return typeof e=="object"&&(e=e.version),typeof r=="object"&&(r=r.version),e===r;case"!==":return typeof e=="object"&&(e=e.version),typeof r=="object"&&(r=r.version),e!==r;case"":case"=":case"==":return xf(e,r,n);case"!=":return Mm(e,r,n);case">":return da(e,r,n);case">=":return Mf(e,r,n);case"<":return Uo(e,r,n);case"<=":return Lf(e,r,n);default:throw new TypeError("Invalid operator: "+t)}}b.Comparator=We;function We(e,t){if((!t||typeof t!="object")&&(t={loose:!!t,includePrerelease:!1}),e instanceof We){if(e.loose===!!t.loose)return e;e=e.value}if(!(this instanceof We))return new We(e,t);U("comparator",e,t),this.options=t,this.loose=!!t.loose,this.parse(e),this.semver===_a?this.value="":this.value=this.operator+this.semver.version,U("comp",this)}var _a={};We.prototype.parse=function(e){var t=this.options.loose?G[Df]:G[wf],r=e.match(t);if(!r)throw new TypeError("Invalid comparator: "+e);this.operator=r[1],this.operator==="="&&(this.operator=""),r[2]?this.semver=new w(r[2],this.options.loose):this.semver=_a};We.prototype.toString=function(){return this.value};We.prototype.test=function(e){return U("Comparator.test",e,this.options.loose),this.semver===_a?!0:(typeof e=="string"&&(e=new w(e,this.options)),Bo(e,this.operator,this.semver,this.options))};We.prototype.intersects=function(e,t){if(!(e instanceof We))throw new TypeError("a Comparator is required");(!t||typeof t!="object")&&(t={loose:!!t,includePrerelease:!1});var r;if(this.operator==="")return r=new ee(e.value,t),Fo(this.value,r,t);if(e.operator==="")return r=new ee(this.value,t),Fo(e.semver,r,t);var n=(this.operator===">="||this.operator===">")&&(e.operator===">="||e.operator===">"),i=(this.operator==="<="||this.operator==="<")&&(e.operator==="<="||e.operator==="<"),a=this.semver.version===e.semver.version,s=(this.operator===">="||this.operator==="<=")&&(e.operator===">="||e.operator==="<="),o=Bo(this.semver,"<",e.semver,t)&&(this.operator===">="||this.operator===">")&&(e.operator==="<="||e.operator==="<"),u=Bo(this.semver,">",e.semver,t)&&(this.operator==="<="||this.operator==="<")&&(e.operator===">="||e.operator===">");return n||i||a&&s||o||u};b.Range=ee;function ee(e,t){if((!t||typeof t!="object")&&(t={loose:!!t,includePrerelease:!1}),e instanceof ee)return e.loose===!!t.loose&&e.includePrerelease===!!t.includePrerelease?e:new ee(e.raw,t);if(e instanceof We)return new ee(e.value,t);if(!(this instanceof ee))return new ee(e,t);if(this.options=t,this.loose=!!t.loose,this.includePrerelease=!!t.includePrerelease,this.raw=e,this.set=e.split(/\s*\|\|\s*/).map(function(r){return this.parseRange(r.trim())},this).filter(function(r){return r.length}),!this.set.length)throw new TypeError("Invalid SemVer Range: "+e);this.format()}ee.prototype.format=function(){return this.range=this.set.map(function(e){return e.join(" ").trim()}).join("||").trim(),this.range};ee.prototype.toString=function(){return this.range};ee.prototype.parseRange=function(e){var t=this.options.loose;e=e.trim();var r=t?G[wm]:G[Dm];e=e.replace(r,cD),U("hyphen replace",e),e=e.replace(G[pa],BN),U("comparator trim",e,G[pa]),e=e.replace(G[ko],HN),e=e.replace(G[Ho],UN),e=e.split(/\s+/).join(" ");var n=t?G[Df]:G[wf],i=e.split(" ").map(function(a){return tD(a,this.options)},this).join(" ").split(/\s+/);return this.options.loose&&(i=i.filter(function(a){return!!a.match(n)})),i=i.map(function(a){return new We(a,this.options)},this),i};ee.prototype.intersects=function(e,t){if(!(e instanceof ee))throw new TypeError("a Range is required");return this.set.some(function(r){return r.every(function(n){return e.set.some(function(i){return i.every(function(a){return n.intersects(a,t)})})})})};b.toComparators=eD;function eD(e,t){return new ee(e,t).set.map(function(r){return r.map(function(n){return n.value}).join(" ").trim().split(" ")})}function tD(e,t){return U("comp",e,t),e=iD(e,t),U("caret",e),e=rD(e,t),U("tildes",e),e=sD(e,t),U("xrange",e),e=uD(e,t),U("stars",e),e}function Me(e){return!e||e.toLowerCase()==="x"||e==="*"}function rD(e,t){return e.trim().split(/\s+/).map(function(r){return nD(r,t)}).join(" ")}function nD(e,t){var r=t.loose?G[Pm]:G[Om];return e.replace(r,function(n,i,a,s,o){U("tilde",e,n,i,a,s,o);var u;return Me(i)?u="":Me(a)?u=">="+i+".0.0 <"+(+i+1)+".0.0":Me(s)?u=">="+i+"."+a+".0 <"+i+"."+(+a+1)+".0":o?(U("replaceTilde pr",o),u=">="+i+"."+a+"."+s+"-"+o+" <"+i+"."+(+a+1)+".0"):u=">="+i+"."+a+"."+s+" <"+i+"."+(+a+1)+".0",U("tilde return",u),u})}function iD(e,t){return e.trim().split(/\s+/).map(function(r){return aD(r,t)}).join(" ")}function aD(e,t){U("caret",e,t);var r=t.loose?G[Nm]:G[Rm];return e.replace(r,function(n,i,a,s,o){U("caret",e,n,i,a,s,o);var u;return Me(i)?u="":Me(a)?u=">="+i+".0.0 <"+(+i+1)+".0.0":Me(s)?i==="0"?u=">="+i+"."+a+".0 <"+i+"."+(+a+1)+".0":u=">="+i+"."+a+".0 <"+(+i+1)+".0.0":o?(U("replaceCaret pr",o),i==="0"?a==="0"?u=">="+i+"."+a+"."+s+"-"+o+" <"+i+"."+a+"."+(+s+1):u=">="+i+"."+a+"."+s+"-"+o+" <"+i+"."+(+a+1)+".0":u=">="+i+"."+a+"."+s+"-"+o+" <"+(+i+1)+".0.0"):(U("no pr"),i==="0"?a==="0"?u=">="+i+"."+a+"."+s+" <"+i+"."+a+"."+(+s+1):u=">="+i+"."+a+"."+s+" <"+i+"."+(+a+1)+".0":u=">="+i+"."+a+"."+s+" <"+(+i+1)+".0.0"),U("caret return",u),u})}function sD(e,t){return U("replaceXRanges",e,t),e.split(/\s+/).map(function(r){return oD(r,t)}).join(" ")}function oD(e,t){e=e.trim();var r=t.loose?G[Cm]:G[Im];return e.replace(r,function(n,i,a,s,o,u){U("xRange",e,n,i,a,s,o,u);var c=Me(a),f=c||Me(s),p=f||Me(o),d=p;return i==="="&&d&&(i=""),c?i===">"||i==="<"?n="<0.0.0":n="*":i&&d?(f&&(s=0),o=0,i===">"?(i=">=",f?(a=+a+1,s=0,o=0):(s=+s+1,o=0)):i==="<="&&(i="<",f?a=+a+1:s=+s+1),n=i+a+"."+s+"."+o):f?n=">="+a+".0.0 <"+(+a+1)+".0.0":p&&(n=">="+a+"."+s+".0 <"+a+"."+(+s+1)+".0"),U("xRange return",n),n})}function uD(e,t){return U("replaceStars",e,t),e.trim().replace(G[xm],"")}function cD(e,t,r,n,i,a,s,o,u,c,f,p,d){return Me(r)?t="":Me(n)?t=">="+r+".0.0":Me(i)?t=">="+r+"."+n+".0":t=">="+t,Me(u)?o="":Me(c)?o="<"+(+u+1)+".0.0":Me(f)?o="<"+u+"."+(+c+1)+".0":p?o="<="+u+"."+c+"."+f+"-"+p:o="<="+o,(t+" "+o).trim()}ee.prototype.test=function(e){if(!e)return!1;typeof e=="string"&&(e=new w(e,this.options));for(var t=0;t<this.set.length;t++)if(lD(this.set[t],e,this.options))return!0;return!1};function lD(e,t,r){for(var n=0;n<e.length;n++)if(!e[n].test(t))return!1;if(t.prerelease.length&&!r.includePrerelease){for(n=0;n<e.length;n++)if(U(e[n].semver),e[n].semver!==_a&&e[n].semver.prerelease.length>0){var i=e[n].semver;if(i.major===t.major&&i.minor===t.minor&&i.patch===t.patch)return!0}return!1}return!0}b.satisfies=Fo;function Fo(e,t,r){try{t=new ee(t,r)}catch{return!1}return t.test(e)}b.maxSatisfying=fD;function fD(e,t,r){var n=null,i=null;try{var a=new ee(t,r)}catch{return null}return e.forEach(function(s){a.test(s)&&(!n||i.compare(s)===-1)&&(n=s,i=new w(n,r))}),n}b.minSatisfying=pD;function pD(e,t,r){var n=null,i=null;try{var a=new ee(t,r)}catch{return null}return e.forEach(function(s){a.test(s)&&(!n||i.compare(s)===1)&&(n=s,i=new w(n,r))}),n}b.minVersion=dD;function dD(e,t){e=new ee(e,t);var r=new w("0.0.0");if(e.test(r)||(r=new w("0.0.0-0"),e.test(r)))return r;r=null;for(var n=0;n<e.set.length;++n){var i=e.set[n];i.forEach(function(a){var s=new w(a.semver.version);switch(a.operator){case">":s.prerelease.length===0?s.patch++:s.prerelease.push(0),s.raw=s.format();case"":case">=":(!r||da(r,s))&&(r=s);break;case"<":case"<=":break;default:throw new Error("Unexpected operation: "+a.operator)}})}return r&&e.test(r)?r:null}b.validRange=hD;function hD(e,t){try{return new ee(e,t).range||"*"}catch{return null}}b.ltr=_D;function _D(e,t,r){return qf(e,t,"<",r)}b.gtr=vD;function vD(e,t,r){return qf(e,t,">",r)}b.outside=qf;function qf(e,t,r,n){e=new w(e,n),t=new ee(t,n);var i,a,s,o,u;switch(r){case">":i=da,a=Lf,s=Uo,o=">",u=">=";break;case"<":i=Uo,a=Mf,s=da,o="<",u="<=";break;default:throw new TypeError('Must provide a hilo val of "<" or ">"')}if(Fo(e,t,n))return!1;for(var c=0;c<t.set.length;++c){var f=t.set[c],p=null,d=null;if(f.forEach(function(h){h.semver===_a&&(h=new We(">=0.0.0")),p=p||h,d=d||h,i(h.semver,p.semver,n)?p=h:s(h.semver,d.semver,n)&&(d=h)}),p.operator===o||p.operator===u||(!d.operator||d.operator===o)&&a(e,d.semver))return!1;if(d.operator===u&&s(e,d.semver))return!1}return!0}b.prerelease=gD;function gD(e,t){var r=Xr(e,t);return r&&r.prerelease.length?r.prerelease:null}b.intersects=ED;function ED(e,t,r){return e=new ee(e,r),t=new ee(t,r),e.intersects(t)}b.coerce=mD;function mD(e){if(e instanceof w)return e;if(typeof e!="string")return null;var t=e.match(G[bm]);return t==null?null:Xr(t[1]+"."+(t[2]||"0")+"."+(t[3]||"0"))}});var Hm=l((D1,km)=>{var yD=Po().wrap,kf=1<<0,Hf=1<<1,Uf=1<<2,zo=1<<3,V=[],TD=0,Oe=!1,cr=[],Zn,Bf;function Ff(e,t){var r=e.length,n=t.length,i=[];if(r===0&&n===0)return i;for(var a=0;a<r;a++)i[a]=e[a];if(n===0)return i;for(var s=0;s<n;s++){var o=!0;for(a=0;a<r;a++)if(e[a].uid===t[s].uid){o=!1;break}o&&i.push(t[s])}return i}process._fatalException?($o=!1,Zn=function(t){var r=V.length;if($o||r===0)return!1;var n=!1;$o=!0;for(var i=0;i<r;++i){var a=V[i];if((a.flags&zo)!==0){var s=Jn&&Jn[a.uid];n=a.error(s,t)||n}}return $o=!1,cr.length>0&&(V=cr.pop()),Jn=void 0,n&&!Oe},Bf=function(t,r,n){var i=[];Oe=!0;for(var a=0;a<n;++a){var s=r[a];if(i[s.uid]=s.data,(s.flags&kf)!==0){var o=s.create(s.data);o!==void 0&&(i[s.uid]=o)}}return Oe=!1,function(){Jn=i,cr.push(V),V=Ff(r,V),Oe=!0;for(var u=0;u<n;++u)(r[u].flags&Hf)>0&&r[u].before(this,i[r[u].uid]);Oe=!1;var c=t.apply(this,arguments);for(Oe=!0,u=0;u<n;++u)(r[u].flags&Uf)>0&&r[u].after(this,i[r[u].uid]);return Oe=!1,V=cr.pop(),Jn=void 0,c}},yD(process,"_fatalException",function(e){return function(r){return Zn(r)||e(r)}})):(jf=!1,Zn=function(t){if(jf)throw t;for(var r=!1,n=V.length,i=0;i<n;++i){var a=V[i];(a.flags&zo)!==0&&(r=a.error(null,t)||r)}if(!r&&Oe)throw t},Bf=function(t,r,n){var i=[];Oe=!0;for(var a=0;a<n;++a){var s=r[a];if(i[s.uid]=s.data,(s.flags&kf)!==0){var o=s.create(s.data);o!==void 0&&(i[s.uid]=o)}}return Oe=!1,function(){var u=!1,c=!1;cr.push(V),V=Ff(r,V),Oe=!0;for(var f=0;f<n;++f)(r[f].flags&Hf)>0&&r[f].before(this,i[r[f].uid]);Oe=!1;var p;try{p=t.apply(this,arguments)}catch(d){u=!0;for(var f=0;f<n;++f)if((V[f].flags&zo)!=0)try{c=V[f].error(i[r[f].uid],d)||c}catch(E){throw jf=!0,E}if(!c)throw process.removeListener("uncaughtException",Zn),process._originalNextTick(function(){process.addListener("uncaughtException",Zn)}),d}finally{if(!u||c){for(Oe=!0,f=0;f<n;++f)(r[f].flags&Uf)>0&&r[f].after(this,i[r[f].uid]);Oe=!1}V=cr.pop()}return p}},process.addListener("uncaughtException",Zn));var $o,Jn,jf;function AD(e,t,r){Oe=!0;for(var n=0;n<r;++n){var i=t[n];i.create&&i.create(i.data)}return Oe=!1,function(){cr.push(V),V=Ff(t,V);var a=e.apply(this,arguments);return V=cr.pop(),a}}function SD(e){var t=V.length;if(t===0)return e;for(var r=V.slice(),n=0;n<t;++n)if(r[n].flags>0)return Bf(e,r,t);return AD(e,r,t)}function vt(e,t){typeof e.create=="function"&&(this.create=e.create,this.flags|=kf),typeof e.before=="function"&&(this.before=e.before,this.flags|=Hf),typeof e.after=="function"&&(this.after=e.after,this.flags|=Uf),typeof e.error=="function"&&(this.error=e.error,this.flags|=zo),this.uid=++TD,this.data=t===void 0?null:t}vt.prototype.create=void 0;vt.prototype.before=void 0;vt.prototype.after=void 0;vt.prototype.error=void 0;vt.prototype.data=void 0;vt.prototype.uid=0;vt.prototype.flags=0;function jm(e,t){if(typeof e!="object"||!e)throw new TypeError("callbacks argument must be an object");return e instanceof vt?e:new vt(e,t)}function ID(e,t){var r;e instanceof vt?r=e:r=jm(e,t);for(var n=!1,i=0;i<V.length;i++)if(r===V[i]){n=!0;break}return n||V.push(r),r}function CD(e){for(var t=0;t<V.length;t++)if(e===V[t]){V.splice(t,1);break}}process.createAsyncListener=jm;process.addAsyncListener=ID;process.removeAsyncListener=CD;km.exports=SD});var Bm=l((x1,Um)=>{"use strict";Um.exports=(e,t)=>class extends e{constructor(n){var i,a;super(o);var s=this;try{n.apply(i,a)}catch(u){a[1](u)}return s;function o(u,c){i=this,a=[f,p];function f(d){return t(s,!1),u(d)}function p(d){return t(s,!1),c(d)}}}}});var Km=l(()=>{"use strict";if(process.addAsyncListener)throw new Error("Don't require polyfill unless needed");var $m=Po(),Ko=qm(),je=$m.wrap,lr=$m.massWrap,te=Hm(),bD=__webpack_require__(73837),OD=Ko.gte(process.version,"6.0.0"),$f=Ko.gte(process.version,"7.0.0"),PD=Ko.gte(process.version,"8.0.0"),RD=Ko.gte(process.version,"11.0.0"),gt=__webpack_require__(41808);$f&&!gt._normalizeArgs?gt._normalizeArgs=function(e){if(e.length===0)return[{},null];var t=e[0],r={};typeof t=="object"&&t!==null?r=t:MD(t)?r.path=t:(r.port=t,e.length>1&&typeof e[1]=="string"&&(r.host=e[1]));var n=e[e.length-1];return typeof n!="function"?[r,null]:[r,n]}:!$f&&!gt._normalizeConnectArgs&&(gt._normalizeConnectArgs=function(e){var t={};function r(i){return(i=Number(i))>=0?i:!1}typeof e[0]=="object"&&e[0]!==null?t=e[0]:typeof e[0]=="string"&&r(e[0])===!1?t.path=e[0]:(t.port=e[0],typeof e[1]=="string"&&(t.host=e[1]));var n=e[e.length-1];return typeof n=="function"?[t,n]:[t]});"_setUpListenHandle"in gt.Server.prototype?je(gt.Server.prototype,"_setUpListenHandle",Fm):je(gt.Server.prototype,"_listen2",Fm);function Fm(e){return function(){this.on("connection",function(t){t._handle&&(t._handle.onread=te(t._handle.onread))});try{return e.apply(this,arguments)}finally{this._handle&&this._handle.onconnection&&(this._handle.onconnection=te(this._handle.onconnection))}}}function zm(e){if(e&&e._handle){var t=e._handle;t._originalOnread||(t._originalOnread=t.onread),t.onread=te(t._originalOnread)}}je(gt.Socket.prototype,"connect",function(e){return function(){var t;PD&&Array.isArray(arguments[0])&&Object.getOwnPropertySymbols(arguments[0]).length>0?t=arguments[0]:t=$f?gt._normalizeArgs(arguments):gt._normalizeConnectArgs(arguments),t[1]&&(t[1]=te(t[1]));var r=e.apply(this,t);return zm(this),r}});var ND=__webpack_require__(13685);je(ND.Agent.prototype,"addRequest",function(e){return function(t){var r=t.onSocket;return t.onSocket=te(function(n){return zm(n),r.apply(this,arguments)}),e.apply(this,arguments)}});var Gf=__webpack_require__(32081);function Gm(e){Array.isArray(e.stdio)&&e.stdio.forEach(function(t){t&&t._handle&&(t._handle.onread=te(t._handle.onread),je(t._handle,"close",Yo))}),e._handle&&(e._handle.onexit=te(e._handle.onexit))}Gf.ChildProcess?je(Gf.ChildProcess.prototype,"spawn",function(e){return function(){var t=e.apply(this,arguments);return Gm(this),t}}):lr(Gf,["execFile","fork","spawn"],function(e){return function(){var t=e.apply(this,arguments);return Gm(t),t}});process._fatalException||(process._originalNextTick=process.nextTick);var Kf=[];process._nextDomainTick&&Kf.push("_nextDomainTick");process._tickDomainCallback&&Kf.push("_tickDomainCallback");lr(process,Kf,Et);je(process,"nextTick",Yo);var Yf=["setTimeout","setInterval"];global.setImmediate&&Yf.push("setImmediate");var Xm=__webpack_require__(39512),DD=global.setTimeout===Xm.setTimeout;lr(Xm,Yf,Yo);DD&&lr(global,Yf,Yo);var zf=__webpack_require__(9523);lr(zf,["lookup","resolve","resolve4","resolve6","resolveCname","resolveMx","resolveNs","resolveTxt","resolveSrv","reverse"],Et);zf.resolveNaptr&&je(zf,"resolveNaptr",Et);var Yr=__webpack_require__(57147);lr(Yr,["watch","rename","truncate","chown","fchown","chmod","fchmod","stat","lstat","fstat","link","symlink","readlink","realpath","unlink","rmdir","mkdir","readdir","close","open","utimes","futimes","fsync","write","read","readFile","writeFile","appendFile","watchFile","unwatchFile","exists"],Et);Yr.lchown&&je(Yr,"lchown",Et);Yr.lchmod&&je(Yr,"lchmod",Et);Yr.ftruncate&&je(Yr,"ftruncate",Et);var va;try{va=__webpack_require__(59796)}catch{}va&&va.Deflate&&va.Deflate.prototype&&(Kr=Object.getPrototypeOf(va.Deflate.prototype),Kr._transform?je(Kr,"_transform",Et):Kr.write&&Kr.flush&&Kr.end&&lr(Kr,["write","flush","end"],Et));var Kr,Xf;try{Xf=__webpack_require__(6113)}catch{}Xf&&(Vf=["pbkdf2","randomBytes"],RD||Vf.push("pseudoRandomBytes"),lr(Xf,Vf,Et));var Vf,Xo=!!global.Promise&&Promise.toString()==="function Promise() { [native code] }"&&Promise.toString.toString()==="function toString() { [native code] }";Xo&&(Vm=process.addAsyncListener({create:function(){Xo=!1}}),global.Promise.resolve(!0).then(function(){Xo=!1}),process.removeAsyncListener(Vm));var Vm;Xo&&wD();function wD(){var e=global.Promise;function t(s){if(!(this instanceof t))return e(s);if(typeof s!="function")return new e(s);var o,u,c=new e(f);c.__proto__=t.prototype;try{s.apply(o,u)}catch(p){u[1](p)}return c;function f(p,d){o=this,u=[h,E];function h(A){return n(c,!1),p(A)}function E(A){return n(c,!1),d(A)}}}if(bD.inherits(t,e),je(e.prototype,"then",a),e.prototype.chain&&je(e.prototype,"chain",a),OD)global.Promise=Bm()(e,n);else{var r=["all","race","reject","resolve","accept","defer"];r.forEach(function(s){typeof e[s]=="function"&&(t[s]=e[s])}),global.Promise=t}function n(s,o){(!s.__asl_wrapper||o)&&(s.__asl_wrapper=te(i))}function i(s,o,u,c){var f;try{return f=o.call(s,u),{returnVal:f,error:!1}}catch(p){return{errorVal:p,error:!0}}finally{f instanceof e?c.__asl_wrapper=function(){var d=f.__asl_wrapper||i;return d.apply(this,arguments)}:n(c,!0)}}function a(s){return function(){var u=this,c=s.apply(u,Array.prototype.map.call(arguments,f));return c.__asl_wrapper=function(d,h,E,A){return u.__asl_wrapper?(u.__asl_wrapper(d,function(){},null,c),c.__asl_wrapper(d,h,E,A)):i(d,h,E,A)},c;function f(p){return typeof p!="function"?p:te(function(d){var h=(u.__asl_wrapper||i)(this,p,d,c);if(h.error)throw h.errorVal;return h.returnVal})}}}}function Et(e){var t=function(){var r,n=arguments.length-1;if(typeof arguments[n]=="function"){r=Array(arguments.length);for(var i=0;i<arguments.length-1;i++)r[i]=arguments[i];r[n]=te(arguments[n])}return e.apply(this,r||arguments)};switch(e.length){case 1:return function(r){return arguments.length!==1?t.apply(this,arguments):(typeof r=="function"&&(r=te(r)),e.call(this,r))};case 2:return function(r,n){return arguments.length!==2?t.apply(this,arguments):(typeof n=="function"&&(n=te(n)),e.call(this,r,n))};case 3:return function(r,n,i){return arguments.length!==3?t.apply(this,arguments):(typeof i=="function"&&(i=te(i)),e.call(this,r,n,i))};case 4:return function(r,n,i,a){return arguments.length!==4?t.apply(this,arguments):(typeof a=="function"&&(a=te(a)),e.call(this,r,n,i,a))};case 5:return function(r,n,i,a,s){return arguments.length!==5?t.apply(this,arguments):(typeof s=="function"&&(s=te(s)),e.call(this,r,n,i,a,s))};case 6:return function(r,n,i,a,s,o){return arguments.length!==6?t.apply(this,arguments):(typeof o=="function"&&(o=te(o)),e.call(this,r,n,i,a,s,o))};default:return t}}function Yo(e){var t=function(){var r;if(typeof arguments[0]=="function"){r=Array(arguments.length),r[0]=te(arguments[0]);for(var n=1;n<arguments.length;n++)r[n]=arguments[n]}return e.apply(this,r||arguments)};switch(e.length){case 1:return function(r){return arguments.length!==1?t.apply(this,arguments):(typeof r=="function"&&(r=te(r)),e.call(this,r))};case 2:return function(r,n){return arguments.length!==2?t.apply(this,arguments):(typeof r=="function"&&(r=te(r)),e.call(this,r,n))};case 3:return function(r,n,i){return arguments.length!==3?t.apply(this,arguments):(typeof r=="function"&&(r=te(r)),e.call(this,r,n,i))};case 4:return function(r,n,i,a){return arguments.length!==4?t.apply(this,arguments):(typeof r=="function"&&(r=te(r)),e.call(this,r,n,i,a))};case 5:return function(r,n,i,a,s){return arguments.length!==5?t.apply(this,arguments):(typeof r=="function"&&(r=te(r)),e.call(this,r,n,i,a,s))};case 6:return function(r,n,i,a,s,o){return arguments.length!==6?t.apply(this,arguments):(typeof r=="function"&&(r=te(r)),e.call(this,r,n,i,a,s,o))};default:return t}}function xD(e){return(e=Number(e))>=0?e:!1}function MD(e){return typeof e=="string"&&xD(e)===!1}});var Jm=l((q1,Zm)=>{"use strict";var jt=__webpack_require__(39491),LD=Do(),ga="cls@contexts",Qf="error@context";process.addAsyncListener||Km();function st(e){this.name=e,this.active=null,this._set=[],this.id=null}st.prototype.set=function(e,t){if(!this.active)throw new Error("No context available. ns.run() or ns.bind() must be called first.");return this.active[e]=t,t};st.prototype.get=function(e){if(!!this.active)return this.active[e]};st.prototype.createContext=function(){return Object.create(this.active)};st.prototype.run=function(e){var t=this.createContext();this.enter(t);try{return e(t),t}catch(r){throw r&&(r[Qf]=t),r}finally{this.exit(t)}};st.prototype.runAndReturn=function(e){var t;return this.run(function(r){t=e(r)}),t};st.prototype.bind=function(e,t){t||(this.active?t=this.active:t=this.createContext());var r=this;return function(){r.enter(t);try{return e.apply(this,arguments)}catch(n){throw n&&(n[Qf]=t),n}finally{r.exit(t)}}};st.prototype.enter=function(e){jt.ok(e,"context must be provided for entering"),this._set.push(this.active),this.active=e};st.prototype.exit=function(e){if(jt.ok(e,"context must be provided for exiting"),this.active===e){jt.ok(this._set.length,"can't remove top context"),this.active=this._set.pop();return}var t=this._set.lastIndexOf(e);jt.ok(t>=0,"context not currently entered; can't exit"),jt.ok(t,"can't remove top context"),this._set.splice(t,1)};st.prototype.bindEmitter=function(e){jt.ok(e.on&&e.addListener&&e.emit,"can only bind real EEs");var t=this,r="context@"+this.name;function n(a){!a||(a[ga]||(a[ga]=Object.create(null)),a[ga][r]={namespace:t,context:t.active})}function i(a){if(!(a&&a[ga]))return a;var s=a,o=a[ga];return Object.keys(o).forEach(function(u){var c=o[u];s=c.namespace.bind(s,c.context)}),s}LD(e,n,i)};st.prototype.fromException=function(e){return e[Qf]};function Ym(e){return process.namespaces[e]}function qD(e){jt.ok(e,"namespace must be given a name!");var t=new st(e);return t.id=process.addAsyncListener({create:function(){return t.active},before:function(r,n){n&&t.enter(n)},after:function(r,n){n&&t.exit(n)},error:function(r){r&&t.exit(r)}}),process.namespaces[e]=t,t}function Qm(e){var t=Ym(e);jt.ok(t,"can't delete nonexistent namespace!"),jt.ok(t.id,"don't assign to process.namespaces directly!"),process.removeAsyncListener(t.id),process.namespaces[e]=null}function Wm(){process.namespaces&&Object.keys(process.namespaces).forEach(function(e){Qm(e)}),process.namespaces=Object.create(null)}process.namespaces||Wm();Zm.exports={getNamespace:Ym,createNamespace:qD,destroyNamespace:Qm,reset:Wm}});var Er=l(Qo=>{"use strict";Object.defineProperty(Qo,"__esModule",{value:!0});Qo.CorrelationContextManager=void 0;var ty=_e(),jD=po(),ei=Qi(),Wf=Al(),ey=Bl(),kD=function(){function e(){}return e.getCurrentContext=function(){if(!e.enabled)return null;var t=e.session.get(e.CONTEXT_NAME);return t===void 0?null:t},e.generateContextObject=function(t,r,n,i,a,s){return r=r||t,this.enabled?{operation:{name:n,id:t,parentId:r,traceparent:a,tracestate:s},customProperties:new HD(i)}:null},e.spanToContextObject=function(t,r,n){var i=new ei;return i.traceId=t.traceId,i.spanId=t.spanId,i.traceFlag=ei.formatOpenTelemetryTraceFlags(t.traceFlags)||ei.DEFAULT_TRACE_FLAG,i.parentId=r,e.generateContextObject(i.traceId,i.parentId,n,null,i)},e.runWithContext=function(t,r){var n;return e.enabled?e.session.bind(r,(n={},n[e.CONTEXT_NAME]=t,n))():r()},e.wrapEmitter=function(t){e.enabled&&e.session.bindEmitter(t)},e.wrapCallback=function(t,r){var n;return e.enabled?e.session.bind(t,r?(n={},n[e.CONTEXT_NAME]=r,n):void 0):t},e.enable=function(t){if(!this.enabled){if(!this.isNodeVersionCompatible()){this.enabled=!1;return}e.hasEverEnabled||(this.forceClsHooked=t,this.hasEverEnabled=!0,typeof this.cls>"u"&&(e.forceClsHooked===!0||e.forceClsHooked===void 0&&e.shouldUseClsHooked()?this.cls=mm():this.cls=Jm()),e.session=this.cls.createNamespace("AI-CLS-Session"),jD.registerContextPreservation(function(r){return e.session.bind(r)})),this.enabled=!0}},e.startOperation=function(t,r){var n=t&&t.traceContext||null,i=t&&t.traceId?t:null,a=t&&t.headers;if(i){var s=new ei("00-"+i.traceId+"-"+i.spanId+"-01"),o=new Wf(i.traceState?i.traceState.serialize():null),u=e.generateContextObject(i.traceId,"|"+i.traceId+"."+i.spanId+".",typeof r=="string"?r:"",void 0,s,o);return u}if(n){var s=new ei(n.traceparent),o=new Wf(n.tracestate),c=typeof r=="object"?new ey(r):null,u=e.generateContextObject(s.traceId,s.parentId,typeof r=="string"?r:c.getOperationName({}),c&&c.getCorrelationContextHeader()||void 0,s,o);return u}if(a){var s=new ei(a.traceparent?a.traceparent.toString():null),o=new Wf(a.tracestate?a.tracestate.toString():null),c=new ey(t),u=e.generateContextObject(s.traceId,s.parentId,c.getOperationName({}),c.getCorrelationContextHeader(),s,o);return u}return ty.warn("startOperation was called with invalid arguments",arguments),null},e.disable=function(){this.enabled=!1},e.reset=function(){e.hasEverEnabled&&(e.session=null,e.session=this.cls.createNamespace("AI-CLS-Session"))},e.isNodeVersionCompatible=function(){var t=process.versions.node.split(".");return parseInt(t[0])>3||parseInt(t[0])>2&&parseInt(t[1])>2},e.shouldUseClsHooked=function(){var t=process.versions.node.split(".");return parseInt(t[0])>8||parseInt(t[0])>=8&&parseInt(t[1])>=2},e.canUseClsHooked=function(){var t=process.versions.node.split("."),r=parseInt(t[0])>8||parseInt(t[0])>=8&&parseInt(t[1])>=0,n=parseInt(t[0])<8||parseInt(t[0])<=8&&parseInt(t[1])<2,i=parseInt(t[0])>4||parseInt(t[0])>=4&&parseInt(t[1])>=7;return!(r&&n)&&i},e.enabled=!1,e.hasEverEnabled=!1,e.forceClsHooked=void 0,e.CONTEXT_NAME="ApplicationInsights-Context",e}();Qo.CorrelationContextManager=kD;var HD=function(){function e(t){this.props=[],this.addHeaderData(t)}return e.prototype.addHeaderData=function(t){var r=t?t.split(", "):[];this.props=r.map(function(n){var i=n.split("=");return{key:i[0],value:i[1]}}).concat(this.props)},e.prototype.serializeToHeader=function(){return this.props.map(function(t){return t.key+"="+t.value}).join(", ")},e.prototype.getProperty=function(t){for(var r=0;r<this.props.length;++r){var n=this.props[r];if(n.key===t)return n.value}},e.prototype.setProperty=function(t,r){if(e.bannedCharacters.test(t)||e.bannedCharacters.test(r)){ty.warn("Correlation context property keys and values must not contain ',' or '='. setProperty was called with key: "+t+" and value: "+r);return}for(var n=0;n<this.props.length;++n){var i=this.props[n];if(i.key===t){i.value=r;return}}this.props.push({key:t,value:r})},e.bannedCharacters=/[,=]/,e}()});var ny=l(ti=>{"use strict";Object.defineProperty(ti,"__esModule",{value:!0});ti.dispose=ti.enable=void 0;var ry=De(),Zf=oe(),Qr=[],Jf=function(e){var t=e.data.message;Qr.forEach(function(r){t instanceof Error?r.trackException({exception:t}):(t.lastIndexOf(`
`)==t.length-1&&(t=t.substring(0,t.length-1)),r.trackTrace({message:t,severity:e.data.stderr?ry.SeverityLevel.Warning:ry.SeverityLevel.Information}))})};function UD(e,t){e?(Qr.length===0&&Zf.channel.subscribe("console",Jf),Qr.push(t)):(Qr=Qr.filter(function(r){return r!=t}),Qr.length===0&&Zf.channel.unsubscribe("console",Jf))}ti.enable=UD;function BD(){Zf.channel.unsubscribe("console",Jf),Qr=[]}ti.dispose=BD});var iy=l(ni=>{"use strict";Object.defineProperty(ni,"__esModule",{value:!0});ni.dispose=ni.enable=void 0;var ri=De(),ep=oe(),Wr=[],FD={10:ri.SeverityLevel.Verbose,20:ri.SeverityLevel.Verbose,30:ri.SeverityLevel.Information,40:ri.SeverityLevel.Warning,50:ri.SeverityLevel.Error,60:ri.SeverityLevel.Critical},tp=function(e){var t=e.data.result;Wr.forEach(function(r){var n=FD[e.data.level];t instanceof Error?r.trackException({exception:t}):r.trackTrace({message:t,severity:n})})};function GD(e,t){e?(Wr.length===0&&ep.channel.subscribe("bunyan",tp),Wr.push(t)):(Wr=Wr.filter(function(r){return r!=t}),Wr.length===0&&ep.channel.unsubscribe("bunyan",tp))}ni.enable=GD;function VD(){ep.channel.unsubscribe("bunyan",tp),Wr=[]}ni.dispose=VD});var ay=l(ii=>{"use strict";Object.defineProperty(ii,"__esModule",{value:!0});ii.dispose=ii.enable=void 0;var Te=De(),rp=oe(),Zr=[],$D={syslog:function(e){var t={emerg:Te.SeverityLevel.Critical,alert:Te.SeverityLevel.Critical,crit:Te.SeverityLevel.Critical,error:Te.SeverityLevel.Error,warning:Te.SeverityLevel.Warning,notice:Te.SeverityLevel.Information,info:Te.SeverityLevel.Information,debug:Te.SeverityLevel.Verbose};return t[e]===void 0?Te.SeverityLevel.Information:t[e]},npm:function(e){var t={error:Te.SeverityLevel.Error,warn:Te.SeverityLevel.Warning,info:Te.SeverityLevel.Information,verbose:Te.SeverityLevel.Verbose,debug:Te.SeverityLevel.Verbose,silly:Te.SeverityLevel.Verbose};return t[e]===void 0?Te.SeverityLevel.Information:t[e]},unknown:function(e){return Te.SeverityLevel.Information}},np=function(e){var t=e.data.message;Zr.forEach(function(r){if(t instanceof Error)r.trackException({exception:t,properties:e.data.meta});else{var n=$D[e.data.levelKind](e.data.level);r.trackTrace({message:t,severity:n,properties:e.data.meta})}})};function zD(e,t){e?(Zr.length===0&&rp.channel.subscribe("winston",np),Zr.push(t)):(Zr=Zr.filter(function(r){return r!=t}),Zr.length===0&&rp.channel.unsubscribe("winston",np))}ii.enable=zD;function XD(){rp.channel.unsubscribe("winston",np),Zr=[]}ii.dispose=XD});var oy=l((B1,sy)=>{"use strict";var KD=po(),YD=function(){function e(t){if(e.INSTANCE)throw new Error("Console logging adapter tracking should be configured from the applicationInsights object");this._client=t,e.INSTANCE=this}return e.prototype.enable=function(t,r){KD.IsInitialized&&(ny().enable(t&&r,this._client),iy().enable(t,this._client),ay().enable(t,this._client))},e.prototype.isInitialized=function(){return this._isInitialized},e.prototype.dispose=function(){e.INSTANCE=null,this.enable(!1,!1)},e._methodNames=["debug","info","log","warn","error"],e}();sy.exports=YD});var cy=l((F1,uy)=>{"use strict";var QD=function(){function e(t){if(e.INSTANCE)throw new Error("Exception tracking should be configured from the applicationInsights object");e.INSTANCE=this,this._client=t;var r=process.versions.node.split(".");e._canUseUncaughtExceptionMonitor=parseInt(r[0])>13||parseInt(r[0])===13&&parseInt(r[1])>=7}return e.prototype.isInitialized=function(){return this._isInitialized},e.prototype.enable=function(t){var r=this;if(t){this._isInitialized=!0;var n=this;if(!this._exceptionListenerHandle){var i=function(a,s,o){o===void 0&&(o=new Error(e._FALLBACK_ERROR_MESSAGE)),r._client.trackException({exception:o}),r._client.flush({isAppCrashing:!0}),a&&s&&process.listeners(s).length===1&&(console.error(o),process.exit(1))};e._canUseUncaughtExceptionMonitor?(this._exceptionListenerHandle=i.bind(this,!1,void 0),process.on(e.UNCAUGHT_EXCEPTION_MONITOR_HANDLER_NAME,this._exceptionListenerHandle)):(this._exceptionListenerHandle=i.bind(this,!0,e.UNCAUGHT_EXCEPTION_HANDLER_NAME),this._rejectionListenerHandle=i.bind(this,!1,void 0),process.on(e.UNCAUGHT_EXCEPTION_HANDLER_NAME,this._exceptionListenerHandle),process.on(e.UNHANDLED_REJECTION_HANDLER_NAME,this._rejectionListenerHandle))}}else this._exceptionListenerHandle&&(e._canUseUncaughtExceptionMonitor?process.removeListener(e.UNCAUGHT_EXCEPTION_MONITOR_HANDLER_NAME,this._exceptionListenerHandle):(process.removeListener(e.UNCAUGHT_EXCEPTION_HANDLER_NAME,this._exceptionListenerHandle),process.removeListener(e.UNHANDLED_REJECTION_HANDLER_NAME,this._rejectionListenerHandle)),this._exceptionListenerHandle=void 0,this._rejectionListenerHandle=void 0,delete this._exceptionListenerHandle,delete this._rejectionListenerHandle)},e.prototype.dispose=function(){e.INSTANCE=null,this.enable(!1),this._isInitialized=!1},e.INSTANCE=null,e.UNCAUGHT_EXCEPTION_MONITOR_HANDLER_NAME="uncaughtExceptionMonitor",e.UNCAUGHT_EXCEPTION_HANDLER_NAME="uncaughtException",e.UNHANDLED_REJECTION_HANDLER_NAME="unhandledRejection",e._RETHROW_EXIT_MESSAGE="Application Insights Rethrow Exception Handler",e._FALLBACK_ERROR_MESSAGE="A promise was rejected without providing an error. Application Insights generated this error stack for you.",e._canUseUncaughtExceptionMonitor=!1,e}();uy.exports=QD});var kt=l(T=>{"use strict";var ot;Object.defineProperty(T,"__esModule",{value:!0});T.HeartBeatMetricName=T.DependencyTypeName=T.SpanAttribute=T.TelemetryTypeStringToQuickPulseDocumentType=T.TelemetryTypeStringToQuickPulseType=T.QuickPulseType=T.QuickPulseDocumentType=T.PerformanceToQuickPulseCounter=T.MetricId=T.PerformanceCounter=T.QuickPulseCounter=T.DEFAULT_LIVEMETRICS_HOST=T.DEFAULT_LIVEMETRICS_ENDPOINT=T.DEFAULT_BREEZE_ENDPOINT=void 0;T.DEFAULT_BREEZE_ENDPOINT="https://dc.services.visualstudio.com";T.DEFAULT_LIVEMETRICS_ENDPOINT="https://rt.services.visualstudio.com";T.DEFAULT_LIVEMETRICS_HOST="rt.services.visualstudio.com";var Pe;(function(e){e.COMMITTED_BYTES="\\Memory\\Committed Bytes",e.PROCESSOR_TIME="\\Processor(_Total)\\% Processor Time",e.REQUEST_RATE="\\ApplicationInsights\\Requests/Sec",e.REQUEST_FAILURE_RATE="\\ApplicationInsights\\Requests Failed/Sec",e.REQUEST_DURATION="\\ApplicationInsights\\Request Duration",e.DEPENDENCY_RATE="\\ApplicationInsights\\Dependency Calls/Sec",e.DEPENDENCY_FAILURE_RATE="\\ApplicationInsights\\Dependency Calls Failed/Sec",e.DEPENDENCY_DURATION="\\ApplicationInsights\\Dependency Call Duration",e.EXCEPTION_RATE="\\ApplicationInsights\\Exceptions/Sec"})(Pe=T.QuickPulseCounter||(T.QuickPulseCounter={}));var Wo;(function(e){e.PRIVATE_BYTES="\\Process(??APP_WIN32_PROC??)\\Private Bytes",e.AVAILABLE_BYTES="\\Memory\\Available Bytes",e.PROCESSOR_TIME="\\Processor(_Total)\\% Processor Time",e.PROCESS_TIME="\\Process(??APP_WIN32_PROC??)\\% Processor Time",e.REQUEST_RATE="\\ASP.NET Applications(??APP_W3SVC_PROC??)\\Requests/Sec",e.REQUEST_DURATION="\\ASP.NET Applications(??APP_W3SVC_PROC??)\\Request Execution Time"})(Wo=T.PerformanceCounter||(T.PerformanceCounter={}));var WD;(function(e){e.REQUESTS_DURATION="requests/duration",e.DEPENDENCIES_DURATION="dependencies/duration",e.EXCEPTIONS_COUNT="exceptions/count",e.TRACES_COUNT="traces/count"})(WD=T.MetricId||(T.MetricId={}));T.PerformanceToQuickPulseCounter=(ot={},ot[Wo.PROCESSOR_TIME]=Pe.PROCESSOR_TIME,ot[Wo.REQUEST_RATE]=Pe.REQUEST_RATE,ot[Wo.REQUEST_DURATION]=Pe.REQUEST_DURATION,ot[Pe.COMMITTED_BYTES]=Pe.COMMITTED_BYTES,ot[Pe.REQUEST_FAILURE_RATE]=Pe.REQUEST_FAILURE_RATE,ot[Pe.DEPENDENCY_RATE]=Pe.DEPENDENCY_RATE,ot[Pe.DEPENDENCY_FAILURE_RATE]=Pe.DEPENDENCY_FAILURE_RATE,ot[Pe.DEPENDENCY_DURATION]=Pe.DEPENDENCY_DURATION,ot[Pe.EXCEPTION_RATE]=Pe.EXCEPTION_RATE,ot);T.QuickPulseDocumentType={Event:"Event",Exception:"Exception",Trace:"Trace",Metric:"Metric",Request:"Request",Dependency:"RemoteDependency",Availability:"Availability",PageView:"PageView"};T.QuickPulseType={Event:"EventTelemetryDocument",Exception:"ExceptionTelemetryDocument",Trace:"TraceTelemetryDocument",Metric:"MetricTelemetryDocument",Request:"RequestTelemetryDocument",Dependency:"DependencyTelemetryDocument",Availability:"AvailabilityTelemetryDocument",PageView:"PageViewTelemetryDocument"};T.TelemetryTypeStringToQuickPulseType={EventData:T.QuickPulseType.Event,ExceptionData:T.QuickPulseType.Exception,MessageData:T.QuickPulseType.Trace,MetricData:T.QuickPulseType.Metric,RequestData:T.QuickPulseType.Request,RemoteDependencyData:T.QuickPulseType.Dependency,AvailabilityData:T.QuickPulseType.Availability,PageViewData:T.QuickPulseType.PageView};T.TelemetryTypeStringToQuickPulseDocumentType={EventData:T.QuickPulseDocumentType.Event,ExceptionData:T.QuickPulseDocumentType.Exception,MessageData:T.QuickPulseDocumentType.Trace,MetricData:T.QuickPulseDocumentType.Metric,RequestData:T.QuickPulseDocumentType.Request,RemoteDependencyData:T.QuickPulseDocumentType.Dependency,AvailabilityData:T.QuickPulseDocumentType.Availability,PageViewData:T.QuickPulseDocumentType.PageView};T.SpanAttribute={HttpHost:"http.host",HttpMethod:"http.method",HttpPort:"http.port",HttpStatusCode:"http.status_code",HttpUrl:"http.url",HttpUserAgent:"http.user_agent",GrpcMethod:"grpc.method",GrpcService:"rpc.service"};T.DependencyTypeName={Grpc:"GRPC",Http:"HTTP",InProc:"InProc"};T.HeartBeatMetricName="HeartBeat"});var Jo=l((V1,ly)=>{"use strict";var Zo=__webpack_require__(22037),Ze=kt(),ZD=function(){function e(t,r,n){r===void 0&&(r=6e4),n===void 0&&(n=!1),this._lastIntervalRequestExecutionTime=0,this._lastIntervalDependencyExecutionTime=0,e.INSTANCE||(e.INSTANCE=this),this._isInitialized=!1,this._client=t,this._collectionInterval=r,this._enableLiveMetricsCounters=n}return e.prototype.enable=function(t,r){var n=this;this._isEnabled=t,this._isEnabled&&!this._isInitialized&&(this._isInitialized=!0),t?this._handle||(this._lastCpus=Zo.cpus(),this._lastRequests={totalRequestCount:e._totalRequestCount,totalFailedRequestCount:e._totalFailedRequestCount,time:+new Date},this._lastDependencies={totalDependencyCount:e._totalDependencyCount,totalFailedDependencyCount:e._totalFailedDependencyCount,time:+new Date},this._lastExceptions={totalExceptionCount:e._totalExceptionCount,time:+new Date},typeof process.cpuUsage=="function"&&(this._lastAppCpuUsage=process.cpuUsage()),this._lastHrtime=process.hrtime(),this._collectionInterval=r||this._collectionInterval,this._handle=setInterval(function(){return n.trackPerformance()},this._collectionInterval),this._handle.unref()):this._handle&&(clearInterval(this._handle),this._handle=void 0)},e.countRequest=function(t,r){var n;if(!!e.isEnabled()){if(typeof t=="string")n=+new Date("1970-01-01T"+t+"Z");else if(typeof t=="number")n=t;else return;e._intervalRequestExecutionTime+=n,r===!1&&e._totalFailedRequestCount++,e._totalRequestCount++}},e.countException=function(){e._totalExceptionCount++},e.countDependency=function(t,r){var n;if(!!e.isEnabled()){if(typeof t=="string")n=+new Date("1970-01-01T"+t+"Z");else if(typeof t=="number")n=t;else return;e._intervalDependencyExecutionTime+=n,r===!1&&e._totalFailedDependencyCount++,e._totalDependencyCount++}},e.prototype.isInitialized=function(){return this._isInitialized},e.isEnabled=function(){return e.INSTANCE&&e.INSTANCE._isEnabled},e.prototype.trackPerformance=function(){this._trackCpu(),this._trackMemory(),this._trackNetwork(),this._trackDependencyRate(),this._trackExceptionRate()},e.prototype._trackCpu=function(){var t=Zo.cpus();if(t&&t.length&&this._lastCpus&&t.length===this._lastCpus.length){for(var r=0,n=0,i=0,a=0,s=0,o=0;!!t&&o<t.length;o++){var u=t[o],c=this._lastCpus[o],f="% cpu("+o+") ",p=u.model,d=u.speed,h=u.times,E=c.times,A=h.user-E.user||0;r+=A;var j=h.sys-E.sys||0;n+=j;var se=h.nice-E.nice||0;i+=se;var Ae=h.idle-E.idle||0;a+=Ae;var At=h.irq-E.irq||0;s+=At}var tn=void 0;if(typeof process.cpuUsage=="function"){var yi=process.cpuUsage(),rn=process.hrtime(),aA=yi.user-this._lastAppCpuUsage.user+(yi.system-this._lastAppCpuUsage.system)||0;if(typeof this._lastHrtime<"u"&&this._lastHrtime.length===2){var sA=(rn[0]-this._lastHrtime[0])*1e6+(rn[1]-this._lastHrtime[1])/1e3||0;tn=100*aA/(sA*t.length)}this._lastAppCpuUsage=yi,this._lastHrtime=rn}var _u=r+n+i+a+s||1;this._client.trackMetric({name:Ze.PerformanceCounter.PROCESSOR_TIME,value:(_u-a)/_u*100}),this._client.trackMetric({name:Ze.PerformanceCounter.PROCESS_TIME,value:tn||r/_u*100})}this._lastCpus=t},e.prototype._trackMemory=function(){var t=Zo.freemem(),r=process.memoryUsage().rss,n=Zo.totalmem()-t;this._client.trackMetric({name:Ze.PerformanceCounter.PRIVATE_BYTES,value:r}),this._client.trackMetric({name:Ze.PerformanceCounter.AVAILABLE_BYTES,value:t}),this._enableLiveMetricsCounters&&this._client.trackMetric({name:Ze.QuickPulseCounter.COMMITTED_BYTES,value:n})},e.prototype._trackNetwork=function(){var t=this._lastRequests,r={totalRequestCount:e._totalRequestCount,totalFailedRequestCount:e._totalFailedRequestCount,time:+new Date},n=r.totalRequestCount-t.totalRequestCount||0,i=r.totalFailedRequestCount-t.totalFailedRequestCount||0,a=r.time-t.time,s=a/1e3,o=(e._intervalRequestExecutionTime-this._lastIntervalRequestExecutionTime)/n||0;if(this._lastIntervalRequestExecutionTime=e._intervalRequestExecutionTime,a>0){var u=n/s,c=i/s;this._client.trackMetric({name:Ze.PerformanceCounter.REQUEST_RATE,value:u}),(!this._enableLiveMetricsCounters||n>0)&&this._client.trackMetric({name:Ze.PerformanceCounter.REQUEST_DURATION,value:o}),this._enableLiveMetricsCounters&&this._client.trackMetric({name:Ze.QuickPulseCounter.REQUEST_FAILURE_RATE,value:c})}this._lastRequests=r},e.prototype._trackDependencyRate=function(){if(this._enableLiveMetricsCounters){var t=this._lastDependencies,r={totalDependencyCount:e._totalDependencyCount,totalFailedDependencyCount:e._totalFailedDependencyCount,time:+new Date},n=r.totalDependencyCount-t.totalDependencyCount||0,i=r.totalFailedDependencyCount-t.totalFailedDependencyCount||0,a=r.time-t.time,s=a/1e3,o=(e._intervalDependencyExecutionTime-this._lastIntervalDependencyExecutionTime)/n||0;if(this._lastIntervalDependencyExecutionTime=e._intervalDependencyExecutionTime,a>0){var u=n/s,c=i/s;this._client.trackMetric({name:Ze.QuickPulseCounter.DEPENDENCY_RATE,value:u}),this._client.trackMetric({name:Ze.QuickPulseCounter.DEPENDENCY_FAILURE_RATE,value:c}),(!this._enableLiveMetricsCounters||n>0)&&this._client.trackMetric({name:Ze.QuickPulseCounter.DEPENDENCY_DURATION,value:o})}this._lastDependencies=r}},e.prototype._trackExceptionRate=function(){if(this._enableLiveMetricsCounters){var t=this._lastExceptions,r={totalExceptionCount:e._totalExceptionCount,time:+new Date},n=r.totalExceptionCount-t.totalExceptionCount||0,i=r.time-t.time,a=i/1e3;if(i>0){var s=n/a;this._client.trackMetric({name:Ze.QuickPulseCounter.EXCEPTION_RATE,value:s})}this._lastExceptions=r}},e.prototype.dispose=function(){e.INSTANCE=null,this.enable(!1),this._isInitialized=!1},e._totalRequestCount=0,e._totalFailedRequestCount=0,e._totalDependencyCount=0,e._totalFailedDependencyCount=0,e._totalExceptionCount=0,e._intervalDependencyExecutionTime=0,e._intervalRequestExecutionTime=0,e}();ly.exports=ZD});var fy=l(eu=>{"use strict";Object.defineProperty(eu,"__esModule",{value:!0});eu.AggregatedMetricCounter=void 0;var JD=function(){function e(t){this.dimensions=t,this.totalCount=0,this.lastTotalCount=0,this.intervalExecutionTime=0,this.lastTime=+new Date,this.lastIntervalExecutionTime=0}return e}();eu.AggregatedMetricCounter=JD});var py=l(tu=>{"use strict";Object.defineProperty(tu,"__esModule",{value:!0});tu.PreaggregatedMetricPropertyNames=void 0;tu.PreaggregatedMetricPropertyNames={cloudRoleInstance:"cloud/roleInstance",cloudRoleName:"cloud/roleName",operationSynthetic:"operation/synthetic",requestSuccess:"Request.Success",requestResultCode:"request/resultCode",dependencyType:"Dependency.Type",dependencyTarget:"dependency/target",dependencySuccess:"Dependency.Success",dependencyResultCode:"dependency/resultCode",traceSeverityLevel:"trace/severityLevel"}});var ap=l((ip,dy)=>{"use strict";var nu=ip&&ip.__assign||function(){return nu=Object.assign||function(e){for(var t,r=1,n=arguments.length;r<n;r++){t=arguments[r];for(var i in t)Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i])}return e},nu.apply(this,arguments)},ru=kt(),ew=fy(),tw=py(),rw=function(){function e(t,r){r===void 0&&(r=6e4),e.INSTANCE||(e.INSTANCE=this),this._isInitialized=!1,e._dependencyCountersCollection=[],e._requestCountersCollection=[],e._exceptionCountersCollection=[],e._traceCountersCollection=[],this._client=t,this._collectionInterval=r}return e.prototype.enable=function(t,r){var n=this;this._isEnabled=t,this._isEnabled&&!this._isInitialized&&(this._isInitialized=!0),t?this._handle||(this._collectionInterval=r||this._collectionInterval,this._handle=setInterval(function(){return n.trackPreAggregatedMetrics()},this._collectionInterval),this._handle.unref()):this._handle&&(clearInterval(this._handle),this._handle=void 0)},e.countException=function(t){if(!!e.isEnabled()){var r=e._getAggregatedCounter(t,this._exceptionCountersCollection);r.totalCount++}},e.countTrace=function(t){if(!!e.isEnabled()){var r=e._getAggregatedCounter(t,this._traceCountersCollection);r.totalCount++}},e.countRequest=function(t,r){if(!!e.isEnabled()){var n,i=e._getAggregatedCounter(r,this._requestCountersCollection);if(typeof t=="string")n=+new Date("1970-01-01T"+t+"Z");else if(typeof t=="number")n=t;else return;i.intervalExecutionTime+=n,i.totalCount++}},e.countDependency=function(t,r){if(!!e.isEnabled()){var n=e._getAggregatedCounter(r,this._dependencyCountersCollection),i;if(typeof t=="string")i=+new Date("1970-01-01T"+t+"Z");else if(typeof t=="number")i=t;else return;n.intervalExecutionTime+=i,n.totalCount++}},e.prototype.isInitialized=function(){return this._isInitialized},e.isEnabled=function(){return e.INSTANCE&&e.INSTANCE._isEnabled},e.prototype.trackPreAggregatedMetrics=function(){this._trackRequestMetrics(),this._trackDependencyMetrics(),this._trackExceptionMetrics(),this._trackTraceMetrics()},e._getAggregatedCounter=function(t,r){for(var n=!1,i=0;i<r.length;i++){if(t===r[i].dimensions)return r[i];if(Object.keys(t).length===Object.keys(r[i].dimensions).length){for(var a in t)if(t[a]!=r[i].dimensions[a]){n=!0;break}if(!n)return r[i];n=!1}}var s=new ew.AggregatedMetricCounter(t);return r.push(s),s},e.prototype._trackRequestMetrics=function(){for(var t=0;t<e._requestCountersCollection.length;t++){var r=e._requestCountersCollection[t];r.time=+new Date;var n=r.totalCount-r.lastTotalCount||0,i=r.time-r.lastTime,a=(r.intervalExecutionTime-r.lastIntervalExecutionTime)/n||0;r.lastIntervalExecutionTime=r.intervalExecutionTime,i>0&&n>0&&this._trackPreAggregatedMetric({name:"Server response time",dimensions:r.dimensions,value:a,count:n,aggregationInterval:i,metricType:ru.MetricId.REQUESTS_DURATION}),r.lastTotalCount=r.totalCount,r.lastTime=r.time}},e.prototype._trackDependencyMetrics=function(){for(var t=0;t<e._dependencyCountersCollection.length;t++){var r=e._dependencyCountersCollection[t];r.time=+new Date;var n=r.totalCount-r.lastTotalCount||0,i=r.time-r.lastTime,a=(r.intervalExecutionTime-r.lastIntervalExecutionTime)/n||0;r.lastIntervalExecutionTime=r.intervalExecutionTime,i>0&&n>0&&this._trackPreAggregatedMetric({name:"Dependency duration",dimensions:r.dimensions,value:a,count:n,aggregationInterval:i,metricType:ru.MetricId.DEPENDENCIES_DURATION}),r.lastTotalCount=r.totalCount,r.lastTime=r.time}},e.prototype._trackExceptionMetrics=function(){for(var t=0;t<e._exceptionCountersCollection.length;t++){var r=e._exceptionCountersCollection[t],n=r.totalCount-r.lastTotalCount||0,i=r.time-r.lastTime;this._trackPreAggregatedMetric({name:"Exceptions",dimensions:r.dimensions,value:n,count:n,aggregationInterval:i,metricType:ru.MetricId.EXCEPTIONS_COUNT}),r.lastTotalCount=r.totalCount,r.lastTime=r.time}},e.prototype._trackTraceMetrics=function(){for(var t=0;t<e._traceCountersCollection.length;t++){var r=e._traceCountersCollection[t],n=r.totalCount-r.lastTotalCount||0,i=r.time-r.lastTime;this._trackPreAggregatedMetric({name:"Traces",dimensions:r.dimensions,value:n,count:n,aggregationInterval:i,metricType:ru.MetricId.TRACES_COUNT}),r.lastTotalCount=r.totalCount,r.lastTime=r.time}},e.prototype._trackPreAggregatedMetric=function(t){var r={};for(var n in t.dimensions)r[tw.PreaggregatedMetricPropertyNames[n]]=t.dimensions[n];r=nu(nu({},r),{"_MS.MetricId":t.metricType,"_MS.AggregationIntervalMs":String(t.aggregationInterval),"_MS.IsAutocollected":"True"});var i={name:t.name,value:t.value,count:t.count,properties:r,kind:"Aggregation"};this._client.trackMetric(i)},e.prototype.dispose=function(){e.INSTANCE=null,this.enable(!1),this._isInitialized=!1},e}();dy.exports=rw});var Ea=l((X1,gy)=>{"use strict";var Ht=__webpack_require__(22037),hy=__webpack_require__(57147),_y=__webpack_require__(71017),nw=De(),vy=_e(),iw=function(){function e(t){this.keys=new nw.ContextTagKeys,this.tags={},this._loadApplicationContext(t),this._loadDeviceContext(),this._loadInternalContext()}return e.prototype._loadApplicationContext=function(t){if(t=t||_y.resolve(__dirname,"../../../../package.json"),!e.appVersion[t]){e.appVersion[t]="unknown";try{var r=JSON.parse(hy.readFileSync(t,"utf8"));r&&typeof r.version=="string"&&(e.appVersion[t]=r.version)}catch(n){vy.info("unable to read app version: ",n)}}this.tags[this.keys.applicationVersion]=e.appVersion[t]},e.prototype._loadDeviceContext=function(){this.tags[this.keys.deviceId]="",this.tags[this.keys.cloudRoleInstance]=Ht&&Ht.hostname(),this.tags[this.keys.deviceOSVersion]=Ht&&Ht.type()+" "+Ht.release(),this.tags[this.keys.cloudRole]=e.DefaultRoleName,this.tags["ai.device.osArchitecture"]=Ht&&Ht.arch(),this.tags["ai.device.osPlatform"]=Ht&&Ht.platform()},e.prototype._loadInternalContext=function(){var t=_y.resolve(__dirname,"../../package.json");if(!e.sdkVersion){e.sdkVersion="unknown";try{var r=JSON.parse(hy.readFileSync(t,"utf8"));r&&typeof r.version=="string"&&(e.sdkVersion=r.version)}catch(n){vy.info("unable to read app version: ",n)}}this.tags[this.keys.internalSdkVersion]="node:"+e.sdkVersion},e.DefaultRoleName="Web",e.appVersion={},e.sdkVersion=null,e}();gy.exports=iw});var my=l((op,Ey)=>{"use strict";var aw=op&&op.__extends||function(){var e=function(t,r){return e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(n,i){n.__proto__=i}||function(n,i){for(var a in i)Object.prototype.hasOwnProperty.call(i,a)&&(n[a]=i[a])},e(t,r)};return function(t,r){e(t,r);function n(){this.constructor=t}t.prototype=r===null?Object.create(r):(n.prototype=r.prototype,new n)}}(),ut=__webpack_require__(57310),sp=De(),sw=Ue(),ow=jn(),uw=kl(),cw=Fr(),lw=function(e){aw(t,e);function t(r,n){var i=e.call(this)||this;return n&&n.method&&r&&(i.method=n.method,i.url=t._getUrlFromRequestOptions(r,n),i.startTime=+new Date),i}return t.prototype.onError=function(r){this._setStatus(void 0,r)},t.prototype.onResponse=function(r){this._setStatus(r.statusCode,void 0),this.correlationId=sw.getCorrelationContextTarget(r,ow.requestContextTargetKey)},t.prototype.getDependencyTelemetry=function(r,n){var i=ut.parse(this.url);i.search=void 0,i.hash=void 0;var a=this.method.toUpperCase()+" "+i.pathname,s=sp.RemoteDependencyDataConstants.TYPE_HTTP,o=i.hostname;i.port&&(o+=":"+i.port),this.correlationId?(s=sp.RemoteDependencyDataConstants.TYPE_AI,this.correlationId!==cw.correlationIdPrefix&&(o+=" | "+this.correlationId)):s=sp.RemoteDependencyDataConstants.TYPE_HTTP;var u={id:n,name:a,data:this.url,duration:this.duration,success:this._isSuccess(),resultCode:this.statusCode?this.statusCode.toString():null,properties:this.properties||{},dependencyTypeName:s,target:o};if(r&&r.time?u.time=r.time:this.startTime&&(u.time=new Date(this.startTime)),r){for(var c in r)u[c]||(u[c]=r[c]);if(r.properties)for(var c in r.properties)u.properties[c]=r.properties[c]}return u},t._getUrlFromRequestOptions=function(r,n){if(typeof r=="string")if(r.indexOf("http://")===0||r.indexOf("https://")===0)r=ut.parse(r);else{var i=ut.parse(r);i.host==="443"?r=ut.parse("https://"+r):r=ut.parse("http://"+r)}else{if(r&&typeof ut.URL=="function"&&r instanceof ut.URL)return ut.format(r);var a=r;r={},a&&Object.keys(a).forEach(function(u){r[u]=a[u]})}if(r.path){var s=ut.parse(r.path);r.pathname=s.pathname,r.search=s.search}if(r.host&&r.port){var o=ut.parse("http://"+r.host);!o.port&&r.port&&(r.hostname=r.host,delete r.host)}return r.protocol=r.protocol||n.agent&&n.agent.protocol||n.protocol||void 0,r.hostname=r.hostname||"localhost",ut.format(r)},t}(uw);Ey.exports=lw});var yy=l(ai=>{"use strict";var ma=ai&&ai.__assign||function(){return ma=Object.assign||function(e){for(var t,r=1,n=arguments.length;r<n;r++){t=arguments[r];for(var i in t)Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i])}return e},ma.apply(this,arguments)};Object.defineProperty(ai,"__esModule",{value:!0});ai.spanToTelemetryContract=void 0;var fw=z(),ke=kt();function up(e){var t=ma({},e);return Object.keys(ke.SpanAttribute).forEach(function(r){delete t[r]}),t}function pw(e){var t="|"+e.spanContext().traceId+"."+e.spanContext().spanId+".",r=Math.round(e._duration[0]*1e3+e._duration[1]/1e6),n=e.attributes["peer.address"]?e.attributes["peer.address"].toString():"",i=e.attributes.component?e.attributes.component.toString():"",a=i.toUpperCase()===ke.DependencyTypeName.Http||!!e.attributes[ke.SpanAttribute.HttpUrl],s=i.toLowerCase()===ke.DependencyTypeName.Grpc;if(a){var o=e.attributes[ke.SpanAttribute.HttpMethod]||"GET",u=new URL(e.attributes[ke.SpanAttribute.HttpUrl].toString()),c=e.attributes[ke.SpanAttribute.HttpHost]||u.host,f=e.attributes[ke.SpanAttribute.HttpPort]||u.port||null,p=u.pathname||"/",d=o+" "+p,h=ke.DependencyTypeName.Http,E=f?(c+":"+f).toString():c.toString(),A=u.toString(),j=e.attributes[ke.SpanAttribute.HttpStatusCode]||e.status.code||0,se=j<400;return{id:t,name:d,dependencyTypeName:h,target:E,data:A,success:se,duration:r,url:A,resultCode:String(j),properties:up(e.attributes)}}else if(s){var o=e.attributes[ke.SpanAttribute.GrpcMethod]||"rpc",Ae=e.attributes[ke.SpanAttribute.GrpcService],At=Ae?o+" "+Ae:e.name;return{id:t,duration:r,name:At,target:Ae.toString(),data:Ae.toString()||At,url:Ae.toString()||At,dependencyTypeName:ke.DependencyTypeName.Grpc,resultCode:String(e.status.code||0),success:e.status.code===0,properties:up(e.attributes)}}else{var tn=e.name,yi=e.links&&e.links.map(function(rn){return{operation_Id:rn.context.traceId,id:rn.context.spanId}});return{id:t,duration:r,name:tn,target:n,data:n||tn,url:n||tn,dependencyTypeName:e.kind===fw.SpanKind.INTERNAL?ke.DependencyTypeName.InProc:i||e.name,resultCode:String(e.status.code||0),success:e.status.code===0,properties:ma(ma({},up(e.attributes)),{"_MS.links":yi||void 0})}}}ai.spanToTelemetryContract=pw});var Sy=l(fr=>{"use strict";Object.defineProperty(fr,"__esModule",{value:!0});fr.enable=fr.subscriber=void 0;var cp=z(),Ty=oe(),Ay=Qi(),dw=yy(),hw=vu(),si=[],_w=function(e){var t=e.data,r=dw.spanToTelemetryContract(t),n=t.spanContext(),i=new Ay;i.traceId=n.traceId,i.spanId=n.spanId,i.traceFlag=Ay.formatOpenTelemetryTraceFlags(n.traceFlags),i.parentId=t.parentSpanId?"|"+n.traceId+"."+t.parentSpanId+".":null,hw.AsyncScopeManager.with(t,function(){si.forEach(function(a){t.kind===cp.SpanKind.SERVER?a.trackRequest(r):(t.kind===cp.SpanKind.CLIENT||t.kind===cp.SpanKind.INTERNAL)&&a.trackDependency(r)})})};fr.subscriber=_w;function vw(e,t){e?(si.length===0&&Ty.channel.subscribe("azure-coretracing",fr.subscriber),si.push(t)):(si=si.filter(function(r){return r!=t}),si.length===0&&Ty.channel.unsubscribe("azure-coretracing",fr.subscriber))}fr.enable=vw});var Cy=l(pr=>{"use strict";Object.defineProperty(pr,"__esModule",{value:!0});pr.enable=pr.subscriber=void 0;var Iy=oe(),oi=[],gw=function(e){e.data.event.commandName!=="ismaster"&&oi.forEach(function(t){var r=e.data.startedData&&e.data.startedData.databaseName||"Unknown database";t.trackDependency({target:r,data:e.data.event.commandName,name:e.data.event.commandName,duration:e.data.event.duration,success:e.data.succeeded,resultCode:e.data.succeeded?"0":"1",time:e.data.startedData.time,dependencyTypeName:"mongodb"})})};pr.subscriber=gw;function Ew(e,t){e?(oi.length===0&&Iy.channel.subscribe("mongodb",pr.subscriber),oi.push(t)):(oi=oi.filter(function(r){return r!=t}),oi.length===0&&Iy.channel.unsubscribe("mongodb",pr.subscriber))}pr.enable=Ew});var Oy=l(dr=>{"use strict";Object.defineProperty(dr,"__esModule",{value:!0});dr.enable=dr.subscriber=void 0;var by=oe(),ui=[],mw=function(e){ui.forEach(function(t){var r=e.data.query||{},n=r.sql||"Unknown query",i=!e.data.err,a=r._connection||{},s=a.config||{},o=s.socketPath?s.socketPath:(s.host||"localhost")+":"+s.port;t.trackDependency({target:o,data:n,name:n,duration:e.data.duration,success:i,resultCode:i?"0":"1",time:e.data.time,dependencyTypeName:"mysql"})})};dr.subscriber=mw;function yw(e,t){e?(ui.length===0&&by.channel.subscribe("mysql",dr.subscriber),ui.push(t)):(ui=ui.filter(function(r){return r!=t}),ui.length===0&&by.channel.unsubscribe("mysql",dr.subscriber))}dr.enable=yw});var Ry=l(hr=>{"use strict";Object.defineProperty(hr,"__esModule",{value:!0});hr.enable=hr.subscriber=void 0;var Py=oe(),ci=[],Tw=function(e){ci.forEach(function(t){e.data.commandObj.command!=="info"&&t.trackDependency({target:e.data.address,name:e.data.commandObj.command,data:e.data.commandObj.command,duration:e.data.duration,success:!e.data.err,resultCode:e.data.err?"1":"0",time:e.data.time,dependencyTypeName:"redis"})})};hr.subscriber=Tw;function Aw(e,t){e?(ci.length===0&&Py.channel.subscribe("redis",hr.subscriber),ci.push(t)):(ci=ci.filter(function(r){return r!=t}),ci.length===0&&Py.channel.unsubscribe("redis",hr.subscriber))}hr.enable=Aw});var Dy=l(_r=>{"use strict";Object.defineProperty(_r,"__esModule",{value:!0});_r.enable=_r.subscriber=void 0;var Ny=oe(),li=[],Sw=function(e){li.forEach(function(t){var r=e.data.query,n=r.preparable&&r.preparable.text||r.plan||r.text||"unknown query",i=!e.data.error,a=e.data.database.host+":"+e.data.database.port;t.trackDependency({target:a,data:n,name:n,duration:e.data.duration,success:i,resultCode:i?"0":"1",time:e.data.time,dependencyTypeName:"postgres"})})};_r.subscriber=Sw;function Iw(e,t){e?(li.length===0&&Ny.channel.subscribe("postgres",_r.subscriber),li.push(t)):(li=li.filter(function(r){return r!=t}),li.length===0&&Ny.channel.unsubscribe("postgres",_r.subscriber))}_r.enable=Iw});var di=l((pp,Ly)=>{"use strict";var iu=pp&&pp.__spreadArrays||function(){for(var e=0,t=0,r=arguments.length;t<r;t++)e+=arguments[t].length;for(var n=Array(e),i=0,t=0;t<r;t++)for(var a=arguments[t],s=0,o=a.length;s<o;s++,i++)n[i]=a[s];return n},fi=__webpack_require__(13685),pi=__webpack_require__(95687),lp=_e(),wy=Ue(),vr=jn(),Cw=my(),xy=Er(),My=Fr(),fp=Qi(),bw=po(),Ow=function(){function e(t){if(e.INSTANCE)throw new Error("Client request tracking should be configured from the applicationInsights object");e.INSTANCE=this,this._client=t}return e.prototype.enable=function(t){this._isEnabled=t,this._isEnabled&&!this._isInitialized&&this._initialize(),bw.IsInitialized&&(Sy().enable(!0,this._client),Cy().enable(t,this._client),Oy().enable(t,this._client),Ry().enable(t,this._client),Dy().enable(t,this._client))},e.prototype.isInitialized=function(){return this._isInitialized},e.prototype._initialize=function(){var t=this;this._isInitialized=!0;var r=fi.request,n=pi.request,i=function(a,s){var o=!s[e.disableCollectionRequestOption]&&!a[e.alreadyAutoCollectedFlag];s.headers&&s.headers["user-agent"]&&s.headers["user-agent"].toString().indexOf("azsdk-js")!==-1&&(o=!1),a[e.alreadyAutoCollectedFlag]=!0,a&&s&&o&&(xy.CorrelationContextManager.wrapEmitter(a),e.trackRequest(t._client,{options:s,request:a}))};fi.request=function(a){for(var s=[],o=1;o<arguments.length;o++)s[o-1]=arguments[o];var u=r.call.apply(r,iu([fi,a],s));return i(u,a),u},pi.request=function(a){for(var s=[],o=1;o<arguments.length;o++)s[o-1]=arguments[o];var u=n.call.apply(n,iu([pi,a],s));return i(u,a),u},fi.get=function(a){for(var s,o=[],u=1;u<arguments.length;u++)o[u-1]=arguments[u];var c=(s=fi.request).call.apply(s,iu([fi,a],o));return c.end(),c},pi.get=function(a){for(var s,o=[],u=1;u<arguments.length;u++)o[u-1]=arguments[u];var c=(s=pi.request).call.apply(s,iu([pi,a],o));return c.end(),c}},e.trackRequest=function(t,r){if(!r.options||!r.request||!t){lp.info("AutoCollectHttpDependencies.trackRequest was called with invalid parameters: ",!r.options,!r.request,!t);return}var n=new Cw(r.options,r.request),i=xy.CorrelationContextManager.getCurrentContext(),a,s;if(i&&i.operation&&i.operation.traceparent&&fp.isValidTraceId(i.operation.traceparent.traceId))i.operation.traceparent.updateSpanId(),a=i.operation.traceparent.getBackCompatRequestId();else if(My.w3cEnabled){var o=new fp;s=o.toString(),a=o.getBackCompatRequestId()}else a=i&&i.operation&&i.operation.parentId+e.requestNumber+++".";if(wy.canIncludeCorrelationHeader(t,n.getUrl())&&r.request.getHeader&&r.request.setHeader&&t.config&&t.config.correlationId){var u=r.request.getHeader(vr.requestContextHeader);try{wy.safeIncludeCorrelationHeader(t,r.request,u)}catch(p){lp.warn("Request-Context header could not be set. Correlation of requests may be lost",p)}if(i&&i.operation)try{if(r.request.setHeader(vr.requestIdHeader,a),t.config.ignoreLegacyHeaders||(r.request.setHeader(vr.parentIdHeader,i.operation.id),r.request.setHeader(vr.rootIdHeader,a)),s||i.operation.traceparent)r.request.setHeader(vr.traceparentHeader,s||i.operation.traceparent.toString());else if(My.w3cEnabled){var o=new fp().toString();r.request.setHeader(vr.traceparentHeader,o)}if(i.operation.tracestate){var c=i.operation.tracestate.toString();c&&r.request.setHeader(vr.traceStateHeader,c)}var f=i.customProperties.serializeToHeader();f&&r.request.setHeader(vr.correlationContextHeader,f)}catch(p){lp.warn("Correlation headers could not be set. Correlation of requests may be lost.",p)}}r.request.on&&(r.request.on("response",function(p){n.onResponse(p);var d=n.getDependencyTelemetry(r,a);d.contextObjects=d.contextObjects||{},d.contextObjects["http.RequestOptions"]=r.options,d.contextObjects["http.ClientRequest"]=r.request,d.contextObjects["http.ClientResponse"]=p,t.trackDependency(d)}),r.request.on("error",function(p){n.onError(p);var d=n.getDependencyTelemetry(r,a);d.contextObjects=d.contextObjects||{},d.contextObjects["http.RequestOptions"]=r.options,d.contextObjects["http.ClientRequest"]=r.request,d.contextObjects.Error=p,t.trackDependency(d)}),r.request.on("abort",function(){n.onError(new Error);var p=n.getDependencyTelemetry(r,a);p.contextObjects=p.contextObjects||{},p.contextObjects["http.RequestOptions"]=r.options,p.contextObjects["http.ClientRequest"]=r.request,t.trackDependency(p)}))},e.prototype.dispose=function(){e.INSTANCE=null,this.enable(!1),this._isInitialized=!1},e.disableCollectionRequestOption="disableAppInsightsAutoCollection",e.requestNumber=1,e.alreadyAutoCollectedFlag="_appInsightsAutoCollected",e}();Ly.exports=Ow});var ky=l((ej,jy)=>{"use strict";var Pw=__webpack_require__(22037),qy=kt(),Rw=Ue(),Nw=Ea(),Dw=di(),ww="http://169.254.169.254/metadata/instance/compute",xw="api-version=2017-12-01",Mw="format=json",Lw="ENETUNREACH",qw=function(){function e(t){this._collectionInterval=9e5,this._vmData={},this._azInst_vmId="",this._azInst_subscriptionId="",this._azInst_osType="",e.INSTANCE||(e.INSTANCE=this),this._isInitialized=!1,this._client=t}return e.prototype.enable=function(t,r){var n=this;this._isEnabled=t,this._isEnabled&&!this._isInitialized&&(this._isInitialized=!0),t?this._handle||(this._handle=setInterval(function(){return n.trackHeartBeat(r,function(){})},this._collectionInterval),this._handle.unref()):this._handle&&(clearInterval(this._handle),this._handle=null)},e.prototype.isInitialized=function(){return this._isInitialized},e.isEnabled=function(){return e.INSTANCE&&e.INSTANCE._isEnabled},e.prototype.trackHeartBeat=function(t,r){var n=this,i=!1,a={},s=Nw.sdkVersion;a.sdk=s,a.osType=Pw.type(),process.env.WEBSITE_SITE_NAME?(a.appSrv_SiteName=process.env.WEBSITE_SITE_NAME||"",a.appSrv_wsStamp=process.env.WEBSITE_HOME_STAMPNAME||"",a.appSrv_wsHost=process.env.WEBSITE_HOSTNAME||""):process.env.FUNCTIONS_WORKER_RUNTIME?a.azfunction_appId=process.env.WEBSITE_HOSTNAME:t&&(this._isVM===void 0?(i=!0,this._getAzureComputeMetadata(t,function(){n._isVM&&Object.keys(n._vmData).length>0&&(a.azInst_vmId=n._vmData.vmId||"",a.azInst_subscriptionId=n._vmData.subscriptionId||"",a.azInst_osType=n._vmData.osType||"",n._azInst_vmId=n._vmData.vmId||"",n._azInst_subscriptionId=n._vmData.subscriptionId||"",n._azInst_osType=n._vmData.osType||""),n._client.trackMetric({name:qy.HeartBeatMetricName,value:0,properties:a}),r()})):this._isVM&&(a.azInst_vmId=this._azInst_vmId,a.azInst_subscriptionId=this._azInst_subscriptionId,a.azInst_osType=this._azInst_osType)),i||(this._client.trackMetric({name:qy.HeartBeatMetricName,value:0,properties:a}),r())},e.prototype.dispose=function(){e.INSTANCE=null,this.enable(!1),this._isInitialized=!1},e.prototype._getAzureComputeMetadata=function(t,r){var n,i=this,a=ww+"?"+xw+"&"+Mw,s=(n={method:"GET"},n[Dw.disableCollectionRequestOption]=!0,n.headers={Metadata:"True"},n),o=Rw.makeRequest(t,a,s,function(u){if(u.statusCode===200){i._isVM=!0;var c="";u.on("data",function(f){c+=f}),u.on("end",function(){i._vmData=i._isJSON(c)?JSON.parse(c):{},r()})}else r()});o&&(o.on("error",function(u){u&&u.message&&u.message.indexOf(Lw)>-1&&(i._isVM=!1),r()}),o.end())},e.prototype._isJSON=function(t){try{return JSON.parse(t)&&!!t}catch{return!1}},e}();jy.exports=qw});var hp=l((tj,Gy)=>{"use strict";var Hy=__webpack_require__(13685),Uy=__webpack_require__(95687),By=_e(),Fy=Ue(),jw=jn(),dp=Bl(),Ut=Er(),kw=Jo(),Hw=function(){function e(t){if(e.INSTANCE)throw new Error("Server request tracking should be configured from the applicationInsights object");e.INSTANCE=this,this._client=t}return e.prototype.enable=function(t){this._isEnabled=t,(this._isAutoCorrelating||this._isEnabled||kw.isEnabled())&&!this._isInitialized&&(this.useAutoCorrelation(this._isAutoCorrelating),this._initialize())},e.prototype.useAutoCorrelation=function(t,r){t&&!this._isAutoCorrelating?Ut.CorrelationContextManager.enable(r):!t&&this._isAutoCorrelating&&Ut.CorrelationContextManager.disable(),this._isAutoCorrelating=t},e.prototype.isInitialized=function(){return this._isInitialized},e.prototype.isAutoCorrelating=function(){return this._isAutoCorrelating},e.prototype._generateCorrelationContext=function(t){if(!!this._isAutoCorrelating)return Ut.CorrelationContextManager.generateContextObject(t.getOperationId(this._client.context.tags),t.getRequestId(),t.getOperationName(this._client.context.tags),t.getCorrelationContextHeader(),t.getTraceparent(),t.getTracestate())},e.prototype._initialize=function(){var t=this;this._isInitialized=!0;var r=function(s){if(!!s){if(typeof s!="function")throw new Error("onRequest handler must be a function");return function(o,u){Ut.CorrelationContextManager.wrapEmitter(o),Ut.CorrelationContextManager.wrapEmitter(u);var c=o&&!o[e.alreadyAutoCollectedFlag];if(o&&c){var f=new dp(o),p=t._generateCorrelationContext(f);Ut.CorrelationContextManager.runWithContext(p,function(){t._isEnabled&&(o[e.alreadyAutoCollectedFlag]=!0,e.trackRequest(t._client,{request:o,response:u},f)),typeof s=="function"&&s(o,u)})}else typeof s=="function"&&s(o,u)}}},n=function(s){var o=s.addListener.bind(s);s.addListener=function(u,c){switch(u){case"request":case"checkContinue":return o(u,r(c));default:return o(u,c)}},s.on=s.addListener},i=Hy.createServer;Hy.createServer=function(s,o){if(o&&typeof o=="function"){var u=i(s,r(o));return n(u),u}else{var u=i(r(s));return n(u),u}};var a=Uy.createServer;Uy.createServer=function(s,o){var u=a(s,r(o));return n(u),u}},e.trackRequestSync=function(t,r){if(!r.request||!r.response||!t){By.info("AutoCollectHttpRequests.trackRequestSync was called with invalid parameters: ",!r.request,!r.response,!t);return}e.addResponseCorrelationIdHeader(t,r.response);var n=Ut.CorrelationContextManager.getCurrentContext(),i=new dp(r.request,n&&n.operation.parentId);n&&(n.operation.id=i.getOperationId(t.context.tags)||n.operation.id,n.operation.name=i.getOperationName(t.context.tags)||n.operation.name,n.operation.parentId=i.getRequestId()||n.operation.parentId,n.customProperties.addHeaderData(i.getCorrelationContextHeader())),e.endRequest(t,i,r,r.duration,r.error)},e.trackRequest=function(t,r,n){if(!r.request||!r.response||!t){By.info("AutoCollectHttpRequests.trackRequest was called with invalid parameters: ",!r.request,!r.response,!t);return}var i=Ut.CorrelationContextManager.getCurrentContext(),a=n||new dp(r.request,i&&i.operation.parentId);Fy.canIncludeCorrelationHeader(t,a.getUrl())&&e.addResponseCorrelationIdHeader(t,r.response),i&&!n&&(i.operation.id=a.getOperationId(t.context.tags)||i.operation.id,i.operation.name=a.getOperationName(t.context.tags)||i.operation.name,i.operation.parentId=a.getOperationParentId(t.context.tags)||i.operation.parentId,i.customProperties.addHeaderData(a.getCorrelationContextHeader())),r.response.once&&r.response.once("finish",function(){e.endRequest(t,a,r,null,null)}),r.request.on&&r.request.on("error",function(s){e.endRequest(t,a,r,null,s)}),r.request.on&&r.request.on("aborted",function(){var s="The request has been aborted and the network socket has closed.";e.endRequest(t,a,r,null,s)})},e.addResponseCorrelationIdHeader=function(t,r){if(t.config&&t.config.correlationId&&r.getHeader&&r.setHeader&&!r.headersSent){var n=r.getHeader(jw.requestContextHeader);Fy.safeIncludeCorrelationHeader(t,r,n)}},e.endRequest=function(t,r,n,i,a){a?r.onError(a,i):r.onResponse(n.response,i);var s=r.getRequestTelemetry(n);if(s.tagOverrides=r.getRequestTags(t.context.tags),n.tagOverrides)for(var o in n.tagOverrides)s.tagOverrides[o]=n.tagOverrides[o];var u=r.getLegacyRootId();u&&(s.properties.ai_legacyRootId=u),s.contextObjects=s.contextObjects||{},s.contextObjects["http.ServerRequest"]=n.request,s.contextObjects["http.ServerResponse"]=n.response,t.trackRequest(s)},e.prototype.dispose=function(){e.INSTANCE=null,this.enable(!1),this._isInitialized=!1,Ut.CorrelationContextManager.disable(),this._isAutoCorrelating=!1},e.alreadyAutoCollectedFlag="_appInsightsAutoCollected",e}();Gy.exports=Hw});var zy=l((vp,$y)=>{"use strict";var Je=vp&&vp.__assign||function(){return Je=Object.assign||function(e){for(var t,r=1,n=arguments.length;r<n;r++){t=arguments[r];for(var i in t)Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i])}return e},Je.apply(this,arguments)},_p=__webpack_require__(22037),Jr=De(),Vy=kt(),Uw=Ue(),Bw=_e(),Fw=Uw.w3cTraceId(),Gw=function(){function e(){}return e.createQuickPulseEnvelope=function(t,r,n,i){var a=_p&&typeof _p.hostname=="function"&&_p.hostname()||"Unknown",s=i.tags&&i.keys&&i.keys.cloudRoleInstance&&i.tags[i.keys.cloudRoleInstance]||a,o=i.tags&&i.keys&&i.keys.cloudRole&&i.tags[i.keys.cloudRole]||null,u={Documents:r.length>0?r:null,InstrumentationKey:n.instrumentationKey||"",Metrics:t.length>0?t:null,InvariantVersion:1,Timestamp:"/Date("+Date.now()+")/",Version:i.tags[i.keys.internalSdkVersion],StreamId:Fw,MachineName:a,Instance:s,RoleName:o};return u},e.createQuickPulseMetric=function(t){var r;return r={Name:t.name,Value:t.value,Weight:t.count||1},r},e.telemetryEnvelopeToQuickPulseDocument=function(t){switch(t.data.baseType){case Jr.TelemetryTypeString.Event:return e.createQuickPulseEventDocument(t);case Jr.TelemetryTypeString.Exception:return e.createQuickPulseExceptionDocument(t);case Jr.TelemetryTypeString.Trace:return e.createQuickPulseTraceDocument(t);case Jr.TelemetryTypeString.Dependency:return e.createQuickPulseDependencyDocument(t);case Jr.TelemetryTypeString.Request:return e.createQuickPulseRequestDocument(t)}return null},e.createQuickPulseEventDocument=function(t){var r=e.createQuickPulseDocument(t),n=t.data.baseData.name,i=Je(Je({},r),{Name:n});return i},e.createQuickPulseTraceDocument=function(t){var r=e.createQuickPulseDocument(t),n=t.data.baseData.severityLevel||0,i=Je(Je({},r),{Message:t.data.baseData.message,SeverityLevel:Jr.SeverityLevel[n]});return i},e.createQuickPulseExceptionDocument=function(t){var r=e.createQuickPulseDocument(t),n=t.data.baseData.exceptions,i="",a="",s="";n&&n.length>0&&(n[0].parsedStack&&n[0].parsedStack.length>0?n[0].parsedStack.forEach(function(u){i+=u.assembly+`
`}):n[0].stack&&n[0].stack.length>0&&(i=n[0].stack),a=n[0].message,s=n[0].typeName);var o=Je(Je({},r),{Exception:i,ExceptionMessage:a,ExceptionType:s});return o},e.createQuickPulseRequestDocument=function(t){var r=e.createQuickPulseDocument(t),n=t.data.baseData,i=Je(Je({},r),{Name:n.name,Success:n.success,Duration:n.duration,ResponseCode:n.responseCode,OperationName:n.name});return i},e.createQuickPulseDependencyDocument=function(t){var r=e.createQuickPulseDocument(t),n=t.data.baseData,i=Je(Je({},r),{Name:n.name,Target:n.target,Success:n.success,Duration:n.duration,ResultCode:n.resultCode,CommandName:n.data,OperationName:r.OperationId,DependencyTypeName:n.type});return i},e.createQuickPulseDocument=function(t){var r,n,i,a;t.data.baseType?(n=Vy.TelemetryTypeStringToQuickPulseType[t.data.baseType],r=Vy.TelemetryTypeStringToQuickPulseDocumentType[t.data.baseType]):Bw.warn("Document type invalid; not sending live metric document",t.data.baseType),i=t.tags[e.keys.operationId],a=e.aggregateProperties(t);var s={DocumentType:r,__type:n,OperationId:i,Version:"1.0",Properties:a};return s},e.aggregateProperties=function(t){var r=[],n=t.data.baseData.measurements||{};for(var i in n)if(n.hasOwnProperty(i)){var a=n[i],s={key:i,value:a};r.push(s)}var o=t.data.baseData.properties||{};for(var i in o)if(o.hasOwnProperty(i)){var a=o[i],s={key:i,value:a};r.push(s)}return r},e.keys=new Jr.ContextTagKeys,e}();$y.exports=Gw});var Ky=l((rj,Xy)=>{"use strict";var Vw=function(){return(Date.now()+621355968e5)*1e4};Xy.exports={getTransmissionTime:Vw}});var Jy=l((ya,Zy)=>{"use strict";var Yy=ya&&ya.__awaiter||function(e,t,r,n){function i(a){return a instanceof r?a:new r(function(s){s(a)})}return new(r||(r=Promise))(function(a,s){function o(f){try{c(n.next(f))}catch(p){s(p)}}function u(f){try{c(n.throw(f))}catch(p){s(p)}}function c(f){f.done?a(f.value):i(f.value).then(o,u)}c((n=n.apply(e,t||[])).next())})},Qy=ya&&ya.__generator||function(e,t){var r={label:0,sent:function(){if(a[0]&1)throw a[1];return a[1]},trys:[],ops:[]},n,i,a,s;return s={next:o(0),throw:o(1),return:o(2)},typeof Symbol=="function"&&(s[Symbol.iterator]=function(){return this}),s;function o(c){return function(f){return u([c,f])}}function u(c){if(n)throw new TypeError("Generator is already executing.");for(;r;)try{if(n=1,i&&(a=c[0]&2?i.return:c[0]?i.throw||((a=i.return)&&a.call(i),0):i.next)&&!(a=a.call(i,c[1])).done)return a;switch(i=0,a&&(c=[c[0]&2,a.value]),c[0]){case 0:case 1:a=c;break;case 4:return r.label++,{value:c[1],done:!1};case 5:r.label++,i=c[1],c=[0];continue;case 7:c=r.ops.pop(),r.trys.pop();continue;default:if(a=r.trys,!(a=a.length>0&&a[a.length-1])&&(c[0]===6||c[0]===2)){r=0;continue}if(c[0]===3&&(!a||c[1]>a[0]&&c[1]<a[3])){r.label=c[1];break}if(c[0]===6&&r.label<a[1]){r.label=a[1],a=c;break}if(a&&r.label<a[2]){r.label=a[2],r.ops.push(c);break}a[2]&&r.ops.pop(),r.trys.pop();continue}c=t.call(e,r)}catch(f){c=[6,f],i=0}finally{n=a=0}if(c[0]&5)throw c[1];return{value:c[0]?c[1]:void 0,done:!0}}},$w=__webpack_require__(95687),zw=di(),Wy=_e(),Xw=Ky(),Kw=Ue(),et={method:"POST",time:"x-ms-qps-transmission-time",pollingIntervalHint:"x-ms-qps-service-polling-interval-hint",endpointRedirect:"x-ms-qps-service-endpoint-redirect",instanceName:"x-ms-qps-instance-name",streamId:"x-ms-qps-stream-id",machineName:"x-ms-qps-machine-name",roleName:"x-ms-qps-role-name",streamid:"x-ms-qps-stream-id",invariantVersion:"x-ms-qps-invariant-version",subscribed:"x-ms-qps-subscribed"},Yw=function(){function e(t){this._config=t,this._consecutiveErrors=0}return e.prototype.ping=function(t,r,n){var i=[{name:et.streamId,value:t.StreamId},{name:et.machineName,value:t.MachineName},{name:et.roleName,value:t.RoleName},{name:et.instanceName,value:t.Instance},{name:et.invariantVersion,value:t.InvariantVersion.toString()}];this._submitData(t,r,n,"ping",i)},e.prototype.post=function(t,r,n){return Yy(this,void 0,void 0,function(){return Qy(this,function(i){switch(i.label){case 0:return[4,this._submitData([t],r,n,"post")];case 1:return i.sent(),[2]}})})},e.prototype._submitData=function(t,r,n,i,a){return Yy(this,void 0,void 0,function(){var s,o,u,c,f,p=this;return Qy(this,function(d){return s=JSON.stringify(t),o=(c={},c[zw.disableCollectionRequestOption]=!0,c.host=r&&r.length>0?r:this._config.quickPulseHost,c.method=et.method,c.path="/QuickPulseService.svc/"+i+"?ikey="+this._config.instrumentationKey,c.headers=(f={Expect:"100-continue"},f[et.time]=Xw.getTransmissionTime(),f["Content-Type"]="application/json",f["Content-Length"]=Buffer.byteLength(s),f),c),a&&a.length>0&&a.forEach(function(h){return o.headers[h.name]=h.value}),this._config.httpsAgent?o.agent=this._config.httpsAgent:o.agent=Kw.tlsRestrictedAgent,u=$w.request(o,function(h){if(h.statusCode==200){var E=h.headers[et.subscribed]==="true",A=h.headers[et.endpointRedirect]?h.headers[et.endpointRedirect].toString():null,j=h.headers[et.pollingIntervalHint]?parseInt(h.headers[et.pollingIntervalHint].toString()):null;p._consecutiveErrors=0,n(E,h,A,j)}else p._onError("StatusCode:"+h.statusCode+" StatusMessage:"+h.statusMessage),n()}),u.on("error",function(h){p._onError(h),n()}),u.write(s),u.end(),[2]})})},e.prototype._onError=function(t){this._consecutiveErrors++;var r="Transient error connecting to the Live Metrics endpoint. This packet will not appear in your Live Metrics Stream. Error:";this._consecutiveErrors%e.MAX_QPS_FAILURES_BEFORE_WARN===0?(r="Live Metrics endpoint could not be reached "+this._consecutiveErrors+" consecutive times. Most recent error:",Wy.warn(e.TAG,r,t)):Wy.info(e.TAG,r,t)},e.TAG="QuickPulseSender",e.MAX_QPS_FAILURES_BEFORE_WARN=25,e}();Zy.exports=Yw});var iT=l((Ta,nT)=>{"use strict";var eT=Ta&&Ta.__awaiter||function(e,t,r,n){function i(a){return a instanceof r?a:new r(function(s){s(a)})}return new(r||(r=Promise))(function(a,s){function o(f){try{c(n.next(f))}catch(p){s(p)}}function u(f){try{c(n.throw(f))}catch(p){s(p)}}function c(f){f.done?a(f.value):i(f.value).then(o,u)}c((n=n.apply(e,t||[])).next())})},tT=Ta&&Ta.__generator||function(e,t){var r={label:0,sent:function(){if(a[0]&1)throw a[1];return a[1]},trys:[],ops:[]},n,i,a,s;return s={next:o(0),throw:o(1),return:o(2)},typeof Symbol=="function"&&(s[Symbol.iterator]=function(){return this}),s;function o(c){return function(f){return u([c,f])}}function u(c){if(n)throw new TypeError("Generator is already executing.");for(;r;)try{if(n=1,i&&(a=c[0]&2?i.return:c[0]?i.throw||((a=i.return)&&a.call(i),0):i.next)&&!(a=a.call(i,c[1])).done)return a;switch(i=0,a&&(c=[c[0]&2,a.value]),c[0]){case 0:case 1:a=c;break;case 4:return r.label++,{value:c[1],done:!1};case 5:r.label++,i=c[1],c=[0];continue;case 7:c=r.ops.pop(),r.trys.pop();continue;default:if(a=r.trys,!(a=a.length>0&&a[a.length-1])&&(c[0]===6||c[0]===2)){r=0;continue}if(c[0]===3&&(!a||c[1]>a[0]&&c[1]<a[3])){r.label=c[1];break}if(c[0]===6&&r.label<a[1]){r.label=a[1],a=c;break}if(a&&r.label<a[2]){r.label=a[2],r.ops.push(c);break}a[2]&&r.ops.pop(),r.trys.pop();continue}c=t.call(e,r)}catch(f){c=[6,f],i=0}finally{n=a=0}if(c[0]&5)throw c[1];return{value:c[0]?c[1]:void 0,done:!0}}},rT=_e(),gp=zy(),Qw=Jy(),Ww=kt(),Zw=Ea(),Jw=function(){function e(t,r){this._isCollectingData=!1,this._lastSuccessTime=Date.now(),this._lastSendSucceeded=!0,this._metrics={},this._documents=[],this._collectors=[],this._redirectedHost=null,this._pollingIntervalHint=-1,this.config=t,this.context=r||new Zw,this._sender=new Qw(this.config),this._isEnabled=!1}return e.prototype.addCollector=function(t){this._collectors.push(t)},e.prototype.trackMetric=function(t){this._addMetric(t)},e.prototype.addDocument=function(t){var r=gp.telemetryEnvelopeToQuickPulseDocument(t);r&&this._documents.push(r)},e.prototype.enable=function(t){t&&!this._isEnabled?(this._isEnabled=!0,this._goQuickPulse()):!t&&this._isEnabled&&(this._isEnabled=!1,clearTimeout(this._handle),this._handle=void 0)},e.prototype.enableCollectors=function(t){this._collectors.forEach(function(r){r.enable(t)})},e.prototype._addMetric=function(t){var r=t.value,n=t.count||1,i=Ww.PerformanceToQuickPulseCounter[t.name];i&&(this._metrics[i]?(this._metrics[i].Value=(this._metrics[i].Value*this._metrics[i].Weight+r*n)/(this._metrics[i].Weight+n),this._metrics[i].Weight+=n):(this._metrics[i]=gp.createQuickPulseMetric(t),this._metrics[i].Name=i,this._metrics[i].Weight=1))},e.prototype._resetQuickPulseBuffer=function(){delete this._metrics,this._metrics={},this._documents.length=0},e.prototype._goQuickPulse=function(){return eT(this,void 0,void 0,function(){var t,r,n,i,a=this;return tT(this,function(s){switch(s.label){case 0:return t=Object.keys(this._metrics).map(function(o){return a._metrics[o]}),r=gp.createQuickPulseEnvelope(t,this._documents.slice(),this.config,this.context),this._resetQuickPulseBuffer(),this._isCollectingData?[4,this._post(r)]:[3,2];case 1:return s.sent(),[3,3];case 2:this._ping(r),s.label=3;case 3:return n=this._pollingIntervalHint>0?this._pollingIntervalHint:e.PING_INTERVAL,i=this._isCollectingData?e.POST_INTERVAL:n,this._isCollectingData&&Date.now()-this._lastSuccessTime>=e.MAX_POST_WAIT_TIME&&!this._lastSendSucceeded?(this._isCollectingData=!1,i=e.FALLBACK_INTERVAL):!this._isCollectingData&&Date.now()-this._lastSuccessTime>=e.MAX_PING_WAIT_TIME&&!this._lastSendSucceeded&&(i=e.FALLBACK_INTERVAL),this._lastSendSucceeded=null,this._handle=setTimeout(this._goQuickPulse.bind(this),i),this._handle.unref(),[2]}})})},e.prototype._ping=function(t){this._sender.ping(t,this._redirectedHost,this._quickPulseDone.bind(this))},e.prototype._post=function(t){return eT(this,void 0,void 0,function(){return tT(this,function(r){switch(r.label){case 0:return[4,this._sender.post(t,this._redirectedHost,this._quickPulseDone.bind(this))];case 1:return r.sent(),[2]}})})},e.prototype._quickPulseDone=function(t,r,n,i){t!=null?(this._isCollectingData!==t&&(rT.info("Live Metrics sending data",t),this.enableCollectors(t)),this._isCollectingData=t,n&&n.length>0&&(this._redirectedHost=n,rT.info("Redirecting endpoint to: ",n)),i&&i>0&&(this._pollingIntervalHint=i),r&&r.statusCode<300&&r.statusCode>=200?(this._lastSuccessTime=Date.now(),this._lastSendSucceeded=!0):this._lastSendSucceeded=!1):this._lastSendSucceeded=!1},e.MAX_POST_WAIT_TIME=2e4,e.MAX_PING_WAIT_TIME=6e4,e.FALLBACK_INTERVAL=6e4,e.PING_INTERVAL=5e3,e.POST_INTERVAL=1e3,e}();nT.exports=Jw});var oT=l((nj,sT)=>{"use strict";var aT=kt(),ex=function(){function e(){}return e.parse=function(t){if(!t)return{};var r=t.split(e._FIELDS_SEPARATOR),n=r.reduce(function(a,s){var o=s.split(e._FIELD_KEY_VALUE_SEPARATOR);if(o.length===2){var u=o[0].toLowerCase(),c=o[1];a[u]=c}return a},{});if(Object.keys(n).length>0){if(n.endpointsuffix){var i=n.location?n.location+".":"";n.ingestionendpoint=n.ingestionendpoint||"https://"+i+"dc."+n.endpointsuffix,n.liveendpoint=n.liveendpoint||"https://"+i+"live."+n.endpointsuffix}n.ingestionendpoint=n.ingestionendpoint||aT.DEFAULT_BREEZE_ENDPOINT,n.liveendpoint=n.liveendpoint||aT.DEFAULT_LIVEMETRICS_ENDPOINT}return n},e._FIELDS_SEPARATOR=";",e._FIELD_KEY_VALUE_SEPARATOR="=",e}();sT.exports=ex});var mp=l((aj,lT)=>{"use strict";var Ep=Fr(),uT=oT(),ij=_e(),cT=kt(),tx=__webpack_require__(57310),rx=function(){function e(t){var r=this;this.endpointBase=cT.DEFAULT_BREEZE_ENDPOINT;var n=process.env[e.ENV_connectionString],i=uT.parse(t),a=uT.parse(n),s=!i.instrumentationkey&&Object.keys(i).length>0?null:t;this.instrumentationKey=i.instrumentationkey||s||a.instrumentationkey||e._getInstrumentationKey(),e._validateInstrumentationKey(this.instrumentationKey),this.endpointUrl=(i.ingestionendpoint||a.ingestionendpoint||this.endpointBase)+"/v2.1/track",this.maxBatchSize=250,this.maxBatchIntervalMs=15e3,this.disableAppInsights=!1,this.samplingPercentage=100,this.correlationIdRetryIntervalMs=30*1e3,this.correlationHeaderExcludedDomains=["*.core.windows.net","*.core.chinacloudapi.cn","*.core.cloudapi.de","*.core.usgovcloudapi.net","*.core.microsoft.scloud","*.core.eaglex.ic.gov"],this.setCorrelationId=function(o){return r.correlationId=o},this.proxyHttpUrl=process.env[e.ENV_http_proxy]||void 0,this.proxyHttpsUrl=process.env[e.ENV_https_proxy]||void 0,this.httpAgent=void 0,this.httpsAgent=void 0,this.profileQueryEndpoint=i.ingestionendpoint||a.ingestionendpoint||process.env[e.ENV_profileQueryEndpoint]||this.endpointBase,this._quickPulseHost=i.liveendpoint||a.liveendpoint||process.env[e.ENV_quickPulseHost]||cT.DEFAULT_LIVEMETRICS_HOST,this._quickPulseHost.match(/^https?:\/\//)&&(this._quickPulseHost=tx.parse(this._quickPulseHost).host)}return Object.defineProperty(e.prototype,"profileQueryEndpoint",{get:function(){return this._profileQueryEndpoint},set:function(t){Ep.cancelCorrelationIdQuery(this,this.setCorrelationId),this._profileQueryEndpoint=t,this.correlationId=Ep.correlationIdPrefix,Ep.queryCorrelationId(this,this.setCorrelationId)},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"quickPulseHost",{get:function(){return this._quickPulseHost},set:function(t){this._quickPulseHost=t},enumerable:!1,configurable:!0}),e._getInstrumentationKey=function(){var t=process.env[e.ENV_iKey]||process.env[e.ENV_azurePrefix+e.ENV_iKey]||process.env[e.legacy_ENV_iKey]||process.env[e.ENV_azurePrefix+e.legacy_ENV_iKey];if(!t||t=="")throw new Error("Instrumentation key not found, pass the key in the config to this method or set the key in the environment variable APPINSIGHTS_INSTRUMENTATIONKEY before starting the server");return t},e._validateInstrumentationKey=function(t){var r="^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",n=new RegExp(r);return n.test(t)},e.ENV_azurePrefix="APPSETTING_",e.ENV_iKey="APPINSIGHTS_INSTRUMENTATIONKEY",e.legacy_ENV_iKey="APPINSIGHTS_INSTRUMENTATION_KEY",e.ENV_profileQueryEndpoint="APPINSIGHTS_PROFILE_QUERY_ENDPOINT",e.ENV_quickPulseHost="APPINSIGHTS_QUICKPULSE_HOST",e.ENV_connectionString="APPLICATIONINSIGHTS_CONNECTION_STRING",e.ENV_nativeMetricsDisablers="APPLICATION_INSIGHTS_DISABLE_EXTENDED_METRIC",e.ENV_nativeMetricsDisableAll="APPLICATION_INSIGHTS_DISABLE_ALL_EXTENDED_METRICS",e.ENV_http_proxy="http_proxy",e.ENV_https_proxy="https_proxy",e}();lT.exports=rx});var pT=l(hi=>{"use strict";var au=hi&&hi.__assign||function(){return au=Object.assign||function(e){for(var t,r=1,n=arguments.length;r<n;r++){t=arguments[r];for(var i in t)Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i])}return e},au.apply(this,arguments)};Object.defineProperty(hi,"__esModule",{value:!0});hi.AutoCollectNativePerformance=void 0;var fT=mp(),Aa=Ea(),nx=_e(),ix=function(){function e(t){this._disabledMetrics={},e.INSTANCE&&e.INSTANCE.dispose(),e.INSTANCE=this,this._client=t}return e.isNodeVersionCompatible=function(){var t=process.versions.node.split(".");return parseInt(t[0])>=6},e.prototype.enable=function(t,r,n){var i=this;if(r===void 0&&(r={}),n===void 0&&(n=6e4),!!e.isNodeVersionCompatible()){if(e._metricsAvailable==null&&t&&!this._isInitialized)try{var a=__webpack_require__(Object(function webpackMissingModule() { var e = new Error("Cannot find module 'applicationinsights-native-metrics'"); e.code = 'MODULE_NOT_FOUND'; throw e; }()));e._emitter=new a,e._metricsAvailable=!0,nx.info("Native metrics module successfully loaded!")}catch{e._metricsAvailable=!1;return}this._isEnabled=t,this._disabledMetrics=r,this._isEnabled&&!this._isInitialized&&(this._isInitialized=!0),this._isEnabled&&e._emitter?(e._emitter.enable(!0,n),this._handle||(this._handle=setInterval(function(){return i._trackNativeMetrics()},n),this._handle.unref())):e._emitter&&(e._emitter.enable(!1),this._handle&&(clearInterval(this._handle),this._handle=void 0))}},e.prototype.dispose=function(){this.enable(!1)},e.parseEnabled=function(t){var r=process.env[fT.ENV_nativeMetricsDisableAll],n=process.env[fT.ENV_nativeMetricsDisablers];if(r)return{isEnabled:!1,disabledMetrics:{}};if(n){var i=n.split(","),a={};if(i.length>0)for(var s=0,o=i;s<o.length;s++){var u=o[s];a[u]=!0}return typeof t=="object"?{isEnabled:!0,disabledMetrics:au(au({},t),a)}:{isEnabled:t,disabledMetrics:a}}return typeof t=="boolean"?{isEnabled:t,disabledMetrics:{}}:{isEnabled:!0,disabledMetrics:t}},e.prototype._trackNativeMetrics=function(){var t=!0;typeof this._isEnabled!="object"&&(t=this._isEnabled),t&&(this._trackGarbageCollection(),this._trackEventLoop(),this._trackHeapUsage())},e.prototype._trackGarbageCollection=function(){var t;if(!this._disabledMetrics.gc){var r=e._emitter.getGCData();for(var n in r){var i=r[n].metrics,a=n+" Garbage Collection Duration",s=Math.sqrt(i.sumSquares/i.count-Math.pow(i.total/i.count,2))||0;this._client.trackMetric({name:a,value:i.total,count:i.count,max:i.max,min:i.min,stdDev:s,tagOverrides:(t={},t[this._client.context.keys.internalSdkVersion]="node-nativeperf:"+Aa.sdkVersion,t)})}}},e.prototype._trackEventLoop=function(){var t;if(!this._disabledMetrics.loop){var r=e._emitter.getLoopData(),n=r.loopUsage;if(n.count!=0){var i="Event Loop CPU Time",a=Math.sqrt(n.sumSquares/n.count-Math.pow(n.total/n.count,2))||0;this._client.trackMetric({name:i,value:n.total,count:n.count,min:n.min,max:n.max,stdDev:a,tagOverrides:(t={},t[this._client.context.keys.internalSdkVersion]="node-nativeperf:"+Aa.sdkVersion,t)})}}},e.prototype._trackHeapUsage=function(){var t,r,n;if(!this._disabledMetrics.heap){var i=process.memoryUsage(),a=i.heapUsed,s=i.heapTotal,o=i.rss;this._client.trackMetric({name:"Memory Usage (Heap)",value:a,count:1,tagOverrides:(t={},t[this._client.context.keys.internalSdkVersion]="node-nativeperf:"+Aa.sdkVersion,t)}),this._client.trackMetric({name:"Memory Total (Heap)",value:s,count:1,tagOverrides:(r={},r[this._client.context.keys.internalSdkVersion]="node-nativeperf:"+Aa.sdkVersion,r)}),this._client.trackMetric({name:"Memory Usage (Non-Heap)",value:o-s,count:1,tagOverrides:(n={},n[this._client.context.keys.internalSdkVersion]="node-nativeperf:"+Aa.sdkVersion,n)})}},e}();hi.AutoCollectNativePerformance=ix});var hT=l((oj,dT)=>{"use strict";var ax=_e(),sx=function(){function e(t,r,n,i){this._buffer=[],this._lastSend=0,this._isDisabled=t,this._getBatchSize=r,this._getBatchIntervalMs=n,this._sender=i}return e.prototype.setUseDiskRetryCaching=function(t,r,n){this._sender.setDiskRetryMode(t,r,n)},e.prototype.send=function(t){var r=this;if(!this._isDisabled()){if(!t){ax.warn("Cannot send null/undefined telemetry");return}if(this._buffer.push(t),this._buffer.length>=this._getBatchSize()){this.triggerSend(!1);return}!this._timeoutHandle&&this._buffer.length>0&&(this._timeoutHandle=setTimeout(function(){r._timeoutHandle=null,r.triggerSend(!1)},this._getBatchIntervalMs()))}},e.prototype.triggerSend=function(t,r){var n=this._buffer.length<1;n||(t?(this._sender.saveOnCrash(this._buffer),typeof r=="function"&&r("data saved on crash")):this._sender.send(this._buffer,r)),this._lastSend=+new Date,this._buffer=[],clearTimeout(this._timeoutHandle),this._timeoutHandle=null,n&&typeof r=="function"&&r("no data to send")},e}();dT.exports=sx});var _T=l(su=>{"use strict";Object.defineProperty(su,"__esModule",{value:!0});su.azureRoleEnvironmentTelemetryProcessor=void 0;function ox(e,t){process.env.WEBSITE_SITE_NAME&&(e.tags[t.keys.cloudRole]=process.env.WEBSITE_SITE_NAME)}su.azureRoleEnvironmentTelemetryProcessor=ox});var ET=l(_i=>{"use strict";Object.defineProperty(_i,"__esModule",{value:!0});_i.getSamplingHashCode=_i.samplingTelemetryProcessor=void 0;var vT=De();function ux(e,t){var r=e.sampleRate,n=!1;return r==null||r>=100||e.data&&vT.TelemetryType.Metric===vT.baseTypeToTelemetryType(e.data.baseType)?!0:(t.correlationContext&&t.correlationContext.operation?n=gT(t.correlationContext.operation.id)<r:n=Math.random()*100<r,n)}_i.samplingTelemetryProcessor=ux;function gT(e){var t=-2147483648,r=2147483647,n=5381;if(!e)return 0;for(;e.length<8;)e=e+e;for(var i=0;i<e.length;i++)n=((n<<5)+n|0)+e.charCodeAt(i)|0;return n=n<=t?r:Math.abs(n),n/r*100}_i.getSamplingHashCode=gT});var mT=l(ou=>{"use strict";Object.defineProperty(ou,"__esModule",{value:!0});ou.performanceMetricsTelemetryProcessor=void 0;var yp=Jo(),Tp=De();function cx(e,t){switch(t&&t.addDocument(e),e.data.baseType){case Tp.TelemetryTypeString.Exception:yp.countException();break;case Tp.TelemetryTypeString.Request:var r=e.data.baseData;yp.countRequest(r.duration,r.success);break;case Tp.TelemetryTypeString.Dependency:var n=e.data.baseData;yp.countDependency(n.duration,n.success);break}return!0}ou.performanceMetricsTelemetryProcessor=cx});var yT=l(vi=>{"use strict";var mt=vi&&vi.__assign||function(){return mt=Object.assign||function(e){for(var t,r=1,n=arguments.length;r<n;r++){t=arguments[r];for(var i in t)Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i])}return e},mt.apply(this,arguments)};Object.defineProperty(vi,"__esModule",{value:!0});vi.preAggregatedMetricsTelemetryProcessor=void 0;var lx=De(),Sa=ap(),uu=De();function fx(e,t){if(Sa.isEnabled())switch(e.data.baseType){case uu.TelemetryTypeString.Exception:var r=e.data.baseData;r.properties=mt(mt({},r.properties),{"_MS.ProcessedByMetricExtractors":"(Name:'Exceptions', Ver:'1.1')"});var n={cloudRoleInstance:e.tags[t.keys.cloudRoleInstance],cloudRoleName:e.tags[t.keys.cloudRole]};Sa.countException(n);break;case uu.TelemetryTypeString.Trace:var i=e.data.baseData;i.properties=mt(mt({},i.properties),{"_MS.ProcessedByMetricExtractors":"(Name:'Traces', Ver:'1.1')"});var a={cloudRoleInstance:e.tags[t.keys.cloudRoleInstance],cloudRoleName:e.tags[t.keys.cloudRole],traceSeverityLevel:lx.SeverityLevel[i.severity]};Sa.countTrace(a);break;case uu.TelemetryTypeString.Request:var s=e.data.baseData;s.properties=mt(mt({},s.properties),{"_MS.ProcessedByMetricExtractors":"(Name:'Requests', Ver:'1.1')"});var o={cloudRoleInstance:e.tags[t.keys.cloudRoleInstance],cloudRoleName:e.tags[t.keys.cloudRole],operationSynthetic:e.tags[t.keys.operationSyntheticSource],requestSuccess:s.success,requestResultCode:s.responseCode};Sa.countRequest(s.duration,o);break;case uu.TelemetryTypeString.Dependency:var u=e.data.baseData;u.properties=mt(mt({},u.properties),{"_MS.ProcessedByMetricExtractors":"(Name:'Dependencies', Ver:'1.1')"});var c={cloudRoleInstance:e.tags[t.keys.cloudRoleInstance],cloudRoleName:e.tags[t.keys.cloudRole],operationSynthetic:e.tags[t.keys.operationSyntheticSource],dependencySuccess:u.success,dependencyType:u.type,dependencyTarget:u.target,dependencyResultCode:u.resultCode};Sa.countDependency(u.duration,c);break}return!0}vi.preAggregatedMetricsTelemetryProcessor=fx});var TT=l(yt=>{"use strict";var px=yt&&yt.__createBinding||(Object.create?function(e,t,r,n){n===void 0&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){n===void 0&&(n=r),e[n]=t[r]}),cu=yt&&yt.__exportStar||function(e,t){for(var r in e)r!=="default"&&!Object.prototype.hasOwnProperty.call(t,r)&&px(t,e,r)};Object.defineProperty(yt,"__esModule",{value:!0});cu(_T(),yt);cu(ET(),yt);cu(mT(),yt);cu(yT(),yt)});var IT=l((Ia,ST)=>{"use strict";var dx=Ia&&Ia.__awaiter||function(e,t,r,n){function i(a){return a instanceof r?a:new r(function(s){s(a)})}return new(r||(r=Promise))(function(a,s){function o(f){try{c(n.next(f))}catch(p){s(p)}}function u(f){try{c(n.throw(f))}catch(p){s(p)}}function c(f){f.done?a(f.value):i(f.value).then(o,u)}c((n=n.apply(e,t||[])).next())})},hx=Ia&&Ia.__generator||function(e,t){var r={label:0,sent:function(){if(a[0]&1)throw a[1];return a[1]},trys:[],ops:[]},n,i,a,s;return s={next:o(0),throw:o(1),return:o(2)},typeof Symbol=="function"&&(s[Symbol.iterator]=function(){return this}),s;function o(c){return function(f){return u([c,f])}}function u(c){if(n)throw new TypeError("Generator is already executing.");for(;r;)try{if(n=1,i&&(a=c[0]&2?i.return:c[0]?i.throw||((a=i.return)&&a.call(i),0):i.next)&&!(a=a.call(i,c[1])).done)return a;switch(i=0,a&&(c=[c[0]&2,a.value]),c[0]){case 0:case 1:a=c;break;case 4:return r.label++,{value:c[1],done:!1};case 5:r.label++,i=c[1],c=[0];continue;case 7:c=r.ops.pop(),r.trys.pop();continue;default:if(a=r.trys,!(a=a.length>0&&a[a.length-1])&&(c[0]===6||c[0]===2)){r=0;continue}if(c[0]===3&&(!a||c[1]>a[0]&&c[1]<a[3])){r.label=c[1];break}if(c[0]===6&&r.label<a[1]){r.label=a[1],a=c;break}if(a&&r.label<a[2]){r.label=a[2],r.ops.push(c);break}a[2]&&r.ops.pop(),r.trys.pop();continue}c=t.call(e,r)}catch(f){c=[6,f],i=0}finally{n=a=0}if(c[0]&5)throw c[1];return{value:c[0]?c[1]:void 0,done:!0}}},ge=__webpack_require__(57147),AT=__webpack_require__(22037),Bt=__webpack_require__(71017),_x=__webpack_require__(59796),gi=__webpack_require__(32081),Ee=_e(),vx=di(),lu=Ue(),gx=function(){function e(t,r,n){if(this._redirectedHost=null,this._config=t,this._onSuccess=r,this._onError=n,this._enableDiskRetryMode=!1,this._resendInterval=e.WAIT_BETWEEN_RESEND,this._maxBytesOnDisk=e.MAX_BYTES_ON_DISK,this._numConsecutiveFailures=0,this._numConsecutiveRedirects=0,this._resendTimer=null,this._fileCleanupTimer=null,this._tempDir=Bt.join(AT.tmpdir(),e.TEMPDIR_PREFIX+this._config.instrumentationKey),!e.OS_PROVIDES_FILE_PROTECTION)if(e.USE_ICACLS){try{e.OS_PROVIDES_FILE_PROTECTION=ge.existsSync(e.ICACLS_PATH)}catch{}e.OS_PROVIDES_FILE_PROTECTION||Ee.warn(e.TAG,"Could not find ICACLS in expected location! This is necessary to use disk retry mode on Windows.")}else e.OS_PROVIDES_FILE_PROTECTION=!0}return e.prototype.setDiskRetryMode=function(t,r,n){var i=this;this._enableDiskRetryMode=e.OS_PROVIDES_FILE_PROTECTION&&t,typeof r=="number"&&r>=0&&(this._resendInterval=Math.floor(r)),typeof n=="number"&&n>=0&&(this._maxBytesOnDisk=Math.floor(n)),t&&!e.OS_PROVIDES_FILE_PROTECTION&&(this._enableDiskRetryMode=!1,Ee.warn(e.TAG,"Ignoring request to enable disk retry mode. Sufficient file protection capabilities were not detected.")),this._enableDiskRetryMode?this._fileCleanupTimer||(this._fileCleanupTimer=setTimeout(function(){i._fileCleanupTask()},e.CLEANUP_TIMEOUT),this._fileCleanupTimer.unref()):this._fileCleanupTimer&&clearTimeout(this._fileCleanupTimer)},e.prototype.send=function(t,r){return dx(this,void 0,void 0,function(){var n,i,a,s,o=this;return hx(this,function(u){return t&&(n=this._redirectedHost||this._config.endpointUrl,i={method:"POST",withCredentials:!1,headers:{"Content-Type":"application/x-json-stream"}},a="",t.forEach(function(c){var f=o._stringify(c);typeof f=="string"&&(a+=f+`
`)}),a.length>0&&(a=a.substring(0,a.length-1)),s=Buffer.from?Buffer.from(a):new Buffer(a),_x.gzip(s,function(c,f){var p=f;c?(Ee.warn(c),p=s,i.headers["Content-Length"]=s.length.toString()):(i.headers["Content-Encoding"]="gzip",i.headers["Content-Length"]=f.length.toString()),Ee.info(e.TAG,i),i[vx.disableCollectionRequestOption]=!0;var d=function(E){E.setEncoding("utf-8");var A="";E.on("data",function(j){A+=j}),E.on("end",function(){if(o._numConsecutiveFailures=0,o._enableDiskRetryMode){if(E.statusCode===200)o._resendTimer||(o._resendTimer=setTimeout(function(){o._resendTimer=null,o._sendFirstFileOnDisk()},o._resendInterval),o._resendTimer.unref());else if(o._isRetriable(E.statusCode))try{var j=JSON.parse(A),se=[];j.errors.forEach(function(At){o._isRetriable(At.statusCode)&&se.push(t[At.index])}),se.length>0&&o._storeToDisk(se)}catch{o._storeToDisk(t)}}if(E.statusCode===307||E.statusCode===308)if(o._numConsecutiveRedirects++,o._numConsecutiveRedirects<10){var Ae=E.headers.location?E.headers.location.toString():null;Ae&&(o._redirectedHost=Ae,o.send(t,r))}else typeof r=="function"&&r("Error sending telemetry because of circular redirects.");else o._numConsecutiveRedirects=0,typeof r=="function"&&r(A),Ee.info(e.TAG,A),typeof o._onSuccess=="function"&&o._onSuccess(A)})},h=lu.makeRequest(o._config,n,i,d);h.on("error",function(E){if(o._numConsecutiveFailures++,!o._enableDiskRetryMode||o._numConsecutiveFailures>0&&o._numConsecutiveFailures%e.MAX_CONNECTION_FAILURES_BEFORE_WARN===0){var A="Ingestion endpoint could not be reached. This batch of telemetry items has been lost. Use Disk Retry Caching to enable resending of failed telemetry. Error:";o._enableDiskRetryMode&&(A="Ingestion endpoint could not be reached "+o._numConsecutiveFailures+" consecutive times. There may be resulting telemetry loss. Most recent error:"),Ee.warn(e.TAG,A,lu.dumpObj(E))}else{var A="Transient failure to reach ingestion endpoint. This batch of telemetry items will be retried. Error:";Ee.info(e.TAG,A,lu.dumpObj(E))}o._onErrorHelper(E),typeof r=="function"&&(E&&r(lu.dumpObj(E)),r("Error sending telemetry")),o._enableDiskRetryMode&&o._storeToDisk(t)}),h.write(p),h.end()})),[2]})})},e.prototype.saveOnCrash=function(t){this._enableDiskRetryMode&&this._storeToDiskSync(this._stringify(t))},e.prototype._isRetriable=function(t){return t===206||t===408||t===429||t===439||t===500||t===503},e.prototype._runICACLS=function(t,r){var n=gi.spawn(e.ICACLS_PATH,t,{windowsHide:!0});n.on("error",function(i){return r(i)}),n.on("close",function(i,a){return r(i===0?null:new Error("Setting ACL restrictions did not succeed (ICACLS returned code "+i+")"))})},e.prototype._runICACLSSync=function(t){if(gi.spawnSync){var r=gi.spawnSync(e.ICACLS_PATH,t,{windowsHide:!0});if(r.error)throw r.error;if(r.status!==0)throw new Error("Setting ACL restrictions did not succeed (ICACLS returned code "+r.status+")")}else throw new Error("Could not synchronously call ICACLS under current version of Node.js")},e.prototype._getACLIdentity=function(t){if(e.ACL_IDENTITY)return t(null,e.ACL_IDENTITY);var r=gi.spawn(e.POWERSHELL_PATH,["-Command","[System.Security.Principal.WindowsIdentity]::GetCurrent().Name"],{windowsHide:!0,stdio:["ignore","pipe","pipe"]}),n="";r.stdout.on("data",function(i){return n+=i}),r.on("error",function(i){return t(i,null)}),r.on("close",function(i,a){return e.ACL_IDENTITY=n&&n.trim(),t(i===0?null:new Error("Getting ACL identity did not succeed (PS returned code "+i+")"),e.ACL_IDENTITY)})},e.prototype._getACLIdentitySync=function(){if(e.ACL_IDENTITY)return e.ACL_IDENTITY;if(gi.spawnSync){var t=gi.spawnSync(e.POWERSHELL_PATH,["-Command","[System.Security.Principal.WindowsIdentity]::GetCurrent().Name"],{windowsHide:!0,stdio:["ignore","pipe","pipe"]});if(t.error)throw t.error;if(t.status!==0)throw new Error("Getting ACL identity did not succeed (PS returned code "+t.status+")");return e.ACL_IDENTITY=t.stdout&&t.stdout.toString().trim(),e.ACL_IDENTITY}else throw new Error("Could not synchronously get ACL identity under current version of Node.js")},e.prototype._getACLArguments=function(t,r){return[t,"/grant","*S-1-5-32-544:(OI)(CI)F","/grant",r+":(OI)(CI)F","/inheritance:r"]},e.prototype._applyACLRules=function(t,r){var n=this;if(!e.USE_ICACLS)return r(null);if(e.ACLED_DIRECTORIES[t]===void 0)e.ACLED_DIRECTORIES[t]=!1,this._getACLIdentity(function(i,a){if(i)return e.ACLED_DIRECTORIES[t]=!1,r(i);n._runICACLS(n._getACLArguments(t,a),function(s){return e.ACLED_DIRECTORIES[t]=!s,r(s)})});else return r(e.ACLED_DIRECTORIES[t]?null:new Error("Setting ACL restrictions did not succeed (cached result)"))},e.prototype._applyACLRulesSync=function(t){if(e.USE_ICACLS){if(e.ACLED_DIRECTORIES[t]===void 0){this._runICACLSSync(this._getACLArguments(t,this._getACLIdentitySync())),e.ACLED_DIRECTORIES[t]=!0;return}else if(!e.ACLED_DIRECTORIES[t])throw new Error("Setting ACL restrictions did not succeed (cached result)")}},e.prototype._confirmDirExists=function(t,r){var n=this;ge.lstat(t,function(i,a){i&&i.code==="ENOENT"?ge.mkdir(t,function(s){s&&s.code!=="EEXIST"?r(s):n._applyACLRules(t,r)}):!i&&a.isDirectory()?n._applyACLRules(t,r):r(i||new Error("Path existed but was not a directory"))})},e.prototype._getShallowDirectorySize=function(t,r){ge.readdir(t,function(n,i){if(n)return r(n,-1);var a=null,s=0,o=0;if(i.length===0){r(null,0);return}for(var u=0;u<i.length;u++)ge.stat(Bt.join(t,i[u]),function(c,f){o++,c?a=c:f.isFile()&&(s+=f.size),o===i.length&&(a?r(a,-1):r(a,s))})})},e.prototype._getShallowDirectorySizeSync=function(t){for(var r=ge.readdirSync(t),n=0,i=0;i<r.length;i++)n+=ge.statSync(Bt.join(t,r[i])).size;return n},e.prototype._storeToDisk=function(t){var r=this;Ee.info(e.TAG,"Checking existence of data storage directory: "+this._tempDir),this._confirmDirExists(this._tempDir,function(n){if(n){Ee.warn(e.TAG,"Error while checking/creating directory: "+(n&&n.message)),r._onErrorHelper(n);return}r._getShallowDirectorySize(r._tempDir,function(i,a){if(i||a<0){Ee.warn(e.TAG,"Error while checking directory size: "+(i&&i.message)),r._onErrorHelper(i);return}else if(a>r._maxBytesOnDisk){Ee.warn(e.TAG,"Not saving data due to max size limit being met. Directory size in bytes is: "+a);return}var s=new Date().getTime()+".ai.json",o=Bt.join(r._tempDir,s);Ee.info(e.TAG,"saving data to disk at: "+o),ge.writeFile(o,r._stringify(t),{mode:384},function(u){return r._onErrorHelper(u)})})})},e.prototype._storeToDiskSync=function(t){try{Ee.info(e.TAG,"Checking existence of data storage directory: "+this._tempDir),ge.existsSync(this._tempDir)||ge.mkdirSync(this._tempDir),this._applyACLRulesSync(this._tempDir);var r=this._getShallowDirectorySizeSync(this._tempDir);if(r>this._maxBytesOnDisk){Ee.info(e.TAG,"Not saving data due to max size limit being met. Directory size in bytes is: "+r);return}var n=new Date().getTime()+".ai.json",i=Bt.join(this._tempDir,n);Ee.info(e.TAG,"saving data before crash to disk at: "+i),ge.writeFileSync(i,t,{mode:384})}catch(a){Ee.warn(e.TAG,"Error while saving data to disk: "+(a&&a.message)),this._onErrorHelper(a)}},e.prototype._sendFirstFileOnDisk=function(){var t=this;ge.exists(this._tempDir,function(r){r&&ge.readdir(t._tempDir,function(n,i){if(n)t._onErrorHelper(n);else if(i=i.filter(function(o){return Bt.basename(o).indexOf(".ai.json")>-1}),i.length>0){var a=i[0],s=Bt.join(t._tempDir,a);ge.readFile(s,function(o,u){o?t._onErrorHelper(o):ge.unlink(s,function(c){if(c)t._onErrorHelper(c);else try{var f=JSON.parse(u.toString());t.send(f)}catch(p){Ee.warn("Failed to read persisted file",p)}})})}})})},e.prototype._onErrorHelper=function(t){typeof this._onError=="function"&&this._onError(t)},e.prototype._stringify=function(t){try{return JSON.stringify(t)}catch(r){Ee.warn("Failed to serialize payload",r,t)}},e.prototype._fileCleanupTask=function(){var t=this;ge.exists(this._tempDir,function(r){r&&ge.readdir(t._tempDir,function(n,i){n?t._onErrorHelper(n):(i=i.filter(function(a){return Bt.basename(a).indexOf(".ai.json")>-1}),i.length>0&&i.forEach(function(a){var s=new Date(parseInt(a.split(".ai.json")[0])),o=new Date(+new Date-e.FILE_RETEMPTION_PERIOD)>s;if(o){var u=Bt.join(t._tempDir,a);ge.unlink(u,function(c){c&&t._onErrorHelper(c)})}}))})})},e.TAG="Sender",e.ICACLS_PATH=process.env.systemdrive+"/windows/system32/icacls.exe",e.POWERSHELL_PATH=process.env.systemdrive+"/windows/system32/windowspowershell/v1.0/powershell.exe",e.ACLED_DIRECTORIES={},e.ACL_IDENTITY=null,e.WAIT_BETWEEN_RESEND=60*1e3,e.MAX_BYTES_ON_DISK=50*1024*1024,e.MAX_CONNECTION_FAILURES_BEFORE_WARN=5,e.CLEANUP_TIMEOUT=60*60*1e3,e.FILE_RETEMPTION_PERIOD=7*24*60*60*1e3,e.TEMPDIR_PREFIX="appInsights-node",e.OS_PROVIDES_FILE_PROTECTION=!1,e.USE_ICACLS=AT.type()==="Windows_NT",e}();ST.exports=gx});var OT=l((dj,bT)=>{"use strict";var S=De(),tt=Ue(),Ex=Er(),mx=function(){function e(){}return e.createEnvelope=function(t,r,n,i,a){var s=null;switch(r){case S.TelemetryType.Trace:s=e.createTraceData(t);break;case S.TelemetryType.Dependency:s=e.createDependencyData(t);break;case S.TelemetryType.Event:s=e.createEventData(t);break;case S.TelemetryType.Exception:s=e.createExceptionData(t);break;case S.TelemetryType.Request:s=e.createRequestData(t);break;case S.TelemetryType.Metric:s=e.createMetricData(t);break;case S.TelemetryType.Availability:s=e.createAvailabilityData(t);break;case S.TelemetryType.PageView:s=e.createPageViewData(t);break}if(n&&S.domainSupportsProperties(s.baseData)){if(s&&s.baseData)if(!s.baseData.properties)s.baseData.properties=n;else for(var o in n)s.baseData.properties[o]||(s.baseData.properties[o]=n[o]);s.baseData.properties=tt.validateStringMap(s.baseData.properties)}var u=a&&a.instrumentationKey||"",c=new S.Envelope;return c.data=s,c.iKey=u,c.name="Microsoft.ApplicationInsights."+u.replace(/-/g,"")+"."+s.baseType.substr(0,s.baseType.length-4),c.tags=this.getTags(i,t.tagOverrides),c.time=new Date().toISOString(),c.ver=1,c.sampleRate=a?a.samplingPercentage:100,r===S.TelemetryType.Metric&&(c.sampleRate=100),c},e.createTraceData=function(t){var r=new S.MessageData;r.message=t.message,r.properties=t.properties,isNaN(t.severity)?r.severityLevel=S.SeverityLevel.Information:r.severityLevel=t.severity;var n=new S.Data;return n.baseType=S.telemetryTypeToBaseType(S.TelemetryType.Trace),n.baseData=r,n},e.createDependencyData=function(t){var r=new S.RemoteDependencyData;typeof t.name=="string"&&(r.name=t.name.length>1024?t.name.slice(0,1021)+"...":t.name),r.data=t.data,r.target=t.target,r.duration=tt.msToTimeSpan(t.duration),r.success=t.success,r.type=t.dependencyTypeName,r.properties=t.properties,r.resultCode=t.resultCode?t.resultCode+"":"",t.id?r.id=t.id:r.id=tt.w3cTraceId();var n=new S.Data;return n.baseType=S.telemetryTypeToBaseType(S.TelemetryType.Dependency),n.baseData=r,n},e.createEventData=function(t){var r=new S.EventData;r.name=t.name,r.properties=t.properties,r.measurements=t.measurements;var n=new S.Data;return n.baseType=S.telemetryTypeToBaseType(S.TelemetryType.Event),n.baseData=r,n},e.createExceptionData=function(t){var r=new S.ExceptionData;r.properties=t.properties,isNaN(t.severity)?r.severityLevel=S.SeverityLevel.Error:r.severityLevel=t.severity,r.measurements=t.measurements,r.exceptions=[];var n=t.exception.stack,i=new S.ExceptionDetails;i.message=t.exception.message,i.typeName=t.exception.name,i.parsedStack=this.parseStack(n),i.hasFullStack=tt.isArray(i.parsedStack)&&i.parsedStack.length>0,r.exceptions.push(i);var a=new S.Data;return a.baseType=S.telemetryTypeToBaseType(S.TelemetryType.Exception),a.baseData=r,a},e.createRequestData=function(t){var r=new S.RequestData;t.id?r.id=t.id:r.id=tt.w3cTraceId(),r.name=t.name,r.url=t.url,r.source=t.source,r.duration=tt.msToTimeSpan(t.duration),r.responseCode=t.resultCode?t.resultCode+"":"",r.success=t.success,r.properties=t.properties;var n=new S.Data;return n.baseType=S.telemetryTypeToBaseType(S.TelemetryType.Request),n.baseData=r,n},e.createMetricData=function(t){var r=new S.MetricData;r.metrics=[];var n=new S.DataPoint;n.count=isNaN(t.count)?1:t.count,n.kind=S.DataPointType.Aggregation,n.max=isNaN(t.max)?t.value:t.max,n.min=isNaN(t.min)?t.value:t.min,n.name=t.name,n.stdDev=isNaN(t.stdDev)?0:t.stdDev,n.value=t.value,r.metrics.push(n),r.properties=t.properties;var i=new S.Data;return i.baseType=S.telemetryTypeToBaseType(S.TelemetryType.Metric),i.baseData=r,i},e.createAvailabilityData=function(t){var r=new S.AvailabilityData;t.id?r.id=t.id:r.id=tt.w3cTraceId(),r.name=t.name,r.duration=tt.msToTimeSpan(t.duration),r.success=t.success,r.runLocation=t.runLocation,r.message=t.message,r.measurements=t.measurements,r.properties=t.properties;var n=new S.Data;return n.baseType=S.telemetryTypeToBaseType(S.TelemetryType.Availability),n.baseData=r,n},e.createPageViewData=function(t){var r=new S.PageViewData;r.name=t.name,r.duration=tt.msToTimeSpan(t.duration),r.url=t.url,r.measurements=t.measurements,r.properties=t.properties;var n=new S.Data;return n.baseType=S.telemetryTypeToBaseType(S.TelemetryType.PageView),n.baseData=r,n},e.getTags=function(t,r){var n=Ex.CorrelationContextManager.getCurrentContext(),i={};if(t&&t.tags)for(var a in t.tags)i[a]=t.tags[a];if(r)for(var a in r)i[a]=r[a];return n&&(i[t.keys.operationId]=i[t.keys.operationId]||n.operation.id,i[t.keys.operationName]=i[t.keys.operationName]||n.operation.name,i[t.keys.operationParentId]=i[t.keys.operationParentId]||n.operation.parentId),i},e.parseStack=function(t){var r=void 0;if(typeof t=="string"){var n=t.split(`
`);r=[];for(var i=0,a=0,s=0;s<=n.length;s++){var o=n[s];if(CT.regex.test(o)){var u=new CT(n[s],i++);a+=u.sizeInBytes,r.push(u)}}var c=32*1024;if(a>c)for(var f=0,p=r.length-1,d=0,h=f,E=p;f<p;){var A=r[f].sizeInBytes,j=r[p].sizeInBytes;if(d+=A+j,d>c){var se=E-h+1;r.splice(h,se);break}h=f,E=p,f++,p--}}return r},e}(),CT=function(){function e(t,r){this.sizeInBytes=0,this.level=r,this.method="<no_method>",this.assembly=tt.trim(t);var n=t.match(e.regex);n&&n.length>=5&&(this.method=tt.trim(n[2])||this.method,this.fileName=tt.trim(n[4])||"<no_filename>",this.line=parseInt(n[5])||0),this.sizeInBytes+=this.method.length,this.sizeInBytes+=this.fileName.length,this.sizeInBytes+=this.assembly.length,this.sizeInBytes+=e.baseSize,this.sizeInBytes+=this.level.toString().length,this.sizeInBytes+=this.line.toString().length}return e.regex=/^(\s+at)?(.*?)(\@|\s\(|\s)([^\(\n]+):(\d+):(\d+)(\)?)$/,e.baseSize=58,e}();bT.exports=mx});var DT=l((hj,NT)=>{"use strict";var yx=__webpack_require__(57310),Tx=mp(),Ax=Ea(),Ft=De(),Sx=hT(),fu=TT(),PT=Er(),Ix=IT(),Ap=Ue(),RT=_e(),Cx=OT(),bx=function(){function e(t){this._telemetryProcessors=[],this._enableAzureProperties=!1;var r=new Tx(t);this.config=r,this.context=new Ax,this.commonProperties={};var n=new Ix(this.config);this.channel=new Sx(function(){return r.disableAppInsights},function(){return r.maxBatchSize},function(){return r.maxBatchIntervalMs},n)}return e.prototype.trackAvailability=function(t){this.track(t,Ft.TelemetryType.Availability)},e.prototype.trackPageView=function(t){this.track(t,Ft.TelemetryType.PageView)},e.prototype.trackTrace=function(t){this.track(t,Ft.TelemetryType.Trace)},e.prototype.trackMetric=function(t){this.track(t,Ft.TelemetryType.Metric)},e.prototype.trackException=function(t){t&&t.exception&&!Ap.isError(t.exception)&&(t.exception=new Error(t.exception.toString())),this.track(t,Ft.TelemetryType.Exception)},e.prototype.trackEvent=function(t){this.track(t,Ft.TelemetryType.Event)},e.prototype.trackRequest=function(t){this.track(t,Ft.TelemetryType.Request)},e.prototype.trackDependency=function(t){t&&!t.target&&t.data&&(t.target=yx.parse(t.data).host),this.track(t,Ft.TelemetryType.Dependency)},e.prototype.flush=function(t){this.channel.triggerSend(t?!!t.isAppCrashing:!1,t?t.callback:void 0)},e.prototype.track=function(t,r){if(t&&Ft.telemetryTypeToBaseType(r)){var n=Cx.createEnvelope(t,r,this.commonProperties,this.context,this.config);t.time&&(n.time=t.time.toISOString()),this._enableAzureProperties&&fu.azureRoleEnvironmentTelemetryProcessor(n,this.context);var i=this.runTelemetryProcessors(n,t.contextObjects);i=i&&fu.samplingTelemetryProcessor(n,{correlationContext:PT.CorrelationContextManager.getCurrentContext()}),fu.preAggregatedMetricsTelemetryProcessor(n,this.context),i&&(fu.performanceMetricsTelemetryProcessor(n,this.quickPulseClient),this.channel.send(n))}else RT.warn("track() requires telemetry object and telemetryType to be specified.")},e.prototype.setAutoPopulateAzureProperties=function(t){this._enableAzureProperties=t},e.prototype.addTelemetryProcessor=function(t){this._telemetryProcessors.push(t)},e.prototype.clearTelemetryProcessors=function(){this._telemetryProcessors=[]},e.prototype.runTelemetryProcessors=function(t,r){var n=!0,i=this._telemetryProcessors.length;if(i===0)return n;r=r||{},r.correlationContext=PT.CorrelationContextManager.getCurrentContext();for(var a=0;a<i;++a)try{var s=this._telemetryProcessors[a];if(s&&s.apply(null,[t,r])===!1){n=!1;break}}catch(o){n=!0,RT.warn("One of telemetry processors failed, telemetry item will be sent.",o,t)}return n&&(t&&t.tags&&(t.tags=Ap.validateStringMap(t.tags)),t&&t.data&&t.data.baseData&&t.data.baseData.properties&&(t.data.baseData.properties=Ap.validateStringMap(t.data.baseData.properties))),n},e}();NT.exports=bx});var MT=l((Sp,xT)=>{"use strict";var Ox=Sp&&Sp.__extends||function(){var e=function(t,r){return e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(n,i){n.__proto__=i}||function(n,i){for(var a in i)Object.prototype.hasOwnProperty.call(i,a)&&(n[a]=i[a])},e(t,r)};return function(t,r){e(t,r);function n(){this.constructor=t}t.prototype=r===null?Object.create(r):(n.prototype=r.prototype,new n)}}(),Px=DT(),wT=hp(),Rx=di(),pu=_e(),Nx=function(e){Ox(t,e);function t(){return e!==null&&e.apply(this,arguments)||this}return t.prototype.trackNodeHttpRequestSync=function(r){r&&r.request&&r.response&&r.duration?wT.trackRequestSync(this,r):pu.warn("trackNodeHttpRequestSync requires NodeHttpRequestTelemetry object with request, response and duration specified.")},t.prototype.trackNodeHttpRequest=function(r){(r.duration||r.error)&&pu.warn("trackNodeHttpRequest will ignore supplied duration and error parameters. These values are collected from the request and response objects."),r&&r.request&&r.response?wT.trackRequest(this,r):pu.warn("trackNodeHttpRequest requires NodeHttpRequestTelemetry object with request and response specified.")},t.prototype.trackNodeHttpDependency=function(r){r&&r.request?Rx.trackRequest(this,r):pu.warn("trackNodeHttpDependency requires NodeHttpDependencyTelemetry object with request specified.")},t}(Px);xT.exports=Nx});var qT=l(LT=>{"use strict";Object.defineProperty(LT,"__esModule",{value:!0})});var nA=l(m=>{"use strict";Object.defineProperty(m,"__esModule",{value:!0});m.dispose=m.Configuration=m.wrapWithCorrelationContext=m.startOperation=m.getCorrelationContext=m.start=m.setup=m.liveMetricsClient=m.defaultClient=m.DistributedTracingModes=void 0;var Ip=Er(),Dx=oy(),wx=cy(),kT=Jo(),xx=ap(),Mx=ky(),Lx=di(),qx=hp(),HT=Fr(),Ca=_e(),jx=iT(),UT=pT();m.TelemetryClient=MT();m.Contracts=De();m.azureFunctionsTypes=qT();var BT;(function(e){e[e.AI=0]="AI",e[e.AI_AND_W3C=1]="AI_AND_W3C"})(BT=m.DistributedTracingModes||(m.DistributedTracingModes={}));var FT=!0,GT=!1,VT=!0,$T=!0,zT=!0,XT=!1,KT=!0,YT=!0,QT=!0,Cp=!0,WT,du=!1,ZT=!0,JT,eA=void 0,tA=void 0,ba,Oa,Pa,Ra,Na,Ei,en,Da,Tt=!1,jT;function kx(e){return m.defaultClient?Ca.info("The default client is already setup"):(m.defaultClient=new m.TelemetryClient(e),ba=new Dx(m.defaultClient),Oa=new wx(m.defaultClient),Pa=new kT(m.defaultClient),Ra=new xx(m.defaultClient),Na=new Mx(m.defaultClient),en=new qx(m.defaultClient),Da=new Lx(m.defaultClient),Ei||(Ei=new UT.AutoCollectNativePerformance(m.defaultClient))),m.defaultClient&&m.defaultClient.channel&&m.defaultClient.channel.setUseDiskRetryCaching(QT,eA,tA),bp}m.setup=kx;function rA(){return m.defaultClient?(Tt=!0,ba.enable(FT,GT),Oa.enable(VT),Pa.enable($T),Ra.enable(zT),Na.enable(XT,m.defaultClient.config),Ei.enable(ZT,JT),en.useAutoCorrelation(Cp,WT),en.enable(KT),Da.enable(YT),m.liveMetricsClient&&du&&m.liveMetricsClient.enable(du)):Ca.warn("Start cannot be called before setup"),bp}m.start=rA;function Hx(){return Cp?Ip.CorrelationContextManager.getCurrentContext():null}m.getCorrelationContext=Hx;function Ux(e,t){return Ip.CorrelationContextManager.startOperation(e,t)}m.startOperation=Ux;function Bx(e,t){return Ip.CorrelationContextManager.wrapCallback(e,t)}m.wrapWithCorrelationContext=Bx;var bp=function(){function e(){}return e.setDistributedTracingMode=function(t){return HT.w3cEnabled=t===BT.AI_AND_W3C,e},e.setAutoCollectConsole=function(t,r){return r===void 0&&(r=!1),FT=t,GT=r,Tt&&ba.enable(t,r),e},e.setAutoCollectExceptions=function(t){return VT=t,Tt&&Oa.enable(t),e},e.setAutoCollectPerformance=function(t,r){r===void 0&&(r=!0),$T=t;var n=UT.AutoCollectNativePerformance.parseEnabled(r);return ZT=n.isEnabled,JT=n.disabledMetrics,Tt&&(Pa.enable(t),Ei.enable(n.isEnabled,n.disabledMetrics)),e},e.setAutoCollectPreAggregatedMetrics=function(t){return zT=t,Tt&&Ra.enable(t),e},e.setAutoCollectHeartbeat=function(t){return XT=t,Tt&&Na.enable(t,m.defaultClient.config),e},e.setAutoCollectRequests=function(t){return KT=t,Tt&&en.enable(t),e},e.setAutoCollectDependencies=function(t){return YT=t,Tt&&Da.enable(t),e},e.setAutoDependencyCorrelation=function(t,r){return Cp=t,WT=r,Tt&&en.useAutoCorrelation(t,r),e},e.setUseDiskRetryCaching=function(t,r,n){return QT=t,eA=r,tA=n,m.defaultClient&&m.defaultClient.channel&&m.defaultClient.channel.setUseDiskRetryCaching(t,r,n),e},e.setInternalLogging=function(t,r){return t===void 0&&(t=!1),r===void 0&&(r=!0),Ca.enableDebug=t,Ca.disableWarnings=!r,e},e.setSendLiveMetrics=function(t){return t===void 0&&(t=!1),m.defaultClient?(!m.liveMetricsClient&&t?(m.liveMetricsClient=new jx(m.defaultClient.config,null),jT=new kT(m.liveMetricsClient,1e3,!0),m.liveMetricsClient.addCollector(jT),m.defaultClient.quickPulseClient=m.liveMetricsClient):m.liveMetricsClient&&m.liveMetricsClient.enable(t),du=t,e):(Ca.warn("Live metrics client cannot be setup without the default client"),e)},e.start=rA,e}();m.Configuration=bp;function Fx(){HT.w3cEnabled=!0,m.defaultClient=null,Tt=!1,ba&&ba.dispose(),Oa&&Oa.dispose(),Pa&&Pa.dispose(),Ra&&Ra.dispose(),Na&&Na.dispose(),Ei&&Ei.dispose(),en&&en.dispose(),Da&&Da.dispose(),m.liveMetricsClient&&(m.liveMetricsClient.enable(!1),du=!1,m.liveMetricsClient=void 0)}m.dispose=Fx});var zx={};hA(zx,{default:()=>hu});module.exports=_A(zx);var mi=nn(__webpack_require__(22037)),Gt=nn(__webpack_require__(89496)),iA=nn(__webpack_require__(95687));var Se=class{constructor(t){this.vscodeAPI=t}getTelemetryLevel(){let t="telemetry",r="enableTelemetry";try{let n=this.vscodeAPI.env.telemetryConfiguration;return n.isUsageEnabled&&n.isErrorsEnabled&&n.isCrashEnabled?"on":n.isErrorsEnabled&&n.isCrashEnabled?"error":"off"}catch{return this.vscodeAPI.env.isTelemetryEnabled!==void 0?this.vscodeAPI.env.isTelemetryEnabled?"on":"off":this.vscodeAPI.workspace.getConfiguration(t).get(r)?"on":"off"}}static applyReplacements(t,r){for(let n of Object.keys(t))for(let i of r)i.lookup.test(n)&&(i.replacementString!==void 0?t[n]=i.replacementString:delete t[n])}static shouldUseOneDataSystemSDK(t){return t.length===74&&t[32]==="-"&&t[41]==="-"&&t[46]==="-"&&t[51]==="-"&&t[56]==="-"&&t[69]==="-"}static getInstance(t){return Se._instance||(Se._instance=new Se(t)),Se._instance}};var wa=class{constructor(t,r,n,i,a,s){this.extensionId=t;this.extensionVersion=r;this.telemetryAppender=n;this.osShim=i;this.vscodeAPI=a;this.firstParty=!1;this.userOptIn=!1;this.errorOptIn=!1;this.disposables=[];this.firstParty=!!s,this.updateUserOptStatus(),a.env.onDidChangeTelemetryEnabled!==void 0?(this.disposables.push(a.env.onDidChangeTelemetryEnabled(()=>this.updateUserOptStatus())),this.disposables.push(a.workspace.onDidChangeConfiguration(()=>this.updateUserOptStatus()))):this.disposables.push(a.workspace.onDidChangeConfiguration(()=>this.updateUserOptStatus()))}updateUserOptStatus(){let t=Se.getInstance(this.vscodeAPI).getTelemetryLevel();this.userOptIn=t==="on",this.errorOptIn=t==="error"||this.userOptIn,(this.userOptIn||this.errorOptIn)&&this.telemetryAppender.instantiateAppender()}cleanRemoteName(t){if(!t)return"none";let r="other";return["ssh-remote","dev-container","attached-container","wsl","codespaces"].forEach(n=>{t.indexOf(`${n}`)===0&&(r=n)}),r}get extension(){return this._extension===void 0&&(this._extension=this.vscodeAPI.extensions.getExtension(this.extensionId)),this._extension}cloneAndChange(t,r){if(t===null||typeof t!="object"||typeof r!="function")return t;let n={};for(let i in t)n[i]=r(i,t[i]);return n}shouldSendErrorTelemetry(){return this.errorOptIn===!1?!1:this.firstParty?!(this.vscodeAPI.env.remoteName&&this.cleanRemoteName(this.vscodeAPI.env.remoteName)==="other"):!0}getCommonProperties(){let t={};if(t["common.os"]=this.osShim.platform,t["common.nodeArch"]=this.osShim.architecture,t["common.platformversion"]=(this.osShim.release||"").replace(/^(\d+)(\.\d+)?(\.\d+)?(.*)/,"$1$2$3"),t["common.extname"]=this.extensionId,t["common.extversion"]=this.extensionVersion,this.vscodeAPI&&this.vscodeAPI.env){switch(t["common.vscodemachineid"]=this.vscodeAPI.env.machineId,t["common.vscodesessionid"]=this.vscodeAPI.env.sessionId,t["common.vscodeversion"]=this.vscodeAPI.version,t["common.isnewappinstall"]=this.vscodeAPI.env.isNewAppInstall?this.vscodeAPI.env.isNewAppInstall.toString():"false",t["common.product"]=this.vscodeAPI.env.appHost,this.vscodeAPI.env.uiKind){case this.vscodeAPI.UIKind.Web:t["common.uikind"]="web";break;case this.vscodeAPI.UIKind.Desktop:t["common.uikind"]="desktop";break;default:t["common.uikind"]="unknown"}t["common.remotename"]=this.cleanRemoteName(this.vscodeAPI.env.remoteName)}return t}anonymizeFilePaths(t,r){let n;if(t==null)return"";let i=[];this.vscodeAPI.env.appRoot!==""&&i.push(new RegExp(this.vscodeAPI.env.appRoot.replace(/[.*+?^${}()|[\]\\]/g,"\\$&"),"gi")),this.extension&&i.push(new RegExp(this.extension.extensionPath.replace(/[.*+?^${}()|[\]\\]/g,"\\$&"),"gi"));let a=t;if(r){let s=[];for(let f of i)for(;(n=f.exec(t))&&n;)s.push([n.index,f.lastIndex]);let o=/^[\\/]?(node_modules|node_modules\.asar)[\\/]/,u=/(file:\/\/)?([a-zA-Z]:(\\\\|\\|\/)|(\\\\|\\|\/))?([\w-._]+(\\\\|\\|\/))+[\w-._]*/g,c=0;for(a="";(n=u.exec(t))&&n;)n[0]&&!o.test(n[0])&&s.every(([f,p])=>n.index<f||n.index>=p)&&(a+=t.substring(c,n.index)+"<REDACTED: user-file-path>",c=u.lastIndex);c<t.length&&(a+=t.substr(c))}for(let s of i)a=a.replace(s,"");return a}removePropertiesWithPossibleUserInfo(t){if(typeof t!="object")return;let r={};for(let n of Object.keys(t)){let i=t[n];if(!i)continue;let a=/@[a-zA-Z0-9-.]+/,s=/(key|token|sig|signature|password|passwd|pwd|android:value)[^a-zA-Z0-9]/,o=/xox[pbaors]-[a-zA-Z0-9]+-[a-zA-Z0-9-]+?/;s.test(i.toLowerCase())?r[n]="<REDACTED: secret>":a.test(i)?r[n]="<REDACTED: email>":o.test(i)?r[n]="<REDACTED: token>":r[n]=i}return r}get telemetryLevel(){switch(Se.getInstance(this.vscodeAPI).getTelemetryLevel()){case"on":return"all";case"error":return"error";case"off":return"off"}}internalSendTelemetryEvent(t,r,n,i,a){if((this.userOptIn||a)&&t!==""){if(r=St(St({},r),this.getCommonProperties()),i){let s=this.cloneAndChange(r,(o,u)=>this.anonymizeFilePaths(u,this.firstParty));r=this.removePropertiesWithPossibleUserInfo(s)}r=r??{},n=n??{},t=`${this.extensionId}/${t}`,this.telemetryAppender.logEvent(t,{properties:r,measurements:n})}}sendTelemetryEvent(t,r,n){this.internalSendTelemetryEvent(t,r,n,!0,!1)}sendRawTelemetryEvent(t,r,n){this.internalSendTelemetryEvent(t,r,n,!1,!1)}sendDangerousTelemetryEvent(t,r,n,i=!0){this.telemetryAppender.instantiateAppender(),this.internalSendTelemetryEvent(t,r,n,i,!0)}internalSendTelemetryErrorEvent(t,r,n,i,a){if((this.shouldSendErrorTelemetry()||a)&&t!==""){if(r=St(St({},r),this.getCommonProperties()),i){let s=this.cloneAndChange(r,(o,u)=>this.anonymizeFilePaths(u,this.firstParty));r=this.removePropertiesWithPossibleUserInfo(s)}r=r??{},n=n??{},t=`${this.extensionId}/${t}`,this.telemetryAppender.logEvent(t,{properties:r,measurements:n})}}sendTelemetryErrorEvent(t,r,n){this.internalSendTelemetryErrorEvent(t,r,n,!0,!1)}sendDangerousTelemetryErrorEvent(t,r,n,i=!0){this.telemetryAppender.instantiateAppender(),this.internalSendTelemetryErrorEvent(t,r,n,i,!0)}internalSendTelemetryException(t,r,n,i,a){if((this.shouldSendErrorTelemetry()||a)&&t){if(r=St(St({},r),this.getCommonProperties()),i){let s=this.cloneAndChange(r,(o,u)=>this.anonymizeFilePaths(u,this.firstParty));t.stack&&(t.stack=this.anonymizeFilePaths(t.stack,this.firstParty)),r=this.removePropertiesWithPossibleUserInfo(s)}r=r??{},n=n??{},this.telemetryAppender.logException(t,{properties:r,measurements:n})}}sendTelemetryException(t,r,n){this.internalSendTelemetryException(t,r,n,!0,!1)}sendDangerousTelemetryException(t,r,n,i=!0){this.telemetryAppender.instantiateAppender(),this.internalSendTelemetryException(t,r,n,i,!0)}dispose(){return this.telemetryAppender.flush(),Promise.all(this.disposables.map(t=>t.dispose()))}};var xa=class{constructor(t,r){this._instantiationStatus=0;this._eventQueue=[];this._exceptionQueue=[];this._clientFactory=r,this._key=t}logEvent(t,r){if(!this._telemetryClient){this._instantiationStatus!==2&&this._eventQueue.push({eventName:t,data:r});return}this._telemetryClient.logEvent(t,r)}logException(t,r){if(!this._telemetryClient){this._instantiationStatus!==2&&this._exceptionQueue.push({exception:t,data:r});return}this._telemetryClient.logException(t,r)}async flush(){this._telemetryClient&&(await this._telemetryClient.flush(),this._telemetryClient=void 0)}_flushQueues(){this._eventQueue.forEach(({eventName:t,data:r})=>this.logEvent(t,r)),this._eventQueue=[],this._exceptionQueue.forEach(({exception:t,data:r})=>this.logException(t,r)),this._exceptionQueue=[]}instantiateAppender(){this._instantiationStatus===0&&(this._instantiationStatus=1,this._clientFactory(this._key).then(t=>{this._telemetryClient=t,this._instantiationStatus=2,this._flushQueues()}).catch(t=>{console.error(t),this._instantiationStatus=2}))}};var vA=async(e,t,r)=>{let n=await __webpack_require__.e(/* import() */ 317).then(__webpack_require__.t.bind(__webpack_require__, 19317, 23)),i=await Promise.all(/* import() */[__webpack_require__.e(317), __webpack_require__.e(326)]).then(__webpack_require__.t.bind(__webpack_require__, 51326, 23)),a=new n.AppInsightsCore,s=new i.PostChannel,o={instrumentationKey:e,endpointUrl:"https://mobile.events.data.microsoft.com/OneCollector/1.0",loggingLevelTelemetry:0,loggingLevelConsole:0,disableCookiesUsage:!0,disableDbgExt:!0,disableInstrumentationKeyValidation:!0,channels:[[s]]};if(r){o.extensionConfig={};let f={alwaysUseXhrOverride:!0,httpXHROverride:r};o.extensionConfig[s.identifier]=f}let c=t.workspace.getConfiguration("telemetry").get("internalTesting");return a.initialize(o,[]),a.addTelemetryInitializer(f=>{!c||(f.ext=f.ext??{},f.ext.utc=f.ext.utc??{},f.ext.utc.flags=8462029)}),a},wp=async(e,t,r)=>{let n=await vA(e,t,r);return{logEvent:(a,s)=>{try{n==null||n.track({name:a,baseData:{name:a,properties:s==null?void 0:s.properties,measurements:s==null?void 0:s.measurements}})}catch(o){throw new Error(`Failed to log event to app insights!
`+o.message)}},logException:(a,s)=>{throw new Error("1DS SDK does not support logging exceptions, please use logEvent for exception tracking")},flush:async()=>{try{n==null||n.unload()}catch(a){throw new Error(`Failed to flush app insights!
`+a.message)}}}};var Gx=async(e,t)=>{let r;try{process.env.APPLICATION_INSIGHTS_NO_DIAGNOSTIC_CHANNEL="1";let i=await Promise.resolve().then(()=>nn(nA()));i.defaultClient?(r=new i.TelemetryClient(e),r.channel.setUseDiskRetryCaching(!0)):(i.setup(e).setAutoCollectRequests(!1).setAutoCollectPerformance(!1).setAutoCollectExceptions(!1).setAutoCollectDependencies(!1).setAutoDependencyCorrelation(!1).setAutoCollectConsole(!1).setAutoCollectHeartbeat(!1).setUseDiskRetryCaching(!0).start(),r=i.defaultClient),Gt&&Gt.env&&(r.context.tags[r.context.keys.userId]=Gt.env.machineId,r.context.tags[r.context.keys.sessionId]=Gt.env.sessionId,r.context.tags[r.context.keys.cloudRole]=Gt.env.appName,r.context.tags[r.context.keys.cloudRoleInstance]=Gt.env.appName),e&&e.indexOf("AIF-")===0&&(r.config.endpointUrl="https://mobile.events.data.microsoft.com/collect/v1")}catch(i){return Promise.reject(`Failed to initialize app insights!
`+i.message)}return t!=null&&t.length&&Vx(r,t),{logEvent:(i,a)=>{try{r==null||r.trackEvent({name:i,properties:a==null?void 0:a.properties,measurements:a==null?void 0:a.measurements})}catch(s){throw new Error(`Failed to log event to app insights!
`+s.message)}},logException:(i,a)=>{try{r==null||r.trackException({exception:i,properties:a==null?void 0:a.properties,measurements:a==null?void 0:a.measurements})}catch(s){throw new Error(`Failed to log exception to app insights!
`+s.message)}},flush:async()=>{try{r==null||r.flush()}catch(i){throw new Error(`Failed to flush app insights!
`+i.message)}}}};function Vx(e,t){e.addTelemetryProcessor(r=>(Array.isArray(r.tags)?r.tags.forEach(n=>Se.applyReplacements(n,t)):r.tags&&Se.applyReplacements(r.tags,t),r.data.baseData&&Se.applyReplacements(r.data.baseData,t),!0))}function $x(){return{sendPOST:(t,r)=>{let n={method:"POST",headers:Np(St({},t.headers),{"Content-Type":"application/json","Content-Length":Buffer.byteLength(t.data)})};try{let i=iA.request(t.urlString,n,a=>{a.on("data",function(s){r(a.statusCode??200,a.headers,s.toString())}),a.on("error",function(){r(0,{})})});i.write(t.data),i.end()}catch{r(0,{})}}}}var hu=class extends wa{constructor(t,r,n,i,a){let s=u=>Gx(u,a);Se.shouldUseOneDataSystemSDK(n)&&(s=u=>wp(u,Gt,$x()));let o=new xa(n,s);n&&(n.indexOf("AIF-")===0||Se.shouldUseOneDataSystemSDK(n))&&(i=!0),super(t,r,o,{release:mi.release(),platform:mi.platform(),architecture:mi.arch()},Gt,i)}};0&&(0);


/***/ }),

/***/ 50826:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CodeGen = exports.Name = exports.nil = exports.stringify = exports.str = exports._ = exports.KeywordCxt = void 0;
const context_1 = __webpack_require__(65233);
exports.KeywordCxt = context_1.default;
var codegen_1 = __webpack_require__(78462);
Object.defineProperty(exports, "_", ({ enumerable: true, get: function () { return codegen_1._; } }));
Object.defineProperty(exports, "str", ({ enumerable: true, get: function () { return codegen_1.str; } }));
Object.defineProperty(exports, "stringify", ({ enumerable: true, get: function () { return codegen_1.stringify; } }));
Object.defineProperty(exports, "nil", ({ enumerable: true, get: function () { return codegen_1.nil; } }));
Object.defineProperty(exports, "Name", ({ enumerable: true, get: function () { return codegen_1.Name; } }));
Object.defineProperty(exports, "CodeGen", ({ enumerable: true, get: function () { return codegen_1.CodeGen; } }));
const core_1 = __webpack_require__(91714);
const draft7_1 = __webpack_require__(28978);
const draft7MetaSchema = __webpack_require__(96031);
const META_SUPPORT_DATA = ["/properties"];
const META_SCHEMA_ID = "http://json-schema.org/draft-07/schema";
class Ajv extends core_1.default {
    _addVocabularies() {
        super._addVocabularies();
        draft7_1.default.forEach((v) => this.addVocabulary(v));
    }
    _addDefaultMetaSchema() {
        super._addDefaultMetaSchema();
        if (!this.opts.meta)
            return;
        const metaSchema = this.opts.$data
            ? this.$dataMetaSchema(draft7MetaSchema, META_SUPPORT_DATA)
            : draft7MetaSchema;
        this.addMetaSchema(metaSchema, META_SCHEMA_ID, false);
        this.refs["http://json-schema.org/schema"] = META_SCHEMA_ID;
    }
    defaultMeta() {
        return (this.opts.defaultMeta =
            super.defaultMeta() || (this.getSchema(META_SCHEMA_ID) ? META_SCHEMA_ID : undefined));
    }
}
exports["default"] = Ajv;
//# sourceMappingURL=ajv.js.map

/***/ }),

/***/ 79437:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getProperty = exports.safeStringify = exports.stringify = exports.strConcat = exports.addCodeArg = exports.str = exports._ = exports.nil = exports._Code = exports.Name = exports.IDENTIFIER = exports._CodeOrName = void 0;
class _CodeOrName {
}
exports._CodeOrName = _CodeOrName;
exports.IDENTIFIER = /^[a-z$_][a-z$_0-9]*$/i;
class Name extends _CodeOrName {
    constructor(s) {
        super();
        if (!exports.IDENTIFIER.test(s))
            throw new Error("CodeGen: name must be a valid identifier");
        this.str = s;
    }
    toString() {
        return this.str;
    }
    emptyStr() {
        return false;
    }
    get names() {
        return { [this.str]: 1 };
    }
}
exports.Name = Name;
class _Code extends _CodeOrName {
    constructor(code) {
        super();
        this._items = typeof code === "string" ? [code] : code;
    }
    toString() {
        return this.str;
    }
    emptyStr() {
        if (this._items.length > 1)
            return false;
        const item = this._items[0];
        return item === "" || item === '""';
    }
    get str() {
        var _a;
        return ((_a = this._str) !== null && _a !== void 0 ? _a : (this._str = this._items.reduce((s, c) => `${s}${c}`, "")));
    }
    get names() {
        var _a;
        return ((_a = this._names) !== null && _a !== void 0 ? _a : (this._names = this._items.reduce((names, c) => {
            if (c instanceof Name)
                names[c.str] = (names[c.str] || 0) + 1;
            return names;
        }, {})));
    }
}
exports._Code = _Code;
exports.nil = new _Code("");
function _(strs, ...args) {
    const code = [strs[0]];
    let i = 0;
    while (i < args.length) {
        addCodeArg(code, args[i]);
        code.push(strs[++i]);
    }
    return new _Code(code);
}
exports._ = _;
const plus = new _Code("+");
function str(strs, ...args) {
    const expr = [safeStringify(strs[0])];
    let i = 0;
    while (i < args.length) {
        expr.push(plus);
        addCodeArg(expr, args[i]);
        expr.push(plus, safeStringify(strs[++i]));
    }
    optimize(expr);
    return new _Code(expr);
}
exports.str = str;
function addCodeArg(code, arg) {
    if (arg instanceof _Code)
        code.push(...arg._items);
    else if (arg instanceof Name)
        code.push(arg);
    else
        code.push(interpolate(arg));
}
exports.addCodeArg = addCodeArg;
function optimize(expr) {
    let i = 1;
    while (i < expr.length - 1) {
        if (expr[i] === plus) {
            const res = mergeExprItems(expr[i - 1], expr[i + 1]);
            if (res !== undefined) {
                expr.splice(i - 1, 3, res);
                continue;
            }
            expr[i++] = "+";
        }
        i++;
    }
}
function mergeExprItems(a, b) {
    if (b === '""')
        return a;
    if (a === '""')
        return b;
    if (typeof a == "string") {
        if (b instanceof Name || a[a.length - 1] !== '"')
            return;
        if (typeof b != "string")
            return `${a.slice(0, -1)}${b}"`;
        if (b[0] === '"')
            return a.slice(0, -1) + b.slice(1);
        return;
    }
    if (typeof b == "string" && b[0] === '"' && !(a instanceof Name))
        return `"${a}${b.slice(1)}`;
    return;
}
function strConcat(c1, c2) {
    return c2.emptyStr() ? c1 : c1.emptyStr() ? c2 : str `${c1}${c2}`;
}
exports.strConcat = strConcat;
// TODO do not allow arrays here
function interpolate(x) {
    return typeof x == "number" || typeof x == "boolean" || x === null
        ? x
        : safeStringify(Array.isArray(x) ? x.join(",") : x);
}
function stringify(x) {
    return new _Code(safeStringify(x));
}
exports.stringify = stringify;
function safeStringify(x) {
    return JSON.stringify(x)
        .replace(/\u2028/g, "\\u2028")
        .replace(/\u2029/g, "\\u2029");
}
exports.safeStringify = safeStringify;
function getProperty(key) {
    return typeof key == "string" && exports.IDENTIFIER.test(key) ? new _Code(`.${key}`) : _ `[${key}]`;
}
exports.getProperty = getProperty;
//# sourceMappingURL=code.js.map

/***/ }),

/***/ 78462:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.or = exports.and = exports.not = exports.CodeGen = exports.operators = exports.varKinds = exports.ValueScopeName = exports.ValueScope = exports.Scope = exports.Name = exports.stringify = exports.getProperty = exports.nil = exports.strConcat = exports.str = exports._ = void 0;
const code_1 = __webpack_require__(79437);
const scope_1 = __webpack_require__(53050);
var code_2 = __webpack_require__(79437);
Object.defineProperty(exports, "_", ({ enumerable: true, get: function () { return code_2._; } }));
Object.defineProperty(exports, "str", ({ enumerable: true, get: function () { return code_2.str; } }));
Object.defineProperty(exports, "strConcat", ({ enumerable: true, get: function () { return code_2.strConcat; } }));
Object.defineProperty(exports, "nil", ({ enumerable: true, get: function () { return code_2.nil; } }));
Object.defineProperty(exports, "getProperty", ({ enumerable: true, get: function () { return code_2.getProperty; } }));
Object.defineProperty(exports, "stringify", ({ enumerable: true, get: function () { return code_2.stringify; } }));
Object.defineProperty(exports, "Name", ({ enumerable: true, get: function () { return code_2.Name; } }));
var scope_2 = __webpack_require__(53050);
Object.defineProperty(exports, "Scope", ({ enumerable: true, get: function () { return scope_2.Scope; } }));
Object.defineProperty(exports, "ValueScope", ({ enumerable: true, get: function () { return scope_2.ValueScope; } }));
Object.defineProperty(exports, "ValueScopeName", ({ enumerable: true, get: function () { return scope_2.ValueScopeName; } }));
Object.defineProperty(exports, "varKinds", ({ enumerable: true, get: function () { return scope_2.varKinds; } }));
exports.operators = {
    GT: new code_1._Code(">"),
    GTE: new code_1._Code(">="),
    LT: new code_1._Code("<"),
    LTE: new code_1._Code("<="),
    EQ: new code_1._Code("==="),
    NEQ: new code_1._Code("!=="),
    NOT: new code_1._Code("!"),
    OR: new code_1._Code("||"),
    AND: new code_1._Code("&&"),
    ADD: new code_1._Code("+"),
};
class Node {
    optimizeNodes() {
        return this;
    }
    optimizeNames(_names, _constants) {
        return this;
    }
}
class Def extends Node {
    constructor(varKind, name, rhs) {
        super();
        this.varKind = varKind;
        this.name = name;
        this.rhs = rhs;
    }
    render({ es5, _n }) {
        const varKind = es5 ? scope_1.varKinds.var : this.varKind;
        const rhs = this.rhs === undefined ? "" : ` = ${this.rhs}`;
        return `${varKind} ${this.name}${rhs};` + _n;
    }
    optimizeNames(names, constants) {
        if (!names[this.name.str])
            return;
        if (this.rhs)
            this.rhs = optimizeExpr(this.rhs, names, constants);
        return this;
    }
    get names() {
        return this.rhs instanceof code_1._CodeOrName ? this.rhs.names : {};
    }
}
class Assign extends Node {
    constructor(lhs, rhs, sideEffects) {
        super();
        this.lhs = lhs;
        this.rhs = rhs;
        this.sideEffects = sideEffects;
    }
    render({ _n }) {
        return `${this.lhs} = ${this.rhs};` + _n;
    }
    optimizeNames(names, constants) {
        if (this.lhs instanceof code_1.Name && !names[this.lhs.str] && !this.sideEffects)
            return;
        this.rhs = optimizeExpr(this.rhs, names, constants);
        return this;
    }
    get names() {
        const names = this.lhs instanceof code_1.Name ? {} : { ...this.lhs.names };
        return addExprNames(names, this.rhs);
    }
}
class AssignOp extends Assign {
    constructor(lhs, op, rhs, sideEffects) {
        super(lhs, rhs, sideEffects);
        this.op = op;
    }
    render({ _n }) {
        return `${this.lhs} ${this.op}= ${this.rhs};` + _n;
    }
}
class Label extends Node {
    constructor(label) {
        super();
        this.label = label;
        this.names = {};
    }
    render({ _n }) {
        return `${this.label}:` + _n;
    }
}
class Break extends Node {
    constructor(label) {
        super();
        this.label = label;
        this.names = {};
    }
    render({ _n }) {
        const label = this.label ? ` ${this.label}` : "";
        return `break${label};` + _n;
    }
}
class Throw extends Node {
    constructor(error) {
        super();
        this.error = error;
    }
    render({ _n }) {
        return `throw ${this.error};` + _n;
    }
    get names() {
        return this.error.names;
    }
}
class AnyCode extends Node {
    constructor(code) {
        super();
        this.code = code;
    }
    render({ _n }) {
        return `${this.code};` + _n;
    }
    optimizeNodes() {
        return `${this.code}` ? this : undefined;
    }
    optimizeNames(names, constants) {
        this.code = optimizeExpr(this.code, names, constants);
        return this;
    }
    get names() {
        return this.code instanceof code_1._CodeOrName ? this.code.names : {};
    }
}
class ParentNode extends Node {
    constructor(nodes = []) {
        super();
        this.nodes = nodes;
    }
    render(opts) {
        return this.nodes.reduce((code, n) => code + n.render(opts), "");
    }
    optimizeNodes() {
        const { nodes } = this;
        let i = nodes.length;
        while (i--) {
            const n = nodes[i].optimizeNodes();
            if (Array.isArray(n))
                nodes.splice(i, 1, ...n);
            else if (n)
                nodes[i] = n;
            else
                nodes.splice(i, 1);
        }
        return nodes.length > 0 ? this : undefined;
    }
    optimizeNames(names, constants) {
        const { nodes } = this;
        let i = nodes.length;
        while (i--) {
            // iterating backwards improves 1-pass optimization
            const n = nodes[i];
            if (n.optimizeNames(names, constants))
                continue;
            subtractNames(names, n.names);
            nodes.splice(i, 1);
        }
        return nodes.length > 0 ? this : undefined;
    }
    get names() {
        return this.nodes.reduce((names, n) => addNames(names, n.names), {});
    }
}
class BlockNode extends ParentNode {
    render(opts) {
        return "{" + opts._n + super.render(opts) + "}" + opts._n;
    }
}
class Root extends ParentNode {
}
class Else extends BlockNode {
}
Else.kind = "else";
class If extends BlockNode {
    constructor(condition, nodes) {
        super(nodes);
        this.condition = condition;
    }
    render(opts) {
        let code = `if(${this.condition})` + super.render(opts);
        if (this.else)
            code += "else " + this.else.render(opts);
        return code;
    }
    optimizeNodes() {
        super.optimizeNodes();
        const cond = this.condition;
        if (cond === true)
            return this.nodes; // else is ignored here
        let e = this.else;
        if (e) {
            const ns = e.optimizeNodes();
            e = this.else = Array.isArray(ns) ? new Else(ns) : ns;
        }
        if (e) {
            if (cond === false)
                return e instanceof If ? e : e.nodes;
            if (this.nodes.length)
                return this;
            return new If(not(cond), e instanceof If ? [e] : e.nodes);
        }
        if (cond === false || !this.nodes.length)
            return undefined;
        return this;
    }
    optimizeNames(names, constants) {
        var _a;
        this.else = (_a = this.else) === null || _a === void 0 ? void 0 : _a.optimizeNames(names, constants);
        if (!(super.optimizeNames(names, constants) || this.else))
            return;
        this.condition = optimizeExpr(this.condition, names, constants);
        return this;
    }
    get names() {
        const names = super.names;
        addExprNames(names, this.condition);
        if (this.else)
            addNames(names, this.else.names);
        return names;
    }
}
If.kind = "if";
class For extends BlockNode {
}
For.kind = "for";
class ForLoop extends For {
    constructor(iteration) {
        super();
        this.iteration = iteration;
    }
    render(opts) {
        return `for(${this.iteration})` + super.render(opts);
    }
    optimizeNames(names, constants) {
        if (!super.optimizeNames(names, constants))
            return;
        this.iteration = optimizeExpr(this.iteration, names, constants);
        return this;
    }
    get names() {
        return addNames(super.names, this.iteration.names);
    }
}
class ForRange extends For {
    constructor(varKind, name, from, to) {
        super();
        this.varKind = varKind;
        this.name = name;
        this.from = from;
        this.to = to;
    }
    render(opts) {
        const varKind = opts.es5 ? scope_1.varKinds.var : this.varKind;
        const { name, from, to } = this;
        return `for(${varKind} ${name}=${from}; ${name}<${to}; ${name}++)` + super.render(opts);
    }
    get names() {
        const names = addExprNames(super.names, this.from);
        return addExprNames(names, this.to);
    }
}
class ForIter extends For {
    constructor(loop, varKind, name, iterable) {
        super();
        this.loop = loop;
        this.varKind = varKind;
        this.name = name;
        this.iterable = iterable;
    }
    render(opts) {
        return `for(${this.varKind} ${this.name} ${this.loop} ${this.iterable})` + super.render(opts);
    }
    optimizeNames(names, constants) {
        if (!super.optimizeNames(names, constants))
            return;
        this.iterable = optimizeExpr(this.iterable, names, constants);
        return this;
    }
    get names() {
        return addNames(super.names, this.iterable.names);
    }
}
class Func extends BlockNode {
    constructor(name, args, async) {
        super();
        this.name = name;
        this.args = args;
        this.async = async;
    }
    render(opts) {
        const _async = this.async ? "async " : "";
        return `${_async}function ${this.name}(${this.args})` + super.render(opts);
    }
}
Func.kind = "func";
class Return extends ParentNode {
    render(opts) {
        return "return " + super.render(opts);
    }
}
Return.kind = "return";
class Try extends BlockNode {
    render(opts) {
        let code = "try" + super.render(opts);
        if (this.catch)
            code += this.catch.render(opts);
        if (this.finally)
            code += this.finally.render(opts);
        return code;
    }
    optimizeNodes() {
        var _a, _b;
        super.optimizeNodes();
        (_a = this.catch) === null || _a === void 0 ? void 0 : _a.optimizeNodes();
        (_b = this.finally) === null || _b === void 0 ? void 0 : _b.optimizeNodes();
        return this;
    }
    optimizeNames(names, constants) {
        var _a, _b;
        super.optimizeNames(names, constants);
        (_a = this.catch) === null || _a === void 0 ? void 0 : _a.optimizeNames(names, constants);
        (_b = this.finally) === null || _b === void 0 ? void 0 : _b.optimizeNames(names, constants);
        return this;
    }
    get names() {
        const names = super.names;
        if (this.catch)
            addNames(names, this.catch.names);
        if (this.finally)
            addNames(names, this.finally.names);
        return names;
    }
}
class Catch extends BlockNode {
    constructor(error) {
        super();
        this.error = error;
    }
    render(opts) {
        return `catch(${this.error})` + super.render(opts);
    }
}
Catch.kind = "catch";
class Finally extends BlockNode {
    render(opts) {
        return "finally" + super.render(opts);
    }
}
Finally.kind = "finally";
class CodeGen {
    constructor(extScope, opts = {}) {
        this._values = {};
        this._blockStarts = [];
        this._constants = {};
        this.opts = { ...opts, _n: opts.lines ? "\n" : "" };
        this._extScope = extScope;
        this._scope = new scope_1.Scope({ parent: extScope });
        this._nodes = [new Root()];
    }
    toString() {
        return this._root.render(this.opts);
    }
    // returns unique name in the internal scope
    name(prefix) {
        return this._scope.name(prefix);
    }
    // reserves unique name in the external scope
    scopeName(prefix) {
        return this._extScope.name(prefix);
    }
    // reserves unique name in the external scope and assigns value to it
    scopeValue(prefixOrName, value) {
        const name = this._extScope.value(prefixOrName, value);
        const vs = this._values[name.prefix] || (this._values[name.prefix] = new Set());
        vs.add(name);
        return name;
    }
    getScopeValue(prefix, keyOrRef) {
        return this._extScope.getValue(prefix, keyOrRef);
    }
    // return code that assigns values in the external scope to the names that are used internally
    // (same names that were returned by gen.scopeName or gen.scopeValue)
    scopeRefs(scopeName) {
        return this._extScope.scopeRefs(scopeName, this._values);
    }
    scopeCode() {
        return this._extScope.scopeCode(this._values);
    }
    _def(varKind, nameOrPrefix, rhs, constant) {
        const name = this._scope.toName(nameOrPrefix);
        if (rhs !== undefined && constant)
            this._constants[name.str] = rhs;
        this._leafNode(new Def(varKind, name, rhs));
        return name;
    }
    // `const` declaration (`var` in es5 mode)
    const(nameOrPrefix, rhs, _constant) {
        return this._def(scope_1.varKinds.const, nameOrPrefix, rhs, _constant);
    }
    // `let` declaration with optional assignment (`var` in es5 mode)
    let(nameOrPrefix, rhs, _constant) {
        return this._def(scope_1.varKinds.let, nameOrPrefix, rhs, _constant);
    }
    // `var` declaration with optional assignment
    var(nameOrPrefix, rhs, _constant) {
        return this._def(scope_1.varKinds.var, nameOrPrefix, rhs, _constant);
    }
    // assignment code
    assign(lhs, rhs, sideEffects) {
        return this._leafNode(new Assign(lhs, rhs, sideEffects));
    }
    // `+=` code
    add(lhs, rhs) {
        return this._leafNode(new AssignOp(lhs, exports.operators.ADD, rhs));
    }
    // appends passed SafeExpr to code or executes Block
    code(c) {
        if (typeof c == "function")
            c();
        else if (c !== code_1.nil)
            this._leafNode(new AnyCode(c));
        return this;
    }
    // returns code for object literal for the passed argument list of key-value pairs
    object(...keyValues) {
        const code = ["{"];
        for (const [key, value] of keyValues) {
            if (code.length > 1)
                code.push(",");
            code.push(key);
            if (key !== value || this.opts.es5) {
                code.push(":");
                code_1.addCodeArg(code, value);
            }
        }
        code.push("}");
        return new code_1._Code(code);
    }
    // `if` clause (or statement if `thenBody` and, optionally, `elseBody` are passed)
    if(condition, thenBody, elseBody) {
        this._blockNode(new If(condition));
        if (thenBody && elseBody) {
            this.code(thenBody).else().code(elseBody).endIf();
        }
        else if (thenBody) {
            this.code(thenBody).endIf();
        }
        else if (elseBody) {
            throw new Error('CodeGen: "else" body without "then" body');
        }
        return this;
    }
    // `else if` clause - invalid without `if` or after `else` clauses
    elseIf(condition) {
        return this._elseNode(new If(condition));
    }
    // `else` clause - only valid after `if` or `else if` clauses
    else() {
        return this._elseNode(new Else());
    }
    // end `if` statement (needed if gen.if was used only with condition)
    endIf() {
        return this._endBlockNode(If, Else);
    }
    _for(node, forBody) {
        this._blockNode(node);
        if (forBody)
            this.code(forBody).endFor();
        return this;
    }
    // a generic `for` clause (or statement if `forBody` is passed)
    for(iteration, forBody) {
        return this._for(new ForLoop(iteration), forBody);
    }
    // `for` statement for a range of values
    forRange(nameOrPrefix, from, to, forBody, varKind = this.opts.es5 ? scope_1.varKinds.var : scope_1.varKinds.let) {
        const name = this._scope.toName(nameOrPrefix);
        return this._for(new ForRange(varKind, name, from, to), () => forBody(name));
    }
    // `for-of` statement (in es5 mode replace with a normal for loop)
    forOf(nameOrPrefix, iterable, forBody, varKind = scope_1.varKinds.const) {
        const name = this._scope.toName(nameOrPrefix);
        if (this.opts.es5) {
            const arr = iterable instanceof code_1.Name ? iterable : this.var("_arr", iterable);
            return this.forRange("_i", 0, code_1._ `${arr}.length`, (i) => {
                this.var(name, code_1._ `${arr}[${i}]`);
                forBody(name);
            });
        }
        return this._for(new ForIter("of", varKind, name, iterable), () => forBody(name));
    }
    // `for-in` statement.
    // With option `ownProperties` replaced with a `for-of` loop for object keys
    forIn(nameOrPrefix, obj, forBody, varKind = this.opts.es5 ? scope_1.varKinds.var : scope_1.varKinds.const) {
        if (this.opts.ownProperties) {
            return this.forOf(nameOrPrefix, code_1._ `Object.keys(${obj})`, forBody);
        }
        const name = this._scope.toName(nameOrPrefix);
        return this._for(new ForIter("in", varKind, name, obj), () => forBody(name));
    }
    // end `for` loop
    endFor() {
        return this._endBlockNode(For);
    }
    // `label` statement
    label(label) {
        return this._leafNode(new Label(label));
    }
    // `break` statement
    break(label) {
        return this._leafNode(new Break(label));
    }
    // `return` statement
    return(value) {
        const node = new Return();
        this._blockNode(node);
        this.code(value);
        if (node.nodes.length !== 1)
            throw new Error('CodeGen: "return" should have one node');
        return this._endBlockNode(Return);
    }
    // `try` statement
    try(tryBody, catchCode, finallyCode) {
        if (!catchCode && !finallyCode)
            throw new Error('CodeGen: "try" without "catch" and "finally"');
        const node = new Try();
        this._blockNode(node);
        this.code(tryBody);
        if (catchCode) {
            const error = this.name("e");
            this._currNode = node.catch = new Catch(error);
            catchCode(error);
        }
        if (finallyCode) {
            this._currNode = node.finally = new Finally();
            this.code(finallyCode);
        }
        return this._endBlockNode(Catch, Finally);
    }
    // `throw` statement
    throw(error) {
        return this._leafNode(new Throw(error));
    }
    // start self-balancing block
    block(body, nodeCount) {
        this._blockStarts.push(this._nodes.length);
        if (body)
            this.code(body).endBlock(nodeCount);
        return this;
    }
    // end the current self-balancing block
    endBlock(nodeCount) {
        const len = this._blockStarts.pop();
        if (len === undefined)
            throw new Error("CodeGen: not in self-balancing block");
        const toClose = this._nodes.length - len;
        if (toClose < 0 || (nodeCount !== undefined && toClose !== nodeCount)) {
            throw new Error(`CodeGen: wrong number of nodes: ${toClose} vs ${nodeCount} expected`);
        }
        this._nodes.length = len;
        return this;
    }
    // `function` heading (or definition if funcBody is passed)
    func(name, args = code_1.nil, async, funcBody) {
        this._blockNode(new Func(name, args, async));
        if (funcBody)
            this.code(funcBody).endFunc();
        return this;
    }
    // end function definition
    endFunc() {
        return this._endBlockNode(Func);
    }
    optimize(n = 1) {
        while (n-- > 0) {
            this._root.optimizeNodes();
            this._root.optimizeNames(this._root.names, this._constants);
        }
    }
    _leafNode(node) {
        this._currNode.nodes.push(node);
        return this;
    }
    _blockNode(node) {
        this._currNode.nodes.push(node);
        this._nodes.push(node);
    }
    _endBlockNode(N1, N2) {
        const n = this._currNode;
        if (n instanceof N1 || (N2 && n instanceof N2)) {
            this._nodes.pop();
            return this;
        }
        throw new Error(`CodeGen: not in block "${N2 ? `${N1.kind}/${N2.kind}` : N1.kind}"`);
    }
    _elseNode(node) {
        const n = this._currNode;
        if (!(n instanceof If)) {
            throw new Error('CodeGen: "else" without "if"');
        }
        this._currNode = n.else = node;
        return this;
    }
    get _root() {
        return this._nodes[0];
    }
    get _currNode() {
        const ns = this._nodes;
        return ns[ns.length - 1];
    }
    set _currNode(node) {
        const ns = this._nodes;
        ns[ns.length - 1] = node;
    }
}
exports.CodeGen = CodeGen;
function addNames(names, from) {
    for (const n in from)
        names[n] = (names[n] || 0) + (from[n] || 0);
    return names;
}
function addExprNames(names, from) {
    return from instanceof code_1._CodeOrName ? addNames(names, from.names) : names;
}
function optimizeExpr(expr, names, constants) {
    if (expr instanceof code_1.Name)
        return replaceName(expr);
    if (!canOptimize(expr))
        return expr;
    return new code_1._Code(expr._items.reduce((items, c) => {
        if (c instanceof code_1.Name)
            c = replaceName(c);
        if (c instanceof code_1._Code)
            items.push(...c._items);
        else
            items.push(c);
        return items;
    }, []));
    function replaceName(n) {
        const c = constants[n.str];
        if (c === undefined || names[n.str] !== 1)
            return n;
        delete names[n.str];
        return c;
    }
    function canOptimize(e) {
        return (e instanceof code_1._Code &&
            e._items.some((c) => c instanceof code_1.Name && names[c.str] === 1 && constants[c.str] !== undefined));
    }
}
function subtractNames(names, from) {
    for (const n in from)
        names[n] = (names[n] || 0) - (from[n] || 0);
}
function not(x) {
    return typeof x == "boolean" || typeof x == "number" || x === null ? !x : code_1._ `!${par(x)}`;
}
exports.not = not;
const andCode = mappend(exports.operators.AND);
// boolean AND (&&) expression with the passed arguments
function and(...args) {
    return args.reduce(andCode);
}
exports.and = and;
const orCode = mappend(exports.operators.OR);
// boolean OR (||) expression with the passed arguments
function or(...args) {
    return args.reduce(orCode);
}
exports.or = or;
function mappend(op) {
    return (x, y) => (x === code_1.nil ? y : y === code_1.nil ? x : code_1._ `${par(x)} ${op} ${par(y)}`);
}
function par(x) {
    return x instanceof code_1.Name ? x : code_1._ `(${x})`;
}
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 53050:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ValueScope = exports.ValueScopeName = exports.Scope = exports.varKinds = exports.UsedValueState = void 0;
const code_1 = __webpack_require__(79437);
class ValueError extends Error {
    constructor(name) {
        super(`CodeGen: "code" for ${name} not defined`);
        this.value = name.value;
    }
}
var UsedValueState;
(function (UsedValueState) {
    UsedValueState[UsedValueState["Started"] = 0] = "Started";
    UsedValueState[UsedValueState["Completed"] = 1] = "Completed";
})(UsedValueState = exports.UsedValueState || (exports.UsedValueState = {}));
exports.varKinds = {
    const: new code_1.Name("const"),
    let: new code_1.Name("let"),
    var: new code_1.Name("var"),
};
class Scope {
    constructor({ prefixes, parent } = {}) {
        this._names = {};
        this._prefixes = prefixes;
        this._parent = parent;
    }
    toName(nameOrPrefix) {
        return nameOrPrefix instanceof code_1.Name ? nameOrPrefix : this.name(nameOrPrefix);
    }
    name(prefix) {
        return new code_1.Name(this._newName(prefix));
    }
    _newName(prefix) {
        const ng = this._names[prefix] || this._nameGroup(prefix);
        return `${prefix}${ng.index++}`;
    }
    _nameGroup(prefix) {
        var _a, _b;
        if (((_b = (_a = this._parent) === null || _a === void 0 ? void 0 : _a._prefixes) === null || _b === void 0 ? void 0 : _b.has(prefix)) || (this._prefixes && !this._prefixes.has(prefix))) {
            throw new Error(`CodeGen: prefix "${prefix}" is not allowed in this scope`);
        }
        return (this._names[prefix] = { prefix, index: 0 });
    }
}
exports.Scope = Scope;
class ValueScopeName extends code_1.Name {
    constructor(prefix, nameStr) {
        super(nameStr);
        this.prefix = prefix;
    }
    setValue(value, { property, itemIndex }) {
        this.value = value;
        this.scopePath = code_1._ `.${new code_1.Name(property)}[${itemIndex}]`;
    }
}
exports.ValueScopeName = ValueScopeName;
const line = code_1._ `\n`;
class ValueScope extends Scope {
    constructor(opts) {
        super(opts);
        this._values = {};
        this._scope = opts.scope;
        this.opts = { ...opts, _n: opts.lines ? line : code_1.nil };
    }
    get() {
        return this._scope;
    }
    name(prefix) {
        return new ValueScopeName(prefix, this._newName(prefix));
    }
    value(nameOrPrefix, value) {
        var _a;
        if (value.ref === undefined)
            throw new Error("CodeGen: ref must be passed in value");
        const name = this.toName(nameOrPrefix);
        const { prefix } = name;
        const valueKey = (_a = value.key) !== null && _a !== void 0 ? _a : value.ref;
        let vs = this._values[prefix];
        if (vs) {
            const _name = vs.get(valueKey);
            if (_name)
                return _name;
        }
        else {
            vs = this._values[prefix] = new Map();
        }
        vs.set(valueKey, name);
        const s = this._scope[prefix] || (this._scope[prefix] = []);
        const itemIndex = s.length;
        s[itemIndex] = value.ref;
        name.setValue(value, { property: prefix, itemIndex });
        return name;
    }
    getValue(prefix, keyOrRef) {
        const vs = this._values[prefix];
        if (!vs)
            return;
        return vs.get(keyOrRef);
    }
    scopeRefs(scopeName, values = this._values) {
        return this._reduceValues(values, (name) => {
            if (name.scopePath === undefined)
                throw new Error(`CodeGen: name "${name}" has no value`);
            return code_1._ `${scopeName}${name.scopePath}`;
        });
    }
    scopeCode(values = this._values, usedValues, getCode) {
        return this._reduceValues(values, (name) => {
            if (name.value === undefined)
                throw new Error(`CodeGen: name "${name}" has no value`);
            return name.value.code;
        }, usedValues, getCode);
    }
    _reduceValues(values, valueCode, usedValues = {}, getCode) {
        let code = code_1.nil;
        for (const prefix in values) {
            const vs = values[prefix];
            if (!vs)
                continue;
            const nameSet = (usedValues[prefix] = usedValues[prefix] || new Map());
            vs.forEach((name) => {
                if (nameSet.has(name))
                    return;
                nameSet.set(name, UsedValueState.Started);
                let c = valueCode(name);
                if (c) {
                    const def = this.opts.es5 ? exports.varKinds.var : exports.varKinds.const;
                    code = code_1._ `${code}${def} ${name} = ${c};${this.opts._n}`;
                }
                else if ((c = getCode === null || getCode === void 0 ? void 0 : getCode(name))) {
                    code = code_1._ `${code}${c}${this.opts._n}`;
                }
                else {
                    throw new ValueError(name);
                }
                nameSet.set(name, UsedValueState.Completed);
            });
        }
        return code;
    }
}
exports.ValueScope = ValueScope;
//# sourceMappingURL=scope.js.map

/***/ }),

/***/ 65233:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getData = void 0;
const dataType_1 = __webpack_require__(27778);
const util_1 = __webpack_require__(7007);
const errors_1 = __webpack_require__(39026);
const codegen_1 = __webpack_require__(78462);
const names_1 = __webpack_require__(53873);
const subschema_1 = __webpack_require__(60632);
class KeywordCxt {
    constructor(it, def, keyword) {
        validateKeywordUsage(it, def, keyword);
        this.gen = it.gen;
        this.allErrors = it.allErrors;
        this.keyword = keyword;
        this.data = it.data;
        this.schema = it.schema[keyword];
        this.$data = def.$data && it.opts.$data && this.schema && this.schema.$data;
        this.schemaValue = util_1.schemaRefOrVal(it, this.schema, keyword, this.$data);
        this.schemaType = def.schemaType;
        this.parentSchema = it.schema;
        this.params = {};
        this.it = it;
        this.def = def;
        if (this.$data) {
            this.schemaCode = it.gen.const("vSchema", getData(this.$data, it));
        }
        else {
            this.schemaCode = this.schemaValue;
            if (!validSchemaType(this.schema, def.schemaType, def.allowUndefined)) {
                throw new Error(`${keyword} value must be ${JSON.stringify(def.schemaType)}`);
            }
        }
        if ("code" in def ? def.trackErrors : def.errors !== false) {
            this.errsCount = it.gen.const("_errs", names_1.default.errors);
        }
    }
    result(condition, successAction, failAction) {
        this.gen.if(codegen_1.not(condition));
        if (failAction)
            failAction();
        else
            this.error();
        if (successAction) {
            this.gen.else();
            successAction();
            if (this.allErrors)
                this.gen.endIf();
        }
        else {
            if (this.allErrors)
                this.gen.endIf();
            else
                this.gen.else();
        }
    }
    pass(condition, failAction) {
        this.result(condition, undefined, failAction);
    }
    fail(condition) {
        if (condition === undefined) {
            this.error();
            if (!this.allErrors)
                this.gen.if(false); // this branch will be removed by gen.optimize
            return;
        }
        this.gen.if(condition);
        this.error();
        if (this.allErrors)
            this.gen.endIf();
        else
            this.gen.else();
    }
    fail$data(condition) {
        if (!this.$data)
            return this.fail(condition);
        const { schemaCode } = this;
        this.fail(codegen_1._ `${schemaCode} !== undefined && (${codegen_1.or(this.invalid$data(), condition)})`);
    }
    error(append) {
        ;
        (append ? errors_1.reportExtraError : errors_1.reportError)(this, this.def.error);
    }
    $dataError() {
        errors_1.reportError(this, this.def.$dataError || errors_1.keyword$DataError);
    }
    reset() {
        if (this.errsCount === undefined)
            throw new Error('add "trackErrors" to keyword definition');
        errors_1.resetErrorsCount(this.gen, this.errsCount);
    }
    ok(cond) {
        if (!this.allErrors)
            this.gen.if(cond);
    }
    setParams(obj, assign) {
        if (assign)
            Object.assign(this.params, obj);
        else
            this.params = obj;
    }
    block$data(valid, codeBlock, $dataValid = codegen_1.nil) {
        this.gen.block(() => {
            this.check$data(valid, $dataValid);
            codeBlock();
        });
    }
    check$data(valid = codegen_1.nil, $dataValid = codegen_1.nil) {
        if (!this.$data)
            return;
        const { gen, schemaCode, schemaType, def } = this;
        gen.if(codegen_1.or(codegen_1._ `${schemaCode} === undefined`, $dataValid));
        if (valid !== codegen_1.nil)
            gen.assign(valid, true);
        if (schemaType.length || def.validateSchema) {
            gen.elseIf(this.invalid$data());
            this.$dataError();
            if (valid !== codegen_1.nil)
                gen.assign(valid, false);
        }
        gen.else();
    }
    invalid$data() {
        const { gen, schemaCode, schemaType, def, it } = this;
        return codegen_1.or(wrong$DataType(), invalid$DataSchema());
        function wrong$DataType() {
            if (schemaType.length) {
                /* istanbul ignore if */
                if (!(schemaCode instanceof codegen_1.Name))
                    throw new Error("ajv implementation error");
                const st = Array.isArray(schemaType) ? schemaType : [schemaType];
                return codegen_1._ `${dataType_1.checkDataTypes(st, schemaCode, it.opts.strict, dataType_1.DataType.Wrong)}`;
            }
            return codegen_1.nil;
        }
        function invalid$DataSchema() {
            if (def.validateSchema) {
                const validateSchemaRef = gen.scopeValue("validate$data", { ref: def.validateSchema }); // TODO value.code for standalone
                return codegen_1._ `!${validateSchemaRef}(${schemaCode})`;
            }
            return codegen_1.nil;
        }
    }
    subschema(appl, valid) {
        return subschema_1.applySubschema(this.it, appl, valid);
    }
    mergeEvaluated(schemaCxt, toName) {
        const { it, gen } = this;
        if (!it.opts.unevaluated)
            return;
        if (it.props !== true && schemaCxt.props !== undefined) {
            it.props = util_1.mergeEvaluated.props(gen, schemaCxt.props, it.props, toName);
        }
        if (it.items !== true && schemaCxt.items !== undefined) {
            it.items = util_1.mergeEvaluated.items(gen, schemaCxt.items, it.items, toName);
        }
    }
    mergeValidEvaluated(schemaCxt, valid) {
        const { it, gen } = this;
        if (it.opts.unevaluated && (it.props !== true || it.items !== true)) {
            gen.if(valid, () => this.mergeEvaluated(schemaCxt, codegen_1.Name));
            return true;
        }
    }
}
exports["default"] = KeywordCxt;
function validSchemaType(schema, schemaType, allowUndefined = false) {
    // TODO add tests
    return (!schemaType.length ||
        schemaType.some((st) => st === "array"
            ? Array.isArray(schema)
            : st === "object"
                ? schema && typeof schema == "object" && !Array.isArray(schema)
                : typeof schema == st || (allowUndefined && typeof schema == "undefined")));
}
function validateKeywordUsage({ schema, opts, self }, def, keyword) {
    /* istanbul ignore if */
    if (Array.isArray(def.keyword) ? !def.keyword.includes(keyword) : def.keyword !== keyword) {
        throw new Error("ajv implementation error");
    }
    const deps = def.dependencies;
    if (deps === null || deps === void 0 ? void 0 : deps.some((kwd) => !Object.prototype.hasOwnProperty.call(schema, kwd))) {
        throw new Error(`parent schema must have dependencies of ${keyword}: ${deps.join(",")}`);
    }
    if (def.validateSchema) {
        const valid = def.validateSchema(schema[keyword]);
        if (!valid) {
            const msg = "keyword value is invalid: " + self.errorsText(def.validateSchema.errors);
            if (opts.validateSchema === "log")
                self.logger.error(msg);
            else
                throw new Error(msg);
        }
    }
}
const JSON_POINTER = /^\/(?:[^~]|~0|~1)*$/;
const RELATIVE_JSON_POINTER = /^([0-9]+)(#|\/(?:[^~]|~0|~1)*)?$/;
function getData($data, { dataLevel, dataNames, dataPathArr }) {
    let jsonPointer;
    let data;
    if ($data === "")
        return names_1.default.rootData;
    if ($data[0] === "/") {
        if (!JSON_POINTER.test($data))
            throw new Error(`Invalid JSON-pointer: ${$data}`);
        jsonPointer = $data;
        data = names_1.default.rootData;
    }
    else {
        const matches = RELATIVE_JSON_POINTER.exec($data);
        if (!matches)
            throw new Error(`Invalid JSON-pointer: ${$data}`);
        const up = +matches[1];
        jsonPointer = matches[2];
        if (jsonPointer === "#") {
            if (up >= dataLevel)
                throw new Error(errorMsg("property/index", up));
            return dataPathArr[dataLevel - up];
        }
        if (up > dataLevel)
            throw new Error(errorMsg("data", up));
        data = dataNames[dataLevel - up];
        if (!jsonPointer)
            return data;
    }
    let expr = data;
    const segments = jsonPointer.split("/");
    for (const segment of segments) {
        if (segment) {
            data = codegen_1._ `${data}${codegen_1.getProperty(util_1.unescapeJsonPointer(segment))}`;
            expr = codegen_1._ `${expr} && ${data}`;
        }
    }
    return expr;
    function errorMsg(pointerType, up) {
        return `Cannot access ${pointerType} ${up} levels up, current level is ${dataLevel}`;
    }
}
exports.getData = getData;
//# sourceMappingURL=context.js.map

/***/ }),

/***/ 97938:
/***/ ((module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.MissingRefError = exports.ValidationError = void 0;
const resolve_1 = __webpack_require__(25503);
class ValidationError extends Error {
    constructor(errors) {
        super("validation failed");
        this.errors = errors;
        this.ajv = this.validation = true;
    }
}
exports.ValidationError = ValidationError;
class MissingRefError extends Error {
    constructor(baseId, ref, msg) {
        super(msg || `can't resolve reference ${ref} from id ${baseId}`);
        this.missingRef = resolve_1.resolveUrl(baseId, ref);
        this.missingSchema = resolve_1.normalizeId(resolve_1.getFullPath(this.missingRef));
    }
}
exports.MissingRefError = MissingRefError;
module.exports = {
    ValidationError,
    MissingRefError,
};
//# sourceMappingURL=error_classes.js.map

/***/ }),

/***/ 39026:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.extendErrors = exports.resetErrorsCount = exports.reportExtraError = exports.reportError = exports.keyword$DataError = exports.keywordError = void 0;
const codegen_1 = __webpack_require__(78462);
const names_1 = __webpack_require__(53873);
exports.keywordError = {
    message: ({ keyword }) => codegen_1.str `should pass "${keyword}" keyword validation`,
};
exports.keyword$DataError = {
    message: ({ keyword, schemaType }) => schemaType
        ? codegen_1.str `"${keyword}" keyword must be ${schemaType} ($data)`
        : codegen_1.str `"${keyword}" keyword is invalid ($data)`,
};
function reportError(cxt, error = exports.keywordError, overrideAllErrors) {
    const { it } = cxt;
    const { gen, compositeRule, allErrors } = it;
    const errObj = errorObjectCode(cxt, error);
    if (overrideAllErrors !== null && overrideAllErrors !== void 0 ? overrideAllErrors : (compositeRule || allErrors)) {
        addError(gen, errObj);
    }
    else {
        returnErrors(it, codegen_1._ `[${errObj}]`);
    }
}
exports.reportError = reportError;
function reportExtraError(cxt, error = exports.keywordError) {
    const { it } = cxt;
    const { gen, compositeRule, allErrors } = it;
    const errObj = errorObjectCode(cxt, error);
    addError(gen, errObj);
    if (!(compositeRule || allErrors)) {
        returnErrors(it, names_1.default.vErrors);
    }
}
exports.reportExtraError = reportExtraError;
function resetErrorsCount(gen, errsCount) {
    gen.assign(names_1.default.errors, errsCount);
    gen.if(codegen_1._ `${names_1.default.vErrors} !== null`, () => gen.if(errsCount, () => gen.assign(codegen_1._ `${names_1.default.vErrors}.length`, errsCount), () => gen.assign(names_1.default.vErrors, null)));
}
exports.resetErrorsCount = resetErrorsCount;
function extendErrors({ gen, keyword, schemaValue, data, errsCount, it, }) {
    /* istanbul ignore if */
    if (errsCount === undefined)
        throw new Error("ajv implementation error");
    const err = gen.name("err");
    gen.forRange("i", errsCount, names_1.default.errors, (i) => {
        gen.const(err, codegen_1._ `${names_1.default.vErrors}[${i}]`);
        gen.if(codegen_1._ `${err}.dataPath === undefined`, () => gen.assign(codegen_1._ `${err}.dataPath`, codegen_1.strConcat(names_1.default.dataPath, it.errorPath)));
        gen.assign(codegen_1._ `${err}.schemaPath`, codegen_1.str `${it.errSchemaPath}/${keyword}`);
        if (it.opts.verbose) {
            gen.assign(codegen_1._ `${err}.schema`, schemaValue);
            gen.assign(codegen_1._ `${err}.data`, data);
        }
    });
}
exports.extendErrors = extendErrors;
function addError(gen, errObj) {
    const err = gen.const("err", errObj);
    gen.if(codegen_1._ `${names_1.default.vErrors} === null`, () => gen.assign(names_1.default.vErrors, codegen_1._ `[${err}]`), codegen_1._ `${names_1.default.vErrors}.push(${err})`);
    gen.code(codegen_1._ `${names_1.default.errors}++`);
}
function returnErrors(it, errs) {
    const { gen, validateName, schemaEnv } = it;
    if (schemaEnv.$async) {
        gen.throw(codegen_1._ `new ${it.ValidationError}(${errs})`);
    }
    else {
        gen.assign(codegen_1._ `${validateName}.errors`, errs);
        gen.return(false);
    }
}
const E = {
    keyword: new codegen_1.Name("keyword"),
    schemaPath: new codegen_1.Name("schemaPath"),
    params: new codegen_1.Name("params"),
    propertyName: new codegen_1.Name("propertyName"),
    message: new codegen_1.Name("message"),
    schema: new codegen_1.Name("schema"),
    parentSchema: new codegen_1.Name("parentSchema"),
    // JTD error properties
    instancePath: new codegen_1.Name("instancePath"),
};
function errorObjectCode(cxt, error) {
    const { createErrors, opts } = cxt.it;
    if (createErrors === false)
        return codegen_1._ `{}`;
    return (opts.jtd && !opts.ajvErrors ? jtdErrorObject : ajvErrorObject)(cxt, error);
}
function jtdErrorObject(cxt, { message }) {
    const { gen, keyword, it } = cxt;
    const { errorPath, errSchemaPath, opts } = it;
    const keyValues = [
        [E.instancePath, codegen_1.strConcat(names_1.default.dataPath, errorPath)],
        [E.schemaPath, codegen_1.str `${errSchemaPath}/${keyword}`],
    ];
    if (opts.messages) {
        keyValues.push([E.message, typeof message == "function" ? message(cxt) : message]);
    }
    return gen.object(...keyValues);
}
function ajvErrorObject(cxt, error) {
    const { gen, keyword, data, schemaValue, it } = cxt;
    const { topSchemaRef, schemaPath, errorPath, errSchemaPath, propertyName, opts } = it;
    const { params, message } = error;
    const keyValues = [
        [E.keyword, keyword],
        [names_1.default.dataPath, codegen_1.strConcat(names_1.default.dataPath, errorPath)],
        [E.schemaPath, codegen_1.str `${errSchemaPath}/${keyword}`],
        [E.params, typeof params == "function" ? params(cxt) : params || codegen_1._ `{}`],
    ];
    if (propertyName)
        keyValues.push([E.propertyName, propertyName]);
    if (opts.messages) {
        keyValues.push([E.message, typeof message == "function" ? message(cxt) : message]);
    }
    if (opts.verbose) {
        keyValues.push([E.schema, schemaValue], [E.parentSchema, codegen_1._ `${topSchemaRef}${schemaPath}`], [names_1.default.data, data]);
    }
    return gen.object(...keyValues);
}
//# sourceMappingURL=errors.js.map

/***/ }),

/***/ 19092:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.resolveSchema = exports.getCompilingSchema = exports.resolveRef = exports.compileSchema = exports.SchemaEnv = void 0;
const codegen_1 = __webpack_require__(78462);
const error_classes_1 = __webpack_require__(97938);
const names_1 = __webpack_require__(53873);
const resolve_1 = __webpack_require__(25503);
const util_1 = __webpack_require__(7007);
const validate_1 = __webpack_require__(76192);
const URI = __webpack_require__(60484);
class SchemaEnv {
    constructor(env) {
        var _a;
        this.refs = {};
        this.dynamicAnchors = {};
        let schema;
        if (typeof env.schema == "object")
            schema = env.schema;
        this.schema = env.schema;
        this.root = env.root || this;
        this.baseId = (_a = env.baseId) !== null && _a !== void 0 ? _a : resolve_1.normalizeId(schema === null || schema === void 0 ? void 0 : schema.$id);
        this.localRefs = env.localRefs;
        this.meta = env.meta;
        this.$async = schema === null || schema === void 0 ? void 0 : schema.$async;
        this.refs = {};
    }
}
exports.SchemaEnv = SchemaEnv;
// let codeSize = 0
// let nodeCount = 0
// Compiles schema in SchemaEnv
function compileSchema(sch) {
    // TODO refactor - remove compilations
    const _sch = getCompilingSchema.call(this, sch);
    if (_sch)
        return _sch;
    const rootId = resolve_1.getFullPath(sch.root.baseId); // TODO if getFullPath removed 1 tests fails
    const { es5, lines } = this.opts.code;
    const { ownProperties } = this.opts;
    const gen = new codegen_1.CodeGen(this.scope, { es5, lines, ownProperties });
    let _ValidationError;
    if (sch.$async) {
        _ValidationError = gen.scopeValue("Error", {
            ref: error_classes_1.ValidationError,
            code: codegen_1._ `require("ajv/dist/compile/error_classes").ValidationError`,
        });
    }
    const validateName = gen.scopeName("validate");
    sch.validateName = validateName;
    const schemaCxt = {
        gen,
        allErrors: this.opts.allErrors,
        data: names_1.default.data,
        parentData: names_1.default.parentData,
        parentDataProperty: names_1.default.parentDataProperty,
        dataNames: [names_1.default.data],
        dataPathArr: [codegen_1.nil],
        dataLevel: 0,
        dataTypes: [],
        definedProperties: new Set(),
        topSchemaRef: gen.scopeValue("schema", this.opts.code.source === true
            ? { ref: sch.schema, code: codegen_1.stringify(sch.schema) }
            : { ref: sch.schema }),
        validateName,
        ValidationError: _ValidationError,
        schema: sch.schema,
        schemaEnv: sch,
        rootId,
        baseId: sch.baseId || rootId,
        schemaPath: codegen_1.nil,
        errSchemaPath: this.opts.jtd ? "" : "#",
        errorPath: codegen_1._ `""`,
        opts: this.opts,
        self: this,
    };
    let sourceCode;
    try {
        this._compilations.add(sch);
        validate_1.validateFunctionCode(schemaCxt);
        gen.optimize(this.opts.code.optimize);
        // gen.optimize(1)
        const validateCode = gen.toString();
        sourceCode = `${gen.scopeRefs(names_1.default.scope)}return ${validateCode}`;
        // console.log((codeSize += sourceCode.length), (nodeCount += gen.nodeCount))
        if (this.opts.code.process)
            sourceCode = this.opts.code.process(sourceCode, sch);
        // console.log("\n\n\n *** \n", sourceCode)
        const makeValidate = new Function(`${names_1.default.self}`, `${names_1.default.scope}`, sourceCode);
        const validate = makeValidate(this, this.scope.get());
        this.scope.value(validateName, { ref: validate });
        validate.errors = null;
        validate.schema = sch.schema;
        validate.schemaEnv = sch;
        if (sch.$async)
            validate.$async = true;
        if (this.opts.code.source === true) {
            validate.source = { validateName, validateCode, scopeValues: gen._values };
        }
        if (this.opts.unevaluated) {
            const { props, items } = schemaCxt;
            validate.evaluated = {
                props: props instanceof codegen_1.Name ? undefined : props,
                items: items instanceof codegen_1.Name ? undefined : items,
                dynamicProps: props instanceof codegen_1.Name,
                dynamicItems: items instanceof codegen_1.Name,
            };
            if (validate.source)
                validate.source.evaluated = codegen_1.stringify(validate.evaluated);
        }
        sch.validate = validate;
        return sch;
    }
    catch (e) {
        delete sch.validate;
        delete sch.validateName;
        if (sourceCode)
            this.logger.error("Error compiling schema, function code:", sourceCode);
        // console.log("\n\n\n *** \n", sourceCode, this.opts)
        throw e;
    }
    finally {
        this._compilations.delete(sch);
    }
}
exports.compileSchema = compileSchema;
function resolveRef(root, baseId, ref) {
    var _a;
    ref = resolve_1.resolveUrl(baseId, ref);
    const schOrFunc = root.refs[ref];
    if (schOrFunc)
        return schOrFunc;
    let _sch = resolve.call(this, root, ref);
    if (_sch === undefined) {
        const schema = (_a = root.localRefs) === null || _a === void 0 ? void 0 : _a[ref]; // TODO maybe localRefs should hold SchemaEnv
        if (schema)
            _sch = new SchemaEnv({ schema, root, baseId });
    }
    if (_sch === undefined)
        return;
    return (root.refs[ref] = inlineOrCompile.call(this, _sch));
}
exports.resolveRef = resolveRef;
function inlineOrCompile(sch) {
    if (resolve_1.inlineRef(sch.schema, this.opts.inlineRefs))
        return sch.schema;
    return sch.validate ? sch : compileSchema.call(this, sch);
}
// Index of schema compilation in the currently compiled list
function getCompilingSchema(schEnv) {
    for (const sch of this._compilations) {
        if (sameSchemaEnv(sch, schEnv))
            return sch;
    }
}
exports.getCompilingSchema = getCompilingSchema;
function sameSchemaEnv(s1, s2) {
    return s1.schema === s2.schema && s1.root === s2.root && s1.baseId === s2.baseId;
}
// resolve and compile the references ($ref)
// TODO returns AnySchemaObject (if the schema can be inlined) or validation function
function resolve(root, // information about the root schema for the current schema
ref // reference to resolve
) {
    let sch;
    while (typeof (sch = this.refs[ref]) == "string")
        ref = sch;
    return sch || this.schemas[ref] || resolveSchema.call(this, root, ref);
}
// Resolve schema, its root and baseId
function resolveSchema(root, // root object with properties schema, refs TODO below SchemaEnv is assigned to it
ref // reference to resolve
) {
    const p = URI.parse(ref);
    const refPath = resolve_1._getFullPath(p);
    let baseId = resolve_1.getFullPath(root.baseId);
    // TODO `Object.keys(root.schema).length > 0` should not be needed - but removing breaks 2 tests
    if (Object.keys(root.schema).length > 0 && refPath === baseId) {
        return getJsonPointer.call(this, p, root);
    }
    const id = resolve_1.normalizeId(refPath);
    const schOrRef = this.refs[id] || this.schemas[id];
    if (typeof schOrRef == "string") {
        const sch = resolveSchema.call(this, root, schOrRef);
        if (typeof (sch === null || sch === void 0 ? void 0 : sch.schema) !== "object")
            return;
        return getJsonPointer.call(this, p, sch);
    }
    if (typeof (schOrRef === null || schOrRef === void 0 ? void 0 : schOrRef.schema) !== "object")
        return;
    if (!schOrRef.validate)
        compileSchema.call(this, schOrRef);
    if (id === resolve_1.normalizeId(ref)) {
        const { schema } = schOrRef;
        if (schema.$id)
            baseId = resolve_1.resolveUrl(baseId, schema.$id);
        return new SchemaEnv({ schema, root, baseId });
    }
    return getJsonPointer.call(this, p, schOrRef);
}
exports.resolveSchema = resolveSchema;
const PREVENT_SCOPE_CHANGE = new Set([
    "properties",
    "patternProperties",
    "enum",
    "dependencies",
    "definitions",
]);
function getJsonPointer(parsedRef, { baseId, schema, root }) {
    var _a;
    if (((_a = parsedRef.fragment) === null || _a === void 0 ? void 0 : _a[0]) !== "/")
        return;
    for (const part of parsedRef.fragment.slice(1).split("/")) {
        if (typeof schema == "boolean")
            return;
        schema = schema[util_1.unescapeFragment(part)];
        if (schema === undefined)
            return;
        // TODO PREVENT_SCOPE_CHANGE could be defined in keyword def?
        if (!PREVENT_SCOPE_CHANGE.has(part) && typeof schema == "object" && schema.$id) {
            baseId = resolve_1.resolveUrl(baseId, schema.$id);
        }
    }
    let env;
    if (typeof schema != "boolean" && schema.$ref && !util_1.schemaHasRulesButRef(schema, this.RULES)) {
        const $ref = resolve_1.resolveUrl(baseId, schema.$ref);
        env = resolveSchema.call(this, root, $ref);
    }
    // even though resolution failed we need to return SchemaEnv to throw exception
    // so that compileAsync loads missing schema.
    env = env || new SchemaEnv({ schema, root, baseId });
    if (env.schema !== env.root.schema)
        return env;
    return undefined;
}
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 53873:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const codegen_1 = __webpack_require__(78462);
const names = {
    // validation function arguments
    data: new codegen_1.Name("data"),
    // args passed from referencing schema
    valCxt: new codegen_1.Name("valCxt"),
    dataPath: new codegen_1.Name("dataPath"),
    parentData: new codegen_1.Name("parentData"),
    parentDataProperty: new codegen_1.Name("parentDataProperty"),
    rootData: new codegen_1.Name("rootData"),
    dynamicAnchors: new codegen_1.Name("dynamicAnchors"),
    // function scoped variables
    vErrors: new codegen_1.Name("vErrors"),
    errors: new codegen_1.Name("errors"),
    this: new codegen_1.Name("this"),
    // "globals"
    self: new codegen_1.Name("self"),
    scope: new codegen_1.Name("scope"),
    // JTD serialize/parse name for JSON string and position
    json: new codegen_1.Name("json"),
    jsonPos: new codegen_1.Name("jsonPos"),
    jsonLen: new codegen_1.Name("jsonLen"),
    jsonPart: new codegen_1.Name("jsonPart"),
};
exports["default"] = names;
//# sourceMappingURL=names.js.map

/***/ }),

/***/ 25503:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getSchemaRefs = exports.resolveUrl = exports.normalizeId = exports._getFullPath = exports.getFullPath = exports.inlineRef = void 0;
const util_1 = __webpack_require__(7007);
const equal = __webpack_require__(1505);
const traverse = __webpack_require__(20283);
const URI = __webpack_require__(60484);
// TODO refactor to use keyword definitions
const SIMPLE_INLINED = new Set([
    "type",
    "format",
    "pattern",
    "maxLength",
    "minLength",
    "maxProperties",
    "minProperties",
    "maxItems",
    "minItems",
    "maximum",
    "minimum",
    "uniqueItems",
    "multipleOf",
    "required",
    "enum",
    "const",
]);
function inlineRef(schema, limit = true) {
    if (typeof schema == "boolean")
        return true;
    if (limit === true)
        return !hasRef(schema);
    if (!limit)
        return false;
    return countKeys(schema) <= limit;
}
exports.inlineRef = inlineRef;
const REF_KEYWORDS = new Set([
    "$ref",
    "$recursiveRef",
    "$recursiveAnchor",
    "$dynamicRef",
    "$dynamicAnchor",
]);
function hasRef(schema) {
    for (const key in schema) {
        if (REF_KEYWORDS.has(key))
            return true;
        const sch = schema[key];
        if (Array.isArray(sch) && sch.some(hasRef))
            return true;
        if (typeof sch == "object" && hasRef(sch))
            return true;
    }
    return false;
}
function countKeys(schema) {
    let count = 0;
    for (const key in schema) {
        if (key === "$ref")
            return Infinity;
        count++;
        if (SIMPLE_INLINED.has(key))
            continue;
        if (typeof schema[key] == "object") {
            util_1.eachItem(schema[key], (sch) => (count += countKeys(sch)));
        }
        if (count === Infinity)
            return Infinity;
    }
    return count;
}
function getFullPath(id = "", normalize) {
    if (normalize !== false)
        id = normalizeId(id);
    const p = URI.parse(id);
    return _getFullPath(p);
}
exports.getFullPath = getFullPath;
function _getFullPath(p) {
    return URI.serialize(p).split("#")[0] + "#";
}
exports._getFullPath = _getFullPath;
const TRAILING_SLASH_HASH = /#\/?$/;
function normalizeId(id) {
    return id ? id.replace(TRAILING_SLASH_HASH, "") : "";
}
exports.normalizeId = normalizeId;
function resolveUrl(baseId, id) {
    id = normalizeId(id);
    return URI.resolve(baseId, id);
}
exports.resolveUrl = resolveUrl;
const ANCHOR = /^[a-z_][-a-z0-9._]*$/i;
function getSchemaRefs(schema) {
    if (typeof schema == "boolean")
        return {};
    const schemaId = normalizeId(schema.$id);
    const baseIds = { "": schemaId };
    const pathPrefix = getFullPath(schemaId, false);
    const localRefs = {};
    const schemaRefs = new Set();
    traverse(schema, { allKeys: true }, (sch, jsonPtr, _, parentJsonPtr) => {
        if (parentJsonPtr === undefined)
            return;
        const fullPath = pathPrefix + jsonPtr;
        let baseId = baseIds[parentJsonPtr];
        if (typeof sch.$id == "string")
            baseId = addRef.call(this, sch.$id);
        addAnchor.call(this, sch.$anchor);
        addAnchor.call(this, sch.$dynamicAnchor);
        baseIds[jsonPtr] = baseId;
        function addRef(ref) {
            ref = normalizeId(baseId ? URI.resolve(baseId, ref) : ref);
            if (schemaRefs.has(ref))
                throw ambiguos(ref);
            schemaRefs.add(ref);
            let schOrRef = this.refs[ref];
            if (typeof schOrRef == "string")
                schOrRef = this.refs[schOrRef];
            if (typeof schOrRef == "object") {
                checkAmbiguosRef(sch, schOrRef.schema, ref);
            }
            else if (ref !== normalizeId(fullPath)) {
                if (ref[0] === "#") {
                    checkAmbiguosRef(sch, localRefs[ref], ref);
                    localRefs[ref] = sch;
                }
                else {
                    this.refs[ref] = fullPath;
                }
            }
            return ref;
        }
        function addAnchor(anchor) {
            if (typeof anchor == "string") {
                if (!ANCHOR.test(anchor))
                    throw new Error(`invalid anchor "${anchor}"`);
                addRef.call(this, `#${anchor}`);
            }
        }
    });
    return localRefs;
    function checkAmbiguosRef(sch1, sch2, ref) {
        if (sch2 !== undefined && !equal(sch1, sch2))
            throw ambiguos(ref);
    }
    function ambiguos(ref) {
        return new Error(`reference "${ref}" resolves to more than one schema`);
    }
}
exports.getSchemaRefs = getSchemaRefs;
//# sourceMappingURL=resolve.js.map

/***/ }),

/***/ 39691:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getRules = exports.isJSONType = void 0;
const _jsonTypes = ["string", "number", "integer", "boolean", "null", "object", "array"];
const jsonTypes = new Set(_jsonTypes);
function isJSONType(x) {
    return typeof x == "string" && jsonTypes.has(x);
}
exports.isJSONType = isJSONType;
function getRules() {
    const groups = {
        number: { type: "number", rules: [] },
        string: { type: "string", rules: [] },
        array: { type: "array", rules: [] },
        object: { type: "object", rules: [] },
    };
    return {
        types: { ...groups, integer: true, boolean: true, null: true },
        rules: [{ rules: [] }, groups.number, groups.string, groups.array, groups.object],
        post: { rules: [] },
        all: {},
        keywords: {},
    };
}
exports.getRules = getRules;
//# sourceMappingURL=rules.js.map

/***/ }),

/***/ 60632:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.applySubschema = exports.Type = void 0;
const validate_1 = __webpack_require__(76192);
const util_1 = __webpack_require__(7007);
const codegen_1 = __webpack_require__(78462);
var Type;
(function (Type) {
    Type[Type["Num"] = 0] = "Num";
    Type[Type["Str"] = 1] = "Str";
})(Type = exports.Type || (exports.Type = {}));
function applySubschema(it, appl, valid) {
    const subschema = getSubschema(it, appl);
    extendSubschemaData(subschema, it, appl);
    extendSubschemaMode(subschema, appl);
    const nextContext = { ...it, ...subschema, items: undefined, props: undefined };
    validate_1.subschemaCode(nextContext, valid);
    return nextContext;
}
exports.applySubschema = applySubschema;
function getSubschema(it, { keyword, schemaProp, schema, schemaPath, errSchemaPath, topSchemaRef }) {
    if (keyword !== undefined && schema !== undefined) {
        throw new Error('both "keyword" and "schema" passed, only one allowed');
    }
    if (keyword !== undefined) {
        const sch = it.schema[keyword];
        return schemaProp === undefined
            ? {
                schema: sch,
                schemaPath: codegen_1._ `${it.schemaPath}${codegen_1.getProperty(keyword)}`,
                errSchemaPath: `${it.errSchemaPath}/${keyword}`,
            }
            : {
                schema: sch[schemaProp],
                schemaPath: codegen_1._ `${it.schemaPath}${codegen_1.getProperty(keyword)}${codegen_1.getProperty(schemaProp)}`,
                errSchemaPath: `${it.errSchemaPath}/${keyword}/${util_1.escapeFragment(schemaProp)}`,
            };
    }
    if (schema !== undefined) {
        if (schemaPath === undefined || errSchemaPath === undefined || topSchemaRef === undefined) {
            throw new Error('"schemaPath", "errSchemaPath" and "topSchemaRef" are required with "schema"');
        }
        return {
            schema,
            schemaPath,
            topSchemaRef,
            errSchemaPath,
        };
    }
    throw new Error('either "keyword" or "schema" must be passed');
}
function extendSubschemaData(subschema, it, { dataProp, dataPropType: dpType, data, dataTypes, propertyName }) {
    if (data !== undefined && dataProp !== undefined) {
        throw new Error('both "data" and "dataProp" passed, only one allowed');
    }
    const { gen } = it;
    if (dataProp !== undefined) {
        const { errorPath, dataPathArr, opts } = it;
        const nextData = gen.let("data", codegen_1._ `${it.data}${codegen_1.getProperty(dataProp)}`, true);
        dataContextProps(nextData);
        subschema.errorPath = codegen_1.str `${errorPath}${getErrorPath(dataProp, dpType, opts.jsPropertySyntax)}`;
        subschema.parentDataProperty = codegen_1._ `${dataProp}`;
        subschema.dataPathArr = [...dataPathArr, subschema.parentDataProperty];
    }
    if (data !== undefined) {
        const nextData = data instanceof codegen_1.Name ? data : gen.let("data", data, true); // replaceable if used once?
        dataContextProps(nextData);
        if (propertyName !== undefined)
            subschema.propertyName = propertyName;
        // TODO something is possibly wrong here with not changing parentDataProperty and not appending dataPathArr
    }
    if (dataTypes)
        subschema.dataTypes = dataTypes;
    function dataContextProps(_nextData) {
        subschema.data = _nextData;
        subschema.dataLevel = it.dataLevel + 1;
        subschema.dataTypes = [];
        it.definedProperties = new Set();
        subschema.parentData = it.data;
        subschema.dataNames = [...it.dataNames, _nextData];
    }
}
function extendSubschemaMode(subschema, { jtdDiscriminator, jtdMetadata, compositeRule, createErrors, allErrors }) {
    if (compositeRule !== undefined)
        subschema.compositeRule = compositeRule;
    if (createErrors !== undefined)
        subschema.createErrors = createErrors;
    if (allErrors !== undefined)
        subschema.allErrors = allErrors;
    subschema.jtdDiscriminator = jtdDiscriminator; // not inherited
    subschema.jtdMetadata = jtdMetadata; // not inherited
}
function getErrorPath(dataProp, dataPropType, jsPropertySyntax) {
    // let path
    if (dataProp instanceof codegen_1.Name) {
        const isNumber = dataPropType === Type.Num;
        return jsPropertySyntax
            ? isNumber
                ? codegen_1._ `"[" + ${dataProp} + "]"`
                : codegen_1._ `"['" + ${dataProp} + "']"`
            : isNumber
                ? codegen_1._ `"/" + ${dataProp}`
                : codegen_1._ `"/" + ${dataProp}.replace(/~/g, "~0").replace(/\\//g, "~1")`; // TODO maybe use global escapePointer
    }
    return jsPropertySyntax ? codegen_1.getProperty(dataProp).toString() : "/" + util_1.escapeJsonPointer(dataProp);
}
//# sourceMappingURL=subschema.js.map

/***/ }),

/***/ 98510:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
// https://mathiasbynens.be/notes/javascript-encoding
// https://github.com/bestiejs/punycode.js - punycode.ucs2.decode
function ucs2length(str) {
    const len = str.length;
    let length = 0;
    let pos = 0;
    let value;
    while (pos < len) {
        length++;
        value = str.charCodeAt(pos++);
        if (value >= 0xd800 && value <= 0xdbff && pos < len) {
            // high surrogate, and there is a next character
            value = str.charCodeAt(pos);
            if ((value & 0xfc00) === 0xdc00)
                pos++; // low surrogate
        }
    }
    return length;
}
exports["default"] = ucs2length;
//# sourceMappingURL=ucs2length.js.map

/***/ }),

/***/ 7007:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.func = exports.setEvaluated = exports.evaluatedPropsToName = exports.mergeEvaluated = exports.eachItem = exports.unescapeJsonPointer = exports.escapeJsonPointer = exports.escapeFragment = exports.unescapeFragment = exports.schemaRefOrVal = exports.schemaHasRulesButRef = exports.schemaHasRules = exports.checkUnknownRules = exports.alwaysValidSchema = exports.toHash = void 0;
const codegen_1 = __webpack_require__(78462);
const validate_1 = __webpack_require__(76192);
// TODO refactor to use Set
function toHash(arr) {
    const hash = {};
    for (const item of arr)
        hash[item] = true;
    return hash;
}
exports.toHash = toHash;
function alwaysValidSchema(it, schema) {
    if (typeof schema == "boolean")
        return schema;
    if (Object.keys(schema).length === 0)
        return true;
    checkUnknownRules(it, schema);
    return !schemaHasRules(schema, it.self.RULES.all);
}
exports.alwaysValidSchema = alwaysValidSchema;
function checkUnknownRules(it, schema = it.schema) {
    const { opts, self } = it;
    if (!opts.strict)
        return;
    if (typeof schema === "boolean")
        return;
    const rules = self.RULES.keywords;
    for (const key in schema) {
        if (!rules[key])
            validate_1.checkStrictMode(it, `unknown keyword: "${key}"`);
    }
}
exports.checkUnknownRules = checkUnknownRules;
function schemaHasRules(schema, rules) {
    if (typeof schema == "boolean")
        return !schema;
    for (const key in schema)
        if (rules[key])
            return true;
    return false;
}
exports.schemaHasRules = schemaHasRules;
function schemaHasRulesButRef(schema, RULES) {
    if (typeof schema == "boolean")
        return !schema;
    for (const key in schema)
        if (key !== "$ref" && RULES.all[key])
            return true;
    return false;
}
exports.schemaHasRulesButRef = schemaHasRulesButRef;
function schemaRefOrVal({ topSchemaRef, schemaPath }, schema, keyword, $data) {
    if (!$data) {
        if (typeof schema == "number" || typeof schema == "boolean")
            return schema;
        if (typeof schema == "string")
            return codegen_1._ `${schema}`;
    }
    return codegen_1._ `${topSchemaRef}${schemaPath}${codegen_1.getProperty(keyword)}`;
}
exports.schemaRefOrVal = schemaRefOrVal;
function unescapeFragment(str) {
    return unescapeJsonPointer(decodeURIComponent(str));
}
exports.unescapeFragment = unescapeFragment;
function escapeFragment(str) {
    return encodeURIComponent(escapeJsonPointer(str));
}
exports.escapeFragment = escapeFragment;
function escapeJsonPointer(str) {
    if (typeof str == "number")
        return `${str}`;
    return str.replace(/~/g, "~0").replace(/\//g, "~1");
}
exports.escapeJsonPointer = escapeJsonPointer;
function unescapeJsonPointer(str) {
    return str.replace(/~1/g, "/").replace(/~0/g, "~");
}
exports.unescapeJsonPointer = unescapeJsonPointer;
function eachItem(xs, f) {
    if (Array.isArray(xs)) {
        for (const x of xs)
            f(x);
    }
    else {
        f(xs);
    }
}
exports.eachItem = eachItem;
function makeMergeEvaluated({ mergeNames, mergeToName, mergeValues, resultToName, }) {
    return (gen, from, to, toName) => {
        const res = to === undefined
            ? from
            : to instanceof codegen_1.Name
                ? (from instanceof codegen_1.Name ? mergeNames(gen, from, to) : mergeToName(gen, from, to), to)
                : from instanceof codegen_1.Name
                    ? (mergeToName(gen, to, from), from)
                    : mergeValues(from, to);
        return toName === codegen_1.Name && !(res instanceof codegen_1.Name) ? resultToName(gen, res) : res;
    };
}
exports.mergeEvaluated = {
    props: makeMergeEvaluated({
        mergeNames: (gen, from, to) => gen.if(codegen_1._ `${to} !== true && ${from} !== undefined`, () => {
            gen.if(codegen_1._ `${from} === true`, () => gen.assign(to, true), () => gen.assign(to, codegen_1._ `${to} || {}`).code(codegen_1._ `Object.assign(${to}, ${from})`));
        }),
        mergeToName: (gen, from, to) => gen.if(codegen_1._ `${to} !== true`, () => {
            if (from === true) {
                gen.assign(to, true);
            }
            else {
                gen.assign(to, codegen_1._ `${to} || {}`);
                setEvaluated(gen, to, from);
            }
        }),
        mergeValues: (from, to) => (from === true ? true : { ...from, ...to }),
        resultToName: evaluatedPropsToName,
    }),
    items: makeMergeEvaluated({
        mergeNames: (gen, from, to) => gen.if(codegen_1._ `${to} !== true && ${from} !== undefined`, () => gen.assign(to, codegen_1._ `${from} === true ? true : ${to} > ${from} ? ${to} : ${from}`)),
        mergeToName: (gen, from, to) => gen.if(codegen_1._ `${to} !== true`, () => gen.assign(to, from === true ? true : codegen_1._ `${to} > ${from} ? ${to} : ${from}`)),
        mergeValues: (from, to) => (from === true ? true : Math.max(from, to)),
        resultToName: (gen, items) => gen.var("items", items),
    }),
};
function evaluatedPropsToName(gen, ps) {
    if (ps === true)
        return gen.var("props", true);
    const props = gen.var("props", codegen_1._ `{}`);
    if (ps !== undefined)
        setEvaluated(gen, props, ps);
    return props;
}
exports.evaluatedPropsToName = evaluatedPropsToName;
function setEvaluated(gen, props, ps) {
    Object.keys(ps).forEach((p) => gen.assign(codegen_1._ `${props}${codegen_1.getProperty(p)}`, true));
}
exports.setEvaluated = setEvaluated;
function func(gen, f) {
    return gen.scopeValue("func", {
        ref: f,
        code: f.code,
    });
}
exports.func = func;
//# sourceMappingURL=util.js.map

/***/ }),

/***/ 43997:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.shouldUseRule = exports.shouldUseGroup = exports.schemaHasRulesForType = void 0;
function schemaHasRulesForType({ schema, self }, type) {
    const group = self.RULES.types[type];
    return group && group !== true && shouldUseGroup(schema, group);
}
exports.schemaHasRulesForType = schemaHasRulesForType;
function shouldUseGroup(schema, group) {
    return group.rules.some((rule) => shouldUseRule(schema, rule));
}
exports.shouldUseGroup = shouldUseGroup;
function shouldUseRule(schema, rule) {
    var _a;
    return (schema[rule.keyword] !== undefined ||
        ((_a = rule.definition.implements) === null || _a === void 0 ? void 0 : _a.some((kwd) => schema[kwd] !== undefined)));
}
exports.shouldUseRule = shouldUseRule;
//# sourceMappingURL=applicability.js.map

/***/ }),

/***/ 34435:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.boolOrEmptySchema = exports.topBoolOrEmptySchema = void 0;
const errors_1 = __webpack_require__(39026);
const codegen_1 = __webpack_require__(78462);
const names_1 = __webpack_require__(53873);
const boolError = {
    message: "boolean schema is false",
};
function topBoolOrEmptySchema(it) {
    const { gen, schema, validateName } = it;
    if (schema === false) {
        falseSchemaError(it, false);
    }
    else if (typeof schema == "object" && schema.$async === true) {
        gen.return(names_1.default.data);
    }
    else {
        gen.assign(codegen_1._ `${validateName}.errors`, null);
        gen.return(true);
    }
}
exports.topBoolOrEmptySchema = topBoolOrEmptySchema;
function boolOrEmptySchema(it, valid) {
    const { gen, schema } = it;
    if (schema === false) {
        gen.var(valid, false); // TODO var
        falseSchemaError(it);
    }
    else {
        gen.var(valid, true); // TODO var
    }
}
exports.boolOrEmptySchema = boolOrEmptySchema;
function falseSchemaError(it, overrideAllErrors) {
    const { gen, data } = it;
    // TODO maybe some other interface should be used for non-keyword validation errors...
    const cxt = {
        gen,
        keyword: "false schema",
        data,
        schema: false,
        schemaCode: false,
        schemaValue: false,
        params: {},
        it,
    };
    errors_1.reportError(cxt, boolError, overrideAllErrors);
}
//# sourceMappingURL=boolSchema.js.map

/***/ }),

/***/ 27778:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.reportTypeError = exports.checkDataTypes = exports.checkDataType = exports.coerceAndCheckDataType = exports.getJSONTypes = exports.getSchemaTypes = exports.DataType = void 0;
const rules_1 = __webpack_require__(39691);
const applicability_1 = __webpack_require__(43997);
const errors_1 = __webpack_require__(39026);
const codegen_1 = __webpack_require__(78462);
const util_1 = __webpack_require__(7007);
var DataType;
(function (DataType) {
    DataType[DataType["Correct"] = 0] = "Correct";
    DataType[DataType["Wrong"] = 1] = "Wrong";
})(DataType = exports.DataType || (exports.DataType = {}));
function getSchemaTypes(schema) {
    const types = getJSONTypes(schema.type);
    const hasNull = types.includes("null");
    if (hasNull) {
        if (schema.nullable === false)
            throw new Error("type: null contradicts nullable: false");
    }
    else {
        if (!types.length && schema.nullable !== undefined) {
            throw new Error('"nullable" cannot be used without "type"');
        }
        if (schema.nullable === true)
            types.push("null");
    }
    return types;
}
exports.getSchemaTypes = getSchemaTypes;
function getJSONTypes(ts) {
    const types = Array.isArray(ts) ? ts : ts ? [ts] : [];
    if (types.every(rules_1.isJSONType))
        return types;
    throw new Error("type must be JSONType or JSONType[]: " + types.join(","));
}
exports.getJSONTypes = getJSONTypes;
function coerceAndCheckDataType(it, types) {
    const { gen, data, opts } = it;
    const coerceTo = coerceToTypes(types, opts.coerceTypes);
    const checkTypes = types.length > 0 &&
        !(coerceTo.length === 0 && types.length === 1 && applicability_1.schemaHasRulesForType(it, types[0]));
    if (checkTypes) {
        const wrongType = checkDataTypes(types, data, opts.strict, DataType.Wrong);
        gen.if(wrongType, () => {
            if (coerceTo.length)
                coerceData(it, types, coerceTo);
            else
                reportTypeError(it);
        });
    }
    return checkTypes;
}
exports.coerceAndCheckDataType = coerceAndCheckDataType;
const COERCIBLE = new Set(["string", "number", "integer", "boolean", "null"]);
function coerceToTypes(types, coerceTypes) {
    return coerceTypes
        ? types.filter((t) => COERCIBLE.has(t) || (coerceTypes === "array" && t === "array"))
        : [];
}
function coerceData(it, types, coerceTo) {
    const { gen, data, opts } = it;
    const dataType = gen.let("dataType", codegen_1._ `typeof ${data}`);
    const coerced = gen.let("coerced", codegen_1._ `undefined`);
    if (opts.coerceTypes === "array") {
        gen.if(codegen_1._ `${dataType} == 'object' && Array.isArray(${data}) && ${data}.length == 1`, () => gen
            .assign(data, codegen_1._ `${data}[0]`)
            .assign(dataType, codegen_1._ `typeof ${data}`)
            .if(checkDataTypes(types, data, opts.strict), () => gen.assign(coerced, data)));
    }
    gen.if(codegen_1._ `${coerced} !== undefined`);
    for (const t of coerceTo) {
        if (COERCIBLE.has(t) || (t === "array" && opts.coerceTypes === "array")) {
            coerceSpecificType(t);
        }
    }
    gen.else();
    reportTypeError(it);
    gen.endIf();
    gen.if(codegen_1._ `${coerced} !== undefined`, () => {
        gen.assign(data, coerced);
        assignParentData(it, coerced);
    });
    function coerceSpecificType(t) {
        switch (t) {
            case "string":
                gen
                    .elseIf(codegen_1._ `${dataType} == "number" || ${dataType} == "boolean"`)
                    .assign(coerced, codegen_1._ `"" + ${data}`)
                    .elseIf(codegen_1._ `${data} === null`)
                    .assign(coerced, codegen_1._ `""`);
                return;
            case "number":
                gen
                    .elseIf(codegen_1._ `${dataType} == "boolean" || ${data} === null
              || (${dataType} == "string" && ${data} && ${data} == +${data})`)
                    .assign(coerced, codegen_1._ `+${data}`);
                return;
            case "integer":
                gen
                    .elseIf(codegen_1._ `${dataType} === "boolean" || ${data} === null
              || (${dataType} === "string" && ${data} && ${data} == +${data} && !(${data} % 1))`)
                    .assign(coerced, codegen_1._ `+${data}`);
                return;
            case "boolean":
                gen
                    .elseIf(codegen_1._ `${data} === "false" || ${data} === 0 || ${data} === null`)
                    .assign(coerced, false)
                    .elseIf(codegen_1._ `${data} === "true" || ${data} === 1`)
                    .assign(coerced, true);
                return;
            case "null":
                gen.elseIf(codegen_1._ `${data} === "" || ${data} === 0 || ${data} === false`);
                gen.assign(coerced, null);
                return;
            case "array":
                gen
                    .elseIf(codegen_1._ `${dataType} === "string" || ${dataType} === "number"
              || ${dataType} === "boolean" || ${data} === null`)
                    .assign(coerced, codegen_1._ `[${data}]`);
        }
    }
}
function assignParentData({ gen, parentData, parentDataProperty }, expr) {
    // TODO use gen.property
    gen.if(codegen_1._ `${parentData} !== undefined`, () => gen.assign(codegen_1._ `${parentData}[${parentDataProperty}]`, expr));
}
function checkDataType(dataType, data, strictNums, correct = DataType.Correct) {
    const EQ = correct === DataType.Correct ? codegen_1.operators.EQ : codegen_1.operators.NEQ;
    let cond;
    switch (dataType) {
        case "null":
            return codegen_1._ `${data} ${EQ} null`;
        case "array":
            cond = codegen_1._ `Array.isArray(${data})`;
            break;
        case "object":
            cond = codegen_1._ `${data} && typeof ${data} == "object" && !Array.isArray(${data})`;
            break;
        case "integer":
            cond = numCond(codegen_1._ `!(${data} % 1) && !isNaN(${data})`);
            break;
        case "number":
            cond = numCond();
            break;
        default:
            return codegen_1._ `typeof ${data} ${EQ} ${dataType}`;
    }
    return correct === DataType.Correct ? cond : codegen_1.not(cond);
    function numCond(_cond = codegen_1.nil) {
        return codegen_1.and(codegen_1._ `typeof ${data} == "number"`, _cond, strictNums ? codegen_1._ `isFinite(${data})` : codegen_1.nil);
    }
}
exports.checkDataType = checkDataType;
function checkDataTypes(dataTypes, data, strictNums, correct) {
    if (dataTypes.length === 1) {
        return checkDataType(dataTypes[0], data, strictNums, correct);
    }
    let cond;
    const types = util_1.toHash(dataTypes);
    if (types.array && types.object) {
        const notObj = codegen_1._ `typeof ${data} != "object"`;
        cond = types.null ? notObj : codegen_1._ `!${data} || ${notObj}`;
        delete types.null;
        delete types.array;
        delete types.object;
    }
    else {
        cond = codegen_1.nil;
    }
    if (types.number)
        delete types.integer;
    for (const t in types)
        cond = codegen_1.and(cond, checkDataType(t, data, strictNums, correct));
    return cond;
}
exports.checkDataTypes = checkDataTypes;
const typeError = {
    message: ({ schema }) => codegen_1.str `should be ${schema}`,
    params: ({ schema, schemaValue }) => typeof schema == "string" ? codegen_1._ `{type: ${schema}}` : codegen_1._ `{type: ${schemaValue}}`,
};
function reportTypeError(it) {
    const cxt = getTypeErrorContext(it);
    errors_1.reportError(cxt, typeError);
}
exports.reportTypeError = reportTypeError;
function getTypeErrorContext(it) {
    const { gen, data, schema } = it;
    const schemaCode = util_1.schemaRefOrVal(it, schema, "type");
    return {
        gen,
        keyword: "type",
        data,
        schema: schema.type,
        schemaCode,
        schemaValue: schemaCode,
        parentSchema: schema,
        params: {},
        it,
    };
}
//# sourceMappingURL=dataType.js.map

/***/ }),

/***/ 66260:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.assignDefaults = void 0;
const codegen_1 = __webpack_require__(78462);
const _1 = __webpack_require__(76192);
function assignDefaults(it, ty) {
    const { properties, items } = it.schema;
    if (ty === "object" && properties) {
        for (const key in properties) {
            assignDefault(it, key, properties[key].default);
        }
    }
    else if (ty === "array" && Array.isArray(items)) {
        items.forEach((sch, i) => assignDefault(it, i, sch.default));
    }
}
exports.assignDefaults = assignDefaults;
function assignDefault(it, prop, defaultValue) {
    const { gen, compositeRule, data, opts } = it;
    if (defaultValue === undefined)
        return;
    const childData = codegen_1._ `${data}${codegen_1.getProperty(prop)}`;
    if (compositeRule) {
        _1.checkStrictMode(it, `default is ignored for: ${childData}`);
        return;
    }
    let condition = codegen_1._ `${childData} === undefined`;
    if (opts.useDefaults === "empty") {
        condition = codegen_1._ `${condition} || ${childData} === null || ${childData} === ""`;
    }
    // `${childData} === undefined` +
    // (opts.useDefaults === "empty" ? ` || ${childData} === null || ${childData} === ""` : "")
    gen.if(condition, codegen_1._ `${childData} = ${codegen_1.stringify(defaultValue)}`);
}
//# sourceMappingURL=defaults.js.map

/***/ }),

/***/ 76192:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.checkStrictMode = exports.schemaCxtHasRules = exports.subschemaCode = exports.validateFunctionCode = void 0;
const boolSchema_1 = __webpack_require__(34435);
const dataType_1 = __webpack_require__(27778);
const iterate_1 = __webpack_require__(14564);
const codegen_1 = __webpack_require__(78462);
const names_1 = __webpack_require__(53873);
const resolve_1 = __webpack_require__(25503);
const util_1 = __webpack_require__(7007);
// schema compilation - generates validation function, subschemaCode (below) is used for subschemas
function validateFunctionCode(it) {
    if (isSchemaObj(it)) {
        checkKeywords(it);
        if (schemaCxtHasRules(it)) {
            topSchemaObjCode(it);
            return;
        }
    }
    validateFunction(it, () => boolSchema_1.topBoolOrEmptySchema(it));
}
exports.validateFunctionCode = validateFunctionCode;
function validateFunction({ gen, validateName, schema, schemaEnv, opts }, body) {
    if (opts.code.es5) {
        gen.func(validateName, codegen_1._ `${names_1.default.data}, ${names_1.default.valCxt}`, schemaEnv.$async, () => {
            gen.code(codegen_1._ `"use strict"; ${funcSourceUrl(schema, opts)}`);
            destructureValCxtES5(gen, opts);
            gen.code(body);
        });
    }
    else {
        gen.func(validateName, codegen_1._ `${names_1.default.data}, ${destructureValCxt(opts)}`, schemaEnv.$async, () => gen.code(funcSourceUrl(schema, opts)).code(body));
    }
}
function destructureValCxt(opts) {
    return codegen_1._ `{${names_1.default.dataPath}="", ${names_1.default.parentData}, ${names_1.default.parentDataProperty}, ${names_1.default.rootData}=${names_1.default.data}${opts.dynamicRef ? codegen_1._ `, ${names_1.default.dynamicAnchors}={}` : codegen_1.nil}}={}`;
}
function destructureValCxtES5(gen, opts) {
    gen.if(names_1.default.valCxt, () => {
        gen.var(names_1.default.dataPath, codegen_1._ `${names_1.default.valCxt}.${names_1.default.dataPath}`);
        gen.var(names_1.default.parentData, codegen_1._ `${names_1.default.valCxt}.${names_1.default.parentData}`);
        gen.var(names_1.default.parentDataProperty, codegen_1._ `${names_1.default.valCxt}.${names_1.default.parentDataProperty}`);
        gen.var(names_1.default.rootData, codegen_1._ `${names_1.default.valCxt}.${names_1.default.rootData}`);
        if (opts.dynamicRef)
            gen.var(names_1.default.dynamicAnchors, codegen_1._ `${names_1.default.valCxt}.${names_1.default.dynamicAnchors}`);
    }, () => {
        gen.var(names_1.default.dataPath, codegen_1._ `""`);
        gen.var(names_1.default.parentData, codegen_1._ `undefined`);
        gen.var(names_1.default.parentDataProperty, codegen_1._ `undefined`);
        gen.var(names_1.default.rootData, names_1.default.data);
        if (opts.dynamicRef)
            gen.var(names_1.default.dynamicAnchors, codegen_1._ `{}`);
    });
}
function topSchemaObjCode(it) {
    const { schema, opts, gen } = it;
    validateFunction(it, () => {
        if (opts.$comment && schema.$comment)
            commentKeyword(it);
        checkNoDefault(it);
        gen.let(names_1.default.vErrors, null);
        gen.let(names_1.default.errors, 0);
        if (opts.unevaluated)
            resetEvaluated(it);
        typeAndKeywords(it);
        returnResults(it);
    });
    return;
}
function resetEvaluated(it) {
    // TODO maybe some hook to execute it in the end to check whether props/items are Name, as in assignEvaluated
    const { gen, validateName } = it;
    it.evaluated = gen.const("evaluated", codegen_1._ `${validateName}.evaluated`);
    gen.if(codegen_1._ `${it.evaluated}.dynamicProps`, () => gen.assign(codegen_1._ `${it.evaluated}.props`, codegen_1._ `undefined`));
    gen.if(codegen_1._ `${it.evaluated}.dynamicItems`, () => gen.assign(codegen_1._ `${it.evaluated}.items`, codegen_1._ `undefined`));
}
function funcSourceUrl(schema, opts) {
    return typeof schema == "object" && schema.$id && (opts.code.source || opts.code.process)
        ? codegen_1._ `/*# sourceURL=${schema.$id} */`
        : codegen_1.nil;
}
// schema compilation - this function is used recursively to generate code for sub-schemas
function subschemaCode(it, valid) {
    if (isSchemaObj(it)) {
        checkKeywords(it);
        if (schemaCxtHasRules(it)) {
            subSchemaObjCode(it, valid);
            return;
        }
    }
    boolSchema_1.boolOrEmptySchema(it, valid);
}
exports.subschemaCode = subschemaCode;
function schemaCxtHasRules({ schema, self }) {
    if (typeof schema == "boolean")
        return !schema;
    for (const key in schema)
        if (self.RULES.all[key])
            return true;
    return false;
}
exports.schemaCxtHasRules = schemaCxtHasRules;
function isSchemaObj(it) {
    return typeof it.schema != "boolean";
}
function subSchemaObjCode(it, valid) {
    const { schema, gen, opts } = it;
    if (opts.$comment && schema.$comment)
        commentKeyword(it);
    updateContext(it);
    checkAsync(it);
    const errsCount = gen.const("_errs", names_1.default.errors);
    typeAndKeywords(it, errsCount);
    // TODO var
    gen.var(valid, codegen_1._ `${errsCount} === ${names_1.default.errors}`);
}
function checkKeywords(it) {
    util_1.checkUnknownRules(it);
    checkRefsAndKeywords(it);
}
function typeAndKeywords(it, errsCount) {
    if (it.opts.jtd)
        return iterate_1.schemaKeywords(it, [], false, errsCount);
    const types = dataType_1.getSchemaTypes(it.schema);
    const checkedTypes = dataType_1.coerceAndCheckDataType(it, types);
    iterate_1.schemaKeywords(it, types, !checkedTypes, errsCount);
}
function checkRefsAndKeywords(it) {
    const { schema, errSchemaPath, opts, self } = it;
    if (schema.$ref && opts.ignoreKeywordsWithRef && util_1.schemaHasRulesButRef(schema, self.RULES)) {
        self.logger.warn(`$ref: keywords ignored in schema at path "${errSchemaPath}"`);
    }
}
function checkNoDefault(it) {
    const { schema, opts } = it;
    if (schema.default !== undefined && opts.useDefaults && opts.strict) {
        checkStrictMode(it, "default is ignored in the schema root");
    }
}
function updateContext(it) {
    if (it.schema.$id)
        it.baseId = resolve_1.resolveUrl(it.baseId, it.schema.$id);
}
function checkAsync(it) {
    if (it.schema.$async && !it.schemaEnv.$async)
        throw new Error("async schema in sync schema");
}
function commentKeyword({ gen, schemaEnv, schema, errSchemaPath, opts }) {
    const msg = schema.$comment;
    if (opts.$comment === true) {
        gen.code(codegen_1._ `${names_1.default.self}.logger.log(${msg})`);
    }
    else if (typeof opts.$comment == "function") {
        const schemaPath = codegen_1.str `${errSchemaPath}/$comment`;
        const rootName = gen.scopeValue("root", { ref: schemaEnv.root });
        gen.code(codegen_1._ `${names_1.default.self}.opts.$comment(${msg}, ${schemaPath}, ${rootName}.schema)`);
    }
}
function returnResults(it) {
    const { gen, schemaEnv, validateName, ValidationError, opts } = it;
    if (schemaEnv.$async) {
        // TODO assign unevaluated
        gen.if(codegen_1._ `${names_1.default.errors} === 0`, () => gen.return(names_1.default.data), () => gen.throw(codegen_1._ `new ${ValidationError}(${names_1.default.vErrors})`));
    }
    else {
        gen.assign(codegen_1._ `${validateName}.errors`, names_1.default.vErrors);
        if (opts.unevaluated)
            assignEvaluated(it);
        gen.return(codegen_1._ `${names_1.default.errors} === 0`);
    }
}
function assignEvaluated({ gen, evaluated, props, items }) {
    if (props instanceof codegen_1.Name)
        gen.assign(codegen_1._ `${evaluated}.props`, props);
    if (items instanceof codegen_1.Name)
        gen.assign(codegen_1._ `${evaluated}.items`, items);
}
function checkStrictMode(it, msg, mode = it.opts.strict) {
    if (!mode)
        return;
    msg = `strict mode: ${msg}`;
    if (mode === true)
        throw new Error(msg);
    it.self.logger.warn(msg);
}
exports.checkStrictMode = checkStrictMode;
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 14564:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.schemaKeywords = void 0;
const applicability_1 = __webpack_require__(43997);
const dataType_1 = __webpack_require__(27778);
const defaults_1 = __webpack_require__(66260);
const keyword_1 = __webpack_require__(51778);
const util_1 = __webpack_require__(7007);
const _1 = __webpack_require__(76192);
const codegen_1 = __webpack_require__(78462);
const names_1 = __webpack_require__(53873);
function schemaKeywords(it, types, typeErrors, errsCount) {
    const { gen, schema, data, allErrors, opts, self } = it;
    const { RULES } = self;
    if (schema.$ref && (opts.ignoreKeywordsWithRef || !util_1.schemaHasRulesButRef(schema, RULES))) {
        gen.block(() => keyword_1.keywordCode(it, "$ref", RULES.all.$ref.definition)); // TODO typecast
        return;
    }
    if (!opts.jtd)
        checkStrictTypes(it, types);
    gen.block(() => {
        for (const group of RULES.rules)
            groupKeywords(group);
        groupKeywords(RULES.post);
    });
    function groupKeywords(group) {
        if (!applicability_1.shouldUseGroup(schema, group))
            return;
        if (group.type) {
            gen.if(dataType_1.checkDataType(group.type, data, opts.strict));
            iterateKeywords(it, group);
            if (types.length === 1 && types[0] === group.type && typeErrors) {
                gen.else();
                dataType_1.reportTypeError(it);
            }
            gen.endIf();
        }
        else {
            iterateKeywords(it, group);
        }
        // TODO make it "ok" call?
        if (!allErrors)
            gen.if(codegen_1._ `${names_1.default.errors} === ${errsCount || 0}`);
    }
}
exports.schemaKeywords = schemaKeywords;
function iterateKeywords(it, group) {
    const { gen, schema, opts: { useDefaults }, } = it;
    if (useDefaults)
        defaults_1.assignDefaults(it, group.type);
    gen.block(() => {
        for (const rule of group.rules) {
            if (applicability_1.shouldUseRule(schema, rule)) {
                keyword_1.keywordCode(it, rule.keyword, rule.definition, group.type);
            }
        }
    });
}
function checkStrictTypes(it, types) {
    if (it.schemaEnv.meta || !it.opts.strictTypes)
        return;
    checkContextTypes(it, types);
    if (!it.opts.allowUnionTypes)
        checkMultipleTypes(it, types);
    checkKeywordTypes(it, it.dataTypes);
}
function checkContextTypes(it, types) {
    if (!types.length)
        return;
    if (!it.dataTypes.length) {
        it.dataTypes = types;
        return;
    }
    types.forEach((t) => {
        if (!includesType(it.dataTypes, t)) {
            strictTypesError(it, `type "${t}" not allowed by context "${it.dataTypes.join(",")}"`);
        }
    });
    it.dataTypes = it.dataTypes.filter((t) => includesType(types, t));
}
function checkMultipleTypes(it, ts) {
    if (ts.length > 1 && !(ts.length === 2 && ts.includes("null"))) {
        strictTypesError(it, "use allowUnionTypes to allow union type keyword");
    }
}
function checkKeywordTypes(it, ts) {
    const rules = it.self.RULES.all;
    for (const keyword in rules) {
        const rule = rules[keyword];
        if (typeof rule == "object" && applicability_1.shouldUseRule(it.schema, rule)) {
            const { type } = rule.definition;
            if (type.length && !type.some((t) => hasApplicableType(ts, t))) {
                strictTypesError(it, `missing type "${type.join(",")}" for keyword "${keyword}"`);
            }
        }
    }
}
function hasApplicableType(schTs, kwdT) {
    return schTs.includes(kwdT) || (kwdT === "number" && schTs.includes("integer"));
}
function includesType(ts, t) {
    return ts.includes(t) || (t === "integer" && ts.includes("number"));
}
function strictTypesError(it, msg) {
    const schemaPath = it.schemaEnv.baseId + it.errSchemaPath;
    msg += ` at "${schemaPath}" (strictTypes)`;
    _1.checkStrictMode(it, msg, it.opts.strictTypes);
}
//# sourceMappingURL=iterate.js.map

/***/ }),

/***/ 51778:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.keywordCode = void 0;
const context_1 = __webpack_require__(65233);
const errors_1 = __webpack_require__(39026);
const code_1 = __webpack_require__(38956);
const codegen_1 = __webpack_require__(78462);
const names_1 = __webpack_require__(53873);
function keywordCode(it, keyword, def, ruleType) {
    const cxt = new context_1.default(it, def, keyword);
    if ("code" in def) {
        def.code(cxt, ruleType);
    }
    else if (cxt.$data && def.validate) {
        funcKeywordCode(cxt, def);
    }
    else if ("macro" in def) {
        macroKeywordCode(cxt, def);
    }
    else if (def.compile || def.validate) {
        funcKeywordCode(cxt, def);
    }
}
exports.keywordCode = keywordCode;
function macroKeywordCode(cxt, def) {
    const { gen, keyword, schema, parentSchema, it } = cxt;
    const macroSchema = def.macro.call(it.self, schema, parentSchema, it);
    const schemaRef = useKeyword(gen, keyword, macroSchema);
    if (it.opts.validateSchema !== false)
        it.self.validateSchema(macroSchema, true);
    const valid = gen.name("valid");
    cxt.subschema({
        schema: macroSchema,
        schemaPath: codegen_1.nil,
        errSchemaPath: `${it.errSchemaPath}/${keyword}`,
        topSchemaRef: schemaRef,
        compositeRule: true,
    }, valid);
    cxt.pass(valid, () => cxt.error(true));
}
function funcKeywordCode(cxt, def) {
    var _a;
    const { gen, keyword, schema, parentSchema, $data, it } = cxt;
    checkAsync(it, def);
    const validate = !$data && def.compile ? def.compile.call(it.self, schema, parentSchema, it) : def.validate;
    const validateRef = useKeyword(gen, keyword, validate);
    const valid = gen.let("valid");
    cxt.block$data(valid, validateKeyword);
    cxt.ok((_a = def.valid) !== null && _a !== void 0 ? _a : valid);
    function validateKeyword() {
        if (def.errors === false) {
            assignValid();
            if (def.modifying)
                modifyData(cxt);
            reportErrs(() => cxt.error());
        }
        else {
            const ruleErrs = def.async ? validateAsync() : validateSync();
            if (def.modifying)
                modifyData(cxt);
            reportErrs(() => addErrs(cxt, ruleErrs));
        }
    }
    function validateAsync() {
        const ruleErrs = gen.let("ruleErrs", null);
        gen.try(() => assignValid(codegen_1._ `await `), (e) => gen.assign(valid, false).if(codegen_1._ `${e} instanceof ${it.ValidationError}`, () => gen.assign(ruleErrs, codegen_1._ `${e}.errors`), () => gen.throw(e)));
        return ruleErrs;
    }
    function validateSync() {
        const validateErrs = codegen_1._ `${validateRef}.errors`;
        gen.assign(validateErrs, null);
        assignValid(codegen_1.nil);
        return validateErrs;
    }
    function assignValid(_await = def.async ? codegen_1._ `await ` : codegen_1.nil) {
        const passCxt = it.opts.passContext ? names_1.default.this : names_1.default.self;
        const passSchema = !(("compile" in def && !$data) || def.schema === false);
        gen.assign(valid, codegen_1._ `${_await}${code_1.callValidateCode(cxt, validateRef, passCxt, passSchema)}`, def.modifying);
    }
    function reportErrs(errors) {
        var _a;
        gen.if(codegen_1.not((_a = def.valid) !== null && _a !== void 0 ? _a : valid), errors);
    }
}
function modifyData(cxt) {
    const { gen, data, it } = cxt;
    gen.if(it.parentData, () => gen.assign(data, codegen_1._ `${it.parentData}[${it.parentDataProperty}]`));
}
function addErrs(cxt, errs) {
    const { gen } = cxt;
    gen.if(codegen_1._ `Array.isArray(${errs})`, () => {
        gen
            .assign(names_1.default.vErrors, codegen_1._ `${names_1.default.vErrors} === null ? ${errs} : ${names_1.default.vErrors}.concat(${errs})`)
            .assign(names_1.default.errors, codegen_1._ `${names_1.default.vErrors}.length`);
        errors_1.extendErrors(cxt);
    }, () => cxt.error());
}
function checkAsync({ schemaEnv }, def) {
    if (def.async && !schemaEnv.$async)
        throw new Error("async keyword in sync schema");
}
function useKeyword(gen, keyword, result) {
    if (result === undefined)
        throw new Error(`keyword "${keyword}" failed to compile`);
    return gen.scopeValue("keyword", typeof result == "function" ? { ref: result } : { ref: result, code: codegen_1.stringify(result) });
}
//# sourceMappingURL=keyword.js.map

/***/ }),

/***/ 91714:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CodeGen = exports.Name = exports.nil = exports.stringify = exports.str = exports._ = exports.KeywordCxt = void 0;
const context_1 = __webpack_require__(65233);
exports.KeywordCxt = context_1.default;
var codegen_1 = __webpack_require__(78462);
Object.defineProperty(exports, "_", ({ enumerable: true, get: function () { return codegen_1._; } }));
Object.defineProperty(exports, "str", ({ enumerable: true, get: function () { return codegen_1.str; } }));
Object.defineProperty(exports, "stringify", ({ enumerable: true, get: function () { return codegen_1.stringify; } }));
Object.defineProperty(exports, "nil", ({ enumerable: true, get: function () { return codegen_1.nil; } }));
Object.defineProperty(exports, "Name", ({ enumerable: true, get: function () { return codegen_1.Name; } }));
Object.defineProperty(exports, "CodeGen", ({ enumerable: true, get: function () { return codegen_1.CodeGen; } }));
const error_classes_1 = __webpack_require__(97938);
const rules_1 = __webpack_require__(39691);
const compile_1 = __webpack_require__(19092);
const codegen_2 = __webpack_require__(78462);
const resolve_1 = __webpack_require__(25503);
const dataType_1 = __webpack_require__(27778);
const util_1 = __webpack_require__(7007);
const $dataRefSchema = __webpack_require__(17869);
const META_IGNORE_OPTIONS = ["removeAdditional", "useDefaults", "coerceTypes"];
const EXT_SCOPE_NAMES = new Set([
    "validate",
    "serialize",
    "parse",
    "wrapper",
    "root",
    "schema",
    "keyword",
    "pattern",
    "formats",
    "validate$data",
    "func",
    "obj",
    "Error",
]);
const removedOptions = {
    errorDataPath: "",
    format: "`validateFormats: false` can be used instead.",
    nullable: '"nullable" keyword is supported by default.',
    jsonPointers: "Deprecated jsPropertySyntax can be used instead.",
    extendRefs: "Deprecated ignoreKeywordsWithRef can be used instead.",
    missingRefs: "Pass empty schema with $id that should be ignored to ajv.addSchema.",
    processCode: "Use option `code: {process: (code, schemaEnv: object) => string}`",
    sourceCode: "Use option `code: {source: true}`",
    schemaId: "JSON Schema draft-04 is not supported in Ajv v7.",
    strictDefaults: "It is default now, see option `strict`.",
    strictKeywords: "It is default now, see option `strict`.",
    strictNumbers: "It is default now, see option `strict`.",
    uniqueItems: '"uniqueItems" keyword is always validated.',
    unknownFormats: "Disable strict mode or pass `true` to `ajv.addFormat` (or `formats` option).",
    cache: "Map is used as cache, schema object as key.",
    serialize: "Map is used as cache, schema object as key.",
};
const deprecatedOptions = {
    ignoreKeywordsWithRef: "",
    jsPropertySyntax: "",
    unicode: '"minLength"/"maxLength" account for unicode characters by default.',
};
function requiredOptions(o) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;
    const strict = (_a = o.strict) !== null && _a !== void 0 ? _a : true;
    const strictLog = strict ? "log" : false;
    const _optz = (_b = o.code) === null || _b === void 0 ? void 0 : _b.optimize;
    const optimize = _optz === true || _optz === undefined ? 1 : _optz || 0;
    return {
        strict,
        strictTypes: (_c = o.strictTypes) !== null && _c !== void 0 ? _c : strictLog,
        strictTuples: (_d = o.strictTuples) !== null && _d !== void 0 ? _d : strictLog,
        code: o.code ? { ...o.code, optimize } : { optimize },
        loopRequired: (_e = o.loopRequired) !== null && _e !== void 0 ? _e : Infinity,
        loopEnum: (_f = o.loopEnum) !== null && _f !== void 0 ? _f : Infinity,
        meta: (_g = o.meta) !== null && _g !== void 0 ? _g : true,
        messages: (_h = o.messages) !== null && _h !== void 0 ? _h : true,
        inlineRefs: (_j = o.inlineRefs) !== null && _j !== void 0 ? _j : true,
        addUsedSchema: (_k = o.addUsedSchema) !== null && _k !== void 0 ? _k : true,
        validateSchema: (_l = o.validateSchema) !== null && _l !== void 0 ? _l : true,
        validateFormats: (_m = o.validateFormats) !== null && _m !== void 0 ? _m : true,
    };
}
class Ajv {
    constructor(opts = {}) {
        this.schemas = {};
        this.refs = {};
        this.formats = {};
        this._compilations = new Set();
        this._loading = {};
        this._cache = new Map();
        opts = this.opts = { ...opts, ...requiredOptions(opts) };
        const { es5, lines } = this.opts.code;
        this.scope = new codegen_2.ValueScope({ scope: {}, prefixes: EXT_SCOPE_NAMES, es5, lines });
        this.logger = getLogger(opts.logger);
        const formatOpt = opts.validateFormats;
        opts.validateFormats = false;
        this.RULES = rules_1.getRules();
        checkOptions.call(this, removedOptions, opts, "NOT SUPPORTED");
        checkOptions.call(this, deprecatedOptions, opts, "DEPRECATED", "warn");
        this._metaOpts = getMetaSchemaOptions.call(this);
        if (opts.formats)
            addInitialFormats.call(this);
        this._addVocabularies();
        this._addDefaultMetaSchema();
        if (opts.keywords)
            addInitialKeywords.call(this, opts.keywords);
        if (typeof opts.meta == "object")
            this.addMetaSchema(opts.meta);
        addInitialSchemas.call(this);
        opts.validateFormats = formatOpt;
    }
    _addVocabularies() {
        this.addKeyword("$async");
    }
    _addDefaultMetaSchema() {
        const { $data, meta } = this.opts;
        if (meta && $data)
            this.addMetaSchema($dataRefSchema, $dataRefSchema.$id, false);
    }
    defaultMeta() {
        const { meta } = this.opts;
        return (this.opts.defaultMeta = typeof meta == "object" ? meta.$id || meta : undefined);
    }
    validate(schemaKeyRef, // key, ref or schema object
    data // to be validated
    ) {
        let v;
        if (typeof schemaKeyRef == "string") {
            v = this.getSchema(schemaKeyRef);
            if (!v)
                throw new Error(`no schema with key or ref "${schemaKeyRef}"`);
        }
        else {
            v = this.compile(schemaKeyRef);
        }
        const valid = v(data);
        if (!("$async" in v))
            this.errors = v.errors;
        return valid;
    }
    compile(schema, _meta) {
        const sch = this._addSchema(schema, _meta);
        return (sch.validate || this._compileSchemaEnv(sch));
    }
    compileAsync(schema, meta) {
        if (typeof this.opts.loadSchema != "function") {
            throw new Error("options.loadSchema should be a function");
        }
        const { loadSchema } = this.opts;
        return runCompileAsync.call(this, schema, meta);
        async function runCompileAsync(_schema, _meta) {
            await loadMetaSchema.call(this, _schema.$schema);
            const sch = this._addSchema(_schema, _meta);
            return sch.validate || _compileAsync.call(this, sch);
        }
        async function loadMetaSchema($ref) {
            if ($ref && !this.getSchema($ref)) {
                await runCompileAsync.call(this, { $ref }, true);
            }
        }
        async function _compileAsync(sch) {
            try {
                return this._compileSchemaEnv(sch);
            }
            catch (e) {
                if (!(e instanceof error_classes_1.MissingRefError))
                    throw e;
                checkLoaded.call(this, e);
                await loadMissingSchema.call(this, e.missingSchema);
                return _compileAsync.call(this, sch);
            }
        }
        function checkLoaded({ missingSchema: ref, missingRef }) {
            if (this.refs[ref]) {
                throw new Error(`AnySchema ${ref} is loaded but ${missingRef} cannot be resolved`);
            }
        }
        async function loadMissingSchema(ref) {
            const _schema = await _loadSchema.call(this, ref);
            if (!this.refs[ref])
                await loadMetaSchema.call(this, _schema.$schema);
            if (!this.refs[ref])
                this.addSchema(_schema, ref, meta);
        }
        async function _loadSchema(ref) {
            const p = this._loading[ref];
            if (p)
                return p;
            try {
                return await (this._loading[ref] = loadSchema(ref));
            }
            finally {
                delete this._loading[ref];
            }
        }
    }
    // Adds schema to the instance
    addSchema(schema, // If array is passed, `key` will be ignored
    key, // Optional schema key. Can be passed to `validate` method instead of schema object or id/ref. One schema per instance can have empty `id` and `key`.
    _meta, // true if schema is a meta-schema. Used internally, addMetaSchema should be used instead.
    _validateSchema = this.opts.validateSchema // false to skip schema validation. Used internally, option validateSchema should be used instead.
    ) {
        if (Array.isArray(schema)) {
            for (const sch of schema)
                this.addSchema(sch, undefined, _meta, _validateSchema);
            return this;
        }
        let id;
        if (typeof schema === "object") {
            id = schema.$id;
            if (id !== undefined && typeof id != "string")
                throw new Error("schema id must be string");
        }
        key = resolve_1.normalizeId(key || id);
        this._checkUnique(key);
        this.schemas[key] = this._addSchema(schema, _meta, _validateSchema, true);
        return this;
    }
    // Add schema that will be used to validate other schemas
    // options in META_IGNORE_OPTIONS are alway set to false
    addMetaSchema(schema, key, // schema key
    _validateSchema = this.opts.validateSchema // false to skip schema validation, can be used to override validateSchema option for meta-schema
    ) {
        this.addSchema(schema, key, true, _validateSchema);
        return this;
    }
    //  Validate schema against its meta-schema
    validateSchema(schema, throwOrLogError) {
        if (typeof schema == "boolean")
            return true;
        let $schema;
        $schema = schema.$schema;
        if ($schema !== undefined && typeof $schema != "string") {
            throw new Error("$schema must be a string");
        }
        $schema = $schema || this.opts.defaultMeta || this.defaultMeta();
        if (!$schema) {
            this.logger.warn("meta-schema not available");
            this.errors = null;
            return true;
        }
        const valid = this.validate($schema, schema);
        if (!valid && throwOrLogError) {
            const message = "schema is invalid: " + this.errorsText();
            if (this.opts.validateSchema === "log")
                this.logger.error(message);
            else
                throw new Error(message);
        }
        return valid;
    }
    // Get compiled schema by `key` or `ref`.
    // (`key` that was passed to `addSchema` or full schema reference - `schema.$id` or resolved id)
    getSchema(keyRef) {
        let sch;
        while (typeof (sch = getSchEnv.call(this, keyRef)) == "string")
            keyRef = sch;
        if (sch === undefined) {
            const root = new compile_1.SchemaEnv({ schema: {} });
            sch = compile_1.resolveSchema.call(this, root, keyRef);
            if (!sch)
                return;
            this.refs[keyRef] = sch;
        }
        return (sch.validate || this._compileSchemaEnv(sch));
    }
    // Remove cached schema(s).
    // If no parameter is passed all schemas but meta-schemas are removed.
    // If RegExp is passed all schemas with key/id matching pattern but meta-schemas are removed.
    // Even if schema is referenced by other schemas it still can be removed as other schemas have local references.
    removeSchema(schemaKeyRef) {
        if (schemaKeyRef instanceof RegExp) {
            this._removeAllSchemas(this.schemas, schemaKeyRef);
            this._removeAllSchemas(this.refs, schemaKeyRef);
            return this;
        }
        switch (typeof schemaKeyRef) {
            case "undefined":
                this._removeAllSchemas(this.schemas);
                this._removeAllSchemas(this.refs);
                this._cache.clear();
                return this;
            case "string": {
                const sch = getSchEnv.call(this, schemaKeyRef);
                if (typeof sch == "object")
                    this._cache.delete(sch.schema);
                delete this.schemas[schemaKeyRef];
                delete this.refs[schemaKeyRef];
                return this;
            }
            case "object": {
                const cacheKey = schemaKeyRef;
                this._cache.delete(cacheKey);
                let id = schemaKeyRef.$id;
                if (id) {
                    id = resolve_1.normalizeId(id);
                    delete this.schemas[id];
                    delete this.refs[id];
                }
                return this;
            }
            default:
                throw new Error("ajv.removeSchema: invalid parameter");
        }
    }
    // add "vocabulary" - a collection of keywords
    addVocabulary(definitions) {
        for (const def of definitions)
            this.addKeyword(def);
        return this;
    }
    addKeyword(kwdOrDef, def // deprecated
    ) {
        let keyword;
        if (typeof kwdOrDef == "string") {
            keyword = kwdOrDef;
            if (typeof def == "object") {
                this.logger.warn("these parameters are deprecated, see docs for addKeyword");
                def.keyword = keyword;
            }
        }
        else if (typeof kwdOrDef == "object" && def === undefined) {
            def = kwdOrDef;
            keyword = def.keyword;
            if (Array.isArray(keyword) && !keyword.length) {
                throw new Error("addKeywords: keyword must be string or non-empty array");
            }
        }
        else {
            throw new Error("invalid addKeywords parameters");
        }
        checkKeyword.call(this, keyword, def);
        if (!def) {
            util_1.eachItem(keyword, (kwd) => addRule.call(this, kwd));
            return this;
        }
        keywordMetaschema.call(this, def);
        const definition = {
            ...def,
            type: dataType_1.getJSONTypes(def.type),
            schemaType: dataType_1.getJSONTypes(def.schemaType),
        };
        util_1.eachItem(keyword, definition.type.length === 0
            ? (k) => addRule.call(this, k, definition)
            : (k) => definition.type.forEach((t) => addRule.call(this, k, definition, t)));
        return this;
    }
    getKeyword(keyword) {
        const rule = this.RULES.all[keyword];
        return typeof rule == "object" ? rule.definition : !!rule;
    }
    // Remove keyword
    removeKeyword(keyword) {
        // TODO return type should be Ajv
        const { RULES } = this;
        delete RULES.keywords[keyword];
        delete RULES.all[keyword];
        for (const group of RULES.rules) {
            const i = group.rules.findIndex((rule) => rule.keyword === keyword);
            if (i >= 0)
                group.rules.splice(i, 1);
        }
        return this;
    }
    // Add format
    addFormat(name, format) {
        if (typeof format == "string")
            format = new RegExp(format);
        this.formats[name] = format;
        return this;
    }
    errorsText(errors = this.errors, // optional array of validation errors
    { separator = ", ", dataVar = "data" } = {} // optional options with properties `separator` and `dataVar`
    ) {
        if (!errors || errors.length === 0)
            return "No errors";
        return errors
            .map((e) => `${dataVar}${e.dataPath} ${e.message}`)
            .reduce((text, msg) => text + separator + msg);
    }
    $dataMetaSchema(metaSchema, keywordsJsonPointers) {
        const rules = this.RULES.all;
        metaSchema = JSON.parse(JSON.stringify(metaSchema));
        for (const jsonPointer of keywordsJsonPointers) {
            const segments = jsonPointer.split("/").slice(1); // first segment is an empty string
            let keywords = metaSchema;
            for (const seg of segments)
                keywords = keywords[seg];
            for (const key in rules) {
                const rule = rules[key];
                if (typeof rule != "object")
                    continue;
                const { $data } = rule.definition;
                const schema = keywords[key];
                if ($data && schema)
                    keywords[key] = schemaOrData(schema);
            }
        }
        return metaSchema;
    }
    _removeAllSchemas(schemas, regex) {
        for (const keyRef in schemas) {
            const sch = schemas[keyRef];
            if (!regex || regex.test(keyRef)) {
                if (typeof sch == "string") {
                    delete schemas[keyRef];
                }
                else if (sch && !sch.meta) {
                    this._cache.delete(sch.schema);
                    delete schemas[keyRef];
                }
            }
        }
    }
    _addSchema(schema, meta, validateSchema = this.opts.validateSchema, addSchema = this.opts.addUsedSchema) {
        if (typeof schema != "object") {
            if (this.opts.jtd)
                throw new Error("schema must be object");
            else if (typeof schema != "boolean")
                throw new Error("schema must be object or boolean");
        }
        let sch = this._cache.get(schema);
        if (sch !== undefined)
            return sch;
        const localRefs = resolve_1.getSchemaRefs.call(this, schema);
        sch = new compile_1.SchemaEnv({ schema, meta, localRefs });
        this._cache.set(sch.schema, sch);
        const id = sch.baseId;
        if (addSchema && !id.startsWith("#")) {
            // TODO atm it is allowed to overwrite schemas without id (instead of not adding them)
            if (id)
                this._checkUnique(id);
            this.refs[id] = sch;
        }
        if (validateSchema)
            this.validateSchema(schema, true);
        return sch;
    }
    _checkUnique(id) {
        if (this.schemas[id] || this.refs[id]) {
            throw new Error(`schema with key or id "${id}" already exists`);
        }
    }
    _compileSchemaEnv(sch) {
        if (sch.meta)
            this._compileMetaSchema(sch);
        else
            compile_1.compileSchema.call(this, sch);
        /* istanbul ignore if */
        if (!sch.validate)
            throw new Error("ajv implementation error");
        return sch.validate;
    }
    _compileMetaSchema(sch) {
        const currentOpts = this.opts;
        this.opts = this._metaOpts;
        try {
            compile_1.compileSchema.call(this, sch);
        }
        finally {
            this.opts = currentOpts;
        }
    }
}
exports["default"] = Ajv;
Ajv.ValidationError = error_classes_1.ValidationError;
Ajv.MissingRefError = error_classes_1.MissingRefError;
function checkOptions(checkOpts, options, msg, log = "error") {
    for (const key in checkOpts) {
        const opt = key;
        if (opt in options)
            this.logger[log](`${msg}: option ${key}. ${checkOpts[opt]}`);
    }
}
function getSchEnv(keyRef) {
    keyRef = resolve_1.normalizeId(keyRef); // TODO tests fail without this line
    return this.schemas[keyRef] || this.refs[keyRef];
}
function addInitialSchemas() {
    const optsSchemas = this.opts.schemas;
    if (!optsSchemas)
        return;
    if (Array.isArray(optsSchemas))
        this.addSchema(optsSchemas);
    else
        for (const key in optsSchemas)
            this.addSchema(optsSchemas[key], key);
}
function addInitialFormats() {
    for (const name in this.opts.formats) {
        const format = this.opts.formats[name];
        if (format)
            this.addFormat(name, format);
    }
}
function addInitialKeywords(defs) {
    if (Array.isArray(defs)) {
        this.addVocabulary(defs);
        return;
    }
    this.logger.warn("keywords option as map is deprecated, pass array");
    for (const keyword in defs) {
        const def = defs[keyword];
        if (!def.keyword)
            def.keyword = keyword;
        this.addKeyword(def);
    }
}
function getMetaSchemaOptions() {
    const metaOpts = { ...this.opts };
    for (const opt of META_IGNORE_OPTIONS)
        delete metaOpts[opt];
    return metaOpts;
}
const noLogs = { log() { }, warn() { }, error() { } };
function getLogger(logger) {
    if (logger === false)
        return noLogs;
    if (logger === undefined)
        return console;
    if (logger.log && logger.warn && logger.error)
        return logger;
    throw new Error("logger must implement log, warn and error methods");
}
const KEYWORD_NAME = /^[a-z_$][a-z0-9_$:-]*$/i;
function checkKeyword(keyword, def) {
    const { RULES } = this;
    util_1.eachItem(keyword, (kwd) => {
        if (RULES.keywords[kwd])
            throw new Error(`Keyword ${kwd} is already defined`);
        if (!KEYWORD_NAME.test(kwd))
            throw new Error(`Keyword ${kwd} has invalid name`);
    });
    if (!def)
        return;
    if (def.$data && !("code" in def || "validate" in def)) {
        throw new Error('$data keyword must have "code" or "validate" function');
    }
}
function addRule(keyword, definition, dataType) {
    var _a;
    const post = definition === null || definition === void 0 ? void 0 : definition.post;
    if (dataType && post)
        throw new Error('keyword with "post" flag cannot have "type"');
    const { RULES } = this;
    let ruleGroup = post ? RULES.post : RULES.rules.find(({ type: t }) => t === dataType);
    if (!ruleGroup) {
        ruleGroup = { type: dataType, rules: [] };
        RULES.rules.push(ruleGroup);
    }
    RULES.keywords[keyword] = true;
    if (!definition)
        return;
    const rule = {
        keyword,
        definition: {
            ...definition,
            type: dataType_1.getJSONTypes(definition.type),
            schemaType: dataType_1.getJSONTypes(definition.schemaType),
        },
    };
    if (definition.before)
        addBeforeRule.call(this, ruleGroup, rule, definition.before);
    else
        ruleGroup.rules.push(rule);
    RULES.all[keyword] = rule;
    (_a = definition.implements) === null || _a === void 0 ? void 0 : _a.forEach((kwd) => this.addKeyword(kwd));
}
function addBeforeRule(ruleGroup, rule, before) {
    const i = ruleGroup.rules.findIndex((_rule) => _rule.keyword === before);
    if (i >= 0) {
        ruleGroup.rules.splice(i, 0, rule);
    }
    else {
        ruleGroup.rules.push(rule);
        this.logger.warn(`rule ${before} is not defined`);
    }
}
function keywordMetaschema(def) {
    let { metaSchema } = def;
    if (metaSchema === undefined)
        return;
    if (def.$data && this.opts.$data)
        metaSchema = schemaOrData(metaSchema);
    def.validateSchema = this.compile(metaSchema, true);
}
const $dataRef = {
    $ref: "https://raw.githubusercontent.com/ajv-validator/ajv/master/lib/refs/data.json#",
};
function schemaOrData(schema) {
    return { anyOf: [schema, $dataRef] };
}
//# sourceMappingURL=core.js.map

/***/ }),

/***/ 91717:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const codegen_1 = __webpack_require__(78462);
const subschema_1 = __webpack_require__(60632);
const util_1 = __webpack_require__(7007);
const validate_1 = __webpack_require__(76192);
const error = {
    message: ({ params: { len } }) => codegen_1.str `should NOT have more than ${len} items`,
    params: ({ params: { len } }) => codegen_1._ `{limit: ${len}}`,
};
const def = {
    keyword: "additionalItems",
    type: "array",
    schemaType: ["boolean", "object"],
    before: "uniqueItems",
    error,
    code(cxt) {
        const { gen, schema, parentSchema, data, it } = cxt;
        const { items } = parentSchema;
        if (!Array.isArray(items)) {
            validate_1.checkStrictMode(it, '"additionalItems" is ignored when "items" is not an array of schemas');
            return;
        }
        it.items = true;
        const len = gen.const("len", codegen_1._ `${data}.length`);
        if (schema === false) {
            cxt.setParams({ len: items.length });
            cxt.pass(codegen_1._ `${len} <= ${items.length}`);
        }
        else if (typeof schema == "object" && !util_1.alwaysValidSchema(it, schema)) {
            const valid = gen.var("valid", codegen_1._ `${len} <= ${items.length}`); // TODO var
            gen.if(codegen_1.not(valid), () => validateItems(valid));
            cxt.ok(valid);
        }
        function validateItems(valid) {
            gen.forRange("i", items.length, len, (i) => {
                cxt.subschema({ keyword: "additionalItems", dataProp: i, dataPropType: subschema_1.Type.Num }, valid);
                if (!it.allErrors)
                    gen.if(codegen_1.not(valid), () => gen.break());
            });
        }
    },
};
exports["default"] = def;
//# sourceMappingURL=additionalItems.js.map

/***/ }),

/***/ 46940:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const code_1 = __webpack_require__(38956);
const codegen_1 = __webpack_require__(78462);
const names_1 = __webpack_require__(53873);
const subschema_1 = __webpack_require__(60632);
const util_1 = __webpack_require__(7007);
const error = {
    message: "should NOT have additional properties",
    params: ({ params }) => codegen_1._ `{additionalProperty: ${params.additionalProperty}}`,
};
const def = {
    keyword: "additionalProperties",
    type: ["object"],
    schemaType: ["boolean", "object"],
    allowUndefined: true,
    trackErrors: true,
    error,
    code(cxt) {
        const { gen, schema, parentSchema, data, errsCount, it } = cxt;
        /* istanbul ignore if */
        if (!errsCount)
            throw new Error("ajv implementation error");
        const { allErrors, opts } = it;
        it.props = true;
        if (opts.removeAdditional !== "all" && util_1.alwaysValidSchema(it, schema))
            return;
        const props = code_1.allSchemaProperties(parentSchema.properties);
        const patProps = code_1.allSchemaProperties(parentSchema.patternProperties);
        checkAdditionalProperties();
        cxt.ok(codegen_1._ `${errsCount} === ${names_1.default.errors}`);
        function checkAdditionalProperties() {
            gen.forIn("key", data, (key) => {
                if (!props.length && !patProps.length)
                    additionalPropertyCode(key);
                else
                    gen.if(isAdditional(key), () => additionalPropertyCode(key));
            });
        }
        function isAdditional(key) {
            let definedProp;
            if (props.length > 8) {
                // TODO maybe an option instead of hard-coded 8?
                const propsSchema = util_1.schemaRefOrVal(it, parentSchema.properties, "properties");
                definedProp = code_1.isOwnProperty(gen, propsSchema, key);
            }
            else if (props.length) {
                definedProp = codegen_1.or(...props.map((p) => codegen_1._ `${key} === ${p}`));
            }
            else {
                definedProp = codegen_1.nil;
            }
            if (patProps.length) {
                definedProp = codegen_1.or(definedProp, ...patProps.map((p) => codegen_1._ `${code_1.usePattern(gen, p)}.test(${key})`));
            }
            return codegen_1.not(definedProp);
        }
        function deleteAdditional(key) {
            gen.code(codegen_1._ `delete ${data}[${key}]`);
        }
        function additionalPropertyCode(key) {
            if (opts.removeAdditional === "all" || (opts.removeAdditional && schema === false)) {
                deleteAdditional(key);
                return;
            }
            if (schema === false) {
                cxt.setParams({ additionalProperty: key });
                cxt.error();
                if (!allErrors)
                    gen.break();
                return;
            }
            if (typeof schema == "object" && !util_1.alwaysValidSchema(it, schema)) {
                const valid = gen.name("valid");
                if (opts.removeAdditional === "failing") {
                    applyAdditionalSchema(key, valid, false);
                    gen.if(codegen_1.not(valid), () => {
                        cxt.reset();
                        deleteAdditional(key);
                    });
                }
                else {
                    applyAdditionalSchema(key, valid);
                    if (!allErrors)
                        gen.if(codegen_1.not(valid), () => gen.break());
                }
            }
        }
        function applyAdditionalSchema(key, valid, errors) {
            const subschema = {
                keyword: "additionalProperties",
                dataProp: key,
                dataPropType: subschema_1.Type.Str,
            };
            if (errors === false) {
                Object.assign(subschema, {
                    compositeRule: true,
                    createErrors: false,
                    allErrors: false,
                });
            }
            cxt.subschema(subschema, valid);
        }
    },
};
exports["default"] = def;
//# sourceMappingURL=additionalProperties.js.map

/***/ }),

/***/ 41450:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const util_1 = __webpack_require__(7007);
const def = {
    keyword: "allOf",
    schemaType: "array",
    code(cxt) {
        const { gen, schema, it } = cxt;
        /* istanbul ignore if */
        if (!Array.isArray(schema))
            throw new Error("ajv implementation error");
        const valid = gen.name("valid");
        schema.forEach((sch, i) => {
            if (util_1.alwaysValidSchema(it, sch))
                return;
            const schCxt = cxt.subschema({ keyword: "allOf", schemaProp: i }, valid);
            cxt.ok(valid);
            cxt.mergeEvaluated(schCxt);
        });
    },
};
exports["default"] = def;
//# sourceMappingURL=allOf.js.map

/***/ }),

/***/ 81975:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const code_1 = __webpack_require__(38956);
const def = {
    keyword: "anyOf",
    schemaType: "array",
    trackErrors: true,
    code: code_1.validateUnion,
    error: {
        message: "should match some schema in anyOf",
    },
};
exports["default"] = def;
//# sourceMappingURL=anyOf.js.map

/***/ }),

/***/ 24837:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const codegen_1 = __webpack_require__(78462);
const subschema_1 = __webpack_require__(60632);
const util_1 = __webpack_require__(7007);
const validate_1 = __webpack_require__(76192);
const error = {
    message: ({ params: { min, max } }) => max === undefined
        ? codegen_1.str `should contain at least ${min} valid item(s)`
        : codegen_1.str `should contain at least ${min} and no more than ${max} valid item(s)`,
    params: ({ params: { min, max } }) => max === undefined ? codegen_1._ `{minContains: ${min}}` : codegen_1._ `{minContains: ${min}, maxContains: ${max}}`,
};
const def = {
    keyword: "contains",
    type: "array",
    schemaType: ["object", "boolean"],
    before: "uniqueItems",
    trackErrors: true,
    error,
    code(cxt) {
        const { gen, schema, parentSchema, data, it } = cxt;
        let min;
        let max;
        const { minContains, maxContains } = parentSchema;
        if (it.opts.next) {
            min = minContains === undefined ? 1 : minContains;
            max = maxContains;
        }
        else {
            min = 1;
        }
        const len = gen.const("len", codegen_1._ `${data}.length`);
        cxt.setParams({ min, max });
        if (max === undefined && min === 0) {
            validate_1.checkStrictMode(it, `"minContains" == 0 without "maxContains": "contains" keyword ignored`);
            return;
        }
        if (max !== undefined && min > max) {
            validate_1.checkStrictMode(it, `"minContains" > "maxContains" is always invalid`);
            cxt.fail();
            return;
        }
        if (util_1.alwaysValidSchema(it, schema)) {
            let cond = codegen_1._ `${len} >= ${min}`;
            if (max !== undefined)
                cond = codegen_1._ `${cond} && ${len} <= ${max}`;
            cxt.pass(cond);
            return;
        }
        it.items = true;
        const valid = gen.name("valid");
        if (max === undefined && min === 1) {
            validateItems(valid, () => gen.if(valid, () => gen.break()));
        }
        else {
            gen.let(valid, false);
            const schValid = gen.name("_valid");
            const count = gen.let("count", 0);
            validateItems(schValid, () => gen.if(schValid, () => checkLimits(count)));
        }
        cxt.result(valid, () => cxt.reset());
        function validateItems(_valid, block) {
            gen.forRange("i", 0, len, (i) => {
                cxt.subschema({
                    keyword: "contains",
                    dataProp: i,
                    dataPropType: subschema_1.Type.Num,
                    compositeRule: true,
                }, _valid);
                block();
            });
        }
        function checkLimits(count) {
            gen.code(codegen_1._ `${count}++`);
            if (max === undefined) {
                gen.if(codegen_1._ `${count} >= ${min}`, () => gen.assign(valid, true).break());
            }
            else {
                gen.if(codegen_1._ `${count} > ${max}`, () => gen.assign(valid, false).break());
                if (min === 1)
                    gen.assign(valid, true);
                else
                    gen.if(codegen_1._ `${count} >= ${min}`, () => gen.assign(valid, true));
            }
        }
    },
};
exports["default"] = def;
//# sourceMappingURL=contains.js.map

/***/ }),

/***/ 3846:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.validateSchemaDeps = exports.validatePropertyDeps = exports.error = void 0;
const codegen_1 = __webpack_require__(78462);
const util_1 = __webpack_require__(7007);
const code_1 = __webpack_require__(38956);
exports.error = {
    message: ({ params: { property, depsCount, deps } }) => {
        const property_ies = depsCount === 1 ? "property" : "properties";
        return codegen_1.str `should have ${property_ies} ${deps} when property ${property} is present`;
    },
    params: ({ params: { property, depsCount, deps, missingProperty } }) => codegen_1._ `{property: ${property},
    missingProperty: ${missingProperty},
    depsCount: ${depsCount},
    deps: ${deps}}`, // TODO change to reference
};
const def = {
    keyword: "dependencies",
    type: "object",
    schemaType: "object",
    error: exports.error,
    code(cxt) {
        const [propDeps, schDeps] = splitDependencies(cxt);
        validatePropertyDeps(cxt, propDeps);
        validateSchemaDeps(cxt, schDeps);
    },
};
function splitDependencies({ schema }) {
    const propertyDeps = {};
    const schemaDeps = {};
    for (const key in schema) {
        if (key === "__proto__")
            continue;
        const deps = Array.isArray(schema[key]) ? propertyDeps : schemaDeps;
        deps[key] = schema[key];
    }
    return [propertyDeps, schemaDeps];
}
function validatePropertyDeps(cxt, propertyDeps = cxt.schema) {
    const { gen, data, it } = cxt;
    if (Object.keys(propertyDeps).length === 0)
        return;
    const missing = gen.let("missing");
    for (const prop in propertyDeps) {
        const deps = propertyDeps[prop];
        if (deps.length === 0)
            continue;
        const hasProperty = code_1.propertyInData(gen, data, prop, it.opts.ownProperties);
        cxt.setParams({
            property: prop,
            depsCount: deps.length,
            deps: deps.join(", "),
        });
        if (it.allErrors) {
            gen.if(hasProperty, () => {
                for (const depProp of deps) {
                    code_1.checkReportMissingProp(cxt, depProp);
                }
            });
        }
        else {
            gen.if(codegen_1._ `${hasProperty} && (${code_1.checkMissingProp(cxt, deps, missing)})`);
            code_1.reportMissingProp(cxt, missing);
            gen.else();
        }
    }
}
exports.validatePropertyDeps = validatePropertyDeps;
function validateSchemaDeps(cxt, schemaDeps = cxt.schema) {
    const { gen, data, keyword, it } = cxt;
    const valid = gen.name("valid");
    for (const prop in schemaDeps) {
        if (util_1.alwaysValidSchema(it, schemaDeps[prop]))
            continue;
        gen.if(code_1.propertyInData(gen, data, prop, it.opts.ownProperties), () => {
            const schCxt = cxt.subschema({ keyword, schemaProp: prop }, valid);
            cxt.mergeValidEvaluated(schCxt, valid);
        }, () => gen.var(valid, true) // TODO var
        );
        cxt.ok(valid);
    }
}
exports.validateSchemaDeps = validateSchemaDeps;
exports["default"] = def;
//# sourceMappingURL=dependencies.js.map

/***/ }),

/***/ 41474:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const codegen_1 = __webpack_require__(78462);
const util_1 = __webpack_require__(7007);
const validate_1 = __webpack_require__(76192);
const error = {
    message: ({ params }) => codegen_1.str `should match "${params.ifClause}" schema`,
    params: ({ params }) => codegen_1._ `{failingKeyword: ${params.ifClause}}`,
};
const def = {
    keyword: "if",
    schemaType: ["object", "boolean"],
    trackErrors: true,
    error,
    code(cxt) {
        const { gen, parentSchema, it } = cxt;
        if (parentSchema.then === undefined && parentSchema.else === undefined) {
            validate_1.checkStrictMode(it, '"if" without "then" and "else" is ignored');
        }
        const hasThen = hasSchema(it, "then");
        const hasElse = hasSchema(it, "else");
        if (!hasThen && !hasElse)
            return;
        const valid = gen.let("valid", true);
        const schValid = gen.name("_valid");
        validateIf();
        cxt.reset();
        if (hasThen && hasElse) {
            const ifClause = gen.let("ifClause");
            cxt.setParams({ ifClause });
            gen.if(schValid, validateClause("then", ifClause), validateClause("else", ifClause));
        }
        else if (hasThen) {
            gen.if(schValid, validateClause("then"));
        }
        else {
            gen.if(codegen_1.not(schValid), validateClause("else"));
        }
        cxt.pass(valid, () => cxt.error(true));
        function validateIf() {
            const schCxt = cxt.subschema({
                keyword: "if",
                compositeRule: true,
                createErrors: false,
                allErrors: false,
            }, schValid);
            cxt.mergeEvaluated(schCxt);
        }
        function validateClause(keyword, ifClause) {
            return () => {
                const schCxt = cxt.subschema({ keyword }, schValid);
                gen.assign(valid, schValid);
                cxt.mergeValidEvaluated(schCxt, valid);
                if (ifClause)
                    gen.assign(ifClause, codegen_1._ `${keyword}`);
                else
                    cxt.setParams({ ifClause: keyword });
            };
        }
    },
};
function hasSchema(it, keyword) {
    const schema = it.schema[keyword];
    return schema !== undefined && !util_1.alwaysValidSchema(it, schema);
}
exports["default"] = def;
//# sourceMappingURL=if.js.map

/***/ }),

/***/ 40867:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const additionalItems_1 = __webpack_require__(91717);
const items_1 = __webpack_require__(8401);
const contains_1 = __webpack_require__(24837);
const dependencies_1 = __webpack_require__(3846);
const propertyNames_1 = __webpack_require__(39541);
const additionalProperties_1 = __webpack_require__(46940);
const properties_1 = __webpack_require__(21503);
const patternProperties_1 = __webpack_require__(34540);
const not_1 = __webpack_require__(40243);
const anyOf_1 = __webpack_require__(81975);
const oneOf_1 = __webpack_require__(28746);
const allOf_1 = __webpack_require__(41450);
const if_1 = __webpack_require__(41474);
const thenElse_1 = __webpack_require__(36754);
const applicator = [
    // any
    not_1.default,
    anyOf_1.default,
    oneOf_1.default,
    allOf_1.default,
    if_1.default,
    thenElse_1.default,
    // array
    additionalItems_1.default,
    items_1.default,
    contains_1.default,
    // object
    propertyNames_1.default,
    additionalProperties_1.default,
    dependencies_1.default,
    properties_1.default,
    patternProperties_1.default,
];
exports["default"] = applicator;
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 8401:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const codegen_1 = __webpack_require__(78462);
const util_1 = __webpack_require__(7007);
const validate_1 = __webpack_require__(76192);
const code_1 = __webpack_require__(38956);
const def = {
    keyword: "items",
    type: "array",
    schemaType: ["object", "array", "boolean"],
    before: "uniqueItems",
    code(cxt) {
        const { gen, schema, it } = cxt;
        if (Array.isArray(schema)) {
            if (it.opts.unevaluated && schema.length && it.items !== true) {
                it.items = util_1.mergeEvaluated.items(gen, schema.length, it.items);
            }
            validateTuple(schema);
        }
        else {
            it.items = true;
            if (util_1.alwaysValidSchema(it, schema))
                return;
            cxt.ok(code_1.validateArray(cxt));
        }
        function validateTuple(schArr) {
            const { parentSchema, data } = cxt;
            if (it.opts.strictTuples && !fullTupleSchema(schArr.length, parentSchema)) {
                const msg = `"items" is ${schArr.length}-tuple, but minItems or maxItems/additionalItems are not specified or different`;
                validate_1.checkStrictMode(it, msg, it.opts.strictTuples);
            }
            const valid = gen.name("valid");
            const len = gen.const("len", codegen_1._ `${data}.length`);
            schArr.forEach((sch, i) => {
                if (util_1.alwaysValidSchema(it, sch))
                    return;
                gen.if(codegen_1._ `${len} > ${i}`, () => cxt.subschema({
                    keyword: "items",
                    schemaProp: i,
                    dataProp: i,
                }, valid));
                cxt.ok(valid);
            });
        }
    },
};
function fullTupleSchema(len, sch) {
    return len === sch.minItems && (len === sch.maxItems || sch.additionalItems === false);
}
exports["default"] = def;
//# sourceMappingURL=items.js.map

/***/ }),

/***/ 40243:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const util_1 = __webpack_require__(7007);
const def = {
    keyword: "not",
    schemaType: ["object", "boolean"],
    trackErrors: true,
    code(cxt) {
        const { gen, schema, it } = cxt;
        if (util_1.alwaysValidSchema(it, schema)) {
            cxt.fail();
            return;
        }
        const valid = gen.name("valid");
        cxt.subschema({
            keyword: "not",
            compositeRule: true,
            createErrors: false,
            allErrors: false,
        }, valid);
        cxt.result(valid, () => cxt.error(), () => cxt.reset());
    },
    error: {
        message: "should NOT be valid",
    },
};
exports["default"] = def;
//# sourceMappingURL=not.js.map

/***/ }),

/***/ 28746:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const codegen_1 = __webpack_require__(78462);
const util_1 = __webpack_require__(7007);
const error = {
    message: "should match exactly one schema in oneOf",
    params: ({ params }) => codegen_1._ `{passingSchemas: ${params.passing}}`,
};
const def = {
    keyword: "oneOf",
    schemaType: "array",
    trackErrors: true,
    error,
    code(cxt) {
        const { gen, schema, it } = cxt;
        /* istanbul ignore if */
        if (!Array.isArray(schema))
            throw new Error("ajv implementation error");
        const schArr = schema;
        const valid = gen.let("valid", false);
        const passing = gen.let("passing", null);
        const schValid = gen.name("_valid");
        cxt.setParams({ passing });
        // TODO possibly fail straight away (with warning or exception) if there are two empty always valid schemas
        gen.block(validateOneOf);
        cxt.result(valid, () => cxt.reset(), () => cxt.error(true));
        function validateOneOf() {
            schArr.forEach((sch, i) => {
                let schCxt;
                if (util_1.alwaysValidSchema(it, sch)) {
                    gen.var(schValid, true);
                }
                else {
                    schCxt = cxt.subschema({
                        keyword: "oneOf",
                        schemaProp: i,
                        compositeRule: true,
                    }, schValid);
                }
                if (i > 0) {
                    gen
                        .if(codegen_1._ `${schValid} && ${valid}`)
                        .assign(valid, false)
                        .assign(passing, codegen_1._ `[${passing}, ${i}]`)
                        .else();
                }
                gen.if(schValid, () => {
                    gen.assign(valid, true);
                    gen.assign(passing, i);
                    if (schCxt)
                        cxt.mergeEvaluated(schCxt, codegen_1.Name);
                });
            });
        }
    },
};
exports["default"] = def;
//# sourceMappingURL=oneOf.js.map

/***/ }),

/***/ 34540:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const code_1 = __webpack_require__(38956);
const codegen_1 = __webpack_require__(78462);
const subschema_1 = __webpack_require__(60632);
const validate_1 = __webpack_require__(76192);
const util_1 = __webpack_require__(7007);
const def = {
    keyword: "patternProperties",
    type: "object",
    schemaType: "object",
    code(cxt) {
        const { gen, schema, data, parentSchema, it } = cxt;
        const { opts } = it;
        const patterns = code_1.schemaProperties(it, schema);
        // TODO mark properties matching patterns with always valid schemas as evaluated
        if (patterns.length === 0)
            return;
        const checkProperties = opts.strict && !opts.allowMatchingProperties && parentSchema.properties;
        const valid = gen.name("valid");
        if (it.props !== true && !(it.props instanceof codegen_1.Name)) {
            it.props = util_1.evaluatedPropsToName(gen, it.props);
        }
        const { props } = it;
        validatePatternProperties();
        function validatePatternProperties() {
            for (const pat of patterns) {
                if (checkProperties)
                    checkMatchingProperties(pat);
                if (it.allErrors) {
                    validateProperties(pat);
                }
                else {
                    gen.var(valid, true); // TODO var
                    validateProperties(pat);
                    gen.if(valid);
                }
            }
        }
        function checkMatchingProperties(pat) {
            for (const prop in checkProperties) {
                if (new RegExp(pat).test(prop)) {
                    validate_1.checkStrictMode(it, `property ${prop} matches pattern ${pat} (use allowMatchingProperties)`);
                }
            }
        }
        function validateProperties(pat) {
            gen.forIn("key", data, (key) => {
                gen.if(codegen_1._ `${code_1.usePattern(gen, pat)}.test(${key})`, () => {
                    cxt.subschema({
                        keyword: "patternProperties",
                        schemaProp: pat,
                        dataProp: key,
                        dataPropType: subschema_1.Type.Str,
                    }, valid);
                    if (it.opts.unevaluated && props !== true) {
                        gen.assign(codegen_1._ `${props}[${key}]`, true);
                    }
                    else if (!it.allErrors) {
                        // can short-circuit if `unevaluatedProperties` is not supported (opts.next === false)
                        // or if all properties were evaluated (props === true)
                        gen.if(codegen_1.not(valid), () => gen.break());
                    }
                });
            });
        }
    },
};
exports["default"] = def;
//# sourceMappingURL=patternProperties.js.map

/***/ }),

/***/ 21503:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const context_1 = __webpack_require__(65233);
const code_1 = __webpack_require__(38956);
const util_1 = __webpack_require__(7007);
const additionalProperties_1 = __webpack_require__(46940);
const def = {
    keyword: "properties",
    type: "object",
    schemaType: "object",
    code(cxt) {
        const { gen, schema, parentSchema, data, it } = cxt;
        if (it.opts.removeAdditional === "all" && parentSchema.additionalProperties === undefined) {
            additionalProperties_1.default.code(new context_1.default(it, additionalProperties_1.default, "additionalProperties"));
        }
        const allProps = code_1.allSchemaProperties(schema);
        for (const prop of allProps) {
            it.definedProperties.add(prop);
        }
        if (it.opts.unevaluated && allProps.length && it.props !== true) {
            it.props = util_1.mergeEvaluated.props(gen, util_1.toHash(allProps), it.props);
        }
        const properties = allProps.filter((p) => !util_1.alwaysValidSchema(it, schema[p]));
        if (properties.length === 0)
            return;
        const valid = gen.name("valid");
        for (const prop of properties) {
            if (hasDefault(prop)) {
                applyPropertySchema(prop);
            }
            else {
                gen.if(code_1.propertyInData(gen, data, prop, it.opts.ownProperties));
                applyPropertySchema(prop);
                if (!it.allErrors)
                    gen.else().var(valid, true);
                gen.endIf();
            }
            cxt.it.definedProperties.add(prop);
            cxt.ok(valid);
        }
        function hasDefault(prop) {
            return it.opts.useDefaults && !it.compositeRule && schema[prop].default !== undefined;
        }
        function applyPropertySchema(prop) {
            cxt.subschema({
                keyword: "properties",
                schemaProp: prop,
                dataProp: prop,
            }, valid);
        }
    },
};
exports["default"] = def;
//# sourceMappingURL=properties.js.map

/***/ }),

/***/ 39541:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const codegen_1 = __webpack_require__(78462);
const util_1 = __webpack_require__(7007);
const error = {
    message: ({ params }) => codegen_1.str `property name '${params.propertyName}' is invalid`,
    params: ({ params }) => codegen_1._ `{propertyName: ${params.propertyName}}`,
};
const def = {
    keyword: "propertyNames",
    type: "object",
    schemaType: ["object", "boolean"],
    error,
    code(cxt) {
        const { gen, schema, data, it } = cxt;
        if (util_1.alwaysValidSchema(it, schema))
            return;
        const valid = gen.name("valid");
        gen.forIn("key", data, (key) => {
            cxt.setParams({ propertyName: key });
            cxt.subschema({
                keyword: "propertyNames",
                data: key,
                dataTypes: ["string"],
                propertyName: key,
                compositeRule: true,
            }, valid);
            gen.if(codegen_1.not(valid), () => {
                cxt.error(true);
                if (!it.allErrors)
                    gen.break();
            });
        });
        cxt.ok(valid);
    },
};
exports["default"] = def;
//# sourceMappingURL=propertyNames.js.map

/***/ }),

/***/ 36754:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const validate_1 = __webpack_require__(76192);
const def = {
    keyword: ["then", "else"],
    schemaType: ["object", "boolean"],
    code({ keyword, parentSchema, it }) {
        if (parentSchema.if === undefined)
            validate_1.checkStrictMode(it, `"${keyword}" without "if" is ignored`);
    },
};
exports["default"] = def;
//# sourceMappingURL=thenElse.js.map

/***/ }),

/***/ 38956:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.validateUnion = exports.validateArray = exports.usePattern = exports.callValidateCode = exports.schemaProperties = exports.allSchemaProperties = exports.noPropertyInData = exports.propertyInData = exports.isOwnProperty = exports.hasPropFunc = exports.reportMissingProp = exports.checkMissingProp = exports.checkReportMissingProp = void 0;
const codegen_1 = __webpack_require__(78462);
const util_1 = __webpack_require__(7007);
const subschema_1 = __webpack_require__(60632);
const names_1 = __webpack_require__(53873);
function checkReportMissingProp(cxt, prop) {
    const { gen, data, it } = cxt;
    gen.if(noPropertyInData(gen, data, prop, it.opts.ownProperties), () => {
        cxt.setParams({ missingProperty: codegen_1._ `${prop}` }, true);
        cxt.error();
    });
}
exports.checkReportMissingProp = checkReportMissingProp;
function checkMissingProp({ gen, data, it: { opts } }, properties, missing) {
    return codegen_1.or(...properties.map((prop) => codegen_1.and(noPropertyInData(gen, data, prop, opts.ownProperties), codegen_1._ `${missing} = ${prop}`)));
}
exports.checkMissingProp = checkMissingProp;
function reportMissingProp(cxt, missing) {
    cxt.setParams({ missingProperty: missing }, true);
    cxt.error();
}
exports.reportMissingProp = reportMissingProp;
function hasPropFunc(gen) {
    return gen.scopeValue("func", {
        // eslint-disable-next-line @typescript-eslint/unbound-method
        ref: Object.prototype.hasOwnProperty,
        code: codegen_1._ `Object.prototype.hasOwnProperty`,
    });
}
exports.hasPropFunc = hasPropFunc;
function isOwnProperty(gen, data, property) {
    return codegen_1._ `${hasPropFunc(gen)}.call(${data}, ${property})`;
}
exports.isOwnProperty = isOwnProperty;
function propertyInData(gen, data, property, ownProperties) {
    const cond = codegen_1._ `${data}${codegen_1.getProperty(property)} !== undefined`;
    return ownProperties ? codegen_1._ `${cond} && ${isOwnProperty(gen, data, property)}` : cond;
}
exports.propertyInData = propertyInData;
function noPropertyInData(gen, data, property, ownProperties) {
    const cond = codegen_1._ `${data}${codegen_1.getProperty(property)} === undefined`;
    return ownProperties ? codegen_1.or(cond, codegen_1.not(isOwnProperty(gen, data, property))) : cond;
}
exports.noPropertyInData = noPropertyInData;
function allSchemaProperties(schemaMap) {
    return schemaMap ? Object.keys(schemaMap).filter((p) => p !== "__proto__") : [];
}
exports.allSchemaProperties = allSchemaProperties;
function schemaProperties(it, schemaMap) {
    return allSchemaProperties(schemaMap).filter((p) => !util_1.alwaysValidSchema(it, schemaMap[p]));
}
exports.schemaProperties = schemaProperties;
function callValidateCode({ schemaCode, data, it: { gen, topSchemaRef, schemaPath, errorPath }, it }, func, context, passSchema) {
    const dataAndSchema = passSchema ? codegen_1._ `${schemaCode}, ${data}, ${topSchemaRef}${schemaPath}` : data;
    const valCxt = [
        [names_1.default.dataPath, codegen_1.strConcat(names_1.default.dataPath, errorPath)],
        [names_1.default.parentData, it.parentData],
        [names_1.default.parentDataProperty, it.parentDataProperty],
        [names_1.default.rootData, names_1.default.rootData],
    ];
    if (it.opts.dynamicRef)
        valCxt.push([names_1.default.dynamicAnchors, names_1.default.dynamicAnchors]);
    const args = codegen_1._ `${dataAndSchema}, ${gen.object(...valCxt)}`;
    return context !== codegen_1.nil ? codegen_1._ `${func}.call(${context}, ${args})` : codegen_1._ `${func}(${args})`;
}
exports.callValidateCode = callValidateCode;
function usePattern(gen, pattern) {
    return gen.scopeValue("pattern", {
        key: pattern,
        ref: new RegExp(pattern, "u"),
        code: codegen_1._ `new RegExp(${pattern}, "u")`,
    });
}
exports.usePattern = usePattern;
function validateArray(cxt) {
    const { gen, data, keyword, it } = cxt;
    const valid = gen.name("valid");
    if (it.allErrors) {
        const validArr = gen.let("valid", true);
        validateItems(() => gen.assign(validArr, false));
        return validArr;
    }
    gen.var(valid, true);
    validateItems(() => gen.break());
    return valid;
    function validateItems(notValid) {
        const len = gen.const("len", codegen_1._ `${data}.length`);
        gen.forRange("i", 0, len, (i) => {
            cxt.subschema({
                keyword,
                dataProp: i,
                dataPropType: subschema_1.Type.Num,
            }, valid);
            gen.if(codegen_1.not(valid), notValid);
        });
    }
}
exports.validateArray = validateArray;
function validateUnion(cxt) {
    const { gen, schema, keyword, it } = cxt;
    /* istanbul ignore if */
    if (!Array.isArray(schema))
        throw new Error("ajv implementation error");
    const alwaysValid = schema.some((sch) => util_1.alwaysValidSchema(it, sch));
    if (alwaysValid && !it.opts.unevaluated)
        return;
    const valid = gen.let("valid", false);
    const schValid = gen.name("_valid");
    gen.block(() => schema.forEach((_sch, i) => {
        const schCxt = cxt.subschema({
            keyword,
            schemaProp: i,
            compositeRule: true,
        }, schValid);
        gen.assign(valid, codegen_1._ `${valid} || ${schValid}`);
        const merged = cxt.mergeValidEvaluated(schCxt, schValid);
        // can short-circuit if `unevaluatedProperties/Items` not supported (opts.unevaluated !== true)
        // or if all properties and items were evaluated (it.props === true && it.items === true)
        if (!merged)
            gen.if(codegen_1.not(valid));
    }));
    cxt.result(valid, () => cxt.reset(), () => cxt.error(true));
}
exports.validateUnion = validateUnion;
//# sourceMappingURL=code.js.map

/***/ }),

/***/ 74883:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const def = {
    keyword: "id",
    code() {
        throw new Error('NOT SUPPORTED: keyword "id", use "$id" for schema ID');
    },
};
exports["default"] = def;
//# sourceMappingURL=id.js.map

/***/ }),

/***/ 58781:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const id_1 = __webpack_require__(74883);
const ref_1 = __webpack_require__(92325);
const core = [
    "$schema",
    "$id",
    "$defs",
    "$vocabulary",
    { keyword: "$comment" },
    "definitions",
    id_1.default,
    ref_1.default,
];
exports["default"] = core;
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 92325:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.callRef = exports.getValidate = void 0;
const error_classes_1 = __webpack_require__(97938);
const code_1 = __webpack_require__(38956);
const codegen_1 = __webpack_require__(78462);
const names_1 = __webpack_require__(53873);
const compile_1 = __webpack_require__(19092);
const util_1 = __webpack_require__(7007);
const def = {
    keyword: "$ref",
    schemaType: "string",
    code(cxt) {
        const { gen, schema, it } = cxt;
        const { baseId, schemaEnv: env, validateName, opts, self } = it;
        // TODO See comment in dynamicRef.ts
        // This has to be improved to resolve #815.
        if (schema === "#" || schema === "#/")
            return callRootRef();
        const schOrEnv = compile_1.resolveRef.call(self, env.root, baseId, schema);
        if (schOrEnv === undefined)
            throw new error_classes_1.MissingRefError(baseId, schema);
        if (schOrEnv instanceof compile_1.SchemaEnv)
            return callValidate(schOrEnv);
        return inlineRefSchema(schOrEnv);
        function callRootRef() {
            if (env === env.root)
                return callRef(cxt, validateName, env, env.$async);
            const rootName = gen.scopeValue("root", { ref: env.root });
            return callRef(cxt, codegen_1._ `${rootName}.validate`, env.root, env.root.$async);
        }
        function callValidate(sch) {
            const v = getValidate(cxt, sch);
            callRef(cxt, v, sch, sch.$async);
        }
        function inlineRefSchema(sch) {
            const schName = gen.scopeValue("schema", opts.code.source === true ? { ref: sch, code: codegen_1.stringify(sch) } : { ref: sch });
            const valid = gen.name("valid");
            const schCxt = cxt.subschema({
                schema: sch,
                dataTypes: [],
                schemaPath: codegen_1.nil,
                topSchemaRef: schName,
                errSchemaPath: schema,
            }, valid);
            cxt.mergeEvaluated(schCxt);
            cxt.ok(valid);
        }
    },
};
function getValidate(cxt, sch) {
    const { gen } = cxt;
    return sch.validate
        ? gen.scopeValue("validate", { ref: sch.validate })
        : codegen_1._ `${gen.scopeValue("wrapper", { ref: sch })}.validate`;
}
exports.getValidate = getValidate;
function callRef(cxt, v, sch, $async) {
    const { gen, it } = cxt;
    const { allErrors, schemaEnv: env, opts } = it;
    const passCxt = opts.passContext ? names_1.default.this : codegen_1.nil;
    if ($async)
        callAsyncRef();
    else
        callSyncRef();
    function callAsyncRef() {
        if (!env.$async)
            throw new Error("async schema referenced by sync schema");
        const valid = gen.let("valid");
        gen.try(() => {
            gen.code(codegen_1._ `await ${code_1.callValidateCode(cxt, v, passCxt)}`);
            addEvaluatedFrom(v); // TODO will not work with async, it has to be returned with the result
            if (!allErrors)
                gen.assign(valid, true);
        }, (e) => {
            gen.if(codegen_1._ `!(${e} instanceof ${it.ValidationError})`, () => gen.throw(e));
            addErrorsFrom(e);
            if (!allErrors)
                gen.assign(valid, false);
        });
        cxt.ok(valid);
    }
    function callSyncRef() {
        cxt.result(code_1.callValidateCode(cxt, v, passCxt), () => addEvaluatedFrom(v), () => addErrorsFrom(v));
    }
    function addErrorsFrom(source) {
        const errs = codegen_1._ `${source}.errors`;
        gen.assign(names_1.default.vErrors, codegen_1._ `${names_1.default.vErrors} === null ? ${errs} : ${names_1.default.vErrors}.concat(${errs})`); // TODO tagged
        gen.assign(names_1.default.errors, codegen_1._ `${names_1.default.vErrors}.length`);
    }
    function addEvaluatedFrom(source) {
        var _a;
        if (!it.opts.unevaluated)
            return;
        const schEvaluated = (_a = sch === null || sch === void 0 ? void 0 : sch.validate) === null || _a === void 0 ? void 0 : _a.evaluated;
        // TODO refactor
        if (it.props !== true) {
            if (schEvaluated && !schEvaluated.dynamicProps) {
                if (schEvaluated.props !== undefined) {
                    it.props = util_1.mergeEvaluated.props(gen, schEvaluated.props, it.props);
                }
            }
            else {
                const props = gen.var("props", codegen_1._ `${source}.evaluated.props`);
                it.props = util_1.mergeEvaluated.props(gen, props, it.props, codegen_1.Name);
            }
        }
        if (it.items !== true) {
            if (schEvaluated && !schEvaluated.dynamicItems) {
                if (schEvaluated.items !== undefined) {
                    it.items = util_1.mergeEvaluated.items(gen, schEvaluated.items, it.items);
                }
            }
            else {
                const items = gen.var("items", codegen_1._ `${source}.evaluated.items`);
                it.items = util_1.mergeEvaluated.items(gen, items, it.items, codegen_1.Name);
            }
        }
    }
}
exports.callRef = callRef;
exports["default"] = def;
//# sourceMappingURL=ref.js.map

/***/ }),

/***/ 28978:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const core_1 = __webpack_require__(58781);
const validation_1 = __webpack_require__(88485);
const applicator_1 = __webpack_require__(40867);
const format_1 = __webpack_require__(86435);
const metadata_1 = __webpack_require__(98698);
const draft7Vocabularies = [
    core_1.default,
    validation_1.default,
    applicator_1.default,
    format_1.default,
    metadata_1.metadataVocabulary,
    metadata_1.contentVocabulary,
];
exports["default"] = draft7Vocabularies;
//# sourceMappingURL=draft7.js.map

/***/ }),

/***/ 90271:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const codegen_1 = __webpack_require__(78462);
const error = {
    message: ({ schemaCode }) => codegen_1.str `should match format "${schemaCode}"`,
    params: ({ schemaCode }) => codegen_1._ `{format: ${schemaCode}}`,
};
const def = {
    keyword: "format",
    type: ["number", "string"],
    schemaType: "string",
    $data: true,
    error,
    code(cxt, ruleType) {
        const { gen, data, $data, schema, schemaCode, it } = cxt;
        const { opts, errSchemaPath, schemaEnv, self } = it;
        if (!opts.validateFormats)
            return;
        if ($data)
            validate$DataFormat();
        else
            validateFormat();
        function validate$DataFormat() {
            const fmts = gen.scopeValue("formats", {
                ref: self.formats,
                code: opts.code.formats,
            });
            const fDef = gen.const("fDef", codegen_1._ `${fmts}[${schemaCode}]`);
            const fType = gen.let("fType");
            const format = gen.let("format");
            // TODO simplify
            gen.if(codegen_1._ `typeof ${fDef} == "object" && !(${fDef} instanceof RegExp)`, () => gen.assign(fType, codegen_1._ `${fDef}.type || "string"`).assign(format, codegen_1._ `${fDef}.validate`), () => gen.assign(fType, codegen_1._ `"string"`).assign(format, fDef));
            cxt.fail$data(codegen_1.or(unknownFmt(), invalidFmt()));
            function unknownFmt() {
                if (opts.strict === false)
                    return codegen_1.nil;
                return codegen_1._ `${schemaCode} && !${format}`;
            }
            function invalidFmt() {
                const callFormat = schemaEnv.$async
                    ? codegen_1._ `(${fDef}.async ? await ${format}(${data}) : ${format}(${data}))`
                    : codegen_1._ `${format}(${data})`;
                const validData = codegen_1._ `(typeof ${format} == "function" ? ${callFormat} : ${format}.test(${data}))`;
                return codegen_1._ `${format} && ${format} !== true && ${fType} === ${ruleType} && !${validData}`;
            }
        }
        function validateFormat() {
            const formatDef = self.formats[schema];
            if (!formatDef) {
                unknownFormat();
                return;
            }
            if (formatDef === true)
                return;
            const [fmtType, format, fmtRef] = getFormat(formatDef);
            if (fmtType === ruleType)
                cxt.pass(validCondition());
            function unknownFormat() {
                if (opts.strict === false) {
                    self.logger.warn(unknownMsg());
                    return;
                }
                throw new Error(unknownMsg());
                function unknownMsg() {
                    return `unknown format "${schema}" ignored in schema at path "${errSchemaPath}"`;
                }
            }
            function getFormat(fmtDef) {
                const fmt = gen.scopeValue("formats", {
                    key: schema,
                    ref: fmtDef,
                    code: opts.code.formats ? codegen_1._ `${opts.code.formats}${codegen_1.getProperty(schema)}` : undefined,
                });
                if (typeof fmtDef == "object" && !(fmtDef instanceof RegExp)) {
                    return [fmtDef.type || "string", fmtDef.validate, codegen_1._ `${fmt}.validate`];
                }
                return ["string", fmtDef, fmt];
            }
            function validCondition() {
                if (typeof formatDef == "object" && !(formatDef instanceof RegExp) && formatDef.async) {
                    if (!schemaEnv.$async)
                        throw new Error("async format in sync schema");
                    return codegen_1._ `await ${fmtRef}(${data})`;
                }
                return typeof format == "function" ? codegen_1._ `${fmtRef}(${data})` : codegen_1._ `${fmtRef}.test(${data})`;
            }
        }
    },
};
exports["default"] = def;
//# sourceMappingURL=format.js.map

/***/ }),

/***/ 86435:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const format_1 = __webpack_require__(90271);
const format = [format_1.default];
exports["default"] = format;
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 98698:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.contentVocabulary = exports.metadataVocabulary = void 0;
exports.metadataVocabulary = [
    "title",
    "description",
    "default",
    "deprecated",
    "readOnly",
    "writeOnly",
    "examples",
];
exports.contentVocabulary = [
    "contentMediaType",
    "contentEncoding",
    "contentSchema",
];
//# sourceMappingURL=metadata.js.map

/***/ }),

/***/ 35725:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const codegen_1 = __webpack_require__(78462);
const equal = __webpack_require__(1505);
const error = {
    message: "should be equal to constant",
    params: ({ schemaCode }) => codegen_1._ `{allowedValue: ${schemaCode}}`,
};
const def = {
    keyword: "const",
    $data: true,
    error,
    code(cxt) {
        const eql = cxt.gen.scopeValue("func", {
            ref: equal,
            code: codegen_1._ `require("ajv/dist/compile/equal")`,
        });
        // TODO optimize for scalar values in schema
        cxt.fail$data(codegen_1._ `!${eql}(${cxt.data}, ${cxt.schemaCode})`);
    },
};
exports["default"] = def;
//# sourceMappingURL=const.js.map

/***/ }),

/***/ 96214:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const codegen_1 = __webpack_require__(78462);
const equal = __webpack_require__(1505);
const error = {
    message: "should be equal to one of the allowed values",
    params: ({ schemaCode }) => codegen_1._ `{allowedValues: ${schemaCode}}`,
};
const def = {
    keyword: "enum",
    schemaType: "array",
    $data: true,
    error,
    code(cxt) {
        const { gen, data, $data, schema, schemaCode, it } = cxt;
        if (!$data && schema.length === 0)
            throw new Error("enum must have non-empty array");
        const useLoop = schema.length >= it.opts.loopEnum;
        const eql = cxt.gen.scopeValue("func", {
            ref: equal,
            code: codegen_1._ `require("ajv/dist/compile/equal")`,
        });
        let valid;
        if (useLoop || $data) {
            valid = gen.let("valid");
            cxt.block$data(valid, loopEnum);
        }
        else {
            /* istanbul ignore if */
            if (!Array.isArray(schema))
                throw new Error("ajv implementation error");
            const vSchema = gen.const("vSchema", schemaCode);
            valid = codegen_1.or(...schema.map((_x, i) => equalCode(vSchema, i)));
        }
        cxt.pass(valid);
        function loopEnum() {
            gen.assign(valid, false);
            gen.forOf("v", schemaCode, (v) => gen.if(codegen_1._ `${eql}(${data}, ${v})`, () => gen.assign(valid, true).break()));
        }
        function equalCode(vSchema, i) {
            const sch = schema[i];
            return sch && typeof sch === "object"
                ? codegen_1._ `${eql}(${data}, ${vSchema}[${i}])`
                : codegen_1._ `${data} === ${sch}`;
        }
    },
};
exports["default"] = def;
//# sourceMappingURL=enum.js.map

/***/ }),

/***/ 88485:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const limitNumber_1 = __webpack_require__(82544);
const multipleOf_1 = __webpack_require__(39639);
const limitLength_1 = __webpack_require__(71726);
const pattern_1 = __webpack_require__(24652);
const limitProperties_1 = __webpack_require__(23673);
const required_1 = __webpack_require__(64135);
const limitItems_1 = __webpack_require__(47112);
const uniqueItems_1 = __webpack_require__(26387);
const const_1 = __webpack_require__(35725);
const enum_1 = __webpack_require__(96214);
const validation = [
    // number
    limitNumber_1.default,
    multipleOf_1.default,
    // string
    limitLength_1.default,
    pattern_1.default,
    // object
    limitProperties_1.default,
    required_1.default,
    // array
    limitItems_1.default,
    uniqueItems_1.default,
    // any
    { keyword: "type", schemaType: ["string", "array"] },
    { keyword: "nullable", schemaType: "boolean" },
    const_1.default,
    enum_1.default,
];
exports["default"] = validation;
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 47112:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const codegen_1 = __webpack_require__(78462);
const error = {
    message({ keyword, schemaCode }) {
        const comp = keyword === "maxItems" ? "more" : "fewer";
        return codegen_1.str `should NOT have ${comp} than ${schemaCode} items`;
    },
    params: ({ schemaCode }) => codegen_1._ `{limit: ${schemaCode}}`,
};
const def = {
    keyword: ["maxItems", "minItems"],
    type: "array",
    schemaType: "number",
    $data: true,
    error,
    code(cxt) {
        const { keyword, data, schemaCode } = cxt;
        const op = keyword === "maxItems" ? codegen_1.operators.GT : codegen_1.operators.LT;
        cxt.fail$data(codegen_1._ `${data}.length ${op} ${schemaCode}`);
    },
};
exports["default"] = def;
//# sourceMappingURL=limitItems.js.map

/***/ }),

/***/ 71726:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const codegen_1 = __webpack_require__(78462);
const ucs2length_1 = __webpack_require__(98510);
const error = {
    message({ keyword, schemaCode }) {
        const comp = keyword === "maxLength" ? "more" : "fewer";
        return codegen_1.str `should NOT have ${comp} than ${schemaCode} characters`;
    },
    params: ({ schemaCode }) => codegen_1._ `{limit: ${schemaCode}}`,
};
const def = {
    keyword: ["maxLength", "minLength"],
    type: "string",
    schemaType: "number",
    $data: true,
    error,
    code(cxt) {
        const { keyword, data, schemaCode, it } = cxt;
        const op = keyword === "maxLength" ? codegen_1.operators.GT : codegen_1.operators.LT;
        let len;
        if (it.opts.unicode === false) {
            len = codegen_1._ `${data}.length`;
        }
        else {
            const u2l = cxt.gen.scopeValue("func", {
                ref: ucs2length_1.default,
                code: codegen_1._ `require("ajv/dist/compile/ucs2length").default`,
            });
            len = codegen_1._ `${u2l}(${data})`;
        }
        cxt.fail$data(codegen_1._ `${len} ${op} ${schemaCode}`);
    },
};
exports["default"] = def;
//# sourceMappingURL=limitLength.js.map

/***/ }),

/***/ 82544:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const codegen_1 = __webpack_require__(78462);
const ops = codegen_1.operators;
const KWDs = {
    maximum: { okStr: "<=", ok: ops.LTE, fail: ops.GT },
    minimum: { okStr: ">=", ok: ops.GTE, fail: ops.LT },
    exclusiveMaximum: { okStr: "<", ok: ops.LT, fail: ops.GTE },
    exclusiveMinimum: { okStr: ">", ok: ops.GT, fail: ops.LTE },
};
const error = {
    message: ({ keyword, schemaCode }) => codegen_1.str `should be ${KWDs[keyword].okStr} ${schemaCode}`,
    params: ({ keyword, schemaCode }) => codegen_1._ `{comparison: ${KWDs[keyword].okStr}, limit: ${schemaCode}}`,
};
const def = {
    keyword: Object.keys(KWDs),
    type: "number",
    schemaType: "number",
    $data: true,
    error,
    code(cxt) {
        const { keyword, data, schemaCode } = cxt;
        cxt.fail$data(codegen_1._ `${data} ${KWDs[keyword].fail} ${schemaCode} || isNaN(${data})`);
    },
};
exports["default"] = def;
//# sourceMappingURL=limitNumber.js.map

/***/ }),

/***/ 23673:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const codegen_1 = __webpack_require__(78462);
const error = {
    message({ keyword, schemaCode }) {
        const comp = keyword === "maxProperties" ? "more" : "fewer";
        return codegen_1.str `should NOT have ${comp} than ${schemaCode} items`;
    },
    params: ({ schemaCode }) => codegen_1._ `{limit: ${schemaCode}}`,
};
const def = {
    keyword: ["maxProperties", "minProperties"],
    type: "object",
    schemaType: "number",
    $data: true,
    error,
    code(cxt) {
        const { keyword, data, schemaCode } = cxt;
        const op = keyword === "maxProperties" ? codegen_1.operators.GT : codegen_1.operators.LT;
        cxt.fail$data(codegen_1._ `Object.keys(${data}).length ${op} ${schemaCode}`);
    },
};
exports["default"] = def;
//# sourceMappingURL=limitProperties.js.map

/***/ }),

/***/ 39639:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const codegen_1 = __webpack_require__(78462);
const error = {
    message: ({ schemaCode }) => codegen_1.str `should be multiple of ${schemaCode}`,
    params: ({ schemaCode }) => codegen_1._ `{multipleOf: ${schemaCode}}`,
};
const def = {
    keyword: "multipleOf",
    type: "number",
    schemaType: "number",
    $data: true,
    error,
    code(cxt) {
        const { gen, data, schemaCode, it } = cxt;
        // const bdt = bad$DataType(schemaCode, <string>def.schemaType, $data)
        const prec = it.opts.multipleOfPrecision;
        const res = gen.let("res");
        const invalid = prec
            ? codegen_1._ `Math.abs(Math.round(${res}) - ${res}) > 1e-${prec}`
            : codegen_1._ `${res} !== parseInt(${res})`;
        cxt.fail$data(codegen_1._ `(${schemaCode} === 0 || (${res} = ${data}/${schemaCode}, ${invalid}))`);
    },
};
exports["default"] = def;
//# sourceMappingURL=multipleOf.js.map

/***/ }),

/***/ 24652:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const code_1 = __webpack_require__(38956);
const codegen_1 = __webpack_require__(78462);
const error = {
    message: ({ schemaCode }) => codegen_1.str `should match pattern "${schemaCode}"`,
    params: ({ schemaCode }) => codegen_1._ `{pattern: ${schemaCode}}`,
};
const def = {
    keyword: "pattern",
    type: "string",
    schemaType: "string",
    $data: true,
    error,
    code(cxt) {
        const { gen, data, $data, schema, schemaCode } = cxt;
        const regExp = $data ? codegen_1._ `(new RegExp(${schemaCode}, "u"))` : code_1.usePattern(gen, schema); // TODO regexp should be wrapped in try/catch
        cxt.fail$data(codegen_1._ `!${regExp}.test(${data})`);
    },
};
exports["default"] = def;
//# sourceMappingURL=pattern.js.map

/***/ }),

/***/ 64135:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const code_1 = __webpack_require__(38956);
const codegen_1 = __webpack_require__(78462);
const validate_1 = __webpack_require__(76192);
const error = {
    message: ({ params: { missingProperty } }) => codegen_1.str `should have required property '${missingProperty}'`,
    params: ({ params: { missingProperty } }) => codegen_1._ `{missingProperty: ${missingProperty}}`,
};
const def = {
    keyword: "required",
    type: "object",
    schemaType: "array",
    $data: true,
    error,
    code(cxt) {
        const { gen, schema, schemaCode, data, $data, it } = cxt;
        const { opts } = it;
        if (!$data && schema.length === 0)
            return;
        const useLoop = schema.length >= opts.loopRequired;
        if (it.allErrors)
            allErrorsMode();
        else
            exitOnErrorMode();
        if (opts.strictRequired) {
            const props = cxt.parentSchema.properties;
            const { definedProperties } = cxt.it;
            for (const requiredKey of schema) {
                if ((props === null || props === void 0 ? void 0 : props[requiredKey]) === undefined && !definedProperties.has(requiredKey)) {
                    const schemaPath = it.schemaEnv.baseId + it.errSchemaPath;
                    const msg = `required property "${requiredKey}" is not defined at "${schemaPath}" (strictRequired)`;
                    validate_1.checkStrictMode(it, msg, it.opts.strictRequired);
                }
            }
        }
        function allErrorsMode() {
            if (useLoop || $data) {
                cxt.block$data(codegen_1.nil, loopAllRequired);
            }
            else {
                for (const prop of schema) {
                    code_1.checkReportMissingProp(cxt, prop);
                }
            }
        }
        function exitOnErrorMode() {
            const missing = gen.let("missing");
            if (useLoop || $data) {
                const valid = gen.let("valid", true);
                cxt.block$data(valid, () => loopUntilMissing(missing, valid));
                cxt.ok(valid);
            }
            else {
                gen.if(code_1.checkMissingProp(cxt, schema, missing));
                code_1.reportMissingProp(cxt, missing);
                gen.else();
            }
        }
        function loopAllRequired() {
            gen.forOf("prop", schemaCode, (prop) => {
                cxt.setParams({ missingProperty: prop });
                gen.if(code_1.noPropertyInData(gen, data, prop, opts.ownProperties), () => cxt.error());
            });
        }
        function loopUntilMissing(missing, valid) {
            cxt.setParams({ missingProperty: missing });
            gen.forOf(missing, schemaCode, () => {
                gen.assign(valid, code_1.propertyInData(gen, data, missing, opts.ownProperties));
                gen.if(codegen_1.not(valid), () => {
                    cxt.error();
                    gen.break();
                });
            }, codegen_1.nil);
        }
    },
};
exports["default"] = def;
//# sourceMappingURL=required.js.map

/***/ }),

/***/ 26387:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const dataType_1 = __webpack_require__(27778);
const codegen_1 = __webpack_require__(78462);
const equal = __webpack_require__(1505);
const error = {
    message: ({ params: { i, j } }) => codegen_1.str `should NOT have duplicate items (items ## ${j} and ${i} are identical)`,
    params: ({ params: { i, j } }) => codegen_1._ `{i: ${i}, j: ${j}}`,
};
const def = {
    keyword: "uniqueItems",
    type: "array",
    schemaType: "boolean",
    $data: true,
    error,
    code(cxt) {
        const { gen, data, $data, schema, parentSchema, schemaCode, it } = cxt;
        if (!$data && !schema)
            return;
        const valid = gen.let("valid");
        const itemTypes = parentSchema.items ? dataType_1.getSchemaTypes(parentSchema.items) : [];
        cxt.block$data(valid, validateUniqueItems, codegen_1._ `${schemaCode} === false`);
        cxt.ok(valid);
        function validateUniqueItems() {
            const i = gen.let("i", codegen_1._ `${data}.length`);
            const j = gen.let("j");
            cxt.setParams({ i, j });
            gen.assign(valid, true);
            gen.if(codegen_1._ `${i} > 1`, () => (canOptimize() ? loopN : loopN2)(i, j));
        }
        function canOptimize() {
            return itemTypes.length > 0 && !itemTypes.some((t) => t === "object" || t === "array");
        }
        function loopN(i, j) {
            const item = gen.name("item");
            const wrongType = dataType_1.checkDataTypes(itemTypes, item, it.opts.strict, dataType_1.DataType.Wrong);
            const indices = gen.const("indices", codegen_1._ `{}`);
            gen.for(codegen_1._ `;${i}--;`, () => {
                gen.let(item, codegen_1._ `${data}[${i}]`);
                gen.if(wrongType, codegen_1._ `continue`);
                if (itemTypes.length > 1)
                    gen.if(codegen_1._ `typeof ${item} == "string"`, codegen_1._ `${item} += "_"`);
                gen
                    .if(codegen_1._ `typeof ${indices}[${item}] == "number"`, () => {
                    gen.assign(j, codegen_1._ `${indices}[${item}]`);
                    cxt.error();
                    gen.assign(valid, false).break();
                })
                    .code(codegen_1._ `${indices}[${item}] = ${i}`);
            });
        }
        function loopN2(i, j) {
            const eql = cxt.gen.scopeValue("func", {
                ref: equal,
                code: codegen_1._ `require("ajv/dist/compile/equal")`,
            });
            const outer = gen.name("outer");
            gen.label(outer).for(codegen_1._ `;${i}--;`, () => gen.for(codegen_1._ `${j} = ${i}; ${j}--;`, () => gen.if(codegen_1._ `${eql}(${data}[${i}], ${data}[${j}])`, () => {
                cxt.error();
                gen.assign(valid, false).break(outer);
            })));
        }
    },
};
exports["default"] = def;
//# sourceMappingURL=uniqueItems.js.map

/***/ }),

/***/ 96638:
/***/ ((module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));

const picomatch = __webpack_require__(57514);
const normalizePath = __webpack_require__(87744);

/**
 * @typedef {(testString: string) => boolean} AnymatchFn
 * @typedef {string|RegExp|AnymatchFn} AnymatchPattern
 * @typedef {AnymatchPattern|AnymatchPattern[]} AnymatchMatcher
 */
const BANG = '!';
const DEFAULT_OPTIONS = {returnIndex: false};
const arrify = (item) => Array.isArray(item) ? item : [item];

/**
 * @param {AnymatchPattern} matcher
 * @param {object} options
 * @returns {AnymatchFn}
 */
const createPattern = (matcher, options) => {
  if (typeof matcher === 'function') {
    return matcher;
  }
  if (typeof matcher === 'string') {
    const glob = picomatch(matcher, options);
    return (string) => matcher === string || glob(string);
  }
  if (matcher instanceof RegExp) {
    return (string) => matcher.test(string);
  }
  return (string) => false;
};

/**
 * @param {Array<Function>} patterns
 * @param {Array<Function>} negPatterns
 * @param {String|Array} args
 * @param {Boolean} returnIndex
 * @returns {boolean|number}
 */
const matchPatterns = (patterns, negPatterns, args, returnIndex) => {
  const isList = Array.isArray(args);
  const _path = isList ? args[0] : args;
  if (!isList && typeof _path !== 'string') {
    throw new TypeError('anymatch: second argument must be a string: got ' +
      Object.prototype.toString.call(_path))
  }
  const path = normalizePath(_path);

  for (let index = 0; index < negPatterns.length; index++) {
    const nglob = negPatterns[index];
    if (nglob(path)) {
      return returnIndex ? -1 : false;
    }
  }

  const applied = isList && [path].concat(args.slice(1));
  for (let index = 0; index < patterns.length; index++) {
    const pattern = patterns[index];
    if (isList ? pattern(...applied) : pattern(path)) {
      return returnIndex ? index : true;
    }
  }

  return returnIndex ? -1 : false;
};

/**
 * @param {AnymatchMatcher} matchers
 * @param {Array|string} testString
 * @param {object} options
 * @returns {boolean|number|Function}
 */
const anymatch = (matchers, testString, options = DEFAULT_OPTIONS) => {
  if (matchers == null) {
    throw new TypeError('anymatch: specify first argument');
  }
  const opts = typeof options === 'boolean' ? {returnIndex: options} : options;
  const returnIndex = opts.returnIndex || false;

  // Early cache for matchers.
  const mtchers = arrify(matchers);
  const negatedGlobs = mtchers
    .filter(item => typeof item === 'string' && item.charAt(0) === BANG)
    .map(item => item.slice(1))
    .map(item => picomatch(item, opts));
  const patterns = mtchers
    .filter(item => typeof item !== 'string' || (typeof item === 'string' && item.charAt(0) !== BANG))
    .map(matcher => createPattern(matcher, opts));

  if (testString == null) {
    return (testString, ri = false) => {
      const returnIndex = typeof ri === 'boolean' ? ri : false;
      return matchPatterns(patterns, negatedGlobs, testString, returnIndex);
    }
  }

  return matchPatterns(patterns, negatedGlobs, testString, returnIndex);
};

anymatch.default = anymatch;
module.exports = anymatch;


/***/ }),

/***/ 1255:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports =
{
  parallel      : __webpack_require__(67800),
  serial        : __webpack_require__(97821),
  serialOrdered : __webpack_require__(95610)
};


/***/ }),

/***/ 63297:
/***/ ((module) => {

// API
module.exports = abort;

/**
 * Aborts leftover active jobs
 *
 * @param {object} state - current state object
 */
function abort(state)
{
  Object.keys(state.jobs).forEach(clean.bind(state));

  // reset leftover jobs
  state.jobs = {};
}

/**
 * Cleans up leftover job by invoking abort function for the provided job id
 *
 * @this  state
 * @param {string|number} key - job id to abort
 */
function clean(key)
{
  if (typeof this.jobs[key] == 'function')
  {
    this.jobs[key]();
  }
}


/***/ }),

/***/ 73540:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var defer = __webpack_require__(29673);

// API
module.exports = async;

/**
 * Runs provided callback asynchronously
 * even if callback itself is not
 *
 * @param   {function} callback - callback to invoke
 * @returns {function} - augmented callback
 */
function async(callback)
{
  var isAsync = false;

  // check if async happened
  defer(function() { isAsync = true; });

  return function async_callback(err, result)
  {
    if (isAsync)
    {
      callback(err, result);
    }
    else
    {
      defer(function nextTick_callback()
      {
        callback(err, result);
      });
    }
  };
}


/***/ }),

/***/ 29673:
/***/ ((module) => {

module.exports = defer;

/**
 * Runs provided function on next iteration of the event loop
 *
 * @param {function} fn - function to run
 */
function defer(fn)
{
  var nextTick = typeof setImmediate == 'function'
    ? setImmediate
    : (
      typeof process == 'object' && typeof process.nextTick == 'function'
      ? process.nextTick
      : null
    );

  if (nextTick)
  {
    nextTick(fn);
  }
  else
  {
    setTimeout(fn, 0);
  }
}


/***/ }),

/***/ 43894:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var async = __webpack_require__(73540)
  , abort = __webpack_require__(63297)
  ;

// API
module.exports = iterate;

/**
 * Iterates over each job object
 *
 * @param {array|object} list - array or object (named list) to iterate over
 * @param {function} iterator - iterator to run
 * @param {object} state - current job status
 * @param {function} callback - invoked when all elements processed
 */
function iterate(list, iterator, state, callback)
{
  // store current index
  var key = state['keyedList'] ? state['keyedList'][state.index] : state.index;

  state.jobs[key] = runJob(iterator, key, list[key], function(error, output)
  {
    // don't repeat yourself
    // skip secondary callbacks
    if (!(key in state.jobs))
    {
      return;
    }

    // clean up jobs
    delete state.jobs[key];

    if (error)
    {
      // don't process rest of the results
      // stop still active jobs
      // and reset the list
      abort(state);
    }
    else
    {
      state.results[key] = output;
    }

    // return salvaged results
    callback(error, state.results);
  });
}

/**
 * Runs iterator over provided job element
 *
 * @param   {function} iterator - iterator to invoke
 * @param   {string|number} key - key/index of the element in the list of jobs
 * @param   {mixed} item - job description
 * @param   {function} callback - invoked after iterator is done with the job
 * @returns {function|mixed} - job abort function or something else
 */
function runJob(iterator, key, item, callback)
{
  var aborter;

  // allow shortcut if iterator expects only two arguments
  if (iterator.length == 2)
  {
    aborter = iterator(item, async(callback));
  }
  // otherwise go with full three arguments
  else
  {
    aborter = iterator(item, key, async(callback));
  }

  return aborter;
}


/***/ }),

/***/ 83877:
/***/ ((module) => {

// API
module.exports = state;

/**
 * Creates initial state object
 * for iteration over list
 *
 * @param   {array|object} list - list to iterate over
 * @param   {function|null} sortMethod - function to use for keys sort,
 *                                     or `null` to keep them as is
 * @returns {object} - initial state object
 */
function state(list, sortMethod)
{
  var isNamedList = !Array.isArray(list)
    , initState =
    {
      index    : 0,
      keyedList: isNamedList || sortMethod ? Object.keys(list) : null,
      jobs     : {},
      results  : isNamedList ? {} : [],
      size     : isNamedList ? Object.keys(list).length : list.length
    }
    ;

  if (sortMethod)
  {
    // sort array keys based on it's values
    // sort object's keys just on own merit
    initState.keyedList.sort(isNamedList ? sortMethod : function(a, b)
    {
      return sortMethod(list[a], list[b]);
    });
  }

  return initState;
}


/***/ }),

/***/ 18833:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var abort = __webpack_require__(63297)
  , async = __webpack_require__(73540)
  ;

// API
module.exports = terminator;

/**
 * Terminates jobs in the attached state context
 *
 * @this  AsyncKitState#
 * @param {function} callback - final callback to invoke after termination
 */
function terminator(callback)
{
  if (!Object.keys(this.jobs).length)
  {
    return;
  }

  // fast forward iteration index
  this.index = this.size;

  // abort jobs
  abort(this);

  // send back results we have so far
  async(callback)(null, this.results);
}


/***/ }),

/***/ 67800:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var iterate    = __webpack_require__(43894)
  , initState  = __webpack_require__(83877)
  , terminator = __webpack_require__(18833)
  ;

// Public API
module.exports = parallel;

/**
 * Runs iterator over provided array elements in parallel
 *
 * @param   {array|object} list - array or object (named list) to iterate over
 * @param   {function} iterator - iterator to run
 * @param   {function} callback - invoked when all elements processed
 * @returns {function} - jobs terminator
 */
function parallel(list, iterator, callback)
{
  var state = initState(list);

  while (state.index < (state['keyedList'] || list).length)
  {
    iterate(list, iterator, state, function(error, result)
    {
      if (error)
      {
        callback(error, result);
        return;
      }

      // looks like it's the last one
      if (Object.keys(state.jobs).length === 0)
      {
        callback(null, state.results);
        return;
      }
    });

    state.index++;
  }

  return terminator.bind(state, callback);
}


/***/ }),

/***/ 97821:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var serialOrdered = __webpack_require__(95610);

// Public API
module.exports = serial;

/**
 * Runs iterator over provided array elements in series
 *
 * @param   {array|object} list - array or object (named list) to iterate over
 * @param   {function} iterator - iterator to run
 * @param   {function} callback - invoked when all elements processed
 * @returns {function} - jobs terminator
 */
function serial(list, iterator, callback)
{
  return serialOrdered(list, iterator, null, callback);
}


/***/ }),

/***/ 95610:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var iterate    = __webpack_require__(43894)
  , initState  = __webpack_require__(83877)
  , terminator = __webpack_require__(18833)
  ;

// Public API
module.exports = serialOrdered;
// sorting helpers
module.exports.ascending  = ascending;
module.exports.descending = descending;

/**
 * Runs iterator over provided sorted array elements in series
 *
 * @param   {array|object} list - array or object (named list) to iterate over
 * @param   {function} iterator - iterator to run
 * @param   {function} sortMethod - custom sort function
 * @param   {function} callback - invoked when all elements processed
 * @returns {function} - jobs terminator
 */
function serialOrdered(list, iterator, sortMethod, callback)
{
  var state = initState(list, sortMethod);

  iterate(list, iterator, state, function iteratorHandler(error, result)
  {
    if (error)
    {
      callback(error, result);
      return;
    }

    state.index++;

    // are we there yet?
    if (state.index < (state['keyedList'] || list).length)
    {
      iterate(list, iterator, state, iteratorHandler);
      return;
    }

    // done here
    callback(null, state.results);
  });

  return terminator.bind(state, callback);
}

/*
 * -- Sort methods
 */

/**
 * sort helper to sort array elements in ascending order
 *
 * @param   {mixed} a - an item to compare
 * @param   {mixed} b - an item to compare
 * @returns {number} - comparison result
 */
function ascending(a, b)
{
  return a < b ? -1 : a > b ? 1 : 0;
}

/**
 * sort helper to sort array elements in descending order
 *
 * @param   {mixed} a - an item to compare
 * @param   {mixed} b - an item to compare
 * @returns {number} - comparison result
 */
function descending(a, b)
{
  return -1 * ascending(a, b);
}


/***/ }),

/***/ 57055:
/***/ ((module) => {

"use strict";

module.exports = balanced;
function balanced(a, b, str) {
  if (a instanceof RegExp) a = maybeMatch(a, str);
  if (b instanceof RegExp) b = maybeMatch(b, str);

  var r = range(a, b, str);

  return r && {
    start: r[0],
    end: r[1],
    pre: str.slice(0, r[0]),
    body: str.slice(r[0] + a.length, r[1]),
    post: str.slice(r[1] + b.length)
  };
}

function maybeMatch(reg, str) {
  var m = str.match(reg);
  return m ? m[0] : null;
}

balanced.range = range;
function range(a, b, str) {
  var begs, beg, left, right, result;
  var ai = str.indexOf(a);
  var bi = str.indexOf(b, ai + 1);
  var i = ai;

  if (ai >= 0 && bi > 0) {
    if(a===b) {
      return [ai, bi];
    }
    begs = [];
    left = str.length;

    while (i >= 0 && !result) {
      if (i == ai) {
        begs.push(i);
        ai = str.indexOf(a, i + 1);
      } else if (begs.length == 1) {
        result = [ begs.pop(), bi ];
      } else {
        beg = begs.pop();
        if (beg < left) {
          left = beg;
          right = bi;
        }

        bi = str.indexOf(b, i + 1);
      }

      i = ai < bi && ai >= 0 ? ai : bi;
    }

    if (begs.length) {
      result = [ left, right ];
    }
  }

  return result;
}


/***/ }),

/***/ 80187:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__(57967);


/***/ }),

/***/ 19158:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var concatMap = __webpack_require__(21897);
var balanced = __webpack_require__(57055);

module.exports = expandTop;

var escSlash = '\0SLASH'+Math.random()+'\0';
var escOpen = '\0OPEN'+Math.random()+'\0';
var escClose = '\0CLOSE'+Math.random()+'\0';
var escComma = '\0COMMA'+Math.random()+'\0';
var escPeriod = '\0PERIOD'+Math.random()+'\0';

function numeric(str) {
  return parseInt(str, 10) == str
    ? parseInt(str, 10)
    : str.charCodeAt(0);
}

function escapeBraces(str) {
  return str.split('\\\\').join(escSlash)
            .split('\\{').join(escOpen)
            .split('\\}').join(escClose)
            .split('\\,').join(escComma)
            .split('\\.').join(escPeriod);
}

function unescapeBraces(str) {
  return str.split(escSlash).join('\\')
            .split(escOpen).join('{')
            .split(escClose).join('}')
            .split(escComma).join(',')
            .split(escPeriod).join('.');
}


// Basically just str.split(","), but handling cases
// where we have nested braced sections, which should be
// treated as individual members, like {a,{b,c},d}
function parseCommaParts(str) {
  if (!str)
    return [''];

  var parts = [];
  var m = balanced('{', '}', str);

  if (!m)
    return str.split(',');

  var pre = m.pre;
  var body = m.body;
  var post = m.post;
  var p = pre.split(',');

  p[p.length-1] += '{' + body + '}';
  var postParts = parseCommaParts(post);
  if (post.length) {
    p[p.length-1] += postParts.shift();
    p.push.apply(p, postParts);
  }

  parts.push.apply(parts, p);

  return parts;
}

function expandTop(str) {
  if (!str)
    return [];

  // I don't know why Bash 4.3 does this, but it does.
  // Anything starting with {} will have the first two bytes preserved
  // but *only* at the top level, so {},a}b will not expand to anything,
  // but a{},b}c will be expanded to [a}c,abc].
  // One could argue that this is a bug in Bash, but since the goal of
  // this module is to match Bash's rules, we escape a leading {}
  if (str.substr(0, 2) === '{}') {
    str = '\\{\\}' + str.substr(2);
  }

  return expand(escapeBraces(str), true).map(unescapeBraces);
}

function identity(e) {
  return e;
}

function embrace(str) {
  return '{' + str + '}';
}
function isPadded(el) {
  return /^-?0\d/.test(el);
}

function lte(i, y) {
  return i <= y;
}
function gte(i, y) {
  return i >= y;
}

function expand(str, isTop) {
  var expansions = [];

  var m = balanced('{', '}', str);
  if (!m || /\$$/.test(m.pre)) return [str];

  var isNumericSequence = /^-?\d+\.\.-?\d+(?:\.\.-?\d+)?$/.test(m.body);
  var isAlphaSequence = /^[a-zA-Z]\.\.[a-zA-Z](?:\.\.-?\d+)?$/.test(m.body);
  var isSequence = isNumericSequence || isAlphaSequence;
  var isOptions = m.body.indexOf(',') >= 0;
  if (!isSequence && !isOptions) {
    // {a},b}
    if (m.post.match(/,.*\}/)) {
      str = m.pre + '{' + m.body + escClose + m.post;
      return expand(str);
    }
    return [str];
  }

  var n;
  if (isSequence) {
    n = m.body.split(/\.\./);
  } else {
    n = parseCommaParts(m.body);
    if (n.length === 1) {
      // x{{a,b}}y ==> x{a}y x{b}y
      n = expand(n[0], false).map(embrace);
      if (n.length === 1) {
        var post = m.post.length
          ? expand(m.post, false)
          : [''];
        return post.map(function(p) {
          return m.pre + n[0] + p;
        });
      }
    }
  }

  // at this point, n is the parts, and we know it's not a comma set
  // with a single entry.

  // no need to expand pre, since it is guaranteed to be free of brace-sets
  var pre = m.pre;
  var post = m.post.length
    ? expand(m.post, false)
    : [''];

  var N;

  if (isSequence) {
    var x = numeric(n[0]);
    var y = numeric(n[1]);
    var width = Math.max(n[0].length, n[1].length)
    var incr = n.length == 3
      ? Math.abs(numeric(n[2]))
      : 1;
    var test = lte;
    var reverse = y < x;
    if (reverse) {
      incr *= -1;
      test = gte;
    }
    var pad = n.some(isPadded);

    N = [];

    for (var i = x; test(i, y); i += incr) {
      var c;
      if (isAlphaSequence) {
        c = String.fromCharCode(i);
        if (c === '\\')
          c = '';
      } else {
        c = String(i);
        if (pad) {
          var need = width - c.length;
          if (need > 0) {
            var z = new Array(need + 1).join('0');
            if (i < 0)
              c = '-' + z + c.slice(1);
            else
              c = z + c;
          }
        }
      }
      N.push(c);
    }
  } else {
    N = concatMap(n, function(el) { return expand(el, false) });
  }

  for (var j = 0; j < N.length; j++) {
    for (var k = 0; k < post.length; k++) {
      var expansion = pre + N[j] + post[k];
      if (!isTop || isSequence || expansion)
        expansions.push(expansion);
    }
  }

  return expansions;
}



/***/ }),

/***/ 5822:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


const stringify = __webpack_require__(15597);
const compile = __webpack_require__(27015);
const expand = __webpack_require__(38906);
const parse = __webpack_require__(69217);

/**
 * Expand the given pattern or create a regex-compatible string.
 *
 * ```js
 * const braces = require('braces');
 * console.log(braces('{a,b,c}', { compile: true })); //=> ['(a|b|c)']
 * console.log(braces('{a,b,c}')); //=> ['a', 'b', 'c']
 * ```
 * @param {String} `str`
 * @param {Object} `options`
 * @return {String}
 * @api public
 */

const braces = (input, options = {}) => {
  let output = [];

  if (Array.isArray(input)) {
    for (let pattern of input) {
      let result = braces.create(pattern, options);
      if (Array.isArray(result)) {
        output.push(...result);
      } else {
        output.push(result);
      }
    }
  } else {
    output = [].concat(braces.create(input, options));
  }

  if (options && options.expand === true && options.nodupes === true) {
    output = [...new Set(output)];
  }
  return output;
};

/**
 * Parse the given `str` with the given `options`.
 *
 * ```js
 * // braces.parse(pattern, [, options]);
 * const ast = braces.parse('a/{b,c}/d');
 * console.log(ast);
 * ```
 * @param {String} pattern Brace pattern to parse
 * @param {Object} options
 * @return {Object} Returns an AST
 * @api public
 */

braces.parse = (input, options = {}) => parse(input, options);

/**
 * Creates a braces string from an AST, or an AST node.
 *
 * ```js
 * const braces = require('braces');
 * let ast = braces.parse('foo/{a,b}/bar');
 * console.log(stringify(ast.nodes[2])); //=> '{a,b}'
 * ```
 * @param {String} `input` Brace pattern or AST.
 * @param {Object} `options`
 * @return {Array} Returns an array of expanded values.
 * @api public
 */

braces.stringify = (input, options = {}) => {
  if (typeof input === 'string') {
    return stringify(braces.parse(input, options), options);
  }
  return stringify(input, options);
};

/**
 * Compiles a brace pattern into a regex-compatible, optimized string.
 * This method is called by the main [braces](#braces) function by default.
 *
 * ```js
 * const braces = require('braces');
 * console.log(braces.compile('a/{b,c}/d'));
 * //=> ['a/(b|c)/d']
 * ```
 * @param {String} `input` Brace pattern or AST.
 * @param {Object} `options`
 * @return {Array} Returns an array of expanded values.
 * @api public
 */

braces.compile = (input, options = {}) => {
  if (typeof input === 'string') {
    input = braces.parse(input, options);
  }
  return compile(input, options);
};

/**
 * Expands a brace pattern into an array. This method is called by the
 * main [braces](#braces) function when `options.expand` is true. Before
 * using this method it's recommended that you read the [performance notes](#performance))
 * and advantages of using [.compile](#compile) instead.
 *
 * ```js
 * const braces = require('braces');
 * console.log(braces.expand('a/{b,c}/d'));
 * //=> ['a/b/d', 'a/c/d'];
 * ```
 * @param {String} `pattern` Brace pattern
 * @param {Object} `options`
 * @return {Array} Returns an array of expanded values.
 * @api public
 */

braces.expand = (input, options = {}) => {
  if (typeof input === 'string') {
    input = braces.parse(input, options);
  }

  let result = expand(input, options);

  // filter out empty strings if specified
  if (options.noempty === true) {
    result = result.filter(Boolean);
  }

  // filter out duplicates if specified
  if (options.nodupes === true) {
    result = [...new Set(result)];
  }

  return result;
};

/**
 * Processes a brace pattern and returns either an expanded array
 * (if `options.expand` is true), a highly optimized regex-compatible string.
 * This method is called by the main [braces](#braces) function.
 *
 * ```js
 * const braces = require('braces');
 * console.log(braces.create('user-{200..300}/project-{a,b,c}-{1..10}'))
 * //=> 'user-(20[0-9]|2[1-9][0-9]|300)/project-(a|b|c)-([1-9]|10)'
 * ```
 * @param {String} `pattern` Brace pattern
 * @param {Object} `options`
 * @return {Array} Returns an array of expanded values.
 * @api public
 */

braces.create = (input, options = {}) => {
  if (input === '' || input.length < 3) {
    return [input];
  }

 return options.expand !== true
    ? braces.compile(input, options)
    : braces.expand(input, options);
};

/**
 * Expose "braces"
 */

module.exports = braces;


/***/ }),

/***/ 27015:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


const fill = __webpack_require__(2095);
const utils = __webpack_require__(63539);

const compile = (ast, options = {}) => {
  let walk = (node, parent = {}) => {
    let invalidBlock = utils.isInvalidBrace(parent);
    let invalidNode = node.invalid === true && options.escapeInvalid === true;
    let invalid = invalidBlock === true || invalidNode === true;
    let prefix = options.escapeInvalid === true ? '\\' : '';
    let output = '';

    if (node.isOpen === true) {
      return prefix + node.value;
    }
    if (node.isClose === true) {
      return prefix + node.value;
    }

    if (node.type === 'open') {
      return invalid ? (prefix + node.value) : '(';
    }

    if (node.type === 'close') {
      return invalid ? (prefix + node.value) : ')';
    }

    if (node.type === 'comma') {
      return node.prev.type === 'comma' ? '' : (invalid ? node.value : '|');
    }

    if (node.value) {
      return node.value;
    }

    if (node.nodes && node.ranges > 0) {
      let args = utils.reduce(node.nodes);
      let range = fill(...args, { ...options, wrap: false, toRegex: true });

      if (range.length !== 0) {
        return args.length > 1 && range.length > 1 ? `(${range})` : range;
      }
    }

    if (node.nodes) {
      for (let child of node.nodes) {
        output += walk(child, node);
      }
    }
    return output;
  };

  return walk(ast);
};

module.exports = compile;


/***/ }),

/***/ 70332:
/***/ ((module) => {

"use strict";


module.exports = {
  MAX_LENGTH: 1024 * 64,

  // Digits
  CHAR_0: '0', /* 0 */
  CHAR_9: '9', /* 9 */

  // Alphabet chars.
  CHAR_UPPERCASE_A: 'A', /* A */
  CHAR_LOWERCASE_A: 'a', /* a */
  CHAR_UPPERCASE_Z: 'Z', /* Z */
  CHAR_LOWERCASE_Z: 'z', /* z */

  CHAR_LEFT_PARENTHESES: '(', /* ( */
  CHAR_RIGHT_PARENTHESES: ')', /* ) */

  CHAR_ASTERISK: '*', /* * */

  // Non-alphabetic chars.
  CHAR_AMPERSAND: '&', /* & */
  CHAR_AT: '@', /* @ */
  CHAR_BACKSLASH: '\\', /* \ */
  CHAR_BACKTICK: '`', /* ` */
  CHAR_CARRIAGE_RETURN: '\r', /* \r */
  CHAR_CIRCUMFLEX_ACCENT: '^', /* ^ */
  CHAR_COLON: ':', /* : */
  CHAR_COMMA: ',', /* , */
  CHAR_DOLLAR: '$', /* . */
  CHAR_DOT: '.', /* . */
  CHAR_DOUBLE_QUOTE: '"', /* " */
  CHAR_EQUAL: '=', /* = */
  CHAR_EXCLAMATION_MARK: '!', /* ! */
  CHAR_FORM_FEED: '\f', /* \f */
  CHAR_FORWARD_SLASH: '/', /* / */
  CHAR_HASH: '#', /* # */
  CHAR_HYPHEN_MINUS: '-', /* - */
  CHAR_LEFT_ANGLE_BRACKET: '<', /* < */
  CHAR_LEFT_CURLY_BRACE: '{', /* { */
  CHAR_LEFT_SQUARE_BRACKET: '[', /* [ */
  CHAR_LINE_FEED: '\n', /* \n */
  CHAR_NO_BREAK_SPACE: '\u00A0', /* \u00A0 */
  CHAR_PERCENT: '%', /* % */
  CHAR_PLUS: '+', /* + */
  CHAR_QUESTION_MARK: '?', /* ? */
  CHAR_RIGHT_ANGLE_BRACKET: '>', /* > */
  CHAR_RIGHT_CURLY_BRACE: '}', /* } */
  CHAR_RIGHT_SQUARE_BRACKET: ']', /* ] */
  CHAR_SEMICOLON: ';', /* ; */
  CHAR_SINGLE_QUOTE: '\'', /* ' */
  CHAR_SPACE: ' ', /*   */
  CHAR_TAB: '\t', /* \t */
  CHAR_UNDERSCORE: '_', /* _ */
  CHAR_VERTICAL_LINE: '|', /* | */
  CHAR_ZERO_WIDTH_NOBREAK_SPACE: '\uFEFF' /* \uFEFF */
};


/***/ }),

/***/ 38906:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


const fill = __webpack_require__(2095);
const stringify = __webpack_require__(15597);
const utils = __webpack_require__(63539);

const append = (queue = '', stash = '', enclose = false) => {
  let result = [];

  queue = [].concat(queue);
  stash = [].concat(stash);

  if (!stash.length) return queue;
  if (!queue.length) {
    return enclose ? utils.flatten(stash).map(ele => `{${ele}}`) : stash;
  }

  for (let item of queue) {
    if (Array.isArray(item)) {
      for (let value of item) {
        result.push(append(value, stash, enclose));
      }
    } else {
      for (let ele of stash) {
        if (enclose === true && typeof ele === 'string') ele = `{${ele}}`;
        result.push(Array.isArray(ele) ? append(item, ele, enclose) : (item + ele));
      }
    }
  }
  return utils.flatten(result);
};

const expand = (ast, options = {}) => {
  let rangeLimit = options.rangeLimit === void 0 ? 1000 : options.rangeLimit;

  let walk = (node, parent = {}) => {
    node.queue = [];

    let p = parent;
    let q = parent.queue;

    while (p.type !== 'brace' && p.type !== 'root' && p.parent) {
      p = p.parent;
      q = p.queue;
    }

    if (node.invalid || node.dollar) {
      q.push(append(q.pop(), stringify(node, options)));
      return;
    }

    if (node.type === 'brace' && node.invalid !== true && node.nodes.length === 2) {
      q.push(append(q.pop(), ['{}']));
      return;
    }

    if (node.nodes && node.ranges > 0) {
      let args = utils.reduce(node.nodes);

      if (utils.exceedsLimit(...args, options.step, rangeLimit)) {
        throw new RangeError('expanded array length exceeds range limit. Use options.rangeLimit to increase or disable the limit.');
      }

      let range = fill(...args, options);
      if (range.length === 0) {
        range = stringify(node, options);
      }

      q.push(append(q.pop(), range));
      node.nodes = [];
      return;
    }

    let enclose = utils.encloseBrace(node);
    let queue = node.queue;
    let block = node;

    while (block.type !== 'brace' && block.type !== 'root' && block.parent) {
      block = block.parent;
      queue = block.queue;
    }

    for (let i = 0; i < node.nodes.length; i++) {
      let child = node.nodes[i];

      if (child.type === 'comma' && node.type === 'brace') {
        if (i === 1) queue.push('');
        queue.push('');
        continue;
      }

      if (child.type === 'close') {
        q.push(append(q.pop(), queue, enclose));
        continue;
      }

      if (child.value && child.type !== 'open') {
        queue.push(append(queue.pop(), child.value));
        continue;
      }

      if (child.nodes) {
        walk(child, node);
      }
    }

    return queue;
  };

  return utils.flatten(walk(ast));
};

module.exports = expand;


/***/ }),

/***/ 69217:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


const stringify = __webpack_require__(15597);

/**
 * Constants
 */

const {
  MAX_LENGTH,
  CHAR_BACKSLASH, /* \ */
  CHAR_BACKTICK, /* ` */
  CHAR_COMMA, /* , */
  CHAR_DOT, /* . */
  CHAR_LEFT_PARENTHESES, /* ( */
  CHAR_RIGHT_PARENTHESES, /* ) */
  CHAR_LEFT_CURLY_BRACE, /* { */
  CHAR_RIGHT_CURLY_BRACE, /* } */
  CHAR_LEFT_SQUARE_BRACKET, /* [ */
  CHAR_RIGHT_SQUARE_BRACKET, /* ] */
  CHAR_DOUBLE_QUOTE, /* " */
  CHAR_SINGLE_QUOTE, /* ' */
  CHAR_NO_BREAK_SPACE,
  CHAR_ZERO_WIDTH_NOBREAK_SPACE
} = __webpack_require__(70332);

/**
 * parse
 */

const parse = (input, options = {}) => {
  if (typeof input !== 'string') {
    throw new TypeError('Expected a string');
  }

  let opts = options || {};
  let max = typeof opts.maxLength === 'number' ? Math.min(MAX_LENGTH, opts.maxLength) : MAX_LENGTH;
  if (input.length > max) {
    throw new SyntaxError(`Input length (${input.length}), exceeds max characters (${max})`);
  }

  let ast = { type: 'root', input, nodes: [] };
  let stack = [ast];
  let block = ast;
  let prev = ast;
  let brackets = 0;
  let length = input.length;
  let index = 0;
  let depth = 0;
  let value;
  let memo = {};

  /**
   * Helpers
   */

  const advance = () => input[index++];
  const push = node => {
    if (node.type === 'text' && prev.type === 'dot') {
      prev.type = 'text';
    }

    if (prev && prev.type === 'text' && node.type === 'text') {
      prev.value += node.value;
      return;
    }

    block.nodes.push(node);
    node.parent = block;
    node.prev = prev;
    prev = node;
    return node;
  };

  push({ type: 'bos' });

  while (index < length) {
    block = stack[stack.length - 1];
    value = advance();

    /**
     * Invalid chars
     */

    if (value === CHAR_ZERO_WIDTH_NOBREAK_SPACE || value === CHAR_NO_BREAK_SPACE) {
      continue;
    }

    /**
     * Escaped chars
     */

    if (value === CHAR_BACKSLASH) {
      push({ type: 'text', value: (options.keepEscaping ? value : '') + advance() });
      continue;
    }

    /**
     * Right square bracket (literal): ']'
     */

    if (value === CHAR_RIGHT_SQUARE_BRACKET) {
      push({ type: 'text', value: '\\' + value });
      continue;
    }

    /**
     * Left square bracket: '['
     */

    if (value === CHAR_LEFT_SQUARE_BRACKET) {
      brackets++;

      let closed = true;
      let next;

      while (index < length && (next = advance())) {
        value += next;

        if (next === CHAR_LEFT_SQUARE_BRACKET) {
          brackets++;
          continue;
        }

        if (next === CHAR_BACKSLASH) {
          value += advance();
          continue;
        }

        if (next === CHAR_RIGHT_SQUARE_BRACKET) {
          brackets--;

          if (brackets === 0) {
            break;
          }
        }
      }

      push({ type: 'text', value });
      continue;
    }

    /**
     * Parentheses
     */

    if (value === CHAR_LEFT_PARENTHESES) {
      block = push({ type: 'paren', nodes: [] });
      stack.push(block);
      push({ type: 'text', value });
      continue;
    }

    if (value === CHAR_RIGHT_PARENTHESES) {
      if (block.type !== 'paren') {
        push({ type: 'text', value });
        continue;
      }
      block = stack.pop();
      push({ type: 'text', value });
      block = stack[stack.length - 1];
      continue;
    }

    /**
     * Quotes: '|"|`
     */

    if (value === CHAR_DOUBLE_QUOTE || value === CHAR_SINGLE_QUOTE || value === CHAR_BACKTICK) {
      let open = value;
      let next;

      if (options.keepQuotes !== true) {
        value = '';
      }

      while (index < length && (next = advance())) {
        if (next === CHAR_BACKSLASH) {
          value += next + advance();
          continue;
        }

        if (next === open) {
          if (options.keepQuotes === true) value += next;
          break;
        }

        value += next;
      }

      push({ type: 'text', value });
      continue;
    }

    /**
     * Left curly brace: '{'
     */

    if (value === CHAR_LEFT_CURLY_BRACE) {
      depth++;

      let dollar = prev.value && prev.value.slice(-1) === '$' || block.dollar === true;
      let brace = {
        type: 'brace',
        open: true,
        close: false,
        dollar,
        depth,
        commas: 0,
        ranges: 0,
        nodes: []
      };

      block = push(brace);
      stack.push(block);
      push({ type: 'open', value });
      continue;
    }

    /**
     * Right curly brace: '}'
     */

    if (value === CHAR_RIGHT_CURLY_BRACE) {
      if (block.type !== 'brace') {
        push({ type: 'text', value });
        continue;
      }

      let type = 'close';
      block = stack.pop();
      block.close = true;

      push({ type, value });
      depth--;

      block = stack[stack.length - 1];
      continue;
    }

    /**
     * Comma: ','
     */

    if (value === CHAR_COMMA && depth > 0) {
      if (block.ranges > 0) {
        block.ranges = 0;
        let open = block.nodes.shift();
        block.nodes = [open, { type: 'text', value: stringify(block) }];
      }

      push({ type: 'comma', value });
      block.commas++;
      continue;
    }

    /**
     * Dot: '.'
     */

    if (value === CHAR_DOT && depth > 0 && block.commas === 0) {
      let siblings = block.nodes;

      if (depth === 0 || siblings.length === 0) {
        push({ type: 'text', value });
        continue;
      }

      if (prev.type === 'dot') {
        block.range = [];
        prev.value += value;
        prev.type = 'range';

        if (block.nodes.length !== 3 && block.nodes.length !== 5) {
          block.invalid = true;
          block.ranges = 0;
          prev.type = 'text';
          continue;
        }

        block.ranges++;
        block.args = [];
        continue;
      }

      if (prev.type === 'range') {
        siblings.pop();

        let before = siblings[siblings.length - 1];
        before.value += prev.value + value;
        prev = before;
        block.ranges--;
        continue;
      }

      push({ type: 'dot', value });
      continue;
    }

    /**
     * Text
     */

    push({ type: 'text', value });
  }

  // Mark imbalanced braces and brackets as invalid
  do {
    block = stack.pop();

    if (block.type !== 'root') {
      block.nodes.forEach(node => {
        if (!node.nodes) {
          if (node.type === 'open') node.isOpen = true;
          if (node.type === 'close') node.isClose = true;
          if (!node.nodes) node.type = 'text';
          node.invalid = true;
        }
      });

      // get the location of the block on parent.nodes (block's siblings)
      let parent = stack[stack.length - 1];
      let index = parent.nodes.indexOf(block);
      // replace the (invalid) block with it's nodes
      parent.nodes.splice(index, 1, ...block.nodes);
    }
  } while (stack.length > 0);

  push({ type: 'eos' });
  return ast;
};

module.exports = parse;


/***/ }),

/***/ 15597:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


const utils = __webpack_require__(63539);

module.exports = (ast, options = {}) => {
  let stringify = (node, parent = {}) => {
    let invalidBlock = options.escapeInvalid && utils.isInvalidBrace(parent);
    let invalidNode = node.invalid === true && options.escapeInvalid === true;
    let output = '';

    if (node.value) {
      if ((invalidBlock || invalidNode) && utils.isOpenOrClose(node)) {
        return '\\' + node.value;
      }
      return node.value;
    }

    if (node.value) {
      return node.value;
    }

    if (node.nodes) {
      for (let child of node.nodes) {
        output += stringify(child);
      }
    }
    return output;
  };

  return stringify(ast);
};



/***/ }),

/***/ 63539:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


exports.isInteger = num => {
  if (typeof num === 'number') {
    return Number.isInteger(num);
  }
  if (typeof num === 'string' && num.trim() !== '') {
    return Number.isInteger(Number(num));
  }
  return false;
};

/**
 * Find a node of the given type
 */

exports.find = (node, type) => node.nodes.find(node => node.type === type);

/**
 * Find a node of the given type
 */

exports.exceedsLimit = (min, max, step = 1, limit) => {
  if (limit === false) return false;
  if (!exports.isInteger(min) || !exports.isInteger(max)) return false;
  return ((Number(max) - Number(min)) / Number(step)) >= limit;
};

/**
 * Escape the given node with '\\' before node.value
 */

exports.escapeNode = (block, n = 0, type) => {
  let node = block.nodes[n];
  if (!node) return;

  if ((type && node.type === type) || node.type === 'open' || node.type === 'close') {
    if (node.escaped !== true) {
      node.value = '\\' + node.value;
      node.escaped = true;
    }
  }
};

/**
 * Returns true if the given brace node should be enclosed in literal braces
 */

exports.encloseBrace = node => {
  if (node.type !== 'brace') return false;
  if ((node.commas >> 0 + node.ranges >> 0) === 0) {
    node.invalid = true;
    return true;
  }
  return false;
};

/**
 * Returns true if a brace node is invalid.
 */

exports.isInvalidBrace = block => {
  if (block.type !== 'brace') return false;
  if (block.invalid === true || block.dollar) return true;
  if ((block.commas >> 0 + block.ranges >> 0) === 0) {
    block.invalid = true;
    return true;
  }
  if (block.open !== true || block.close !== true) {
    block.invalid = true;
    return true;
  }
  return false;
};

/**
 * Returns true if a node is an open or close node
 */

exports.isOpenOrClose = node => {
  if (node.type === 'open' || node.type === 'close') {
    return true;
  }
  return node.open === true || node.close === true;
};

/**
 * Reduce an array of text nodes.
 */

exports.reduce = nodes => nodes.reduce((acc, node) => {
  if (node.type === 'text') acc.push(node.value);
  if (node.type === 'range') node.type = 'text';
  return acc;
}, []);

/**
 * Flatten an array
 */

exports.flatten = (...args) => {
  const result = [];
  const flat = arr => {
    for (let i = 0; i < arr.length; i++) {
      let ele = arr[i];
      Array.isArray(ele) ? flat(ele, result) : ele !== void 0 && result.push(ele);
    }
    return result;
  };
  flat(args);
  return result;
};


/***/ }),

/***/ 32622:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var GetIntrinsic = __webpack_require__(75547);

var callBind = __webpack_require__(86606);

var $indexOf = callBind(GetIntrinsic('String.prototype.indexOf'));

module.exports = function callBoundIntrinsic(name, allowMissing) {
	var intrinsic = GetIntrinsic(name, !!allowMissing);
	if (typeof intrinsic === 'function' && $indexOf(name, '.prototype.') > -1) {
		return callBind(intrinsic);
	}
	return intrinsic;
};


/***/ }),

/***/ 86606:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var bind = __webpack_require__(60497);
var GetIntrinsic = __webpack_require__(75547);

var $apply = GetIntrinsic('%Function.prototype.apply%');
var $call = GetIntrinsic('%Function.prototype.call%');
var $reflectApply = GetIntrinsic('%Reflect.apply%', true) || bind.call($call, $apply);

var $gOPD = GetIntrinsic('%Object.getOwnPropertyDescriptor%', true);
var $defineProperty = GetIntrinsic('%Object.defineProperty%', true);
var $max = GetIntrinsic('%Math.max%');

if ($defineProperty) {
	try {
		$defineProperty({}, 'a', { value: 1 });
	} catch (e) {
		// IE 8 has a broken defineProperty
		$defineProperty = null;
	}
}

module.exports = function callBind(originalFunction) {
	var func = $reflectApply(bind, $call, arguments);
	if ($gOPD && $defineProperty) {
		var desc = $gOPD(func, 'length');
		if (desc.configurable) {
			// original length, plus the receiver, minus any additional arguments (after the receiver)
			$defineProperty(
				func,
				'length',
				{ value: 1 + $max(0, originalFunction.length - (arguments.length - 1)) }
			);
		}
	}
	return func;
};

var applyBind = function applyBind() {
	return $reflectApply(bind, $apply, arguments);
};

if ($defineProperty) {
	$defineProperty(module.exports, 'apply', { value: applyBind });
} else {
	module.exports.apply = applyBind;
}


/***/ }),

/***/ 75547:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var undefined;

var $SyntaxError = SyntaxError;
var $Function = Function;
var $TypeError = TypeError;

// eslint-disable-next-line consistent-return
var getEvalledConstructor = function (expressionSyntax) {
	try {
		return $Function('"use strict"; return (' + expressionSyntax + ').constructor;')();
	} catch (e) {}
};

var $gOPD = Object.getOwnPropertyDescriptor;
if ($gOPD) {
	try {
		$gOPD({}, '');
	} catch (e) {
		$gOPD = null; // this is IE 8, which has a broken gOPD
	}
}

var throwTypeError = function () {
	throw new $TypeError();
};
var ThrowTypeError = $gOPD
	? (function () {
		try {
			// eslint-disable-next-line no-unused-expressions, no-caller, no-restricted-properties
			arguments.callee; // IE 8 does not throw here
			return throwTypeError;
		} catch (calleeThrows) {
			try {
				// IE 8 throws on Object.getOwnPropertyDescriptor(arguments, '')
				return $gOPD(arguments, 'callee').get;
			} catch (gOPDthrows) {
				return throwTypeError;
			}
		}
	}())
	: throwTypeError;

var hasSymbols = __webpack_require__(66478)();

var getProto = Object.getPrototypeOf || function (x) { return x.__proto__; }; // eslint-disable-line no-proto

var needsEval = {};

var TypedArray = typeof Uint8Array === 'undefined' ? undefined : getProto(Uint8Array);

var INTRINSICS = {
	'%AggregateError%': typeof AggregateError === 'undefined' ? undefined : AggregateError,
	'%Array%': Array,
	'%ArrayBuffer%': typeof ArrayBuffer === 'undefined' ? undefined : ArrayBuffer,
	'%ArrayIteratorPrototype%': hasSymbols ? getProto([][Symbol.iterator]()) : undefined,
	'%AsyncFromSyncIteratorPrototype%': undefined,
	'%AsyncFunction%': needsEval,
	'%AsyncGenerator%': needsEval,
	'%AsyncGeneratorFunction%': needsEval,
	'%AsyncIteratorPrototype%': needsEval,
	'%Atomics%': typeof Atomics === 'undefined' ? undefined : Atomics,
	'%BigInt%': typeof BigInt === 'undefined' ? undefined : BigInt,
	'%Boolean%': Boolean,
	'%DataView%': typeof DataView === 'undefined' ? undefined : DataView,
	'%Date%': Date,
	'%decodeURI%': decodeURI,
	'%decodeURIComponent%': decodeURIComponent,
	'%encodeURI%': encodeURI,
	'%encodeURIComponent%': encodeURIComponent,
	'%Error%': Error,
	'%eval%': eval, // eslint-disable-line no-eval
	'%EvalError%': EvalError,
	'%Float32Array%': typeof Float32Array === 'undefined' ? undefined : Float32Array,
	'%Float64Array%': typeof Float64Array === 'undefined' ? undefined : Float64Array,
	'%FinalizationRegistry%': typeof FinalizationRegistry === 'undefined' ? undefined : FinalizationRegistry,
	'%Function%': $Function,
	'%GeneratorFunction%': needsEval,
	'%Int8Array%': typeof Int8Array === 'undefined' ? undefined : Int8Array,
	'%Int16Array%': typeof Int16Array === 'undefined' ? undefined : Int16Array,
	'%Int32Array%': typeof Int32Array === 'undefined' ? undefined : Int32Array,
	'%isFinite%': isFinite,
	'%isNaN%': isNaN,
	'%IteratorPrototype%': hasSymbols ? getProto(getProto([][Symbol.iterator]())) : undefined,
	'%JSON%': typeof JSON === 'object' ? JSON : undefined,
	'%Map%': typeof Map === 'undefined' ? undefined : Map,
	'%MapIteratorPrototype%': typeof Map === 'undefined' || !hasSymbols ? undefined : getProto(new Map()[Symbol.iterator]()),
	'%Math%': Math,
	'%Number%': Number,
	'%Object%': Object,
	'%parseFloat%': parseFloat,
	'%parseInt%': parseInt,
	'%Promise%': typeof Promise === 'undefined' ? undefined : Promise,
	'%Proxy%': typeof Proxy === 'undefined' ? undefined : Proxy,
	'%RangeError%': RangeError,
	'%ReferenceError%': ReferenceError,
	'%Reflect%': typeof Reflect === 'undefined' ? undefined : Reflect,
	'%RegExp%': RegExp,
	'%Set%': typeof Set === 'undefined' ? undefined : Set,
	'%SetIteratorPrototype%': typeof Set === 'undefined' || !hasSymbols ? undefined : getProto(new Set()[Symbol.iterator]()),
	'%SharedArrayBuffer%': typeof SharedArrayBuffer === 'undefined' ? undefined : SharedArrayBuffer,
	'%String%': String,
	'%StringIteratorPrototype%': hasSymbols ? getProto(''[Symbol.iterator]()) : undefined,
	'%Symbol%': hasSymbols ? Symbol : undefined,
	'%SyntaxError%': $SyntaxError,
	'%ThrowTypeError%': ThrowTypeError,
	'%TypedArray%': TypedArray,
	'%TypeError%': $TypeError,
	'%Uint8Array%': typeof Uint8Array === 'undefined' ? undefined : Uint8Array,
	'%Uint8ClampedArray%': typeof Uint8ClampedArray === 'undefined' ? undefined : Uint8ClampedArray,
	'%Uint16Array%': typeof Uint16Array === 'undefined' ? undefined : Uint16Array,
	'%Uint32Array%': typeof Uint32Array === 'undefined' ? undefined : Uint32Array,
	'%URIError%': URIError,
	'%WeakMap%': typeof WeakMap === 'undefined' ? undefined : WeakMap,
	'%WeakRef%': typeof WeakRef === 'undefined' ? undefined : WeakRef,
	'%WeakSet%': typeof WeakSet === 'undefined' ? undefined : WeakSet
};

var doEval = function doEval(name) {
	var value;
	if (name === '%AsyncFunction%') {
		value = getEvalledConstructor('async function () {}');
	} else if (name === '%GeneratorFunction%') {
		value = getEvalledConstructor('function* () {}');
	} else if (name === '%AsyncGeneratorFunction%') {
		value = getEvalledConstructor('async function* () {}');
	} else if (name === '%AsyncGenerator%') {
		var fn = doEval('%AsyncGeneratorFunction%');
		if (fn) {
			value = fn.prototype;
		}
	} else if (name === '%AsyncIteratorPrototype%') {
		var gen = doEval('%AsyncGenerator%');
		if (gen) {
			value = getProto(gen.prototype);
		}
	}

	INTRINSICS[name] = value;

	return value;
};

var LEGACY_ALIASES = {
	'%ArrayBufferPrototype%': ['ArrayBuffer', 'prototype'],
	'%ArrayPrototype%': ['Array', 'prototype'],
	'%ArrayProto_entries%': ['Array', 'prototype', 'entries'],
	'%ArrayProto_forEach%': ['Array', 'prototype', 'forEach'],
	'%ArrayProto_keys%': ['Array', 'prototype', 'keys'],
	'%ArrayProto_values%': ['Array', 'prototype', 'values'],
	'%AsyncFunctionPrototype%': ['AsyncFunction', 'prototype'],
	'%AsyncGenerator%': ['AsyncGeneratorFunction', 'prototype'],
	'%AsyncGeneratorPrototype%': ['AsyncGeneratorFunction', 'prototype', 'prototype'],
	'%BooleanPrototype%': ['Boolean', 'prototype'],
	'%DataViewPrototype%': ['DataView', 'prototype'],
	'%DatePrototype%': ['Date', 'prototype'],
	'%ErrorPrototype%': ['Error', 'prototype'],
	'%EvalErrorPrototype%': ['EvalError', 'prototype'],
	'%Float32ArrayPrototype%': ['Float32Array', 'prototype'],
	'%Float64ArrayPrototype%': ['Float64Array', 'prototype'],
	'%FunctionPrototype%': ['Function', 'prototype'],
	'%Generator%': ['GeneratorFunction', 'prototype'],
	'%GeneratorPrototype%': ['GeneratorFunction', 'prototype', 'prototype'],
	'%Int8ArrayPrototype%': ['Int8Array', 'prototype'],
	'%Int16ArrayPrototype%': ['Int16Array', 'prototype'],
	'%Int32ArrayPrototype%': ['Int32Array', 'prototype'],
	'%JSONParse%': ['JSON', 'parse'],
	'%JSONStringify%': ['JSON', 'stringify'],
	'%MapPrototype%': ['Map', 'prototype'],
	'%NumberPrototype%': ['Number', 'prototype'],
	'%ObjectPrototype%': ['Object', 'prototype'],
	'%ObjProto_toString%': ['Object', 'prototype', 'toString'],
	'%ObjProto_valueOf%': ['Object', 'prototype', 'valueOf'],
	'%PromisePrototype%': ['Promise', 'prototype'],
	'%PromiseProto_then%': ['Promise', 'prototype', 'then'],
	'%Promise_all%': ['Promise', 'all'],
	'%Promise_reject%': ['Promise', 'reject'],
	'%Promise_resolve%': ['Promise', 'resolve'],
	'%RangeErrorPrototype%': ['RangeError', 'prototype'],
	'%ReferenceErrorPrototype%': ['ReferenceError', 'prototype'],
	'%RegExpPrototype%': ['RegExp', 'prototype'],
	'%SetPrototype%': ['Set', 'prototype'],
	'%SharedArrayBufferPrototype%': ['SharedArrayBuffer', 'prototype'],
	'%StringPrototype%': ['String', 'prototype'],
	'%SymbolPrototype%': ['Symbol', 'prototype'],
	'%SyntaxErrorPrototype%': ['SyntaxError', 'prototype'],
	'%TypedArrayPrototype%': ['TypedArray', 'prototype'],
	'%TypeErrorPrototype%': ['TypeError', 'prototype'],
	'%Uint8ArrayPrototype%': ['Uint8Array', 'prototype'],
	'%Uint8ClampedArrayPrototype%': ['Uint8ClampedArray', 'prototype'],
	'%Uint16ArrayPrototype%': ['Uint16Array', 'prototype'],
	'%Uint32ArrayPrototype%': ['Uint32Array', 'prototype'],
	'%URIErrorPrototype%': ['URIError', 'prototype'],
	'%WeakMapPrototype%': ['WeakMap', 'prototype'],
	'%WeakSetPrototype%': ['WeakSet', 'prototype']
};

var bind = __webpack_require__(60497);
var hasOwn = __webpack_require__(98356);
var $concat = bind.call(Function.call, Array.prototype.concat);
var $spliceApply = bind.call(Function.apply, Array.prototype.splice);
var $replace = bind.call(Function.call, String.prototype.replace);
var $strSlice = bind.call(Function.call, String.prototype.slice);

/* adapted from https://github.com/lodash/lodash/blob/4.17.15/dist/lodash.js#L6735-L6744 */
var rePropName = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g;
var reEscapeChar = /\\(\\)?/g; /** Used to match backslashes in property paths. */
var stringToPath = function stringToPath(string) {
	var first = $strSlice(string, 0, 1);
	var last = $strSlice(string, -1);
	if (first === '%' && last !== '%') {
		throw new $SyntaxError('invalid intrinsic syntax, expected closing `%`');
	} else if (last === '%' && first !== '%') {
		throw new $SyntaxError('invalid intrinsic syntax, expected opening `%`');
	}
	var result = [];
	$replace(string, rePropName, function (match, number, quote, subString) {
		result[result.length] = quote ? $replace(subString, reEscapeChar, '$1') : number || match;
	});
	return result;
};
/* end adaptation */

var getBaseIntrinsic = function getBaseIntrinsic(name, allowMissing) {
	var intrinsicName = name;
	var alias;
	if (hasOwn(LEGACY_ALIASES, intrinsicName)) {
		alias = LEGACY_ALIASES[intrinsicName];
		intrinsicName = '%' + alias[0] + '%';
	}

	if (hasOwn(INTRINSICS, intrinsicName)) {
		var value = INTRINSICS[intrinsicName];
		if (value === needsEval) {
			value = doEval(intrinsicName);
		}
		if (typeof value === 'undefined' && !allowMissing) {
			throw new $TypeError('intrinsic ' + name + ' exists, but is not available. Please file an issue!');
		}

		return {
			alias: alias,
			name: intrinsicName,
			value: value
		};
	}

	throw new $SyntaxError('intrinsic ' + name + ' does not exist!');
};

module.exports = function GetIntrinsic(name, allowMissing) {
	if (typeof name !== 'string' || name.length === 0) {
		throw new $TypeError('intrinsic name must be a non-empty string');
	}
	if (arguments.length > 1 && typeof allowMissing !== 'boolean') {
		throw new $TypeError('"allowMissing" argument must be a boolean');
	}

	var parts = stringToPath(name);
	var intrinsicBaseName = parts.length > 0 ? parts[0] : '';

	var intrinsic = getBaseIntrinsic('%' + intrinsicBaseName + '%', allowMissing);
	var intrinsicRealName = intrinsic.name;
	var value = intrinsic.value;
	var skipFurtherCaching = false;

	var alias = intrinsic.alias;
	if (alias) {
		intrinsicBaseName = alias[0];
		$spliceApply(parts, $concat([0, 1], alias));
	}

	for (var i = 1, isOwn = true; i < parts.length; i += 1) {
		var part = parts[i];
		var first = $strSlice(part, 0, 1);
		var last = $strSlice(part, -1);
		if (
			(
				(first === '"' || first === "'" || first === '`')
				|| (last === '"' || last === "'" || last === '`')
			)
			&& first !== last
		) {
			throw new $SyntaxError('property names with quotes must have matching quotes');
		}
		if (part === 'constructor' || !isOwn) {
			skipFurtherCaching = true;
		}

		intrinsicBaseName += '.' + part;
		intrinsicRealName = '%' + intrinsicBaseName + '%';

		if (hasOwn(INTRINSICS, intrinsicRealName)) {
			value = INTRINSICS[intrinsicRealName];
		} else if (value != null) {
			if (!(part in value)) {
				if (!allowMissing) {
					throw new $TypeError('base intrinsic for ' + name + ' exists, but the property is not available.');
				}
				return void undefined;
			}
			if ($gOPD && (i + 1) >= parts.length) {
				var desc = $gOPD(value, part);
				isOwn = !!desc;

				// By convention, when a data property is converted to an accessor
				// property to emulate a data property that does not suffer from
				// the override mistake, that accessor's getter is marked with
				// an `originalValue` property. Here, when we detect this, we
				// uphold the illusion by pretending to see that original data
				// property, i.e., returning the value rather than the getter
				// itself.
				if (isOwn && 'get' in desc && !('originalValue' in desc.get)) {
					value = desc.get;
				} else {
					value = value[part];
				}
			} else {
				isOwn = hasOwn(value, part);
				value = value[part];
			}

			if (isOwn && !skipFurtherCaching) {
				INTRINSICS[intrinsicRealName] = value;
			}
		}
	}
	return value;
};


/***/ }),

/***/ 88643:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


const { EventEmitter } = __webpack_require__(82361);
const fs = __webpack_require__(57147);
const sysPath = __webpack_require__(71017);
const { promisify } = __webpack_require__(73837);
const readdirp = __webpack_require__(53587);
const anymatch = (__webpack_require__(96638)["default"]);
const globParent = __webpack_require__(1256);
const isGlob = __webpack_require__(22767);
const braces = __webpack_require__(5822);
const normalizePath = __webpack_require__(87744);

const NodeFsHandler = __webpack_require__(72871);
const FsEventsHandler = __webpack_require__(51214);
const {
  EV_ALL,
  EV_READY,
  EV_ADD,
  EV_CHANGE,
  EV_UNLINK,
  EV_ADD_DIR,
  EV_UNLINK_DIR,
  EV_RAW,
  EV_ERROR,

  STR_CLOSE,
  STR_END,

  BACK_SLASH_RE,
  DOUBLE_SLASH_RE,
  SLASH_OR_BACK_SLASH_RE,
  DOT_RE,
  REPLACER_RE,

  SLASH,
  SLASH_SLASH,
  BRACE_START,
  BANG,
  ONE_DOT,
  TWO_DOTS,
  GLOBSTAR,
  SLASH_GLOBSTAR,
  ANYMATCH_OPTS,
  STRING_TYPE,
  FUNCTION_TYPE,
  EMPTY_STR,
  EMPTY_FN,

  isWindows,
  isMacos,
  isIBMi
} = __webpack_require__(9839);

const stat = promisify(fs.stat);
const readdir = promisify(fs.readdir);

/**
 * @typedef {String} Path
 * @typedef {'all'|'add'|'addDir'|'change'|'unlink'|'unlinkDir'|'raw'|'error'|'ready'} EventName
 * @typedef {'readdir'|'watch'|'add'|'remove'|'change'} ThrottleType
 */

/**
 *
 * @typedef {Object} WatchHelpers
 * @property {Boolean} followSymlinks
 * @property {'stat'|'lstat'} statMethod
 * @property {Path} path
 * @property {Path} watchPath
 * @property {Function} entryPath
 * @property {Boolean} hasGlob
 * @property {Object} globFilter
 * @property {Function} filterPath
 * @property {Function} filterDir
 */

const arrify = (value = []) => Array.isArray(value) ? value : [value];
const flatten = (list, result = []) => {
  list.forEach(item => {
    if (Array.isArray(item)) {
      flatten(item, result);
    } else {
      result.push(item);
    }
  });
  return result;
};

const unifyPaths = (paths_) => {
  /**
   * @type {Array<String>}
   */
  const paths = flatten(arrify(paths_));
  if (!paths.every(p => typeof p === STRING_TYPE)) {
    throw new TypeError(`Non-string provided as watch path: ${paths}`);
  }
  return paths.map(normalizePathToUnix);
};

// If SLASH_SLASH occurs at the beginning of path, it is not replaced
//     because "//StoragePC/DrivePool/Movies" is a valid network path
const toUnix = (string) => {
  let str = string.replace(BACK_SLASH_RE, SLASH);
  let prepend = false;
  if (str.startsWith(SLASH_SLASH)) {
    prepend = true;
  }
  while (str.match(DOUBLE_SLASH_RE)) {
    str = str.replace(DOUBLE_SLASH_RE, SLASH);
  }
  if (prepend) {
    str = SLASH + str;
  }
  return str;
};

// Our version of upath.normalize
// TODO: this is not equal to path-normalize module - investigate why
const normalizePathToUnix = (path) => toUnix(sysPath.normalize(toUnix(path)));

const normalizeIgnored = (cwd = EMPTY_STR) => (path) => {
  if (typeof path !== STRING_TYPE) return path;
  return normalizePathToUnix(sysPath.isAbsolute(path) ? path : sysPath.join(cwd, path));
};

const getAbsolutePath = (path, cwd) => {
  if (sysPath.isAbsolute(path)) {
    return path;
  }
  if (path.startsWith(BANG)) {
    return BANG + sysPath.join(cwd, path.slice(1));
  }
  return sysPath.join(cwd, path);
};

const undef = (opts, key) => opts[key] === undefined;

/**
 * Directory entry.
 * @property {Path} path
 * @property {Set<Path>} items
 */
class DirEntry {
  /**
   * @param {Path} dir
   * @param {Function} removeWatcher
   */
  constructor(dir, removeWatcher) {
    this.path = dir;
    this._removeWatcher = removeWatcher;
    /** @type {Set<Path>} */
    this.items = new Set();
  }

  add(item) {
    const {items} = this;
    if (!items) return;
    if (item !== ONE_DOT && item !== TWO_DOTS) items.add(item);
  }

  async remove(item) {
    const {items} = this;
    if (!items) return;
    items.delete(item);
    if (items.size > 0) return;

    const dir = this.path;
    try {
      await readdir(dir);
    } catch (err) {
      if (this._removeWatcher) {
        this._removeWatcher(sysPath.dirname(dir), sysPath.basename(dir));
      }
    }
  }

  has(item) {
    const {items} = this;
    if (!items) return;
    return items.has(item);
  }

  /**
   * @returns {Array<String>}
   */
  getChildren() {
    const {items} = this;
    if (!items) return;
    return [...items.values()];
  }

  dispose() {
    this.items.clear();
    delete this.path;
    delete this._removeWatcher;
    delete this.items;
    Object.freeze(this);
  }
}

const STAT_METHOD_F = 'stat';
const STAT_METHOD_L = 'lstat';
class WatchHelper {
  constructor(path, watchPath, follow, fsw) {
    this.fsw = fsw;
    this.path = path = path.replace(REPLACER_RE, EMPTY_STR);
    this.watchPath = watchPath;
    this.fullWatchPath = sysPath.resolve(watchPath);
    this.hasGlob = watchPath !== path;
    /** @type {object|boolean} */
    if (path === EMPTY_STR) this.hasGlob = false;
    this.globSymlink = this.hasGlob && follow ? undefined : false;
    this.globFilter = this.hasGlob ? anymatch(path, undefined, ANYMATCH_OPTS) : false;
    this.dirParts = this.getDirParts(path);
    this.dirParts.forEach((parts) => {
      if (parts.length > 1) parts.pop();
    });
    this.followSymlinks = follow;
    this.statMethod = follow ? STAT_METHOD_F : STAT_METHOD_L;
  }

  checkGlobSymlink(entry) {
    // only need to resolve once
    // first entry should always have entry.parentDir === EMPTY_STR
    if (this.globSymlink === undefined) {
      this.globSymlink = entry.fullParentDir === this.fullWatchPath ?
        false : {realPath: entry.fullParentDir, linkPath: this.fullWatchPath};
    }

    if (this.globSymlink) {
      return entry.fullPath.replace(this.globSymlink.realPath, this.globSymlink.linkPath);
    }

    return entry.fullPath;
  }

  entryPath(entry) {
    return sysPath.join(this.watchPath,
      sysPath.relative(this.watchPath, this.checkGlobSymlink(entry))
    );
  }

  filterPath(entry) {
    const {stats} = entry;
    if (stats && stats.isSymbolicLink()) return this.filterDir(entry);
    const resolvedPath = this.entryPath(entry);
    const matchesGlob = this.hasGlob && typeof this.globFilter === FUNCTION_TYPE ?
      this.globFilter(resolvedPath) : true;
    return matchesGlob &&
      this.fsw._isntIgnored(resolvedPath, stats) &&
      this.fsw._hasReadPermissions(stats);
  }

  getDirParts(path) {
    if (!this.hasGlob) return [];
    const parts = [];
    const expandedPath = path.includes(BRACE_START) ? braces.expand(path) : [path];
    expandedPath.forEach((path) => {
      parts.push(sysPath.relative(this.watchPath, path).split(SLASH_OR_BACK_SLASH_RE));
    });
    return parts;
  }

  filterDir(entry) {
    if (this.hasGlob) {
      const entryParts = this.getDirParts(this.checkGlobSymlink(entry));
      let globstar = false;
      this.unmatchedGlob = !this.dirParts.some((parts) => {
        return parts.every((part, i) => {
          if (part === GLOBSTAR) globstar = true;
          return globstar || !entryParts[0][i] || anymatch(part, entryParts[0][i], ANYMATCH_OPTS);
        });
      });
    }
    return !this.unmatchedGlob && this.fsw._isntIgnored(this.entryPath(entry), entry.stats);
  }
}

/**
 * Watches files & directories for changes. Emitted events:
 * `add`, `addDir`, `change`, `unlink`, `unlinkDir`, `all`, `error`
 *
 *     new FSWatcher()
 *       .add(directories)
 *       .on('add', path => log('File', path, 'was added'))
 */
class FSWatcher extends EventEmitter {
// Not indenting methods for history sake; for now.
constructor(_opts) {
  super();

  const opts = {};
  if (_opts) Object.assign(opts, _opts); // for frozen objects

  /** @type {Map<String, DirEntry>} */
  this._watched = new Map();
  /** @type {Map<String, Array>} */
  this._closers = new Map();
  /** @type {Set<String>} */
  this._ignoredPaths = new Set();

  /** @type {Map<ThrottleType, Map>} */
  this._throttled = new Map();

  /** @type {Map<Path, String|Boolean>} */
  this._symlinkPaths = new Map();

  this._streams = new Set();
  this.closed = false;

  // Set up default options.
  if (undef(opts, 'persistent')) opts.persistent = true;
  if (undef(opts, 'ignoreInitial')) opts.ignoreInitial = false;
  if (undef(opts, 'ignorePermissionErrors')) opts.ignorePermissionErrors = false;
  if (undef(opts, 'interval')) opts.interval = 100;
  if (undef(opts, 'binaryInterval')) opts.binaryInterval = 300;
  if (undef(opts, 'disableGlobbing')) opts.disableGlobbing = false;
  opts.enableBinaryInterval = opts.binaryInterval !== opts.interval;

  // Enable fsevents on OS X when polling isn't explicitly enabled.
  if (undef(opts, 'useFsEvents')) opts.useFsEvents = !opts.usePolling;

  // If we can't use fsevents, ensure the options reflect it's disabled.
  const canUseFsEvents = FsEventsHandler.canUse();
  if (!canUseFsEvents) opts.useFsEvents = false;

  // Use polling on Mac if not using fsevents.
  // Other platforms use non-polling fs_watch.
  if (undef(opts, 'usePolling') && !opts.useFsEvents) {
    opts.usePolling = isMacos;
  }

  // Always default to polling on IBM i because fs.watch() is not available on IBM i.
  if(isIBMi) {
    opts.usePolling = true;
  }

  // Global override (useful for end-developers that need to force polling for all
  // instances of chokidar, regardless of usage/dependency depth)
  const envPoll = process.env.CHOKIDAR_USEPOLLING;
  if (envPoll !== undefined) {
    const envLower = envPoll.toLowerCase();

    if (envLower === 'false' || envLower === '0') {
      opts.usePolling = false;
    } else if (envLower === 'true' || envLower === '1') {
      opts.usePolling = true;
    } else {
      opts.usePolling = !!envLower;
    }
  }
  const envInterval = process.env.CHOKIDAR_INTERVAL;
  if (envInterval) {
    opts.interval = Number.parseInt(envInterval, 10);
  }

  // Editor atomic write normalization enabled by default with fs.watch
  if (undef(opts, 'atomic')) opts.atomic = !opts.usePolling && !opts.useFsEvents;
  if (opts.atomic) this._pendingUnlinks = new Map();

  if (undef(opts, 'followSymlinks')) opts.followSymlinks = true;

  if (undef(opts, 'awaitWriteFinish')) opts.awaitWriteFinish = false;
  if (opts.awaitWriteFinish === true) opts.awaitWriteFinish = {};
  const awf = opts.awaitWriteFinish;
  if (awf) {
    if (!awf.stabilityThreshold) awf.stabilityThreshold = 2000;
    if (!awf.pollInterval) awf.pollInterval = 100;
    this._pendingWrites = new Map();
  }
  if (opts.ignored) opts.ignored = arrify(opts.ignored);

  let readyCalls = 0;
  this._emitReady = () => {
    readyCalls++;
    if (readyCalls >= this._readyCount) {
      this._emitReady = EMPTY_FN;
      this._readyEmitted = true;
      // use process.nextTick to allow time for listener to be bound
      process.nextTick(() => this.emit(EV_READY));
    }
  };
  this._emitRaw = (...args) => this.emit(EV_RAW, ...args);
  this._readyEmitted = false;
  this.options = opts;

  // Initialize with proper watcher.
  if (opts.useFsEvents) {
    this._fsEventsHandler = new FsEventsHandler(this);
  } else {
    this._nodeFsHandler = new NodeFsHandler(this);
  }

  // You’re frozen when your heart’s not open.
  Object.freeze(opts);
}

// Public methods

/**
 * Adds paths to be watched on an existing FSWatcher instance
 * @param {Path|Array<Path>} paths_
 * @param {String=} _origAdd private; for handling non-existent paths to be watched
 * @param {Boolean=} _internal private; indicates a non-user add
 * @returns {FSWatcher} for chaining
 */
add(paths_, _origAdd, _internal) {
  const {cwd, disableGlobbing} = this.options;
  this.closed = false;
  let paths = unifyPaths(paths_);
  if (cwd) {
    paths = paths.map((path) => {
      const absPath = getAbsolutePath(path, cwd);

      // Check `path` instead of `absPath` because the cwd portion can't be a glob
      if (disableGlobbing || !isGlob(path)) {
        return absPath;
      }
      return normalizePath(absPath);
    });
  }

  // set aside negated glob strings
  paths = paths.filter((path) => {
    if (path.startsWith(BANG)) {
      this._ignoredPaths.add(path.slice(1));
      return false;
    }

    // if a path is being added that was previously ignored, stop ignoring it
    this._ignoredPaths.delete(path);
    this._ignoredPaths.delete(path + SLASH_GLOBSTAR);

    // reset the cached userIgnored anymatch fn
    // to make ignoredPaths changes effective
    this._userIgnored = undefined;

    return true;
  });

  if (this.options.useFsEvents && this._fsEventsHandler) {
    if (!this._readyCount) this._readyCount = paths.length;
    if (this.options.persistent) this._readyCount *= 2;
    paths.forEach((path) => this._fsEventsHandler._addToFsEvents(path));
  } else {
    if (!this._readyCount) this._readyCount = 0;
    this._readyCount += paths.length;
    Promise.all(
      paths.map(async path => {
        const res = await this._nodeFsHandler._addToNodeFs(path, !_internal, 0, 0, _origAdd);
        if (res) this._emitReady();
        return res;
      })
    ).then(results => {
      if (this.closed) return;
      results.filter(item => item).forEach(item => {
        this.add(sysPath.dirname(item), sysPath.basename(_origAdd || item));
      });
    });
  }

  return this;
}

/**
 * Close watchers or start ignoring events from specified paths.
 * @param {Path|Array<Path>} paths_ - string or array of strings, file/directory paths and/or globs
 * @returns {FSWatcher} for chaining
*/
unwatch(paths_) {
  if (this.closed) return this;
  const paths = unifyPaths(paths_);
  const {cwd} = this.options;

  paths.forEach((path) => {
    // convert to absolute path unless relative path already matches
    if (!sysPath.isAbsolute(path) && !this._closers.has(path)) {
      if (cwd) path = sysPath.join(cwd, path);
      path = sysPath.resolve(path);
    }

    this._closePath(path);

    this._ignoredPaths.add(path);
    if (this._watched.has(path)) {
      this._ignoredPaths.add(path + SLASH_GLOBSTAR);
    }

    // reset the cached userIgnored anymatch fn
    // to make ignoredPaths changes effective
    this._userIgnored = undefined;
  });

  return this;
}

/**
 * Close watchers and remove all listeners from watched paths.
 * @returns {Promise<void>}.
*/
close() {
  if (this.closed) return this._closePromise;
  this.closed = true;

  // Memory management.
  this.removeAllListeners();
  const closers = [];
  this._closers.forEach(closerList => closerList.forEach(closer => {
    const promise = closer();
    if (promise instanceof Promise) closers.push(promise);
  }));
  this._streams.forEach(stream => stream.destroy());
  this._userIgnored = undefined;
  this._readyCount = 0;
  this._readyEmitted = false;
  this._watched.forEach(dirent => dirent.dispose());
  ['closers', 'watched', 'streams', 'symlinkPaths', 'throttled'].forEach(key => {
    this[`_${key}`].clear();
  });

  this._closePromise = closers.length ? Promise.all(closers).then(() => undefined) : Promise.resolve();
  return this._closePromise;
}

/**
 * Expose list of watched paths
 * @returns {Object} for chaining
*/
getWatched() {
  const watchList = {};
  this._watched.forEach((entry, dir) => {
    const key = this.options.cwd ? sysPath.relative(this.options.cwd, dir) : dir;
    watchList[key || ONE_DOT] = entry.getChildren().sort();
  });
  return watchList;
}

emitWithAll(event, args) {
  this.emit(...args);
  if (event !== EV_ERROR) this.emit(EV_ALL, ...args);
}

// Common helpers
// --------------

/**
 * Normalize and emit events.
 * Calling _emit DOES NOT MEAN emit() would be called!
 * @param {EventName} event Type of event
 * @param {Path} path File or directory path
 * @param {*=} val1 arguments to be passed with event
 * @param {*=} val2
 * @param {*=} val3
 * @returns the error if defined, otherwise the value of the FSWatcher instance's `closed` flag
 */
async _emit(event, path, val1, val2, val3) {
  if (this.closed) return;

  const opts = this.options;
  if (isWindows) path = sysPath.normalize(path);
  if (opts.cwd) path = sysPath.relative(opts.cwd, path);
  /** @type Array<any> */
  const args = [event, path];
  if (val3 !== undefined) args.push(val1, val2, val3);
  else if (val2 !== undefined) args.push(val1, val2);
  else if (val1 !== undefined) args.push(val1);

  const awf = opts.awaitWriteFinish;
  let pw;
  if (awf && (pw = this._pendingWrites.get(path))) {
    pw.lastChange = new Date();
    return this;
  }

  if (opts.atomic) {
    if (event === EV_UNLINK) {
      this._pendingUnlinks.set(path, args);
      setTimeout(() => {
        this._pendingUnlinks.forEach((entry, path) => {
          this.emit(...entry);
          this.emit(EV_ALL, ...entry);
          this._pendingUnlinks.delete(path);
        });
      }, typeof opts.atomic === 'number' ? opts.atomic : 100);
      return this;
    }
    if (event === EV_ADD && this._pendingUnlinks.has(path)) {
      event = args[0] = EV_CHANGE;
      this._pendingUnlinks.delete(path);
    }
  }

  if (awf && (event === EV_ADD || event === EV_CHANGE) && this._readyEmitted) {
    const awfEmit = (err, stats) => {
      if (err) {
        event = args[0] = EV_ERROR;
        args[1] = err;
        this.emitWithAll(event, args);
      } else if (stats) {
        // if stats doesn't exist the file must have been deleted
        if (args.length > 2) {
          args[2] = stats;
        } else {
          args.push(stats);
        }
        this.emitWithAll(event, args);
      }
    };

    this._awaitWriteFinish(path, awf.stabilityThreshold, event, awfEmit);
    return this;
  }

  if (event === EV_CHANGE) {
    const isThrottled = !this._throttle(EV_CHANGE, path, 50);
    if (isThrottled) return this;
  }

  if (opts.alwaysStat && val1 === undefined &&
    (event === EV_ADD || event === EV_ADD_DIR || event === EV_CHANGE)
  ) {
    const fullPath = opts.cwd ? sysPath.join(opts.cwd, path) : path;
    let stats;
    try {
      stats = await stat(fullPath);
    } catch (err) {}
    // Suppress event when fs_stat fails, to avoid sending undefined 'stat'
    if (!stats || this.closed) return;
    args.push(stats);
  }
  this.emitWithAll(event, args);

  return this;
}

/**
 * Common handler for errors
 * @param {Error} error
 * @returns {Error|Boolean} The error if defined, otherwise the value of the FSWatcher instance's `closed` flag
 */
_handleError(error) {
  const code = error && error.code;
  if (error && code !== 'ENOENT' && code !== 'ENOTDIR' &&
    (!this.options.ignorePermissionErrors || (code !== 'EPERM' && code !== 'EACCES'))
  ) {
    this.emit(EV_ERROR, error);
  }
  return error || this.closed;
}

/**
 * Helper utility for throttling
 * @param {ThrottleType} actionType type being throttled
 * @param {Path} path being acted upon
 * @param {Number} timeout duration of time to suppress duplicate actions
 * @returns {Object|false} tracking object or false if action should be suppressed
 */
_throttle(actionType, path, timeout) {
  if (!this._throttled.has(actionType)) {
    this._throttled.set(actionType, new Map());
  }

  /** @type {Map<Path, Object>} */
  const action = this._throttled.get(actionType);
  /** @type {Object} */
  const actionPath = action.get(path);

  if (actionPath) {
    actionPath.count++;
    return false;
  }

  let timeoutObject;
  const clear = () => {
    const item = action.get(path);
    const count = item ? item.count : 0;
    action.delete(path);
    clearTimeout(timeoutObject);
    if (item) clearTimeout(item.timeoutObject);
    return count;
  };
  timeoutObject = setTimeout(clear, timeout);
  const thr = {timeoutObject, clear, count: 0};
  action.set(path, thr);
  return thr;
}

_incrReadyCount() {
  return this._readyCount++;
}

/**
 * Awaits write operation to finish.
 * Polls a newly created file for size variations. When files size does not change for 'threshold' milliseconds calls callback.
 * @param {Path} path being acted upon
 * @param {Number} threshold Time in milliseconds a file size must be fixed before acknowledging write OP is finished
 * @param {EventName} event
 * @param {Function} awfEmit Callback to be called when ready for event to be emitted.
 */
_awaitWriteFinish(path, threshold, event, awfEmit) {
  let timeoutHandler;

  let fullPath = path;
  if (this.options.cwd && !sysPath.isAbsolute(path)) {
    fullPath = sysPath.join(this.options.cwd, path);
  }

  const now = new Date();

  const awaitWriteFinish = (prevStat) => {
    fs.stat(fullPath, (err, curStat) => {
      if (err || !this._pendingWrites.has(path)) {
        if (err && err.code !== 'ENOENT') awfEmit(err);
        return;
      }

      const now = Number(new Date());

      if (prevStat && curStat.size !== prevStat.size) {
        this._pendingWrites.get(path).lastChange = now;
      }
      const pw = this._pendingWrites.get(path);
      const df = now - pw.lastChange;

      if (df >= threshold) {
        this._pendingWrites.delete(path);
        awfEmit(undefined, curStat);
      } else {
        timeoutHandler = setTimeout(
          awaitWriteFinish,
          this.options.awaitWriteFinish.pollInterval,
          curStat
        );
      }
    });
  };

  if (!this._pendingWrites.has(path)) {
    this._pendingWrites.set(path, {
      lastChange: now,
      cancelWait: () => {
        this._pendingWrites.delete(path);
        clearTimeout(timeoutHandler);
        return event;
      }
    });
    timeoutHandler = setTimeout(
      awaitWriteFinish,
      this.options.awaitWriteFinish.pollInterval
    );
  }
}

_getGlobIgnored() {
  return [...this._ignoredPaths.values()];
}

/**
 * Determines whether user has asked to ignore this path.
 * @param {Path} path filepath or dir
 * @param {fs.Stats=} stats result of fs.stat
 * @returns {Boolean}
 */
_isIgnored(path, stats) {
  if (this.options.atomic && DOT_RE.test(path)) return true;
  if (!this._userIgnored) {
    const {cwd} = this.options;
    const ign = this.options.ignored;

    const ignored = ign && ign.map(normalizeIgnored(cwd));
    const paths = arrify(ignored)
      .filter((path) => typeof path === STRING_TYPE && !isGlob(path))
      .map((path) => path + SLASH_GLOBSTAR);
    const list = this._getGlobIgnored().map(normalizeIgnored(cwd)).concat(ignored, paths);
    this._userIgnored = anymatch(list, undefined, ANYMATCH_OPTS);
  }

  return this._userIgnored([path, stats]);
}

_isntIgnored(path, stat) {
  return !this._isIgnored(path, stat);
}

/**
 * Provides a set of common helpers and properties relating to symlink and glob handling.
 * @param {Path} path file, directory, or glob pattern being watched
 * @param {Number=} depth at any depth > 0, this isn't a glob
 * @returns {WatchHelper} object containing helpers for this path
 */
_getWatchHelpers(path, depth) {
  const watchPath = depth || this.options.disableGlobbing || !isGlob(path) ? path : globParent(path);
  const follow = this.options.followSymlinks;

  return new WatchHelper(path, watchPath, follow, this);
}

// Directory helpers
// -----------------

/**
 * Provides directory tracking objects
 * @param {String} directory path of the directory
 * @returns {DirEntry} the directory's tracking object
 */
_getWatchedDir(directory) {
  if (!this._boundRemove) this._boundRemove = this._remove.bind(this);
  const dir = sysPath.resolve(directory);
  if (!this._watched.has(dir)) this._watched.set(dir, new DirEntry(dir, this._boundRemove));
  return this._watched.get(dir);
}

// File helpers
// ------------

/**
 * Check for read permissions.
 * Based on this answer on SO: https://stackoverflow.com/a/11781404/1358405
 * @param {fs.Stats} stats - object, result of fs_stat
 * @returns {Boolean} indicates whether the file can be read
*/
_hasReadPermissions(stats) {
  if (this.options.ignorePermissionErrors) return true;

  // stats.mode may be bigint
  const md = stats && Number.parseInt(stats.mode, 10);
  const st = md & 0o777;
  const it = Number.parseInt(st.toString(8)[0], 10);
  return Boolean(4 & it);
}

/**
 * Handles emitting unlink events for
 * files and directories, and via recursion, for
 * files and directories within directories that are unlinked
 * @param {String} directory within which the following item is located
 * @param {String} item      base path of item/directory
 * @returns {void}
*/
_remove(directory, item, isDirectory) {
  // if what is being deleted is a directory, get that directory's paths
  // for recursive deleting and cleaning of watched object
  // if it is not a directory, nestedDirectoryChildren will be empty array
  const path = sysPath.join(directory, item);
  const fullPath = sysPath.resolve(path);
  isDirectory = isDirectory != null
    ? isDirectory
    : this._watched.has(path) || this._watched.has(fullPath);

  // prevent duplicate handling in case of arriving here nearly simultaneously
  // via multiple paths (such as _handleFile and _handleDir)
  if (!this._throttle('remove', path, 100)) return;

  // if the only watched file is removed, watch for its return
  if (!isDirectory && !this.options.useFsEvents && this._watched.size === 1) {
    this.add(directory, item, true);
  }

  // This will create a new entry in the watched object in either case
  // so we got to do the directory check beforehand
  const wp = this._getWatchedDir(path);
  const nestedDirectoryChildren = wp.getChildren();

  // Recursively remove children directories / files.
  nestedDirectoryChildren.forEach(nested => this._remove(path, nested));

  // Check if item was on the watched list and remove it
  const parent = this._getWatchedDir(directory);
  const wasTracked = parent.has(item);
  parent.remove(item);

  // Fixes issue #1042 -> Relative paths were detected and added as symlinks
  // (https://github.com/paulmillr/chokidar/blob/e1753ddbc9571bdc33b4a4af172d52cb6e611c10/lib/nodefs-handler.js#L612),
  // but never removed from the map in case the path was deleted.
  // This leads to an incorrect state if the path was recreated:
  // https://github.com/paulmillr/chokidar/blob/e1753ddbc9571bdc33b4a4af172d52cb6e611c10/lib/nodefs-handler.js#L553
  if (this._symlinkPaths.has(fullPath)) {
    this._symlinkPaths.delete(fullPath);
  }

  // If we wait for this file to be fully written, cancel the wait.
  let relPath = path;
  if (this.options.cwd) relPath = sysPath.relative(this.options.cwd, path);
  if (this.options.awaitWriteFinish && this._pendingWrites.has(relPath)) {
    const event = this._pendingWrites.get(relPath).cancelWait();
    if (event === EV_ADD) return;
  }

  // The Entry will either be a directory that just got removed
  // or a bogus entry to a file, in either case we have to remove it
  this._watched.delete(path);
  this._watched.delete(fullPath);
  const eventName = isDirectory ? EV_UNLINK_DIR : EV_UNLINK;
  if (wasTracked && !this._isIgnored(path)) this._emit(eventName, path);

  // Avoid conflicts if we later create another file with the same name
  if (!this.options.useFsEvents) {
    this._closePath(path);
  }
}

/**
 * Closes all watchers for a path
 * @param {Path} path
 */
_closePath(path) {
  this._closeFile(path)
  const dir = sysPath.dirname(path);
  this._getWatchedDir(dir).remove(sysPath.basename(path));
}

/**
 * Closes only file-specific watchers
 * @param {Path} path
 */
_closeFile(path) {
  const closers = this._closers.get(path);
  if (!closers) return;
  closers.forEach(closer => closer());
  this._closers.delete(path);
}

/**
 *
 * @param {Path} path
 * @param {Function} closer
 */
_addPathCloser(path, closer) {
  if (!closer) return;
  let list = this._closers.get(path);
  if (!list) {
    list = [];
    this._closers.set(path, list);
  }
  list.push(closer);
}

_readdirp(root, opts) {
  if (this.closed) return;
  const options = {type: EV_ALL, alwaysStat: true, lstat: true, ...opts};
  let stream = readdirp(root, options);
  this._streams.add(stream);
  stream.once(STR_CLOSE, () => {
    stream = undefined;
  });
  stream.once(STR_END, () => {
    if (stream) {
      this._streams.delete(stream);
      stream = undefined;
    }
  });
  return stream;
}

}

// Export FSWatcher class
exports.FSWatcher = FSWatcher;

/**
 * Instantiates watcher with paths to be tracked.
 * @param {String|Array<String>} paths file/directory paths and/or globs
 * @param {Object=} options chokidar opts
 * @returns an instance of FSWatcher for chaining.
 */
const watch = (paths, options) => {
  const watcher = new FSWatcher(options);
  watcher.add(paths);
  return watcher;
};

exports.watch = watch;


/***/ }),

/***/ 9839:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


const {sep} = __webpack_require__(71017);
const {platform} = process;
const os = __webpack_require__(22037);

exports.EV_ALL = 'all';
exports.EV_READY = 'ready';
exports.EV_ADD = 'add';
exports.EV_CHANGE = 'change';
exports.EV_ADD_DIR = 'addDir';
exports.EV_UNLINK = 'unlink';
exports.EV_UNLINK_DIR = 'unlinkDir';
exports.EV_RAW = 'raw';
exports.EV_ERROR = 'error';

exports.STR_DATA = 'data';
exports.STR_END = 'end';
exports.STR_CLOSE = 'close';

exports.FSEVENT_CREATED = 'created';
exports.FSEVENT_MODIFIED = 'modified';
exports.FSEVENT_DELETED = 'deleted';
exports.FSEVENT_MOVED = 'moved';
exports.FSEVENT_CLONED = 'cloned';
exports.FSEVENT_UNKNOWN = 'unknown';
exports.FSEVENT_TYPE_FILE = 'file';
exports.FSEVENT_TYPE_DIRECTORY = 'directory';
exports.FSEVENT_TYPE_SYMLINK = 'symlink';

exports.KEY_LISTENERS = 'listeners';
exports.KEY_ERR = 'errHandlers';
exports.KEY_RAW = 'rawEmitters';
exports.HANDLER_KEYS = [exports.KEY_LISTENERS, exports.KEY_ERR, exports.KEY_RAW];

exports.DOT_SLASH = `.${sep}`;

exports.BACK_SLASH_RE = /\\/g;
exports.DOUBLE_SLASH_RE = /\/\//;
exports.SLASH_OR_BACK_SLASH_RE = /[/\\]/;
exports.DOT_RE = /\..*\.(sw[px])$|~$|\.subl.*\.tmp/;
exports.REPLACER_RE = /^\.[/\\]/;

exports.SLASH = '/';
exports.SLASH_SLASH = '//';
exports.BRACE_START = '{';
exports.BANG = '!';
exports.ONE_DOT = '.';
exports.TWO_DOTS = '..';
exports.STAR = '*';
exports.GLOBSTAR = '**';
exports.ROOT_GLOBSTAR = '/**/*';
exports.SLASH_GLOBSTAR = '/**';
exports.DIR_SUFFIX = 'Dir';
exports.ANYMATCH_OPTS = {dot: true};
exports.STRING_TYPE = 'string';
exports.FUNCTION_TYPE = 'function';
exports.EMPTY_STR = '';
exports.EMPTY_FN = () => {};
exports.IDENTITY_FN = val => val;

exports.isWindows = platform === 'win32';
exports.isMacos = platform === 'darwin';
exports.isLinux = platform === 'linux';
exports.isIBMi = os.type() === 'OS400';


/***/ }),

/***/ 51214:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


const fs = __webpack_require__(57147);
const sysPath = __webpack_require__(71017);
const { promisify } = __webpack_require__(73837);

let fsevents;
try {
  fsevents = __webpack_require__(Object(function webpackMissingModule() { var e = new Error("Cannot find module 'fsevents'"); e.code = 'MODULE_NOT_FOUND'; throw e; }()));
} catch (error) {
  if (process.env.CHOKIDAR_PRINT_FSEVENTS_REQUIRE_ERROR) console.error(error);
}

if (fsevents) {
  // TODO: real check
  const mtch = process.version.match(/v(\d+)\.(\d+)/);
  if (mtch && mtch[1] && mtch[2]) {
    const maj = Number.parseInt(mtch[1], 10);
    const min = Number.parseInt(mtch[2], 10);
    if (maj === 8 && min < 16) {
      fsevents = undefined;
    }
  }
}

const {
  EV_ADD,
  EV_CHANGE,
  EV_ADD_DIR,
  EV_UNLINK,
  EV_ERROR,
  STR_DATA,
  STR_END,
  FSEVENT_CREATED,
  FSEVENT_MODIFIED,
  FSEVENT_DELETED,
  FSEVENT_MOVED,
  // FSEVENT_CLONED,
  FSEVENT_UNKNOWN,
  FSEVENT_TYPE_FILE,
  FSEVENT_TYPE_DIRECTORY,
  FSEVENT_TYPE_SYMLINK,

  ROOT_GLOBSTAR,
  DIR_SUFFIX,
  DOT_SLASH,
  FUNCTION_TYPE,
  EMPTY_FN,
  IDENTITY_FN
} = __webpack_require__(9839);

const Depth = (value) => isNaN(value) ? {} : {depth: value};

const stat = promisify(fs.stat);
const lstat = promisify(fs.lstat);
const realpath = promisify(fs.realpath);

const statMethods = { stat, lstat };

/**
 * @typedef {String} Path
 */

/**
 * @typedef {Object} FsEventsWatchContainer
 * @property {Set<Function>} listeners
 * @property {Function} rawEmitter
 * @property {{stop: Function}} watcher
 */

// fsevents instance helper functions
/**
 * Object to hold per-process fsevents instances (may be shared across chokidar FSWatcher instances)
 * @type {Map<Path,FsEventsWatchContainer>}
 */
const FSEventsWatchers = new Map();

// Threshold of duplicate path prefixes at which to start
// consolidating going forward
const consolidateThreshhold = 10;

const wrongEventFlags = new Set([
  69888, 70400, 71424, 72704, 73472, 131328, 131840, 262912
]);

/**
 * Instantiates the fsevents interface
 * @param {Path} path path to be watched
 * @param {Function} callback called when fsevents is bound and ready
 * @returns {{stop: Function}} new fsevents instance
 */
const createFSEventsInstance = (path, callback) => {
  const stop = fsevents.watch(path, callback);
  return {stop};
};

/**
 * Instantiates the fsevents interface or binds listeners to an existing one covering
 * the same file tree.
 * @param {Path} path           - to be watched
 * @param {Path} realPath       - real path for symlinks
 * @param {Function} listener   - called when fsevents emits events
 * @param {Function} rawEmitter - passes data to listeners of the 'raw' event
 * @returns {Function} closer
 */
function setFSEventsListener(path, realPath, listener, rawEmitter) {
  let watchPath = sysPath.extname(realPath) ? sysPath.dirname(realPath) : realPath;

  const parentPath = sysPath.dirname(watchPath);
  let cont = FSEventsWatchers.get(watchPath);

  // If we've accumulated a substantial number of paths that
  // could have been consolidated by watching one directory
  // above the current one, create a watcher on the parent
  // path instead, so that we do consolidate going forward.
  if (couldConsolidate(parentPath)) {
    watchPath = parentPath;
  }

  const resolvedPath = sysPath.resolve(path);
  const hasSymlink = resolvedPath !== realPath;

  const filteredListener = (fullPath, flags, info) => {
    if (hasSymlink) fullPath = fullPath.replace(realPath, resolvedPath);
    if (
      fullPath === resolvedPath ||
      !fullPath.indexOf(resolvedPath + sysPath.sep)
    ) listener(fullPath, flags, info);
  };

  // check if there is already a watcher on a parent path
  // modifies `watchPath` to the parent path when it finds a match
  let watchedParent = false;
  for (const watchedPath of FSEventsWatchers.keys()) {
    if (realPath.indexOf(sysPath.resolve(watchedPath) + sysPath.sep) === 0) {
      watchPath = watchedPath;
      cont = FSEventsWatchers.get(watchPath);
      watchedParent = true;
      break;
    }
  }

  if (cont || watchedParent) {
    cont.listeners.add(filteredListener);
  } else {
    cont = {
      listeners: new Set([filteredListener]),
      rawEmitter,
      watcher: createFSEventsInstance(watchPath, (fullPath, flags) => {
        if (!cont.listeners.size) return;
        const info = fsevents.getInfo(fullPath, flags);
        cont.listeners.forEach(list => {
          list(fullPath, flags, info);
        });

        cont.rawEmitter(info.event, fullPath, info);
      })
    };
    FSEventsWatchers.set(watchPath, cont);
  }

  // removes this instance's listeners and closes the underlying fsevents
  // instance if there are no more listeners left
  return () => {
    const lst = cont.listeners;

    lst.delete(filteredListener);
    if (!lst.size) {
      FSEventsWatchers.delete(watchPath);
      if (cont.watcher) return cont.watcher.stop().then(() => {
        cont.rawEmitter = cont.watcher = undefined;
        Object.freeze(cont);
      });
    }
  };
}

// Decide whether or not we should start a new higher-level
// parent watcher
const couldConsolidate = (path) => {
  let count = 0;
  for (const watchPath of FSEventsWatchers.keys()) {
    if (watchPath.indexOf(path) === 0) {
      count++;
      if (count >= consolidateThreshhold) {
        return true;
      }
    }
  }

  return false;
};

// returns boolean indicating whether fsevents can be used
const canUse = () => fsevents && FSEventsWatchers.size < 128;

// determines subdirectory traversal levels from root to path
const calcDepth = (path, root) => {
  let i = 0;
  while (!path.indexOf(root) && (path = sysPath.dirname(path)) !== root) i++;
  return i;
};

// returns boolean indicating whether the fsevents' event info has the same type
// as the one returned by fs.stat
const sameTypes = (info, stats) => (
  info.type === FSEVENT_TYPE_DIRECTORY && stats.isDirectory() ||
  info.type === FSEVENT_TYPE_SYMLINK && stats.isSymbolicLink() ||
  info.type === FSEVENT_TYPE_FILE && stats.isFile()
)

/**
 * @mixin
 */
class FsEventsHandler {

/**
 * @param {import('../index').FSWatcher} fsw
 */
constructor(fsw) {
  this.fsw = fsw;
}
checkIgnored(path, stats) {
  const ipaths = this.fsw._ignoredPaths;
  if (this.fsw._isIgnored(path, stats)) {
    ipaths.add(path);
    if (stats && stats.isDirectory()) {
      ipaths.add(path + ROOT_GLOBSTAR);
    }
    return true;
  }

  ipaths.delete(path);
  ipaths.delete(path + ROOT_GLOBSTAR);
}

addOrChange(path, fullPath, realPath, parent, watchedDir, item, info, opts) {
  const event = watchedDir.has(item) ? EV_CHANGE : EV_ADD;
  this.handleEvent(event, path, fullPath, realPath, parent, watchedDir, item, info, opts);
}

async checkExists(path, fullPath, realPath, parent, watchedDir, item, info, opts) {
  try {
    const stats = await stat(path)
    if (this.fsw.closed) return;
    if (sameTypes(info, stats)) {
      this.addOrChange(path, fullPath, realPath, parent, watchedDir, item, info, opts);
    } else {
      this.handleEvent(EV_UNLINK, path, fullPath, realPath, parent, watchedDir, item, info, opts);
    }
  } catch (error) {
    if (error.code === 'EACCES') {
      this.addOrChange(path, fullPath, realPath, parent, watchedDir, item, info, opts);
    } else {
      this.handleEvent(EV_UNLINK, path, fullPath, realPath, parent, watchedDir, item, info, opts);
    }
  }
}

handleEvent(event, path, fullPath, realPath, parent, watchedDir, item, info, opts) {
  if (this.fsw.closed || this.checkIgnored(path)) return;

  if (event === EV_UNLINK) {
    const isDirectory = info.type === FSEVENT_TYPE_DIRECTORY
    // suppress unlink events on never before seen files
    if (isDirectory || watchedDir.has(item)) {
      this.fsw._remove(parent, item, isDirectory);
    }
  } else {
    if (event === EV_ADD) {
      // track new directories
      if (info.type === FSEVENT_TYPE_DIRECTORY) this.fsw._getWatchedDir(path);

      if (info.type === FSEVENT_TYPE_SYMLINK && opts.followSymlinks) {
        // push symlinks back to the top of the stack to get handled
        const curDepth = opts.depth === undefined ?
          undefined : calcDepth(fullPath, realPath) + 1;
        return this._addToFsEvents(path, false, true, curDepth);
      }

      // track new paths
      // (other than symlinks being followed, which will be tracked soon)
      this.fsw._getWatchedDir(parent).add(item);
    }
    /**
     * @type {'add'|'addDir'|'unlink'|'unlinkDir'}
     */
    const eventName = info.type === FSEVENT_TYPE_DIRECTORY ? event + DIR_SUFFIX : event;
    this.fsw._emit(eventName, path);
    if (eventName === EV_ADD_DIR) this._addToFsEvents(path, false, true);
  }
}

/**
 * Handle symlinks encountered during directory scan
 * @param {String} watchPath  - file/dir path to be watched with fsevents
 * @param {String} realPath   - real path (in case of symlinks)
 * @param {Function} transform  - path transformer
 * @param {Function} globFilter - path filter in case a glob pattern was provided
 * @returns {Function} closer for the watcher instance
*/
_watchWithFsEvents(watchPath, realPath, transform, globFilter) {
  if (this.fsw.closed || this.fsw._isIgnored(watchPath)) return;
  const opts = this.fsw.options;
  const watchCallback = async (fullPath, flags, info) => {
    if (this.fsw.closed) return;
    if (
      opts.depth !== undefined &&
      calcDepth(fullPath, realPath) > opts.depth
    ) return;
    const path = transform(sysPath.join(
      watchPath, sysPath.relative(watchPath, fullPath)
    ));
    if (globFilter && !globFilter(path)) return;
    // ensure directories are tracked
    const parent = sysPath.dirname(path);
    const item = sysPath.basename(path);
    const watchedDir = this.fsw._getWatchedDir(
      info.type === FSEVENT_TYPE_DIRECTORY ? path : parent
    );

    // correct for wrong events emitted
    if (wrongEventFlags.has(flags) || info.event === FSEVENT_UNKNOWN) {
      if (typeof opts.ignored === FUNCTION_TYPE) {
        let stats;
        try {
          stats = await stat(path);
        } catch (error) {}
        if (this.fsw.closed) return;
        if (this.checkIgnored(path, stats)) return;
        if (sameTypes(info, stats)) {
          this.addOrChange(path, fullPath, realPath, parent, watchedDir, item, info, opts);
        } else {
          this.handleEvent(EV_UNLINK, path, fullPath, realPath, parent, watchedDir, item, info, opts);
        }
      } else {
        this.checkExists(path, fullPath, realPath, parent, watchedDir, item, info, opts);
      }
    } else {
      switch (info.event) {
      case FSEVENT_CREATED:
      case FSEVENT_MODIFIED:
        return this.addOrChange(path, fullPath, realPath, parent, watchedDir, item, info, opts);
      case FSEVENT_DELETED:
      case FSEVENT_MOVED:
        return this.checkExists(path, fullPath, realPath, parent, watchedDir, item, info, opts);
      }
    }
  };

  const closer = setFSEventsListener(
    watchPath,
    realPath,
    watchCallback,
    this.fsw._emitRaw
  );

  this.fsw._emitReady();
  return closer;
}

/**
 * Handle symlinks encountered during directory scan
 * @param {String} linkPath path to symlink
 * @param {String} fullPath absolute path to the symlink
 * @param {Function} transform pre-existing path transformer
 * @param {Number} curDepth level of subdirectories traversed to where symlink is
 * @returns {Promise<void>}
 */
async _handleFsEventsSymlink(linkPath, fullPath, transform, curDepth) {
  // don't follow the same symlink more than once
  if (this.fsw.closed || this.fsw._symlinkPaths.has(fullPath)) return;

  this.fsw._symlinkPaths.set(fullPath, true);
  this.fsw._incrReadyCount();

  try {
    const linkTarget = await realpath(linkPath);
    if (this.fsw.closed) return;
    if (this.fsw._isIgnored(linkTarget)) {
      return this.fsw._emitReady();
    }

    this.fsw._incrReadyCount();

    // add the linkTarget for watching with a wrapper for transform
    // that causes emitted paths to incorporate the link's path
    this._addToFsEvents(linkTarget || linkPath, (path) => {
      let aliasedPath = linkPath;
      if (linkTarget && linkTarget !== DOT_SLASH) {
        aliasedPath = path.replace(linkTarget, linkPath);
      } else if (path !== DOT_SLASH) {
        aliasedPath = sysPath.join(linkPath, path);
      }
      return transform(aliasedPath);
    }, false, curDepth);
  } catch(error) {
    if (this.fsw._handleError(error)) {
      return this.fsw._emitReady();
    }
  }
}

/**
 *
 * @param {Path} newPath
 * @param {fs.Stats} stats
 */
emitAdd(newPath, stats, processPath, opts, forceAdd) {
  const pp = processPath(newPath);
  const isDir = stats.isDirectory();
  const dirObj = this.fsw._getWatchedDir(sysPath.dirname(pp));
  const base = sysPath.basename(pp);

  // ensure empty dirs get tracked
  if (isDir) this.fsw._getWatchedDir(pp);
  if (dirObj.has(base)) return;
  dirObj.add(base);

  if (!opts.ignoreInitial || forceAdd === true) {
    this.fsw._emit(isDir ? EV_ADD_DIR : EV_ADD, pp, stats);
  }
}

initWatch(realPath, path, wh, processPath) {
  if (this.fsw.closed) return;
  const closer = this._watchWithFsEvents(
    wh.watchPath,
    sysPath.resolve(realPath || wh.watchPath),
    processPath,
    wh.globFilter
  );
  this.fsw._addPathCloser(path, closer);
}

/**
 * Handle added path with fsevents
 * @param {String} path file/dir path or glob pattern
 * @param {Function|Boolean=} transform converts working path to what the user expects
 * @param {Boolean=} forceAdd ensure add is emitted
 * @param {Number=} priorDepth Level of subdirectories already traversed.
 * @returns {Promise<void>}
 */
async _addToFsEvents(path, transform, forceAdd, priorDepth) {
  if (this.fsw.closed) {
    return;
  }
  const opts = this.fsw.options;
  const processPath = typeof transform === FUNCTION_TYPE ? transform : IDENTITY_FN;

  const wh = this.fsw._getWatchHelpers(path);

  // evaluate what is at the path we're being asked to watch
  try {
    const stats = await statMethods[wh.statMethod](wh.watchPath);
    if (this.fsw.closed) return;
    if (this.fsw._isIgnored(wh.watchPath, stats)) {
      throw null;
    }
    if (stats.isDirectory()) {
      // emit addDir unless this is a glob parent
      if (!wh.globFilter) this.emitAdd(processPath(path), stats, processPath, opts, forceAdd);

      // don't recurse further if it would exceed depth setting
      if (priorDepth && priorDepth > opts.depth) return;

      // scan the contents of the dir
      this.fsw._readdirp(wh.watchPath, {
        fileFilter: entry => wh.filterPath(entry),
        directoryFilter: entry => wh.filterDir(entry),
        ...Depth(opts.depth - (priorDepth || 0))
      }).on(STR_DATA, (entry) => {
        // need to check filterPath on dirs b/c filterDir is less restrictive
        if (this.fsw.closed) {
          return;
        }
        if (entry.stats.isDirectory() && !wh.filterPath(entry)) return;

        const joinedPath = sysPath.join(wh.watchPath, entry.path);
        const {fullPath} = entry;

        if (wh.followSymlinks && entry.stats.isSymbolicLink()) {
          // preserve the current depth here since it can't be derived from
          // real paths past the symlink
          const curDepth = opts.depth === undefined ?
            undefined : calcDepth(joinedPath, sysPath.resolve(wh.watchPath)) + 1;

          this._handleFsEventsSymlink(joinedPath, fullPath, processPath, curDepth);
        } else {
          this.emitAdd(joinedPath, entry.stats, processPath, opts, forceAdd);
        }
      }).on(EV_ERROR, EMPTY_FN).on(STR_END, () => {
        this.fsw._emitReady();
      });
    } else {
      this.emitAdd(wh.watchPath, stats, processPath, opts, forceAdd);
      this.fsw._emitReady();
    }
  } catch (error) {
    if (!error || this.fsw._handleError(error)) {
      // TODO: Strange thing: "should not choke on an ignored watch path" will be failed without 2 ready calls -__-
      this.fsw._emitReady();
      this.fsw._emitReady();
    }
  }

  if (opts.persistent && forceAdd !== true) {
    if (typeof transform === FUNCTION_TYPE) {
      // realpath has already been resolved
      this.initWatch(undefined, path, wh, processPath);
    } else {
      let realPath;
      try {
        realPath = await realpath(wh.watchPath);
      } catch (e) {}
      this.initWatch(realPath, path, wh, processPath);
    }
  }
}

}

module.exports = FsEventsHandler;
module.exports.canUse = canUse;


/***/ }),

/***/ 72871:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


const fs = __webpack_require__(57147);
const sysPath = __webpack_require__(71017);
const { promisify } = __webpack_require__(73837);
const isBinaryPath = __webpack_require__(5948);
const {
  isWindows,
  isLinux,
  EMPTY_FN,
  EMPTY_STR,
  KEY_LISTENERS,
  KEY_ERR,
  KEY_RAW,
  HANDLER_KEYS,
  EV_CHANGE,
  EV_ADD,
  EV_ADD_DIR,
  EV_ERROR,
  STR_DATA,
  STR_END,
  BRACE_START,
  STAR
} = __webpack_require__(9839);

const THROTTLE_MODE_WATCH = 'watch';

const open = promisify(fs.open);
const stat = promisify(fs.stat);
const lstat = promisify(fs.lstat);
const close = promisify(fs.close);
const fsrealpath = promisify(fs.realpath);

const statMethods = { lstat, stat };

// TODO: emit errors properly. Example: EMFILE on Macos.
const foreach = (val, fn) => {
  if (val instanceof Set) {
    val.forEach(fn);
  } else {
    fn(val);
  }
};

const addAndConvert = (main, prop, item) => {
  let container = main[prop];
  if (!(container instanceof Set)) {
    main[prop] = container = new Set([container]);
  }
  container.add(item);
};

const clearItem = cont => key => {
  const set = cont[key];
  if (set instanceof Set) {
    set.clear();
  } else {
    delete cont[key];
  }
};

const delFromSet = (main, prop, item) => {
  const container = main[prop];
  if (container instanceof Set) {
    container.delete(item);
  } else if (container === item) {
    delete main[prop];
  }
};

const isEmptySet = (val) => val instanceof Set ? val.size === 0 : !val;

/**
 * @typedef {String} Path
 */

// fs_watch helpers

// object to hold per-process fs_watch instances
// (may be shared across chokidar FSWatcher instances)

/**
 * @typedef {Object} FsWatchContainer
 * @property {Set} listeners
 * @property {Set} errHandlers
 * @property {Set} rawEmitters
 * @property {fs.FSWatcher=} watcher
 * @property {Boolean=} watcherUnusable
 */

/**
 * @type {Map<String,FsWatchContainer>}
 */
const FsWatchInstances = new Map();

/**
 * Instantiates the fs_watch interface
 * @param {String} path to be watched
 * @param {Object} options to be passed to fs_watch
 * @param {Function} listener main event handler
 * @param {Function} errHandler emits info about errors
 * @param {Function} emitRaw emits raw event data
 * @returns {fs.FSWatcher} new fsevents instance
 */
function createFsWatchInstance(path, options, listener, errHandler, emitRaw) {
  const handleEvent = (rawEvent, evPath) => {
    listener(path);
    emitRaw(rawEvent, evPath, {watchedPath: path});

    // emit based on events occurring for files from a directory's watcher in
    // case the file's watcher misses it (and rely on throttling to de-dupe)
    if (evPath && path !== evPath) {
      fsWatchBroadcast(
        sysPath.resolve(path, evPath), KEY_LISTENERS, sysPath.join(path, evPath)
      );
    }
  };
  try {
    return fs.watch(path, options, handleEvent);
  } catch (error) {
    errHandler(error);
  }
}

/**
 * Helper for passing fs_watch event data to a collection of listeners
 * @param {Path} fullPath absolute path bound to fs_watch instance
 * @param {String} type listener type
 * @param {*=} val1 arguments to be passed to listeners
 * @param {*=} val2
 * @param {*=} val3
 */
const fsWatchBroadcast = (fullPath, type, val1, val2, val3) => {
  const cont = FsWatchInstances.get(fullPath);
  if (!cont) return;
  foreach(cont[type], (listener) => {
    listener(val1, val2, val3);
  });
};

/**
 * Instantiates the fs_watch interface or binds listeners
 * to an existing one covering the same file system entry
 * @param {String} path
 * @param {String} fullPath absolute path
 * @param {Object} options to be passed to fs_watch
 * @param {Object} handlers container for event listener functions
 */
const setFsWatchListener = (path, fullPath, options, handlers) => {
  const {listener, errHandler, rawEmitter} = handlers;
  let cont = FsWatchInstances.get(fullPath);

  /** @type {fs.FSWatcher=} */
  let watcher;
  if (!options.persistent) {
    watcher = createFsWatchInstance(
      path, options, listener, errHandler, rawEmitter
    );
    return watcher.close.bind(watcher);
  }
  if (cont) {
    addAndConvert(cont, KEY_LISTENERS, listener);
    addAndConvert(cont, KEY_ERR, errHandler);
    addAndConvert(cont, KEY_RAW, rawEmitter);
  } else {
    watcher = createFsWatchInstance(
      path,
      options,
      fsWatchBroadcast.bind(null, fullPath, KEY_LISTENERS),
      errHandler, // no need to use broadcast here
      fsWatchBroadcast.bind(null, fullPath, KEY_RAW)
    );
    if (!watcher) return;
    watcher.on(EV_ERROR, async (error) => {
      const broadcastErr = fsWatchBroadcast.bind(null, fullPath, KEY_ERR);
      cont.watcherUnusable = true; // documented since Node 10.4.1
      // Workaround for https://github.com/joyent/node/issues/4337
      if (isWindows && error.code === 'EPERM') {
        try {
          const fd = await open(path, 'r');
          await close(fd);
          broadcastErr(error);
        } catch (err) {}
      } else {
        broadcastErr(error);
      }
    });
    cont = {
      listeners: listener,
      errHandlers: errHandler,
      rawEmitters: rawEmitter,
      watcher
    };
    FsWatchInstances.set(fullPath, cont);
  }
  // const index = cont.listeners.indexOf(listener);

  // removes this instance's listeners and closes the underlying fs_watch
  // instance if there are no more listeners left
  return () => {
    delFromSet(cont, KEY_LISTENERS, listener);
    delFromSet(cont, KEY_ERR, errHandler);
    delFromSet(cont, KEY_RAW, rawEmitter);
    if (isEmptySet(cont.listeners)) {
      // Check to protect against issue gh-730.
      // if (cont.watcherUnusable) {
      cont.watcher.close();
      // }
      FsWatchInstances.delete(fullPath);
      HANDLER_KEYS.forEach(clearItem(cont));
      cont.watcher = undefined;
      Object.freeze(cont);
    }
  };
};

// fs_watchFile helpers

// object to hold per-process fs_watchFile instances
// (may be shared across chokidar FSWatcher instances)
const FsWatchFileInstances = new Map();

/**
 * Instantiates the fs_watchFile interface or binds listeners
 * to an existing one covering the same file system entry
 * @param {String} path to be watched
 * @param {String} fullPath absolute path
 * @param {Object} options options to be passed to fs_watchFile
 * @param {Object} handlers container for event listener functions
 * @returns {Function} closer
 */
const setFsWatchFileListener = (path, fullPath, options, handlers) => {
  const {listener, rawEmitter} = handlers;
  let cont = FsWatchFileInstances.get(fullPath);

  /* eslint-disable no-unused-vars, prefer-destructuring */
  let listeners = new Set();
  let rawEmitters = new Set();

  const copts = cont && cont.options;
  if (copts && (copts.persistent < options.persistent || copts.interval > options.interval)) {
    // "Upgrade" the watcher to persistence or a quicker interval.
    // This creates some unlikely edge case issues if the user mixes
    // settings in a very weird way, but solving for those cases
    // doesn't seem worthwhile for the added complexity.
    listeners = cont.listeners;
    rawEmitters = cont.rawEmitters;
    fs.unwatchFile(fullPath);
    cont = undefined;
  }

  /* eslint-enable no-unused-vars, prefer-destructuring */

  if (cont) {
    addAndConvert(cont, KEY_LISTENERS, listener);
    addAndConvert(cont, KEY_RAW, rawEmitter);
  } else {
    // TODO
    // listeners.add(listener);
    // rawEmitters.add(rawEmitter);
    cont = {
      listeners: listener,
      rawEmitters: rawEmitter,
      options,
      watcher: fs.watchFile(fullPath, options, (curr, prev) => {
        foreach(cont.rawEmitters, (rawEmitter) => {
          rawEmitter(EV_CHANGE, fullPath, {curr, prev});
        });
        const currmtime = curr.mtimeMs;
        if (curr.size !== prev.size || currmtime > prev.mtimeMs || currmtime === 0) {
          foreach(cont.listeners, (listener) => listener(path, curr));
        }
      })
    };
    FsWatchFileInstances.set(fullPath, cont);
  }
  // const index = cont.listeners.indexOf(listener);

  // Removes this instance's listeners and closes the underlying fs_watchFile
  // instance if there are no more listeners left.
  return () => {
    delFromSet(cont, KEY_LISTENERS, listener);
    delFromSet(cont, KEY_RAW, rawEmitter);
    if (isEmptySet(cont.listeners)) {
      FsWatchFileInstances.delete(fullPath);
      fs.unwatchFile(fullPath);
      cont.options = cont.watcher = undefined;
      Object.freeze(cont);
    }
  };
};

/**
 * @mixin
 */
class NodeFsHandler {

/**
 * @param {import("../index").FSWatcher} fsW
 */
constructor(fsW) {
  this.fsw = fsW;
  this._boundHandleError = (error) => fsW._handleError(error);
}

/**
 * Watch file for changes with fs_watchFile or fs_watch.
 * @param {String} path to file or dir
 * @param {Function} listener on fs change
 * @returns {Function} closer for the watcher instance
 */
_watchWithNodeFs(path, listener) {
  const opts = this.fsw.options;
  const directory = sysPath.dirname(path);
  const basename = sysPath.basename(path);
  const parent = this.fsw._getWatchedDir(directory);
  parent.add(basename);
  const absolutePath = sysPath.resolve(path);
  const options = {persistent: opts.persistent};
  if (!listener) listener = EMPTY_FN;

  let closer;
  if (opts.usePolling) {
    options.interval = opts.enableBinaryInterval && isBinaryPath(basename) ?
      opts.binaryInterval : opts.interval;
    closer = setFsWatchFileListener(path, absolutePath, options, {
      listener,
      rawEmitter: this.fsw._emitRaw
    });
  } else {
    closer = setFsWatchListener(path, absolutePath, options, {
      listener,
      errHandler: this._boundHandleError,
      rawEmitter: this.fsw._emitRaw
    });
  }
  return closer;
}

/**
 * Watch a file and emit add event if warranted.
 * @param {Path} file Path
 * @param {fs.Stats} stats result of fs_stat
 * @param {Boolean} initialAdd was the file added at watch instantiation?
 * @returns {Function} closer for the watcher instance
 */
_handleFile(file, stats, initialAdd) {
  if (this.fsw.closed) {
    return;
  }
  const dirname = sysPath.dirname(file);
  const basename = sysPath.basename(file);
  const parent = this.fsw._getWatchedDir(dirname);
  // stats is always present
  let prevStats = stats;

  // if the file is already being watched, do nothing
  if (parent.has(basename)) return;

  const listener = async (path, newStats) => {
    if (!this.fsw._throttle(THROTTLE_MODE_WATCH, file, 5)) return;
    if (!newStats || newStats.mtimeMs === 0) {
      try {
        const newStats = await stat(file);
        if (this.fsw.closed) return;
        // Check that change event was not fired because of changed only accessTime.
        const at = newStats.atimeMs;
        const mt = newStats.mtimeMs;
        if (!at || at <= mt || mt !== prevStats.mtimeMs) {
          this.fsw._emit(EV_CHANGE, file, newStats);
        }
        if (isLinux && prevStats.ino !== newStats.ino) {
          this.fsw._closeFile(path)
          prevStats = newStats;
          this.fsw._addPathCloser(path, this._watchWithNodeFs(file, listener));
        } else {
          prevStats = newStats;
        }
      } catch (error) {
        // Fix issues where mtime is null but file is still present
        this.fsw._remove(dirname, basename);
      }
      // add is about to be emitted if file not already tracked in parent
    } else if (parent.has(basename)) {
      // Check that change event was not fired because of changed only accessTime.
      const at = newStats.atimeMs;
      const mt = newStats.mtimeMs;
      if (!at || at <= mt || mt !== prevStats.mtimeMs) {
        this.fsw._emit(EV_CHANGE, file, newStats);
      }
      prevStats = newStats;
    }
  }
  // kick off the watcher
  const closer = this._watchWithNodeFs(file, listener);

  // emit an add event if we're supposed to
  if (!(initialAdd && this.fsw.options.ignoreInitial) && this.fsw._isntIgnored(file)) {
    if (!this.fsw._throttle(EV_ADD, file, 0)) return;
    this.fsw._emit(EV_ADD, file, stats);
  }

  return closer;
}

/**
 * Handle symlinks encountered while reading a dir.
 * @param {Object} entry returned by readdirp
 * @param {String} directory path of dir being read
 * @param {String} path of this item
 * @param {String} item basename of this item
 * @returns {Promise<Boolean>} true if no more processing is needed for this entry.
 */
async _handleSymlink(entry, directory, path, item) {
  if (this.fsw.closed) {
    return;
  }
  const full = entry.fullPath;
  const dir = this.fsw._getWatchedDir(directory);

  if (!this.fsw.options.followSymlinks) {
    // watch symlink directly (don't follow) and detect changes
    this.fsw._incrReadyCount();

    let linkPath;
    try {
      linkPath = await fsrealpath(path);
    } catch (e) {
      this.fsw._emitReady();
      return true;
    }

    if (this.fsw.closed) return;
    if (dir.has(item)) {
      if (this.fsw._symlinkPaths.get(full) !== linkPath) {
        this.fsw._symlinkPaths.set(full, linkPath);
        this.fsw._emit(EV_CHANGE, path, entry.stats);
      }
    } else {
      dir.add(item);
      this.fsw._symlinkPaths.set(full, linkPath);
      this.fsw._emit(EV_ADD, path, entry.stats);
    }
    this.fsw._emitReady();
    return true;
  }

  // don't follow the same symlink more than once
  if (this.fsw._symlinkPaths.has(full)) {
    return true;
  }

  this.fsw._symlinkPaths.set(full, true);
}

_handleRead(directory, initialAdd, wh, target, dir, depth, throttler) {
  // Normalize the directory name on Windows
  directory = sysPath.join(directory, EMPTY_STR);

  if (!wh.hasGlob) {
    throttler = this.fsw._throttle('readdir', directory, 1000);
    if (!throttler) return;
  }

  const previous = this.fsw._getWatchedDir(wh.path);
  const current = new Set();

  let stream = this.fsw._readdirp(directory, {
    fileFilter: entry => wh.filterPath(entry),
    directoryFilter: entry => wh.filterDir(entry),
    depth: 0
  }).on(STR_DATA, async (entry) => {
    if (this.fsw.closed) {
      stream = undefined;
      return;
    }
    const item = entry.path;
    let path = sysPath.join(directory, item);
    current.add(item);

    if (entry.stats.isSymbolicLink() && await this._handleSymlink(entry, directory, path, item)) {
      return;
    }

    if (this.fsw.closed) {
      stream = undefined;
      return;
    }
    // Files that present in current directory snapshot
    // but absent in previous are added to watch list and
    // emit `add` event.
    if (item === target || !target && !previous.has(item)) {
      this.fsw._incrReadyCount();

      // ensure relativeness of path is preserved in case of watcher reuse
      path = sysPath.join(dir, sysPath.relative(dir, path));

      this._addToNodeFs(path, initialAdd, wh, depth + 1);
    }
  }).on(EV_ERROR, this._boundHandleError);

  return new Promise(resolve =>
    stream.once(STR_END, () => {
      if (this.fsw.closed) {
        stream = undefined;
        return;
      }
      const wasThrottled = throttler ? throttler.clear() : false;

      resolve();

      // Files that absent in current directory snapshot
      // but present in previous emit `remove` event
      // and are removed from @watched[directory].
      previous.getChildren().filter((item) => {
        return item !== directory &&
          !current.has(item) &&
          // in case of intersecting globs;
          // a path may have been filtered out of this readdir, but
          // shouldn't be removed because it matches a different glob
          (!wh.hasGlob || wh.filterPath({
            fullPath: sysPath.resolve(directory, item)
          }));
      }).forEach((item) => {
        this.fsw._remove(directory, item);
      });

      stream = undefined;

      // one more time for any missed in case changes came in extremely quickly
      if (wasThrottled) this._handleRead(directory, false, wh, target, dir, depth, throttler);
    })
  );
}

/**
 * Read directory to add / remove files from `@watched` list and re-read it on change.
 * @param {String} dir fs path
 * @param {fs.Stats} stats
 * @param {Boolean} initialAdd
 * @param {Number} depth relative to user-supplied path
 * @param {String} target child path targeted for watch
 * @param {Object} wh Common watch helpers for this path
 * @param {String} realpath
 * @returns {Promise<Function>} closer for the watcher instance.
 */
async _handleDir(dir, stats, initialAdd, depth, target, wh, realpath) {
  const parentDir = this.fsw._getWatchedDir(sysPath.dirname(dir));
  const tracked = parentDir.has(sysPath.basename(dir));
  if (!(initialAdd && this.fsw.options.ignoreInitial) && !target && !tracked) {
    if (!wh.hasGlob || wh.globFilter(dir)) this.fsw._emit(EV_ADD_DIR, dir, stats);
  }

  // ensure dir is tracked (harmless if redundant)
  parentDir.add(sysPath.basename(dir));
  this.fsw._getWatchedDir(dir);
  let throttler;
  let closer;

  const oDepth = this.fsw.options.depth;
  if ((oDepth == null || depth <= oDepth) && !this.fsw._symlinkPaths.has(realpath)) {
    if (!target) {
      await this._handleRead(dir, initialAdd, wh, target, dir, depth, throttler);
      if (this.fsw.closed) return;
    }

    closer = this._watchWithNodeFs(dir, (dirPath, stats) => {
      // if current directory is removed, do nothing
      if (stats && stats.mtimeMs === 0) return;

      this._handleRead(dirPath, false, wh, target, dir, depth, throttler);
    });
  }
  return closer;
}

/**
 * Handle added file, directory, or glob pattern.
 * Delegates call to _handleFile / _handleDir after checks.
 * @param {String} path to file or ir
 * @param {Boolean} initialAdd was the file added at watch instantiation?
 * @param {Object} priorWh depth relative to user-supplied path
 * @param {Number} depth Child path actually targeted for watch
 * @param {String=} target Child path actually targeted for watch
 * @returns {Promise}
 */
async _addToNodeFs(path, initialAdd, priorWh, depth, target) {
  const ready = this.fsw._emitReady;
  if (this.fsw._isIgnored(path) || this.fsw.closed) {
    ready();
    return false;
  }

  const wh = this.fsw._getWatchHelpers(path, depth);
  if (!wh.hasGlob && priorWh) {
    wh.hasGlob = priorWh.hasGlob;
    wh.globFilter = priorWh.globFilter;
    wh.filterPath = entry => priorWh.filterPath(entry);
    wh.filterDir = entry => priorWh.filterDir(entry);
  }

  // evaluate what is at the path we're being asked to watch
  try {
    const stats = await statMethods[wh.statMethod](wh.watchPath);
    if (this.fsw.closed) return;
    if (this.fsw._isIgnored(wh.watchPath, stats)) {
      ready();
      return false;
    }

    const follow = this.fsw.options.followSymlinks && !path.includes(STAR) && !path.includes(BRACE_START);
    let closer;
    if (stats.isDirectory()) {
      const absPath = sysPath.resolve(path);
      const targetPath = follow ? await fsrealpath(path) : path;
      if (this.fsw.closed) return;
      closer = await this._handleDir(wh.watchPath, stats, initialAdd, depth, target, wh, targetPath);
      if (this.fsw.closed) return;
      // preserve this symlink's target path
      if (absPath !== targetPath && targetPath !== undefined) {
        this.fsw._symlinkPaths.set(absPath, targetPath);
      }
    } else if (stats.isSymbolicLink()) {
      const targetPath = follow ? await fsrealpath(path) : path;
      if (this.fsw.closed) return;
      const parent = sysPath.dirname(wh.watchPath);
      this.fsw._getWatchedDir(parent).add(wh.watchPath);
      this.fsw._emit(EV_ADD, wh.watchPath, stats);
      closer = await this._handleDir(parent, stats, initialAdd, depth, path, wh, targetPath);
      if (this.fsw.closed) return;

      // preserve this symlink's target path
      if (targetPath !== undefined) {
        this.fsw._symlinkPaths.set(sysPath.resolve(path), targetPath);
      }
    } else {
      closer = this._handleFile(wh.watchPath, stats, initialAdd);
    }
    ready();

    this.fsw._addPathCloser(path, closer);
    return false;

  } catch (error) {
    if (this.fsw._handleError(error)) {
      ready();
      return path;
    }
  }
}

}

module.exports = NodeFsHandler;


/***/ }),

/***/ 54757:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var util = __webpack_require__(73837);
var Stream = (__webpack_require__(12781).Stream);
var DelayedStream = __webpack_require__(7000);

module.exports = CombinedStream;
function CombinedStream() {
  this.writable = false;
  this.readable = true;
  this.dataSize = 0;
  this.maxDataSize = 2 * 1024 * 1024;
  this.pauseStreams = true;

  this._released = false;
  this._streams = [];
  this._currentStream = null;
  this._insideLoop = false;
  this._pendingNext = false;
}
util.inherits(CombinedStream, Stream);

CombinedStream.create = function(options) {
  var combinedStream = new this();

  options = options || {};
  for (var option in options) {
    combinedStream[option] = options[option];
  }

  return combinedStream;
};

CombinedStream.isStreamLike = function(stream) {
  return (typeof stream !== 'function')
    && (typeof stream !== 'string')
    && (typeof stream !== 'boolean')
    && (typeof stream !== 'number')
    && (!Buffer.isBuffer(stream));
};

CombinedStream.prototype.append = function(stream) {
  var isStreamLike = CombinedStream.isStreamLike(stream);

  if (isStreamLike) {
    if (!(stream instanceof DelayedStream)) {
      var newStream = DelayedStream.create(stream, {
        maxDataSize: Infinity,
        pauseStream: this.pauseStreams,
      });
      stream.on('data', this._checkDataSize.bind(this));
      stream = newStream;
    }

    this._handleErrors(stream);

    if (this.pauseStreams) {
      stream.pause();
    }
  }

  this._streams.push(stream);
  return this;
};

CombinedStream.prototype.pipe = function(dest, options) {
  Stream.prototype.pipe.call(this, dest, options);
  this.resume();
  return dest;
};

CombinedStream.prototype._getNext = function() {
  this._currentStream = null;

  if (this._insideLoop) {
    this._pendingNext = true;
    return; // defer call
  }

  this._insideLoop = true;
  try {
    do {
      this._pendingNext = false;
      this._realGetNext();
    } while (this._pendingNext);
  } finally {
    this._insideLoop = false;
  }
};

CombinedStream.prototype._realGetNext = function() {
  var stream = this._streams.shift();


  if (typeof stream == 'undefined') {
    this.end();
    return;
  }

  if (typeof stream !== 'function') {
    this._pipeNext(stream);
    return;
  }

  var getStream = stream;
  getStream(function(stream) {
    var isStreamLike = CombinedStream.isStreamLike(stream);
    if (isStreamLike) {
      stream.on('data', this._checkDataSize.bind(this));
      this._handleErrors(stream);
    }

    this._pipeNext(stream);
  }.bind(this));
};

CombinedStream.prototype._pipeNext = function(stream) {
  this._currentStream = stream;

  var isStreamLike = CombinedStream.isStreamLike(stream);
  if (isStreamLike) {
    stream.on('end', this._getNext.bind(this));
    stream.pipe(this, {end: false});
    return;
  }

  var value = stream;
  this.write(value);
  this._getNext();
};

CombinedStream.prototype._handleErrors = function(stream) {
  var self = this;
  stream.on('error', function(err) {
    self._emitError(err);
  });
};

CombinedStream.prototype.write = function(data) {
  this.emit('data', data);
};

CombinedStream.prototype.pause = function() {
  if (!this.pauseStreams) {
    return;
  }

  if(this.pauseStreams && this._currentStream && typeof(this._currentStream.pause) == 'function') this._currentStream.pause();
  this.emit('pause');
};

CombinedStream.prototype.resume = function() {
  if (!this._released) {
    this._released = true;
    this.writable = true;
    this._getNext();
  }

  if(this.pauseStreams && this._currentStream && typeof(this._currentStream.resume) == 'function') this._currentStream.resume();
  this.emit('resume');
};

CombinedStream.prototype.end = function() {
  this._reset();
  this.emit('end');
};

CombinedStream.prototype.destroy = function() {
  this._reset();
  this.emit('close');
};

CombinedStream.prototype._reset = function() {
  this.writable = false;
  this._streams = [];
  this._currentStream = null;
};

CombinedStream.prototype._checkDataSize = function() {
  this._updateDataSize();
  if (this.dataSize <= this.maxDataSize) {
    return;
  }

  var message =
    'DelayedStream#maxDataSize of ' + this.maxDataSize + ' bytes exceeded.';
  this._emitError(new Error(message));
};

CombinedStream.prototype._updateDataSize = function() {
  this.dataSize = 0;

  var self = this;
  this._streams.forEach(function(stream) {
    if (!stream.dataSize) {
      return;
    }

    self.dataSize += stream.dataSize;
  });

  if (this._currentStream && this._currentStream.dataSize) {
    this.dataSize += this._currentStream.dataSize;
  }
};

CombinedStream.prototype._emitError = function(err) {
  this._reset();
  this.emit('error', err);
};


/***/ }),

/***/ 21897:
/***/ ((module) => {

module.exports = function (xs, fn) {
    var res = [];
    for (var i = 0; i < xs.length; i++) {
        var x = fn(xs[i], i);
        if (isArray(x)) res.push.apply(res, x);
        else res.push(x);
    }
    return res;
};

var isArray = Array.isArray || function (xs) {
    return Object.prototype.toString.call(xs) === '[object Array]';
};


/***/ }),

/***/ 32708:
/***/ ((module, exports, __webpack_require__) => {

/* eslint-env browser */

/**
 * This is the web browser implementation of `debug()`.
 */

exports.formatArgs = formatArgs;
exports.save = save;
exports.load = load;
exports.useColors = useColors;
exports.storage = localstorage();
exports.destroy = (() => {
	let warned = false;

	return () => {
		if (!warned) {
			warned = true;
			console.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');
		}
	};
})();

/**
 * Colors.
 */

exports.colors = [
	'#0000CC',
	'#0000FF',
	'#0033CC',
	'#0033FF',
	'#0066CC',
	'#0066FF',
	'#0099CC',
	'#0099FF',
	'#00CC00',
	'#00CC33',
	'#00CC66',
	'#00CC99',
	'#00CCCC',
	'#00CCFF',
	'#3300CC',
	'#3300FF',
	'#3333CC',
	'#3333FF',
	'#3366CC',
	'#3366FF',
	'#3399CC',
	'#3399FF',
	'#33CC00',
	'#33CC33',
	'#33CC66',
	'#33CC99',
	'#33CCCC',
	'#33CCFF',
	'#6600CC',
	'#6600FF',
	'#6633CC',
	'#6633FF',
	'#66CC00',
	'#66CC33',
	'#9900CC',
	'#9900FF',
	'#9933CC',
	'#9933FF',
	'#99CC00',
	'#99CC33',
	'#CC0000',
	'#CC0033',
	'#CC0066',
	'#CC0099',
	'#CC00CC',
	'#CC00FF',
	'#CC3300',
	'#CC3333',
	'#CC3366',
	'#CC3399',
	'#CC33CC',
	'#CC33FF',
	'#CC6600',
	'#CC6633',
	'#CC9900',
	'#CC9933',
	'#CCCC00',
	'#CCCC33',
	'#FF0000',
	'#FF0033',
	'#FF0066',
	'#FF0099',
	'#FF00CC',
	'#FF00FF',
	'#FF3300',
	'#FF3333',
	'#FF3366',
	'#FF3399',
	'#FF33CC',
	'#FF33FF',
	'#FF6600',
	'#FF6633',
	'#FF9900',
	'#FF9933',
	'#FFCC00',
	'#FFCC33'
];

/**
 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
 * and the Firebug extension (any Firefox version) are known
 * to support "%c" CSS customizations.
 *
 * TODO: add a `localStorage` variable to explicitly enable/disable colors
 */

// eslint-disable-next-line complexity
function useColors() {
	// NB: In an Electron preload script, document will be defined but not fully
	// initialized. Since we know we're in Chrome, we'll just detect this case
	// explicitly
	if (typeof window !== 'undefined' && window.process && (window.process.type === 'renderer' || window.process.__nwjs)) {
		return true;
	}

	// Internet Explorer and Edge do not support colors.
	if (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
		return false;
	}

	// Is webkit? http://stackoverflow.com/a/16459606/376773
	// document is undefined in react-native: https://github.com/facebook/react-native/pull/1632
	return (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||
		// Is firebug? http://stackoverflow.com/a/398120/376773
		(typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||
		// Is firefox >= v31?
		// https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
		(typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||
		// Double check webkit in userAgent just in case we are in a worker
		(typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/));
}

/**
 * Colorize log arguments if enabled.
 *
 * @api public
 */

function formatArgs(args) {
	args[0] = (this.useColors ? '%c' : '') +
		this.namespace +
		(this.useColors ? ' %c' : ' ') +
		args[0] +
		(this.useColors ? '%c ' : ' ') +
		'+' + module.exports.humanize(this.diff);

	if (!this.useColors) {
		return;
	}

	const c = 'color: ' + this.color;
	args.splice(1, 0, c, 'color: inherit');

	// The final "%c" is somewhat tricky, because there could be other
	// arguments passed either before or after the %c, so we need to
	// figure out the correct index to insert the CSS into
	let index = 0;
	let lastC = 0;
	args[0].replace(/%[a-zA-Z%]/g, match => {
		if (match === '%%') {
			return;
		}
		index++;
		if (match === '%c') {
			// We only are interested in the *last* %c
			// (the user may have provided their own)
			lastC = index;
		}
	});

	args.splice(lastC, 0, c);
}

/**
 * Invokes `console.debug()` when available.
 * No-op when `console.debug` is not a "function".
 * If `console.debug` is not available, falls back
 * to `console.log`.
 *
 * @api public
 */
exports.log = console.debug || console.log || (() => {});

/**
 * Save `namespaces`.
 *
 * @param {String} namespaces
 * @api private
 */
function save(namespaces) {
	try {
		if (namespaces) {
			exports.storage.setItem('debug', namespaces);
		} else {
			exports.storage.removeItem('debug');
		}
	} catch (error) {
		// Swallow
		// XXX (@Qix-) should we be logging these?
	}
}

/**
 * Load `namespaces`.
 *
 * @return {String} returns the previously persisted debug modes
 * @api private
 */
function load() {
	let r;
	try {
		r = exports.storage.getItem('debug');
	} catch (error) {
		// Swallow
		// XXX (@Qix-) should we be logging these?
	}

	// If debug isn't set in LS, and we're in Electron, try to load $DEBUG
	if (!r && typeof process !== 'undefined' && 'env' in process) {
		r = process.env.DEBUG;
	}

	return r;
}

/**
 * Localstorage attempts to return the localstorage.
 *
 * This is necessary because safari throws
 * when a user disables cookies/localstorage
 * and you attempt to access it.
 *
 * @return {LocalStorage}
 * @api private
 */

function localstorage() {
	try {
		// TVMLKit (Apple TV JS Runtime) does not have a window object, just localStorage in the global context
		// The Browser also has localStorage in the global context.
		return localStorage;
	} catch (error) {
		// Swallow
		// XXX (@Qix-) should we be logging these?
	}
}

module.exports = __webpack_require__(347)(exports);

const {formatters} = module.exports;

/**
 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
 */

formatters.j = function (v) {
	try {
		return JSON.stringify(v);
	} catch (error) {
		return '[UnexpectedJSONParseError]: ' + error.message;
	}
};


/***/ }),

/***/ 347:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {


/**
 * This is the common logic for both the Node.js and web browser
 * implementations of `debug()`.
 */

function setup(env) {
	createDebug.debug = createDebug;
	createDebug.default = createDebug;
	createDebug.coerce = coerce;
	createDebug.disable = disable;
	createDebug.enable = enable;
	createDebug.enabled = enabled;
	createDebug.humanize = __webpack_require__(48632);
	createDebug.destroy = destroy;

	Object.keys(env).forEach(key => {
		createDebug[key] = env[key];
	});

	/**
	* The currently active debug mode names, and names to skip.
	*/

	createDebug.names = [];
	createDebug.skips = [];

	/**
	* Map of special "%n" handling functions, for the debug "format" argument.
	*
	* Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
	*/
	createDebug.formatters = {};

	/**
	* Selects a color for a debug namespace
	* @param {String} namespace The namespace string for the debug instance to be colored
	* @return {Number|String} An ANSI color code for the given namespace
	* @api private
	*/
	function selectColor(namespace) {
		let hash = 0;

		for (let i = 0; i < namespace.length; i++) {
			hash = ((hash << 5) - hash) + namespace.charCodeAt(i);
			hash |= 0; // Convert to 32bit integer
		}

		return createDebug.colors[Math.abs(hash) % createDebug.colors.length];
	}
	createDebug.selectColor = selectColor;

	/**
	* Create a debugger with the given `namespace`.
	*
	* @param {String} namespace
	* @return {Function}
	* @api public
	*/
	function createDebug(namespace) {
		let prevTime;
		let enableOverride = null;
		let namespacesCache;
		let enabledCache;

		function debug(...args) {
			// Disabled?
			if (!debug.enabled) {
				return;
			}

			const self = debug;

			// Set `diff` timestamp
			const curr = Number(new Date());
			const ms = curr - (prevTime || curr);
			self.diff = ms;
			self.prev = prevTime;
			self.curr = curr;
			prevTime = curr;

			args[0] = createDebug.coerce(args[0]);

			if (typeof args[0] !== 'string') {
				// Anything else let's inspect with %O
				args.unshift('%O');
			}

			// Apply any `formatters` transformations
			let index = 0;
			args[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format) => {
				// If we encounter an escaped % then don't increase the array index
				if (match === '%%') {
					return '%';
				}
				index++;
				const formatter = createDebug.formatters[format];
				if (typeof formatter === 'function') {
					const val = args[index];
					match = formatter.call(self, val);

					// Now we need to remove `args[index]` since it's inlined in the `format`
					args.splice(index, 1);
					index--;
				}
				return match;
			});

			// Apply env-specific formatting (colors, etc.)
			createDebug.formatArgs.call(self, args);

			const logFn = self.log || createDebug.log;
			logFn.apply(self, args);
		}

		debug.namespace = namespace;
		debug.useColors = createDebug.useColors();
		debug.color = createDebug.selectColor(namespace);
		debug.extend = extend;
		debug.destroy = createDebug.destroy; // XXX Temporary. Will be removed in the next major release.

		Object.defineProperty(debug, 'enabled', {
			enumerable: true,
			configurable: false,
			get: () => {
				if (enableOverride !== null) {
					return enableOverride;
				}
				if (namespacesCache !== createDebug.namespaces) {
					namespacesCache = createDebug.namespaces;
					enabledCache = createDebug.enabled(namespace);
				}

				return enabledCache;
			},
			set: v => {
				enableOverride = v;
			}
		});

		// Env-specific initialization logic for debug instances
		if (typeof createDebug.init === 'function') {
			createDebug.init(debug);
		}

		return debug;
	}

	function extend(namespace, delimiter) {
		const newDebug = createDebug(this.namespace + (typeof delimiter === 'undefined' ? ':' : delimiter) + namespace);
		newDebug.log = this.log;
		return newDebug;
	}

	/**
	* Enables a debug mode by namespaces. This can include modes
	* separated by a colon and wildcards.
	*
	* @param {String} namespaces
	* @api public
	*/
	function enable(namespaces) {
		createDebug.save(namespaces);
		createDebug.namespaces = namespaces;

		createDebug.names = [];
		createDebug.skips = [];

		let i;
		const split = (typeof namespaces === 'string' ? namespaces : '').split(/[\s,]+/);
		const len = split.length;

		for (i = 0; i < len; i++) {
			if (!split[i]) {
				// ignore empty strings
				continue;
			}

			namespaces = split[i].replace(/\*/g, '.*?');

			if (namespaces[0] === '-') {
				createDebug.skips.push(new RegExp('^' + namespaces.slice(1) + '$'));
			} else {
				createDebug.names.push(new RegExp('^' + namespaces + '$'));
			}
		}
	}

	/**
	* Disable debug output.
	*
	* @return {String} namespaces
	* @api public
	*/
	function disable() {
		const namespaces = [
			...createDebug.names.map(toNamespace),
			...createDebug.skips.map(toNamespace).map(namespace => '-' + namespace)
		].join(',');
		createDebug.enable('');
		return namespaces;
	}

	/**
	* Returns true if the given mode name is enabled, false otherwise.
	*
	* @param {String} name
	* @return {Boolean}
	* @api public
	*/
	function enabled(name) {
		if (name[name.length - 1] === '*') {
			return true;
		}

		let i;
		let len;

		for (i = 0, len = createDebug.skips.length; i < len; i++) {
			if (createDebug.skips[i].test(name)) {
				return false;
			}
		}

		for (i = 0, len = createDebug.names.length; i < len; i++) {
			if (createDebug.names[i].test(name)) {
				return true;
			}
		}

		return false;
	}

	/**
	* Convert regexp to namespace
	*
	* @param {RegExp} regxep
	* @return {String} namespace
	* @api private
	*/
	function toNamespace(regexp) {
		return regexp.toString()
			.substring(2, regexp.toString().length - 2)
			.replace(/\.\*\?$/, '*');
	}

	/**
	* Coerce `val`.
	*
	* @param {Mixed} val
	* @return {Mixed}
	* @api private
	*/
	function coerce(val) {
		if (val instanceof Error) {
			return val.stack || val.message;
		}
		return val;
	}

	/**
	* XXX DO NOT USE. This is a temporary stub function.
	* XXX It WILL be removed in the next major release.
	*/
	function destroy() {
		console.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');
	}

	createDebug.enable(createDebug.load());

	return createDebug;
}

module.exports = setup;


/***/ }),

/***/ 5514:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/**
 * Detect Electron renderer / nwjs process, which is node, but we should
 * treat as a browser.
 */

if (typeof process === 'undefined' || process.type === 'renderer' || process.browser === true || process.__nwjs) {
	module.exports = __webpack_require__(32708);
} else {
	module.exports = __webpack_require__(73018);
}


/***/ }),

/***/ 73018:
/***/ ((module, exports, __webpack_require__) => {

/**
 * Module dependencies.
 */

const tty = __webpack_require__(76224);
const util = __webpack_require__(73837);

/**
 * This is the Node.js implementation of `debug()`.
 */

exports.init = init;
exports.log = log;
exports.formatArgs = formatArgs;
exports.save = save;
exports.load = load;
exports.useColors = useColors;
exports.destroy = util.deprecate(
	() => {},
	'Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.'
);

/**
 * Colors.
 */

exports.colors = [6, 2, 3, 4, 5, 1];

try {
	// Optional dependency (as in, doesn't need to be installed, NOT like optionalDependencies in package.json)
	// eslint-disable-next-line import/no-extraneous-dependencies
	const supportsColor = __webpack_require__(27581);

	if (supportsColor && (supportsColor.stderr || supportsColor).level >= 2) {
		exports.colors = [
			20,
			21,
			26,
			27,
			32,
			33,
			38,
			39,
			40,
			41,
			42,
			43,
			44,
			45,
			56,
			57,
			62,
			63,
			68,
			69,
			74,
			75,
			76,
			77,
			78,
			79,
			80,
			81,
			92,
			93,
			98,
			99,
			112,
			113,
			128,
			129,
			134,
			135,
			148,
			149,
			160,
			161,
			162,
			163,
			164,
			165,
			166,
			167,
			168,
			169,
			170,
			171,
			172,
			173,
			178,
			179,
			184,
			185,
			196,
			197,
			198,
			199,
			200,
			201,
			202,
			203,
			204,
			205,
			206,
			207,
			208,
			209,
			214,
			215,
			220,
			221
		];
	}
} catch (error) {
	// Swallow - we only care if `supports-color` is available; it doesn't have to be.
}

/**
 * Build up the default `inspectOpts` object from the environment variables.
 *
 *   $ DEBUG_COLORS=no DEBUG_DEPTH=10 DEBUG_SHOW_HIDDEN=enabled node script.js
 */

exports.inspectOpts = Object.keys(process.env).filter(key => {
	return /^debug_/i.test(key);
}).reduce((obj, key) => {
	// Camel-case
	const prop = key
		.substring(6)
		.toLowerCase()
		.replace(/_([a-z])/g, (_, k) => {
			return k.toUpperCase();
		});

	// Coerce string value into JS value
	let val = process.env[key];
	if (/^(yes|on|true|enabled)$/i.test(val)) {
		val = true;
	} else if (/^(no|off|false|disabled)$/i.test(val)) {
		val = false;
	} else if (val === 'null') {
		val = null;
	} else {
		val = Number(val);
	}

	obj[prop] = val;
	return obj;
}, {});

/**
 * Is stdout a TTY? Colored output is enabled when `true`.
 */

function useColors() {
	return 'colors' in exports.inspectOpts ?
		Boolean(exports.inspectOpts.colors) :
		tty.isatty(process.stderr.fd);
}

/**
 * Adds ANSI color escape codes if enabled.
 *
 * @api public
 */

function formatArgs(args) {
	const {namespace: name, useColors} = this;

	if (useColors) {
		const c = this.color;
		const colorCode = '\u001B[3' + (c < 8 ? c : '8;5;' + c);
		const prefix = `  ${colorCode};1m${name} \u001B[0m`;

		args[0] = prefix + args[0].split('\n').join('\n' + prefix);
		args.push(colorCode + 'm+' + module.exports.humanize(this.diff) + '\u001B[0m');
	} else {
		args[0] = getDate() + name + ' ' + args[0];
	}
}

function getDate() {
	if (exports.inspectOpts.hideDate) {
		return '';
	}
	return new Date().toISOString() + ' ';
}

/**
 * Invokes `util.format()` with the specified arguments and writes to stderr.
 */

function log(...args) {
	return process.stderr.write(util.format(...args) + '\n');
}

/**
 * Save `namespaces`.
 *
 * @param {String} namespaces
 * @api private
 */
function save(namespaces) {
	if (namespaces) {
		process.env.DEBUG = namespaces;
	} else {
		// If you set a process.env field to null or undefined, it gets cast to the
		// string 'null' or 'undefined'. Just delete instead.
		delete process.env.DEBUG;
	}
}

/**
 * Load `namespaces`.
 *
 * @return {String} returns the previously persisted debug modes
 * @api private
 */

function load() {
	return process.env.DEBUG;
}

/**
 * Init logic for `debug` instances.
 *
 * Create a new `inspectOpts` object in case `useColors` is set
 * differently for a particular `debug` instance.
 */

function init(debug) {
	debug.inspectOpts = {};

	const keys = Object.keys(exports.inspectOpts);
	for (let i = 0; i < keys.length; i++) {
		debug.inspectOpts[keys[i]] = exports.inspectOpts[keys[i]];
	}
}

module.exports = __webpack_require__(347)(exports);

const {formatters} = module.exports;

/**
 * Map %o to `util.inspect()`, all on a single line.
 */

formatters.o = function (v) {
	this.inspectOpts.colors = this.useColors;
	return util.inspect(v, this.inspectOpts)
		.split('\n')
		.map(str => str.trim())
		.join(' ');
};

/**
 * Map %O to `util.inspect()`, allowing multiple lines if needed.
 */

formatters.O = function (v) {
	this.inspectOpts.colors = this.useColors;
	return util.inspect(v, this.inspectOpts);
};


/***/ }),

/***/ 56713:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var hasPropertyDescriptors = __webpack_require__(64666)();

var GetIntrinsic = __webpack_require__(41033);

var $defineProperty = hasPropertyDescriptors && GetIntrinsic('%Object.defineProperty%', true);
if ($defineProperty) {
	try {
		$defineProperty({}, 'a', { value: 1 });
	} catch (e) {
		// IE 8 has a broken defineProperty
		$defineProperty = false;
	}
}

var $SyntaxError = GetIntrinsic('%SyntaxError%');
var $TypeError = GetIntrinsic('%TypeError%');

var gopd = __webpack_require__(99966);

/** @type {(obj: Record<PropertyKey, unknown>, property: PropertyKey, value: unknown, nonEnumerable?: boolean | null, nonWritable?: boolean | null, nonConfigurable?: boolean | null, loose?: boolean) => void} */
module.exports = function defineDataProperty(
	obj,
	property,
	value
) {
	if (!obj || (typeof obj !== 'object' && typeof obj !== 'function')) {
		throw new $TypeError('`obj` must be an object or a function`');
	}
	if (typeof property !== 'string' && typeof property !== 'symbol') {
		throw new $TypeError('`property` must be a string or a symbol`');
	}
	if (arguments.length > 3 && typeof arguments[3] !== 'boolean' && arguments[3] !== null) {
		throw new $TypeError('`nonEnumerable`, if provided, must be a boolean or null');
	}
	if (arguments.length > 4 && typeof arguments[4] !== 'boolean' && arguments[4] !== null) {
		throw new $TypeError('`nonWritable`, if provided, must be a boolean or null');
	}
	if (arguments.length > 5 && typeof arguments[5] !== 'boolean' && arguments[5] !== null) {
		throw new $TypeError('`nonConfigurable`, if provided, must be a boolean or null');
	}
	if (arguments.length > 6 && typeof arguments[6] !== 'boolean') {
		throw new $TypeError('`loose`, if provided, must be a boolean');
	}

	var nonEnumerable = arguments.length > 3 ? arguments[3] : null;
	var nonWritable = arguments.length > 4 ? arguments[4] : null;
	var nonConfigurable = arguments.length > 5 ? arguments[5] : null;
	var loose = arguments.length > 6 ? arguments[6] : false;

	/* @type {false | TypedPropertyDescriptor<unknown>} */
	var desc = !!gopd && gopd(obj, property);

	if ($defineProperty) {
		$defineProperty(obj, property, {
			configurable: nonConfigurable === null && desc ? desc.configurable : !nonConfigurable,
			enumerable: nonEnumerable === null && desc ? desc.enumerable : !nonEnumerable,
			value: value,
			writable: nonWritable === null && desc ? desc.writable : !nonWritable
		});
	} else if (loose || (!nonEnumerable && !nonWritable && !nonConfigurable)) {
		// must fall back to [[Set]], and was not explicitly asked to make non-enumerable, non-writable, or non-configurable
		obj[property] = value; // eslint-disable-line no-param-reassign
	} else {
		throw new $SyntaxError('This environment does not support defining a property as non-configurable, non-writable, or non-enumerable.');
	}
};


/***/ }),

/***/ 7000:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var Stream = (__webpack_require__(12781).Stream);
var util = __webpack_require__(73837);

module.exports = DelayedStream;
function DelayedStream() {
  this.source = null;
  this.dataSize = 0;
  this.maxDataSize = 1024 * 1024;
  this.pauseStream = true;

  this._maxDataSizeExceeded = false;
  this._released = false;
  this._bufferedEvents = [];
}
util.inherits(DelayedStream, Stream);

DelayedStream.create = function(source, options) {
  var delayedStream = new this();

  options = options || {};
  for (var option in options) {
    delayedStream[option] = options[option];
  }

  delayedStream.source = source;

  var realEmit = source.emit;
  source.emit = function() {
    delayedStream._handleEmit(arguments);
    return realEmit.apply(source, arguments);
  };

  source.on('error', function() {});
  if (delayedStream.pauseStream) {
    source.pause();
  }

  return delayedStream;
};

Object.defineProperty(DelayedStream.prototype, 'readable', {
  configurable: true,
  enumerable: true,
  get: function() {
    return this.source.readable;
  }
});

DelayedStream.prototype.setEncoding = function() {
  return this.source.setEncoding.apply(this.source, arguments);
};

DelayedStream.prototype.resume = function() {
  if (!this._released) {
    this.release();
  }

  this.source.resume();
};

DelayedStream.prototype.pause = function() {
  this.source.pause();
};

DelayedStream.prototype.release = function() {
  this._released = true;

  this._bufferedEvents.forEach(function(args) {
    this.emit.apply(this, args);
  }.bind(this));
  this._bufferedEvents = [];
};

DelayedStream.prototype.pipe = function() {
  var r = Stream.prototype.pipe.apply(this, arguments);
  this.resume();
  return r;
};

DelayedStream.prototype._handleEmit = function(args) {
  if (this._released) {
    this.emit.apply(this, args);
    return;
  }

  if (args[0] === 'data') {
    this.dataSize += args[1].length;
    this._checkIfMaxDataSizeExceeded();
  }

  this._bufferedEvents.push(args);
};

DelayedStream.prototype._checkIfMaxDataSizeExceeded = function() {
  if (this._maxDataSizeExceeded) {
    return;
  }

  if (this.dataSize <= this.maxDataSize) {
    return;
  }

  this._maxDataSizeExceeded = true;
  var message =
    'DelayedStream#maxDataSize of ' + this.maxDataSize + ' bytes exceeded.'
  this.emit('error', new Error(message));
};


/***/ }),

/***/ 28356:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var GetIntrinsic = __webpack_require__(41033);

var $defineProperty = GetIntrinsic('%Object.defineProperty%', true);

var hasToStringTag = __webpack_require__(24611)();
var hasOwn = __webpack_require__(96186);

var toStringTag = hasToStringTag ? Symbol.toStringTag : null;

module.exports = function setToStringTag(object, value) {
	var overrideIfSet = arguments.length > 2 && arguments[2] && arguments[2].force;
	if (toStringTag && (overrideIfSet || !hasOwn(object, toStringTag))) {
		if ($defineProperty) {
			$defineProperty(object, toStringTag, {
				configurable: true,
				enumerable: false,
				value: value,
				writable: false
			});
		} else {
			object[toStringTag] = value; // eslint-disable-line no-param-reassign
		}
	}
};


/***/ }),

/***/ 36716:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var hasSymbols = typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol';

var isPrimitive = __webpack_require__(66118);
var isCallable = __webpack_require__(15850);
var isDate = __webpack_require__(59244);
var isSymbol = __webpack_require__(58000);

var ordinaryToPrimitive = function OrdinaryToPrimitive(O, hint) {
	if (typeof O === 'undefined' || O === null) {
		throw new TypeError('Cannot call method on ' + O);
	}
	if (typeof hint !== 'string' || (hint !== 'number' && hint !== 'string')) {
		throw new TypeError('hint must be "string" or "number"');
	}
	var methodNames = hint === 'string' ? ['toString', 'valueOf'] : ['valueOf', 'toString'];
	var method, result, i;
	for (i = 0; i < methodNames.length; ++i) {
		method = O[methodNames[i]];
		if (isCallable(method)) {
			result = method.call(O);
			if (isPrimitive(result)) {
				return result;
			}
		}
	}
	throw new TypeError('No default value');
};

var GetMethod = function GetMethod(O, P) {
	var func = O[P];
	if (func !== null && typeof func !== 'undefined') {
		if (!isCallable(func)) {
			throw new TypeError(func + ' returned for property ' + P + ' of object ' + O + ' is not a function');
		}
		return func;
	}
	return void 0;
};

// http://www.ecma-international.org/ecma-262/6.0/#sec-toprimitive
module.exports = function ToPrimitive(input) {
	if (isPrimitive(input)) {
		return input;
	}
	var hint = 'default';
	if (arguments.length > 1) {
		if (arguments[1] === String) {
			hint = 'string';
		} else if (arguments[1] === Number) {
			hint = 'number';
		}
	}

	var exoticToPrim;
	if (hasSymbols) {
		if (Symbol.toPrimitive) {
			exoticToPrim = GetMethod(input, Symbol.toPrimitive);
		} else if (isSymbol(input)) {
			exoticToPrim = Symbol.prototype.valueOf;
		}
	}
	if (typeof exoticToPrim !== 'undefined') {
		var result = exoticToPrim.call(input, hint);
		if (isPrimitive(result)) {
			return result;
		}
		throw new TypeError('unable to convert exotic object to primitive');
	}
	if (hint === 'default' && (isDate(input) || isSymbol(input))) {
		hint = 'string';
	}
	return ordinaryToPrimitive(input, hint === 'default' ? 'number' : hint);
};


/***/ }),

/***/ 66118:
/***/ ((module) => {

"use strict";


module.exports = function isPrimitive(value) {
	return value === null || (typeof value !== 'function' && typeof value !== 'object');
};


/***/ }),

/***/ 1505:
/***/ ((module) => {

"use strict";


// do not edit .js files directly - edit src/index.jst



module.exports = function equal(a, b) {
  if (a === b) return true;

  if (a && b && typeof a == 'object' && typeof b == 'object') {
    if (a.constructor !== b.constructor) return false;

    var length, i, keys;
    if (Array.isArray(a)) {
      length = a.length;
      if (length != b.length) return false;
      for (i = length; i-- !== 0;)
        if (!equal(a[i], b[i])) return false;
      return true;
    }



    if (a.constructor === RegExp) return a.source === b.source && a.flags === b.flags;
    if (a.valueOf !== Object.prototype.valueOf) return a.valueOf() === b.valueOf();
    if (a.toString !== Object.prototype.toString) return a.toString() === b.toString();

    keys = Object.keys(a);
    length = keys.length;
    if (length !== Object.keys(b).length) return false;

    for (i = length; i-- !== 0;)
      if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;

    for (i = length; i-- !== 0;) {
      var key = keys[i];

      if (!equal(a[key], b[key])) return false;
    }

    return true;
  }

  // true if both NaN, false otherwise
  return a!==a && b!==b;
};


/***/ }),

/***/ 58740:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


/* eslint-disable no-var */

var reusify = __webpack_require__(57551)

function fastqueue (context, worker, concurrency) {
  if (typeof context === 'function') {
    concurrency = worker
    worker = context
    context = null
  }

  if (concurrency < 1) {
    throw new Error('fastqueue concurrency must be greater than 1')
  }

  var cache = reusify(Task)
  var queueHead = null
  var queueTail = null
  var _running = 0
  var errorHandler = null

  var self = {
    push: push,
    drain: noop,
    saturated: noop,
    pause: pause,
    paused: false,
    concurrency: concurrency,
    running: running,
    resume: resume,
    idle: idle,
    length: length,
    getQueue: getQueue,
    unshift: unshift,
    empty: noop,
    kill: kill,
    killAndDrain: killAndDrain,
    error: error
  }

  return self

  function running () {
    return _running
  }

  function pause () {
    self.paused = true
  }

  function length () {
    var current = queueHead
    var counter = 0

    while (current) {
      current = current.next
      counter++
    }

    return counter
  }

  function getQueue () {
    var current = queueHead
    var tasks = []

    while (current) {
      tasks.push(current.value)
      current = current.next
    }

    return tasks
  }

  function resume () {
    if (!self.paused) return
    self.paused = false
    for (var i = 0; i < self.concurrency; i++) {
      _running++
      release()
    }
  }

  function idle () {
    return _running === 0 && self.length() === 0
  }

  function push (value, done) {
    var current = cache.get()

    current.context = context
    current.release = release
    current.value = value
    current.callback = done || noop
    current.errorHandler = errorHandler

    if (_running === self.concurrency || self.paused) {
      if (queueTail) {
        queueTail.next = current
        queueTail = current
      } else {
        queueHead = current
        queueTail = current
        self.saturated()
      }
    } else {
      _running++
      worker.call(context, current.value, current.worked)
    }
  }

  function unshift (value, done) {
    var current = cache.get()

    current.context = context
    current.release = release
    current.value = value
    current.callback = done || noop

    if (_running === self.concurrency || self.paused) {
      if (queueHead) {
        current.next = queueHead
        queueHead = current
      } else {
        queueHead = current
        queueTail = current
        self.saturated()
      }
    } else {
      _running++
      worker.call(context, current.value, current.worked)
    }
  }

  function release (holder) {
    if (holder) {
      cache.release(holder)
    }
    var next = queueHead
    if (next) {
      if (!self.paused) {
        if (queueTail === queueHead) {
          queueTail = null
        }
        queueHead = next.next
        next.next = null
        worker.call(context, next.value, next.worked)
        if (queueTail === null) {
          self.empty()
        }
      } else {
        _running--
      }
    } else if (--_running === 0) {
      self.drain()
    }
  }

  function kill () {
    queueHead = null
    queueTail = null
    self.drain = noop
  }

  function killAndDrain () {
    queueHead = null
    queueTail = null
    self.drain()
    self.drain = noop
  }

  function error (handler) {
    errorHandler = handler
  }
}

function noop () {}

function Task () {
  this.value = null
  this.callback = noop
  this.next = null
  this.release = noop
  this.context = null
  this.errorHandler = null

  var self = this

  this.worked = function worked (err, result) {
    var callback = self.callback
    var errorHandler = self.errorHandler
    var val = self.value
    self.value = null
    self.callback = noop
    if (self.errorHandler) {
      errorHandler(err, val)
    }
    callback.call(self.context, err, result)
    self.release(self)
  }
}

function queueAsPromised (context, worker, concurrency) {
  if (typeof context === 'function') {
    concurrency = worker
    worker = context
    context = null
  }

  function asyncWrapper (arg, cb) {
    worker.call(this, arg)
      .then(function (res) {
        cb(null, res)
      }, cb)
  }

  var queue = fastqueue(context, asyncWrapper, concurrency)

  var pushCb = queue.push
  var unshiftCb = queue.unshift

  queue.push = push
  queue.unshift = unshift
  queue.drained = drained

  return queue

  function push (value) {
    var p = new Promise(function (resolve, reject) {
      pushCb(value, function (err, result) {
        if (err) {
          reject(err)
          return
        }
        resolve(result)
      })
    })

    // Let's fork the promise chain to
    // make the error bubble up to the user but
    // not lead to a unhandledRejection
    p.catch(noop)

    return p
  }

  function unshift (value) {
    var p = new Promise(function (resolve, reject) {
      unshiftCb(value, function (err, result) {
        if (err) {
          reject(err)
          return
        }
        resolve(result)
      })
    })

    // Let's fork the promise chain to
    // make the error bubble up to the user but
    // not lead to a unhandledRejection
    p.catch(noop)

    return p
  }

  function drained () {
    var previousDrain = queue.drain

    var p = new Promise(function (resolve) {
      queue.drain = function () {
        previousDrain()
        resolve()
      }
    })

    return p
  }
}

module.exports = fastqueue
module.exports.promise = queueAsPromised


/***/ }),

/***/ 2095:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
/*!
 * fill-range <https://github.com/jonschlinkert/fill-range>
 *
 * Copyright (c) 2014-present, Jon Schlinkert.
 * Licensed under the MIT License.
 */



const util = __webpack_require__(73837);
const toRegexRange = __webpack_require__(93534);

const isObject = val => val !== null && typeof val === 'object' && !Array.isArray(val);

const transform = toNumber => {
  return value => toNumber === true ? Number(value) : String(value);
};

const isValidValue = value => {
  return typeof value === 'number' || (typeof value === 'string' && value !== '');
};

const isNumber = num => Number.isInteger(+num);

const zeros = input => {
  let value = `${input}`;
  let index = -1;
  if (value[0] === '-') value = value.slice(1);
  if (value === '0') return false;
  while (value[++index] === '0');
  return index > 0;
};

const stringify = (start, end, options) => {
  if (typeof start === 'string' || typeof end === 'string') {
    return true;
  }
  return options.stringify === true;
};

const pad = (input, maxLength, toNumber) => {
  if (maxLength > 0) {
    let dash = input[0] === '-' ? '-' : '';
    if (dash) input = input.slice(1);
    input = (dash + input.padStart(dash ? maxLength - 1 : maxLength, '0'));
  }
  if (toNumber === false) {
    return String(input);
  }
  return input;
};

const toMaxLen = (input, maxLength) => {
  let negative = input[0] === '-' ? '-' : '';
  if (negative) {
    input = input.slice(1);
    maxLength--;
  }
  while (input.length < maxLength) input = '0' + input;
  return negative ? ('-' + input) : input;
};

const toSequence = (parts, options) => {
  parts.negatives.sort((a, b) => a < b ? -1 : a > b ? 1 : 0);
  parts.positives.sort((a, b) => a < b ? -1 : a > b ? 1 : 0);

  let prefix = options.capture ? '' : '?:';
  let positives = '';
  let negatives = '';
  let result;

  if (parts.positives.length) {
    positives = parts.positives.join('|');
  }

  if (parts.negatives.length) {
    negatives = `-(${prefix}${parts.negatives.join('|')})`;
  }

  if (positives && negatives) {
    result = `${positives}|${negatives}`;
  } else {
    result = positives || negatives;
  }

  if (options.wrap) {
    return `(${prefix}${result})`;
  }

  return result;
};

const toRange = (a, b, isNumbers, options) => {
  if (isNumbers) {
    return toRegexRange(a, b, { wrap: false, ...options });
  }

  let start = String.fromCharCode(a);
  if (a === b) return start;

  let stop = String.fromCharCode(b);
  return `[${start}-${stop}]`;
};

const toRegex = (start, end, options) => {
  if (Array.isArray(start)) {
    let wrap = options.wrap === true;
    let prefix = options.capture ? '' : '?:';
    return wrap ? `(${prefix}${start.join('|')})` : start.join('|');
  }
  return toRegexRange(start, end, options);
};

const rangeError = (...args) => {
  return new RangeError('Invalid range arguments: ' + util.inspect(...args));
};

const invalidRange = (start, end, options) => {
  if (options.strictRanges === true) throw rangeError([start, end]);
  return [];
};

const invalidStep = (step, options) => {
  if (options.strictRanges === true) {
    throw new TypeError(`Expected step "${step}" to be a number`);
  }
  return [];
};

const fillNumbers = (start, end, step = 1, options = {}) => {
  let a = Number(start);
  let b = Number(end);

  if (!Number.isInteger(a) || !Number.isInteger(b)) {
    if (options.strictRanges === true) throw rangeError([start, end]);
    return [];
  }

  // fix negative zero
  if (a === 0) a = 0;
  if (b === 0) b = 0;

  let descending = a > b;
  let startString = String(start);
  let endString = String(end);
  let stepString = String(step);
  step = Math.max(Math.abs(step), 1);

  let padded = zeros(startString) || zeros(endString) || zeros(stepString);
  let maxLen = padded ? Math.max(startString.length, endString.length, stepString.length) : 0;
  let toNumber = padded === false && stringify(start, end, options) === false;
  let format = options.transform || transform(toNumber);

  if (options.toRegex && step === 1) {
    return toRange(toMaxLen(start, maxLen), toMaxLen(end, maxLen), true, options);
  }

  let parts = { negatives: [], positives: [] };
  let push = num => parts[num < 0 ? 'negatives' : 'positives'].push(Math.abs(num));
  let range = [];
  let index = 0;

  while (descending ? a >= b : a <= b) {
    if (options.toRegex === true && step > 1) {
      push(a);
    } else {
      range.push(pad(format(a, index), maxLen, toNumber));
    }
    a = descending ? a - step : a + step;
    index++;
  }

  if (options.toRegex === true) {
    return step > 1
      ? toSequence(parts, options)
      : toRegex(range, null, { wrap: false, ...options });
  }

  return range;
};

const fillLetters = (start, end, step = 1, options = {}) => {
  if ((!isNumber(start) && start.length > 1) || (!isNumber(end) && end.length > 1)) {
    return invalidRange(start, end, options);
  }


  let format = options.transform || (val => String.fromCharCode(val));
  let a = `${start}`.charCodeAt(0);
  let b = `${end}`.charCodeAt(0);

  let descending = a > b;
  let min = Math.min(a, b);
  let max = Math.max(a, b);

  if (options.toRegex && step === 1) {
    return toRange(min, max, false, options);
  }

  let range = [];
  let index = 0;

  while (descending ? a >= b : a <= b) {
    range.push(format(a, index));
    a = descending ? a - step : a + step;
    index++;
  }

  if (options.toRegex === true) {
    return toRegex(range, null, { wrap: false, options });
  }

  return range;
};

const fill = (start, end, step, options = {}) => {
  if (end == null && isValidValue(start)) {
    return [start];
  }

  if (!isValidValue(start) || !isValidValue(end)) {
    return invalidRange(start, end, options);
  }

  if (typeof step === 'function') {
    return fill(start, end, 1, { transform: step });
  }

  if (isObject(step)) {
    return fill(start, end, 0, step);
  }

  let opts = { ...options };
  if (opts.capture === true) opts.wrap = true;
  step = step || opts.step || 1;

  if (!isNumber(step)) {
    if (step != null && !isObject(step)) return invalidStep(step, opts);
    return fill(start, end, 1, step);
  }

  if (isNumber(start) && isNumber(end)) {
    return fillNumbers(start, end, step, opts);
  }

  return fillLetters(start, end, Math.max(Math.abs(step), 1), opts);
};

module.exports = fill;


/***/ }),

/***/ 40829:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var debug;

module.exports = function () {
  if (!debug) {
    try {
      /* eslint global-require: off */
      debug = __webpack_require__(5514)("follow-redirects");
    }
    catch (error) { /* */ }
    if (typeof debug !== "function") {
      debug = function () { /* */ };
    }
  }
  debug.apply(null, arguments);
};


/***/ }),

/***/ 86874:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var url = __webpack_require__(57310);
var URL = url.URL;
var http = __webpack_require__(13685);
var https = __webpack_require__(95687);
var Writable = (__webpack_require__(12781).Writable);
var assert = __webpack_require__(39491);
var debug = __webpack_require__(40829);

// Whether to use the native URL object or the legacy url module
var useNativeURL = false;
try {
  assert(new URL());
}
catch (error) {
  useNativeURL = error.code === "ERR_INVALID_URL";
}

// URL fields to preserve in copy operations
var preservedUrlFields = [
  "auth",
  "host",
  "hostname",
  "href",
  "path",
  "pathname",
  "port",
  "protocol",
  "query",
  "search",
];

// Create handlers that pass events from native requests
var events = ["abort", "aborted", "connect", "error", "socket", "timeout"];
var eventHandlers = Object.create(null);
events.forEach(function (event) {
  eventHandlers[event] = function (arg1, arg2, arg3) {
    this._redirectable.emit(event, arg1, arg2, arg3);
  };
});

// Error types with codes
var InvalidUrlError = createErrorType(
  "ERR_INVALID_URL",
  "Invalid URL",
  TypeError
);
var RedirectionError = createErrorType(
  "ERR_FR_REDIRECTION_FAILURE",
  "Redirected request failed"
);
var TooManyRedirectsError = createErrorType(
  "ERR_FR_TOO_MANY_REDIRECTS",
  "Maximum number of redirects exceeded",
  RedirectionError
);
var MaxBodyLengthExceededError = createErrorType(
  "ERR_FR_MAX_BODY_LENGTH_EXCEEDED",
  "Request body larger than maxBodyLength limit"
);
var WriteAfterEndError = createErrorType(
  "ERR_STREAM_WRITE_AFTER_END",
  "write after end"
);

// istanbul ignore next
var destroy = Writable.prototype.destroy || noop;

// An HTTP(S) request that can be redirected
function RedirectableRequest(options, responseCallback) {
  // Initialize the request
  Writable.call(this);
  this._sanitizeOptions(options);
  this._options = options;
  this._ended = false;
  this._ending = false;
  this._redirectCount = 0;
  this._redirects = [];
  this._requestBodyLength = 0;
  this._requestBodyBuffers = [];

  // Attach a callback if passed
  if (responseCallback) {
    this.on("response", responseCallback);
  }

  // React to responses of native requests
  var self = this;
  this._onNativeResponse = function (response) {
    try {
      self._processResponse(response);
    }
    catch (cause) {
      self.emit("error", cause instanceof RedirectionError ?
        cause : new RedirectionError({ cause: cause }));
    }
  };

  // Perform the first request
  this._performRequest();
}
RedirectableRequest.prototype = Object.create(Writable.prototype);

RedirectableRequest.prototype.abort = function () {
  destroyRequest(this._currentRequest);
  this._currentRequest.abort();
  this.emit("abort");
};

RedirectableRequest.prototype.destroy = function (error) {
  destroyRequest(this._currentRequest, error);
  destroy.call(this, error);
  return this;
};

// Writes buffered data to the current native request
RedirectableRequest.prototype.write = function (data, encoding, callback) {
  // Writing is not allowed if end has been called
  if (this._ending) {
    throw new WriteAfterEndError();
  }

  // Validate input and shift parameters if necessary
  if (!isString(data) && !isBuffer(data)) {
    throw new TypeError("data should be a string, Buffer or Uint8Array");
  }
  if (isFunction(encoding)) {
    callback = encoding;
    encoding = null;
  }

  // Ignore empty buffers, since writing them doesn't invoke the callback
  // https://github.com/nodejs/node/issues/22066
  if (data.length === 0) {
    if (callback) {
      callback();
    }
    return;
  }
  // Only write when we don't exceed the maximum body length
  if (this._requestBodyLength + data.length <= this._options.maxBodyLength) {
    this._requestBodyLength += data.length;
    this._requestBodyBuffers.push({ data: data, encoding: encoding });
    this._currentRequest.write(data, encoding, callback);
  }
  // Error when we exceed the maximum body length
  else {
    this.emit("error", new MaxBodyLengthExceededError());
    this.abort();
  }
};

// Ends the current native request
RedirectableRequest.prototype.end = function (data, encoding, callback) {
  // Shift parameters if necessary
  if (isFunction(data)) {
    callback = data;
    data = encoding = null;
  }
  else if (isFunction(encoding)) {
    callback = encoding;
    encoding = null;
  }

  // Write data if needed and end
  if (!data) {
    this._ended = this._ending = true;
    this._currentRequest.end(null, null, callback);
  }
  else {
    var self = this;
    var currentRequest = this._currentRequest;
    this.write(data, encoding, function () {
      self._ended = true;
      currentRequest.end(null, null, callback);
    });
    this._ending = true;
  }
};

// Sets a header value on the current native request
RedirectableRequest.prototype.setHeader = function (name, value) {
  this._options.headers[name] = value;
  this._currentRequest.setHeader(name, value);
};

// Clears a header value on the current native request
RedirectableRequest.prototype.removeHeader = function (name) {
  delete this._options.headers[name];
  this._currentRequest.removeHeader(name);
};

// Global timeout for all underlying requests
RedirectableRequest.prototype.setTimeout = function (msecs, callback) {
  var self = this;

  // Destroys the socket on timeout
  function destroyOnTimeout(socket) {
    socket.setTimeout(msecs);
    socket.removeListener("timeout", socket.destroy);
    socket.addListener("timeout", socket.destroy);
  }

  // Sets up a timer to trigger a timeout event
  function startTimer(socket) {
    if (self._timeout) {
      clearTimeout(self._timeout);
    }
    self._timeout = setTimeout(function () {
      self.emit("timeout");
      clearTimer();
    }, msecs);
    destroyOnTimeout(socket);
  }

  // Stops a timeout from triggering
  function clearTimer() {
    // Clear the timeout
    if (self._timeout) {
      clearTimeout(self._timeout);
      self._timeout = null;
    }

    // Clean up all attached listeners
    self.removeListener("abort", clearTimer);
    self.removeListener("error", clearTimer);
    self.removeListener("response", clearTimer);
    self.removeListener("close", clearTimer);
    if (callback) {
      self.removeListener("timeout", callback);
    }
    if (!self.socket) {
      self._currentRequest.removeListener("socket", startTimer);
    }
  }

  // Attach callback if passed
  if (callback) {
    this.on("timeout", callback);
  }

  // Start the timer if or when the socket is opened
  if (this.socket) {
    startTimer(this.socket);
  }
  else {
    this._currentRequest.once("socket", startTimer);
  }

  // Clean up on events
  this.on("socket", destroyOnTimeout);
  this.on("abort", clearTimer);
  this.on("error", clearTimer);
  this.on("response", clearTimer);
  this.on("close", clearTimer);

  return this;
};

// Proxy all other public ClientRequest methods
[
  "flushHeaders", "getHeader",
  "setNoDelay", "setSocketKeepAlive",
].forEach(function (method) {
  RedirectableRequest.prototype[method] = function (a, b) {
    return this._currentRequest[method](a, b);
  };
});

// Proxy all public ClientRequest properties
["aborted", "connection", "socket"].forEach(function (property) {
  Object.defineProperty(RedirectableRequest.prototype, property, {
    get: function () { return this._currentRequest[property]; },
  });
});

RedirectableRequest.prototype._sanitizeOptions = function (options) {
  // Ensure headers are always present
  if (!options.headers) {
    options.headers = {};
  }

  // Since http.request treats host as an alias of hostname,
  // but the url module interprets host as hostname plus port,
  // eliminate the host property to avoid confusion.
  if (options.host) {
    // Use hostname if set, because it has precedence
    if (!options.hostname) {
      options.hostname = options.host;
    }
    delete options.host;
  }

  // Complete the URL object when necessary
  if (!options.pathname && options.path) {
    var searchPos = options.path.indexOf("?");
    if (searchPos < 0) {
      options.pathname = options.path;
    }
    else {
      options.pathname = options.path.substring(0, searchPos);
      options.search = options.path.substring(searchPos);
    }
  }
};


// Executes the next native request (initial or redirect)
RedirectableRequest.prototype._performRequest = function () {
  // Load the native protocol
  var protocol = this._options.protocol;
  var nativeProtocol = this._options.nativeProtocols[protocol];
  if (!nativeProtocol) {
    throw new TypeError("Unsupported protocol " + protocol);
  }

  // If specified, use the agent corresponding to the protocol
  // (HTTP and HTTPS use different types of agents)
  if (this._options.agents) {
    var scheme = protocol.slice(0, -1);
    this._options.agent = this._options.agents[scheme];
  }

  // Create the native request and set up its event handlers
  var request = this._currentRequest =
        nativeProtocol.request(this._options, this._onNativeResponse);
  request._redirectable = this;
  for (var event of events) {
    request.on(event, eventHandlers[event]);
  }

  // RFC7230§5.3.1: When making a request directly to an origin server, […]
  // a client MUST send only the absolute path […] as the request-target.
  this._currentUrl = /^\//.test(this._options.path) ?
    url.format(this._options) :
    // When making a request to a proxy, […]
    // a client MUST send the target URI in absolute-form […].
    this._options.path;

  // End a redirected request
  // (The first request must be ended explicitly with RedirectableRequest#end)
  if (this._isRedirect) {
    // Write the request entity and end
    var i = 0;
    var self = this;
    var buffers = this._requestBodyBuffers;
    (function writeNext(error) {
      // Only write if this request has not been redirected yet
      /* istanbul ignore else */
      if (request === self._currentRequest) {
        // Report any write errors
        /* istanbul ignore if */
        if (error) {
          self.emit("error", error);
        }
        // Write the next buffer if there are still left
        else if (i < buffers.length) {
          var buffer = buffers[i++];
          /* istanbul ignore else */
          if (!request.finished) {
            request.write(buffer.data, buffer.encoding, writeNext);
          }
        }
        // End the request if `end` has been called on us
        else if (self._ended) {
          request.end();
        }
      }
    }());
  }
};

// Processes a response from the current native request
RedirectableRequest.prototype._processResponse = function (response) {
  // Store the redirected response
  var statusCode = response.statusCode;
  if (this._options.trackRedirects) {
    this._redirects.push({
      url: this._currentUrl,
      headers: response.headers,
      statusCode: statusCode,
    });
  }

  // RFC7231§6.4: The 3xx (Redirection) class of status code indicates
  // that further action needs to be taken by the user agent in order to
  // fulfill the request. If a Location header field is provided,
  // the user agent MAY automatically redirect its request to the URI
  // referenced by the Location field value,
  // even if the specific status code is not understood.

  // If the response is not a redirect; return it as-is
  var location = response.headers.location;
  if (!location || this._options.followRedirects === false ||
      statusCode < 300 || statusCode >= 400) {
    response.responseUrl = this._currentUrl;
    response.redirects = this._redirects;
    this.emit("response", response);

    // Clean up
    this._requestBodyBuffers = [];
    return;
  }

  // The response is a redirect, so abort the current request
  destroyRequest(this._currentRequest);
  // Discard the remainder of the response to avoid waiting for data
  response.destroy();

  // RFC7231§6.4: A client SHOULD detect and intervene
  // in cyclical redirections (i.e., "infinite" redirection loops).
  if (++this._redirectCount > this._options.maxRedirects) {
    throw new TooManyRedirectsError();
  }

  // Store the request headers if applicable
  var requestHeaders;
  var beforeRedirect = this._options.beforeRedirect;
  if (beforeRedirect) {
    requestHeaders = Object.assign({
      // The Host header was set by nativeProtocol.request
      Host: response.req.getHeader("host"),
    }, this._options.headers);
  }

  // RFC7231§6.4: Automatic redirection needs to done with
  // care for methods not known to be safe, […]
  // RFC7231§6.4.2–3: For historical reasons, a user agent MAY change
  // the request method from POST to GET for the subsequent request.
  var method = this._options.method;
  if ((statusCode === 301 || statusCode === 302) && this._options.method === "POST" ||
      // RFC7231§6.4.4: The 303 (See Other) status code indicates that
      // the server is redirecting the user agent to a different resource […]
      // A user agent can perform a retrieval request targeting that URI
      // (a GET or HEAD request if using HTTP) […]
      (statusCode === 303) && !/^(?:GET|HEAD)$/.test(this._options.method)) {
    this._options.method = "GET";
    // Drop a possible entity and headers related to it
    this._requestBodyBuffers = [];
    removeMatchingHeaders(/^content-/i, this._options.headers);
  }

  // Drop the Host header, as the redirect might lead to a different host
  var currentHostHeader = removeMatchingHeaders(/^host$/i, this._options.headers);

  // If the redirect is relative, carry over the host of the last request
  var currentUrlParts = parseUrl(this._currentUrl);
  var currentHost = currentHostHeader || currentUrlParts.host;
  var currentUrl = /^\w+:/.test(location) ? this._currentUrl :
    url.format(Object.assign(currentUrlParts, { host: currentHost }));

  // Create the redirected request
  var redirectUrl = resolveUrl(location, currentUrl);
  debug("redirecting to", redirectUrl.href);
  this._isRedirect = true;
  spreadUrlObject(redirectUrl, this._options);

  // Drop confidential headers when redirecting to a less secure protocol
  // or to a different domain that is not a superdomain
  if (redirectUrl.protocol !== currentUrlParts.protocol &&
     redirectUrl.protocol !== "https:" ||
     redirectUrl.host !== currentHost &&
     !isSubdomain(redirectUrl.host, currentHost)) {
    removeMatchingHeaders(/^(?:authorization|cookie)$/i, this._options.headers);
  }

  // Evaluate the beforeRedirect callback
  if (isFunction(beforeRedirect)) {
    var responseDetails = {
      headers: response.headers,
      statusCode: statusCode,
    };
    var requestDetails = {
      url: currentUrl,
      method: method,
      headers: requestHeaders,
    };
    beforeRedirect(this._options, responseDetails, requestDetails);
    this._sanitizeOptions(this._options);
  }

  // Perform the redirected request
  this._performRequest();
};

// Wraps the key/value object of protocols with redirect functionality
function wrap(protocols) {
  // Default settings
  var exports = {
    maxRedirects: 21,
    maxBodyLength: 10 * 1024 * 1024,
  };

  // Wrap each protocol
  var nativeProtocols = {};
  Object.keys(protocols).forEach(function (scheme) {
    var protocol = scheme + ":";
    var nativeProtocol = nativeProtocols[protocol] = protocols[scheme];
    var wrappedProtocol = exports[scheme] = Object.create(nativeProtocol);

    // Executes a request, following redirects
    function request(input, options, callback) {
      // Parse parameters, ensuring that input is an object
      if (isURL(input)) {
        input = spreadUrlObject(input);
      }
      else if (isString(input)) {
        input = spreadUrlObject(parseUrl(input));
      }
      else {
        callback = options;
        options = validateUrl(input);
        input = { protocol: protocol };
      }
      if (isFunction(options)) {
        callback = options;
        options = null;
      }

      // Set defaults
      options = Object.assign({
        maxRedirects: exports.maxRedirects,
        maxBodyLength: exports.maxBodyLength,
      }, input, options);
      options.nativeProtocols = nativeProtocols;
      if (!isString(options.host) && !isString(options.hostname)) {
        options.hostname = "::1";
      }

      assert.equal(options.protocol, protocol, "protocol mismatch");
      debug("options", options);
      return new RedirectableRequest(options, callback);
    }

    // Executes a GET request, following redirects
    function get(input, options, callback) {
      var wrappedRequest = wrappedProtocol.request(input, options, callback);
      wrappedRequest.end();
      return wrappedRequest;
    }

    // Expose the properties on the wrapped protocol
    Object.defineProperties(wrappedProtocol, {
      request: { value: request, configurable: true, enumerable: true, writable: true },
      get: { value: get, configurable: true, enumerable: true, writable: true },
    });
  });
  return exports;
}

function noop() { /* empty */ }

function parseUrl(input) {
  var parsed;
  /* istanbul ignore else */
  if (useNativeURL) {
    parsed = new URL(input);
  }
  else {
    // Ensure the URL is valid and absolute
    parsed = validateUrl(url.parse(input));
    if (!isString(parsed.protocol)) {
      throw new InvalidUrlError({ input });
    }
  }
  return parsed;
}

function resolveUrl(relative, base) {
  /* istanbul ignore next */
  return useNativeURL ? new URL(relative, base) : parseUrl(url.resolve(base, relative));
}

function validateUrl(input) {
  if (/^\[/.test(input.hostname) && !/^\[[:0-9a-f]+\]$/i.test(input.hostname)) {
    throw new InvalidUrlError({ input: input.href || input });
  }
  if (/^\[/.test(input.host) && !/^\[[:0-9a-f]+\](:\d+)?$/i.test(input.host)) {
    throw new InvalidUrlError({ input: input.href || input });
  }
  return input;
}

function spreadUrlObject(urlObject, target) {
  var spread = target || {};
  for (var key of preservedUrlFields) {
    spread[key] = urlObject[key];
  }

  // Fix IPv6 hostname
  if (spread.hostname.startsWith("[")) {
    spread.hostname = spread.hostname.slice(1, -1);
  }
  // Ensure port is a number
  if (spread.port !== "") {
    spread.port = Number(spread.port);
  }
  // Concatenate path
  spread.path = spread.search ? spread.pathname + spread.search : spread.pathname;

  return spread;
}

function removeMatchingHeaders(regex, headers) {
  var lastValue;
  for (var header in headers) {
    if (regex.test(header)) {
      lastValue = headers[header];
      delete headers[header];
    }
  }
  return (lastValue === null || typeof lastValue === "undefined") ?
    undefined : String(lastValue).trim();
}

function createErrorType(code, message, baseClass) {
  // Create constructor
  function CustomError(properties) {
    Error.captureStackTrace(this, this.constructor);
    Object.assign(this, properties || {});
    this.code = code;
    this.message = this.cause ? message + ": " + this.cause.message : message;
  }

  // Attach constructor and set default properties
  CustomError.prototype = new (baseClass || Error)();
  Object.defineProperties(CustomError.prototype, {
    constructor: {
      value: CustomError,
      enumerable: false,
    },
    name: {
      value: "Error [" + code + "]",
      enumerable: false,
    },
  });
  return CustomError;
}

function destroyRequest(request, error) {
  for (var event of events) {
    request.removeListener(event, eventHandlers[event]);
  }
  request.on("error", noop);
  request.destroy(error);
}

function isSubdomain(subdomain, domain) {
  assert(isString(subdomain) && isString(domain));
  var dot = subdomain.length - domain.length - 1;
  return dot > 0 && subdomain[dot] === "." && subdomain.endsWith(domain);
}

function isString(value) {
  return typeof value === "string" || value instanceof String;
}

function isFunction(value) {
  return typeof value === "function";
}

function isBuffer(value) {
  return typeof value === "object" && ("length" in value);
}

function isURL(value) {
  return URL && value instanceof URL;
}

// Exports
module.exports = wrap({ http: http, https: https });
module.exports.wrap = wrap;


/***/ }),

/***/ 15672:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var CombinedStream = __webpack_require__(54757);
var util = __webpack_require__(73837);
var path = __webpack_require__(71017);
var http = __webpack_require__(13685);
var https = __webpack_require__(95687);
var parseUrl = (__webpack_require__(57310).parse);
var fs = __webpack_require__(57147);
var Stream = (__webpack_require__(12781).Stream);
var mime = __webpack_require__(49348);
var asynckit = __webpack_require__(1255);
var populate = __webpack_require__(67437);

// Public API
module.exports = FormData;

// make it a Stream
util.inherits(FormData, CombinedStream);

/**
 * Create readable "multipart/form-data" streams.
 * Can be used to submit forms
 * and file uploads to other web applications.
 *
 * @constructor
 * @param {Object} options - Properties to be added/overriden for FormData and CombinedStream
 */
function FormData(options) {
  if (!(this instanceof FormData)) {
    return new FormData(options);
  }

  this._overheadLength = 0;
  this._valueLength = 0;
  this._valuesToMeasure = [];

  CombinedStream.call(this);

  options = options || {};
  for (var option in options) {
    this[option] = options[option];
  }
}

FormData.LINE_BREAK = '\r\n';
FormData.DEFAULT_CONTENT_TYPE = 'application/octet-stream';

FormData.prototype.append = function(field, value, options) {

  options = options || {};

  // allow filename as single option
  if (typeof options == 'string') {
    options = {filename: options};
  }

  var append = CombinedStream.prototype.append.bind(this);

  // all that streamy business can't handle numbers
  if (typeof value == 'number') {
    value = '' + value;
  }

  // https://github.com/felixge/node-form-data/issues/38
  if (util.isArray(value)) {
    // Please convert your array into string
    // the way web server expects it
    this._error(new Error('Arrays are not supported.'));
    return;
  }

  var header = this._multiPartHeader(field, value, options);
  var footer = this._multiPartFooter();

  append(header);
  append(value);
  append(footer);

  // pass along options.knownLength
  this._trackLength(header, value, options);
};

FormData.prototype._trackLength = function(header, value, options) {
  var valueLength = 0;

  // used w/ getLengthSync(), when length is known.
  // e.g. for streaming directly from a remote server,
  // w/ a known file a size, and not wanting to wait for
  // incoming file to finish to get its size.
  if (options.knownLength != null) {
    valueLength += +options.knownLength;
  } else if (Buffer.isBuffer(value)) {
    valueLength = value.length;
  } else if (typeof value === 'string') {
    valueLength = Buffer.byteLength(value);
  }

  this._valueLength += valueLength;

  // @check why add CRLF? does this account for custom/multiple CRLFs?
  this._overheadLength +=
    Buffer.byteLength(header) +
    FormData.LINE_BREAK.length;

  // empty or either doesn't have path or not an http response or not a stream
  if (!value || ( !value.path && !(value.readable && value.hasOwnProperty('httpVersion')) && !(value instanceof Stream))) {
    return;
  }

  // no need to bother with the length
  if (!options.knownLength) {
    this._valuesToMeasure.push(value);
  }
};

FormData.prototype._lengthRetriever = function(value, callback) {

  if (value.hasOwnProperty('fd')) {

    // take read range into a account
    // `end` = Infinity –> read file till the end
    //
    // TODO: Looks like there is bug in Node fs.createReadStream
    // it doesn't respect `end` options without `start` options
    // Fix it when node fixes it.
    // https://github.com/joyent/node/issues/7819
    if (value.end != undefined && value.end != Infinity && value.start != undefined) {

      // when end specified
      // no need to calculate range
      // inclusive, starts with 0
      callback(null, value.end + 1 - (value.start ? value.start : 0));

    // not that fast snoopy
    } else {
      // still need to fetch file size from fs
      fs.stat(value.path, function(err, stat) {

        var fileSize;

        if (err) {
          callback(err);
          return;
        }

        // update final size based on the range options
        fileSize = stat.size - (value.start ? value.start : 0);
        callback(null, fileSize);
      });
    }

  // or http response
  } else if (value.hasOwnProperty('httpVersion')) {
    callback(null, +value.headers['content-length']);

  // or request stream http://github.com/mikeal/request
  } else if (value.hasOwnProperty('httpModule')) {
    // wait till response come back
    value.on('response', function(response) {
      value.pause();
      callback(null, +response.headers['content-length']);
    });
    value.resume();

  // something else
  } else {
    callback('Unknown stream');
  }
};

FormData.prototype._multiPartHeader = function(field, value, options) {
  // custom header specified (as string)?
  // it becomes responsible for boundary
  // (e.g. to handle extra CRLFs on .NET servers)
  if (typeof options.header == 'string') {
    return options.header;
  }

  var contentDisposition = this._getContentDisposition(value, options);
  var contentType = this._getContentType(value, options);

  var contents = '';
  var headers  = {
    // add custom disposition as third element or keep it two elements if not
    'Content-Disposition': ['form-data', 'name="' + field + '"'].concat(contentDisposition || []),
    // if no content type. allow it to be empty array
    'Content-Type': [].concat(contentType || [])
  };

  // allow custom headers.
  if (typeof options.header == 'object') {
    populate(headers, options.header);
  }

  var header;
  for (var prop in headers) {
    if (!headers.hasOwnProperty(prop)) continue;
    header = headers[prop];

    // skip nullish headers.
    if (header == null) {
      continue;
    }

    // convert all headers to arrays.
    if (!Array.isArray(header)) {
      header = [header];
    }

    // add non-empty headers.
    if (header.length) {
      contents += prop + ': ' + header.join('; ') + FormData.LINE_BREAK;
    }
  }

  return '--' + this.getBoundary() + FormData.LINE_BREAK + contents + FormData.LINE_BREAK;
};

FormData.prototype._getContentDisposition = function(value, options) {

  var filename
    , contentDisposition
    ;

  if (typeof options.filepath === 'string') {
    // custom filepath for relative paths
    filename = path.normalize(options.filepath).replace(/\\/g, '/');
  } else if (options.filename || value.name || value.path) {
    // custom filename take precedence
    // formidable and the browser add a name property
    // fs- and request- streams have path property
    filename = path.basename(options.filename || value.name || value.path);
  } else if (value.readable && value.hasOwnProperty('httpVersion')) {
    // or try http response
    filename = path.basename(value.client._httpMessage.path || '');
  }

  if (filename) {
    contentDisposition = 'filename="' + filename + '"';
  }

  return contentDisposition;
};

FormData.prototype._getContentType = function(value, options) {

  // use custom content-type above all
  var contentType = options.contentType;

  // or try `name` from formidable, browser
  if (!contentType && value.name) {
    contentType = mime.lookup(value.name);
  }

  // or try `path` from fs-, request- streams
  if (!contentType && value.path) {
    contentType = mime.lookup(value.path);
  }

  // or if it's http-reponse
  if (!contentType && value.readable && value.hasOwnProperty('httpVersion')) {
    contentType = value.headers['content-type'];
  }

  // or guess it from the filepath or filename
  if (!contentType && (options.filepath || options.filename)) {
    contentType = mime.lookup(options.filepath || options.filename);
  }

  // fallback to the default content type if `value` is not simple value
  if (!contentType && typeof value == 'object') {
    contentType = FormData.DEFAULT_CONTENT_TYPE;
  }

  return contentType;
};

FormData.prototype._multiPartFooter = function() {
  return function(next) {
    var footer = FormData.LINE_BREAK;

    var lastPart = (this._streams.length === 0);
    if (lastPart) {
      footer += this._lastBoundary();
    }

    next(footer);
  }.bind(this);
};

FormData.prototype._lastBoundary = function() {
  return '--' + this.getBoundary() + '--' + FormData.LINE_BREAK;
};

FormData.prototype.getHeaders = function(userHeaders) {
  var header;
  var formHeaders = {
    'content-type': 'multipart/form-data; boundary=' + this.getBoundary()
  };

  for (header in userHeaders) {
    if (userHeaders.hasOwnProperty(header)) {
      formHeaders[header.toLowerCase()] = userHeaders[header];
    }
  }

  return formHeaders;
};

FormData.prototype.setBoundary = function(boundary) {
  this._boundary = boundary;
};

FormData.prototype.getBoundary = function() {
  if (!this._boundary) {
    this._generateBoundary();
  }

  return this._boundary;
};

FormData.prototype.getBuffer = function() {
  var dataBuffer = new Buffer.alloc( 0 );
  var boundary = this.getBoundary();

  // Create the form content. Add Line breaks to the end of data.
  for (var i = 0, len = this._streams.length; i < len; i++) {
    if (typeof this._streams[i] !== 'function') {

      // Add content to the buffer.
      if(Buffer.isBuffer(this._streams[i])) {
        dataBuffer = Buffer.concat( [dataBuffer, this._streams[i]]);
      }else {
        dataBuffer = Buffer.concat( [dataBuffer, Buffer.from(this._streams[i])]);
      }

      // Add break after content.
      if (typeof this._streams[i] !== 'string' || this._streams[i].substring( 2, boundary.length + 2 ) !== boundary) {
        dataBuffer = Buffer.concat( [dataBuffer, Buffer.from(FormData.LINE_BREAK)] );
      }
    }
  }

  // Add the footer and return the Buffer object.
  return Buffer.concat( [dataBuffer, Buffer.from(this._lastBoundary())] );
};

FormData.prototype._generateBoundary = function() {
  // This generates a 50 character boundary similar to those used by Firefox.
  // They are optimized for boyer-moore parsing.
  var boundary = '--------------------------';
  for (var i = 0; i < 24; i++) {
    boundary += Math.floor(Math.random() * 10).toString(16);
  }

  this._boundary = boundary;
};

// Note: getLengthSync DOESN'T calculate streams length
// As workaround one can calculate file size manually
// and add it as knownLength option
FormData.prototype.getLengthSync = function() {
  var knownLength = this._overheadLength + this._valueLength;

  // Don't get confused, there are 3 "internal" streams for each keyval pair
  // so it basically checks if there is any value added to the form
  if (this._streams.length) {
    knownLength += this._lastBoundary().length;
  }

  // https://github.com/form-data/form-data/issues/40
  if (!this.hasKnownLength()) {
    // Some async length retrievers are present
    // therefore synchronous length calculation is false.
    // Please use getLength(callback) to get proper length
    this._error(new Error('Cannot calculate proper length in synchronous way.'));
  }

  return knownLength;
};

// Public API to check if length of added values is known
// https://github.com/form-data/form-data/issues/196
// https://github.com/form-data/form-data/issues/262
FormData.prototype.hasKnownLength = function() {
  var hasKnownLength = true;

  if (this._valuesToMeasure.length) {
    hasKnownLength = false;
  }

  return hasKnownLength;
};

FormData.prototype.getLength = function(cb) {
  var knownLength = this._overheadLength + this._valueLength;

  if (this._streams.length) {
    knownLength += this._lastBoundary().length;
  }

  if (!this._valuesToMeasure.length) {
    process.nextTick(cb.bind(this, null, knownLength));
    return;
  }

  asynckit.parallel(this._valuesToMeasure, this._lengthRetriever, function(err, values) {
    if (err) {
      cb(err);
      return;
    }

    values.forEach(function(length) {
      knownLength += length;
    });

    cb(null, knownLength);
  });
};

FormData.prototype.submit = function(params, cb) {
  var request
    , options
    , defaults = {method: 'post'}
    ;

  // parse provided url if it's string
  // or treat it as options object
  if (typeof params == 'string') {

    params = parseUrl(params);
    options = populate({
      port: params.port,
      path: params.pathname,
      host: params.hostname,
      protocol: params.protocol
    }, defaults);

  // use custom params
  } else {

    options = populate(params, defaults);
    // if no port provided use default one
    if (!options.port) {
      options.port = options.protocol == 'https:' ? 443 : 80;
    }
  }

  // put that good code in getHeaders to some use
  options.headers = this.getHeaders(params.headers);

  // https if specified, fallback to http in any other case
  if (options.protocol == 'https:') {
    request = https.request(options);
  } else {
    request = http.request(options);
  }

  // get content length and fire away
  this.getLength(function(err, length) {
    if (err && err !== 'Unknown stream') {
      this._error(err);
      return;
    }

    // add content length
    if (length) {
      request.setHeader('Content-Length', length);
    }

    this.pipe(request);
    if (cb) {
      var onResponse;

      var callback = function (error, responce) {
        request.removeListener('error', callback);
        request.removeListener('response', onResponse);

        return cb.call(this, error, responce);
      };

      onResponse = callback.bind(this, null);

      request.on('error', callback);
      request.on('response', onResponse);
    }
  }.bind(this));

  return request;
};

FormData.prototype._error = function(err) {
  if (!this.error) {
    this.error = err;
    this.pause();
    this.emit('error', err);
  }
};

FormData.prototype.toString = function () {
  return '[object FormData]';
};


/***/ }),

/***/ 67437:
/***/ ((module) => {

// populates missing values
module.exports = function(dst, src) {

  Object.keys(src).forEach(function(prop)
  {
    dst[prop] = dst[prop] || src[prop];
  });

  return dst;
};


/***/ }),

/***/ 53247:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = realpath
realpath.realpath = realpath
realpath.sync = realpathSync
realpath.realpathSync = realpathSync
realpath.monkeypatch = monkeypatch
realpath.unmonkeypatch = unmonkeypatch

var fs = __webpack_require__(57147)
var origRealpath = fs.realpath
var origRealpathSync = fs.realpathSync

var version = process.version
var ok = /^v[0-5]\./.test(version)
var old = __webpack_require__(55962)

function newError (er) {
  return er && er.syscall === 'realpath' && (
    er.code === 'ELOOP' ||
    er.code === 'ENOMEM' ||
    er.code === 'ENAMETOOLONG'
  )
}

function realpath (p, cache, cb) {
  if (ok) {
    return origRealpath(p, cache, cb)
  }

  if (typeof cache === 'function') {
    cb = cache
    cache = null
  }
  origRealpath(p, cache, function (er, result) {
    if (newError(er)) {
      old.realpath(p, cache, cb)
    } else {
      cb(er, result)
    }
  })
}

function realpathSync (p, cache) {
  if (ok) {
    return origRealpathSync(p, cache)
  }

  try {
    return origRealpathSync(p, cache)
  } catch (er) {
    if (newError(er)) {
      return old.realpathSync(p, cache)
    } else {
      throw er
    }
  }
}

function monkeypatch () {
  fs.realpath = realpath
  fs.realpathSync = realpathSync
}

function unmonkeypatch () {
  fs.realpath = origRealpath
  fs.realpathSync = origRealpathSync
}


/***/ }),

/***/ 55962:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var pathModule = __webpack_require__(71017);
var isWindows = process.platform === 'win32';
var fs = __webpack_require__(57147);

// JavaScript implementation of realpath, ported from node pre-v6

var DEBUG = process.env.NODE_DEBUG && /fs/.test(process.env.NODE_DEBUG);

function rethrow() {
  // Only enable in debug mode. A backtrace uses ~1000 bytes of heap space and
  // is fairly slow to generate.
  var callback;
  if (DEBUG) {
    var backtrace = new Error;
    callback = debugCallback;
  } else
    callback = missingCallback;

  return callback;

  function debugCallback(err) {
    if (err) {
      backtrace.message = err.message;
      err = backtrace;
      missingCallback(err);
    }
  }

  function missingCallback(err) {
    if (err) {
      if (process.throwDeprecation)
        throw err;  // Forgot a callback but don't know where? Use NODE_DEBUG=fs
      else if (!process.noDeprecation) {
        var msg = 'fs: missing callback ' + (err.stack || err.message);
        if (process.traceDeprecation)
          console.trace(msg);
        else
          console.error(msg);
      }
    }
  }
}

function maybeCallback(cb) {
  return typeof cb === 'function' ? cb : rethrow();
}

var normalize = pathModule.normalize;

// Regexp that finds the next partion of a (partial) path
// result is [base_with_slash, base], e.g. ['somedir/', 'somedir']
if (isWindows) {
  var nextPartRe = /(.*?)(?:[\/\\]+|$)/g;
} else {
  var nextPartRe = /(.*?)(?:[\/]+|$)/g;
}

// Regex to find the device root, including trailing slash. E.g. 'c:\\'.
if (isWindows) {
  var splitRootRe = /^(?:[a-zA-Z]:|[\\\/]{2}[^\\\/]+[\\\/][^\\\/]+)?[\\\/]*/;
} else {
  var splitRootRe = /^[\/]*/;
}

exports.realpathSync = function realpathSync(p, cache) {
  // make p is absolute
  p = pathModule.resolve(p);

  if (cache && Object.prototype.hasOwnProperty.call(cache, p)) {
    return cache[p];
  }

  var original = p,
      seenLinks = {},
      knownHard = {};

  // current character position in p
  var pos;
  // the partial path so far, including a trailing slash if any
  var current;
  // the partial path without a trailing slash (except when pointing at a root)
  var base;
  // the partial path scanned in the previous round, with slash
  var previous;

  start();

  function start() {
    // Skip over roots
    var m = splitRootRe.exec(p);
    pos = m[0].length;
    current = m[0];
    base = m[0];
    previous = '';

    // On windows, check that the root exists. On unix there is no need.
    if (isWindows && !knownHard[base]) {
      fs.lstatSync(base);
      knownHard[base] = true;
    }
  }

  // walk down the path, swapping out linked pathparts for their real
  // values
  // NB: p.length changes.
  while (pos < p.length) {
    // find the next part
    nextPartRe.lastIndex = pos;
    var result = nextPartRe.exec(p);
    previous = current;
    current += result[0];
    base = previous + result[1];
    pos = nextPartRe.lastIndex;

    // continue if not a symlink
    if (knownHard[base] || (cache && cache[base] === base)) {
      continue;
    }

    var resolvedLink;
    if (cache && Object.prototype.hasOwnProperty.call(cache, base)) {
      // some known symbolic link.  no need to stat again.
      resolvedLink = cache[base];
    } else {
      var stat = fs.lstatSync(base);
      if (!stat.isSymbolicLink()) {
        knownHard[base] = true;
        if (cache) cache[base] = base;
        continue;
      }

      // read the link if it wasn't read before
      // dev/ino always return 0 on windows, so skip the check.
      var linkTarget = null;
      if (!isWindows) {
        var id = stat.dev.toString(32) + ':' + stat.ino.toString(32);
        if (seenLinks.hasOwnProperty(id)) {
          linkTarget = seenLinks[id];
        }
      }
      if (linkTarget === null) {
        fs.statSync(base);
        linkTarget = fs.readlinkSync(base);
      }
      resolvedLink = pathModule.resolve(previous, linkTarget);
      // track this, if given a cache.
      if (cache) cache[base] = resolvedLink;
      if (!isWindows) seenLinks[id] = linkTarget;
    }

    // resolve the link, then start over
    p = pathModule.resolve(resolvedLink, p.slice(pos));
    start();
  }

  if (cache) cache[original] = p;

  return p;
};


exports.realpath = function realpath(p, cache, cb) {
  if (typeof cb !== 'function') {
    cb = maybeCallback(cache);
    cache = null;
  }

  // make p is absolute
  p = pathModule.resolve(p);

  if (cache && Object.prototype.hasOwnProperty.call(cache, p)) {
    return process.nextTick(cb.bind(null, null, cache[p]));
  }

  var original = p,
      seenLinks = {},
      knownHard = {};

  // current character position in p
  var pos;
  // the partial path so far, including a trailing slash if any
  var current;
  // the partial path without a trailing slash (except when pointing at a root)
  var base;
  // the partial path scanned in the previous round, with slash
  var previous;

  start();

  function start() {
    // Skip over roots
    var m = splitRootRe.exec(p);
    pos = m[0].length;
    current = m[0];
    base = m[0];
    previous = '';

    // On windows, check that the root exists. On unix there is no need.
    if (isWindows && !knownHard[base]) {
      fs.lstat(base, function(err) {
        if (err) return cb(err);
        knownHard[base] = true;
        LOOP();
      });
    } else {
      process.nextTick(LOOP);
    }
  }

  // walk down the path, swapping out linked pathparts for their real
  // values
  function LOOP() {
    // stop if scanned past end of path
    if (pos >= p.length) {
      if (cache) cache[original] = p;
      return cb(null, p);
    }

    // find the next part
    nextPartRe.lastIndex = pos;
    var result = nextPartRe.exec(p);
    previous = current;
    current += result[0];
    base = previous + result[1];
    pos = nextPartRe.lastIndex;

    // continue if not a symlink
    if (knownHard[base] || (cache && cache[base] === base)) {
      return process.nextTick(LOOP);
    }

    if (cache && Object.prototype.hasOwnProperty.call(cache, base)) {
      // known symbolic link.  no need to stat again.
      return gotResolvedLink(cache[base]);
    }

    return fs.lstat(base, gotStat);
  }

  function gotStat(err, stat) {
    if (err) return cb(err);

    // if not a symlink, skip to the next path part
    if (!stat.isSymbolicLink()) {
      knownHard[base] = true;
      if (cache) cache[base] = base;
      return process.nextTick(LOOP);
    }

    // stat & read the link if not read before
    // call gotTarget as soon as the link target is known
    // dev/ino always return 0 on windows, so skip the check.
    if (!isWindows) {
      var id = stat.dev.toString(32) + ':' + stat.ino.toString(32);
      if (seenLinks.hasOwnProperty(id)) {
        return gotTarget(null, seenLinks[id], base);
      }
    }
    fs.stat(base, function(err) {
      if (err) return cb(err);

      fs.readlink(base, function(err, target) {
        if (!isWindows) seenLinks[id] = target;
        gotTarget(err, target);
      });
    });
  }

  function gotTarget(err, target, base) {
    if (err) return cb(err);

    var resolvedLink = pathModule.resolve(previous, target);
    if (cache) cache[base] = resolvedLink;
    gotResolvedLink(resolvedLink);
  }

  function gotResolvedLink(resolvedLink) {
    // resolve the link, then start over
    p = pathModule.resolve(resolvedLink, p.slice(pos));
    start();
  }
};


/***/ }),

/***/ 85687:
/***/ ((module) => {

"use strict";


/* eslint no-invalid-this: 1 */

var ERROR_MESSAGE = 'Function.prototype.bind called on incompatible ';
var slice = Array.prototype.slice;
var toStr = Object.prototype.toString;
var funcType = '[object Function]';

module.exports = function bind(that) {
    var target = this;
    if (typeof target !== 'function' || toStr.call(target) !== funcType) {
        throw new TypeError(ERROR_MESSAGE + target);
    }
    var args = slice.call(arguments, 1);

    var bound;
    var binder = function () {
        if (this instanceof bound) {
            var result = target.apply(
                this,
                args.concat(slice.call(arguments))
            );
            if (Object(result) === result) {
                return result;
            }
            return this;
        } else {
            return target.apply(
                that,
                args.concat(slice.call(arguments))
            );
        }
    };

    var boundLength = Math.max(0, target.length - args.length);
    var boundArgs = [];
    for (var i = 0; i < boundLength; i++) {
        boundArgs.push('$' + i);
    }

    bound = Function('binder', 'return function (' + boundArgs.join(',') + '){ return binder.apply(this,arguments); }')(binder);

    if (target.prototype) {
        var Empty = function Empty() {};
        Empty.prototype = target.prototype;
        bound.prototype = new Empty();
        Empty.prototype = null;
    }

    return bound;
};


/***/ }),

/***/ 60497:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var implementation = __webpack_require__(85687);

module.exports = Function.prototype.bind || implementation;


/***/ }),

/***/ 60658:
/***/ ((module) => {

"use strict";


var functionsHaveNames = function functionsHaveNames() {
	return typeof function f() {}.name === 'string';
};

var gOPD = Object.getOwnPropertyDescriptor;
if (gOPD) {
	try {
		gOPD([], 'length');
	} catch (e) {
		// IE 8 has a broken gOPD
		gOPD = null;
	}
}

functionsHaveNames.functionsHaveConfigurableNames = function functionsHaveConfigurableNames() {
	if (!functionsHaveNames() || !gOPD) {
		return false;
	}
	var desc = gOPD(function () {}, 'name');
	return !!desc && !!desc.configurable;
};

var $bind = Function.prototype.bind;

functionsHaveNames.boundFunctionsHaveNames = function boundFunctionsHaveNames() {
	return functionsHaveNames() && typeof $bind === 'function' && function f() {}.bind().name !== '';
};

module.exports = functionsHaveNames;


/***/ }),

/***/ 41033:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var undefined;

var $SyntaxError = SyntaxError;
var $Function = Function;
var $TypeError = TypeError;

// eslint-disable-next-line consistent-return
var getEvalledConstructor = function (expressionSyntax) {
	try {
		return $Function('"use strict"; return (' + expressionSyntax + ').constructor;')();
	} catch (e) {}
};

var $gOPD = Object.getOwnPropertyDescriptor;
if ($gOPD) {
	try {
		$gOPD({}, '');
	} catch (e) {
		$gOPD = null; // this is IE 8, which has a broken gOPD
	}
}

var throwTypeError = function () {
	throw new $TypeError();
};
var ThrowTypeError = $gOPD
	? (function () {
		try {
			// eslint-disable-next-line no-unused-expressions, no-caller, no-restricted-properties
			arguments.callee; // IE 8 does not throw here
			return throwTypeError;
		} catch (calleeThrows) {
			try {
				// IE 8 throws on Object.getOwnPropertyDescriptor(arguments, '')
				return $gOPD(arguments, 'callee').get;
			} catch (gOPDthrows) {
				return throwTypeError;
			}
		}
	}())
	: throwTypeError;

var hasSymbols = __webpack_require__(66478)();
var hasProto = __webpack_require__(75913)();

var getProto = Object.getPrototypeOf || (
	hasProto
		? function (x) { return x.__proto__; } // eslint-disable-line no-proto
		: null
);

var needsEval = {};

var TypedArray = typeof Uint8Array === 'undefined' || !getProto ? undefined : getProto(Uint8Array);

var INTRINSICS = {
	'%AggregateError%': typeof AggregateError === 'undefined' ? undefined : AggregateError,
	'%Array%': Array,
	'%ArrayBuffer%': typeof ArrayBuffer === 'undefined' ? undefined : ArrayBuffer,
	'%ArrayIteratorPrototype%': hasSymbols && getProto ? getProto([][Symbol.iterator]()) : undefined,
	'%AsyncFromSyncIteratorPrototype%': undefined,
	'%AsyncFunction%': needsEval,
	'%AsyncGenerator%': needsEval,
	'%AsyncGeneratorFunction%': needsEval,
	'%AsyncIteratorPrototype%': needsEval,
	'%Atomics%': typeof Atomics === 'undefined' ? undefined : Atomics,
	'%BigInt%': typeof BigInt === 'undefined' ? undefined : BigInt,
	'%BigInt64Array%': typeof BigInt64Array === 'undefined' ? undefined : BigInt64Array,
	'%BigUint64Array%': typeof BigUint64Array === 'undefined' ? undefined : BigUint64Array,
	'%Boolean%': Boolean,
	'%DataView%': typeof DataView === 'undefined' ? undefined : DataView,
	'%Date%': Date,
	'%decodeURI%': decodeURI,
	'%decodeURIComponent%': decodeURIComponent,
	'%encodeURI%': encodeURI,
	'%encodeURIComponent%': encodeURIComponent,
	'%Error%': Error,
	'%eval%': eval, // eslint-disable-line no-eval
	'%EvalError%': EvalError,
	'%Float32Array%': typeof Float32Array === 'undefined' ? undefined : Float32Array,
	'%Float64Array%': typeof Float64Array === 'undefined' ? undefined : Float64Array,
	'%FinalizationRegistry%': typeof FinalizationRegistry === 'undefined' ? undefined : FinalizationRegistry,
	'%Function%': $Function,
	'%GeneratorFunction%': needsEval,
	'%Int8Array%': typeof Int8Array === 'undefined' ? undefined : Int8Array,
	'%Int16Array%': typeof Int16Array === 'undefined' ? undefined : Int16Array,
	'%Int32Array%': typeof Int32Array === 'undefined' ? undefined : Int32Array,
	'%isFinite%': isFinite,
	'%isNaN%': isNaN,
	'%IteratorPrototype%': hasSymbols && getProto ? getProto(getProto([][Symbol.iterator]())) : undefined,
	'%JSON%': typeof JSON === 'object' ? JSON : undefined,
	'%Map%': typeof Map === 'undefined' ? undefined : Map,
	'%MapIteratorPrototype%': typeof Map === 'undefined' || !hasSymbols || !getProto ? undefined : getProto(new Map()[Symbol.iterator]()),
	'%Math%': Math,
	'%Number%': Number,
	'%Object%': Object,
	'%parseFloat%': parseFloat,
	'%parseInt%': parseInt,
	'%Promise%': typeof Promise === 'undefined' ? undefined : Promise,
	'%Proxy%': typeof Proxy === 'undefined' ? undefined : Proxy,
	'%RangeError%': RangeError,
	'%ReferenceError%': ReferenceError,
	'%Reflect%': typeof Reflect === 'undefined' ? undefined : Reflect,
	'%RegExp%': RegExp,
	'%Set%': typeof Set === 'undefined' ? undefined : Set,
	'%SetIteratorPrototype%': typeof Set === 'undefined' || !hasSymbols || !getProto ? undefined : getProto(new Set()[Symbol.iterator]()),
	'%SharedArrayBuffer%': typeof SharedArrayBuffer === 'undefined' ? undefined : SharedArrayBuffer,
	'%String%': String,
	'%StringIteratorPrototype%': hasSymbols && getProto ? getProto(''[Symbol.iterator]()) : undefined,
	'%Symbol%': hasSymbols ? Symbol : undefined,
	'%SyntaxError%': $SyntaxError,
	'%ThrowTypeError%': ThrowTypeError,
	'%TypedArray%': TypedArray,
	'%TypeError%': $TypeError,
	'%Uint8Array%': typeof Uint8Array === 'undefined' ? undefined : Uint8Array,
	'%Uint8ClampedArray%': typeof Uint8ClampedArray === 'undefined' ? undefined : Uint8ClampedArray,
	'%Uint16Array%': typeof Uint16Array === 'undefined' ? undefined : Uint16Array,
	'%Uint32Array%': typeof Uint32Array === 'undefined' ? undefined : Uint32Array,
	'%URIError%': URIError,
	'%WeakMap%': typeof WeakMap === 'undefined' ? undefined : WeakMap,
	'%WeakRef%': typeof WeakRef === 'undefined' ? undefined : WeakRef,
	'%WeakSet%': typeof WeakSet === 'undefined' ? undefined : WeakSet
};

if (getProto) {
	try {
		null.error; // eslint-disable-line no-unused-expressions
	} catch (e) {
		// https://github.com/tc39/proposal-shadowrealm/pull/384#issuecomment-1364264229
		var errorProto = getProto(getProto(e));
		INTRINSICS['%Error.prototype%'] = errorProto;
	}
}

var doEval = function doEval(name) {
	var value;
	if (name === '%AsyncFunction%') {
		value = getEvalledConstructor('async function () {}');
	} else if (name === '%GeneratorFunction%') {
		value = getEvalledConstructor('function* () {}');
	} else if (name === '%AsyncGeneratorFunction%') {
		value = getEvalledConstructor('async function* () {}');
	} else if (name === '%AsyncGenerator%') {
		var fn = doEval('%AsyncGeneratorFunction%');
		if (fn) {
			value = fn.prototype;
		}
	} else if (name === '%AsyncIteratorPrototype%') {
		var gen = doEval('%AsyncGenerator%');
		if (gen && getProto) {
			value = getProto(gen.prototype);
		}
	}

	INTRINSICS[name] = value;

	return value;
};

var LEGACY_ALIASES = {
	'%ArrayBufferPrototype%': ['ArrayBuffer', 'prototype'],
	'%ArrayPrototype%': ['Array', 'prototype'],
	'%ArrayProto_entries%': ['Array', 'prototype', 'entries'],
	'%ArrayProto_forEach%': ['Array', 'prototype', 'forEach'],
	'%ArrayProto_keys%': ['Array', 'prototype', 'keys'],
	'%ArrayProto_values%': ['Array', 'prototype', 'values'],
	'%AsyncFunctionPrototype%': ['AsyncFunction', 'prototype'],
	'%AsyncGenerator%': ['AsyncGeneratorFunction', 'prototype'],
	'%AsyncGeneratorPrototype%': ['AsyncGeneratorFunction', 'prototype', 'prototype'],
	'%BooleanPrototype%': ['Boolean', 'prototype'],
	'%DataViewPrototype%': ['DataView', 'prototype'],
	'%DatePrototype%': ['Date', 'prototype'],
	'%ErrorPrototype%': ['Error', 'prototype'],
	'%EvalErrorPrototype%': ['EvalError', 'prototype'],
	'%Float32ArrayPrototype%': ['Float32Array', 'prototype'],
	'%Float64ArrayPrototype%': ['Float64Array', 'prototype'],
	'%FunctionPrototype%': ['Function', 'prototype'],
	'%Generator%': ['GeneratorFunction', 'prototype'],
	'%GeneratorPrototype%': ['GeneratorFunction', 'prototype', 'prototype'],
	'%Int8ArrayPrototype%': ['Int8Array', 'prototype'],
	'%Int16ArrayPrototype%': ['Int16Array', 'prototype'],
	'%Int32ArrayPrototype%': ['Int32Array', 'prototype'],
	'%JSONParse%': ['JSON', 'parse'],
	'%JSONStringify%': ['JSON', 'stringify'],
	'%MapPrototype%': ['Map', 'prototype'],
	'%NumberPrototype%': ['Number', 'prototype'],
	'%ObjectPrototype%': ['Object', 'prototype'],
	'%ObjProto_toString%': ['Object', 'prototype', 'toString'],
	'%ObjProto_valueOf%': ['Object', 'prototype', 'valueOf'],
	'%PromisePrototype%': ['Promise', 'prototype'],
	'%PromiseProto_then%': ['Promise', 'prototype', 'then'],
	'%Promise_all%': ['Promise', 'all'],
	'%Promise_reject%': ['Promise', 'reject'],
	'%Promise_resolve%': ['Promise', 'resolve'],
	'%RangeErrorPrototype%': ['RangeError', 'prototype'],
	'%ReferenceErrorPrototype%': ['ReferenceError', 'prototype'],
	'%RegExpPrototype%': ['RegExp', 'prototype'],
	'%SetPrototype%': ['Set', 'prototype'],
	'%SharedArrayBufferPrototype%': ['SharedArrayBuffer', 'prototype'],
	'%StringPrototype%': ['String', 'prototype'],
	'%SymbolPrototype%': ['Symbol', 'prototype'],
	'%SyntaxErrorPrototype%': ['SyntaxError', 'prototype'],
	'%TypedArrayPrototype%': ['TypedArray', 'prototype'],
	'%TypeErrorPrototype%': ['TypeError', 'prototype'],
	'%Uint8ArrayPrototype%': ['Uint8Array', 'prototype'],
	'%Uint8ClampedArrayPrototype%': ['Uint8ClampedArray', 'prototype'],
	'%Uint16ArrayPrototype%': ['Uint16Array', 'prototype'],
	'%Uint32ArrayPrototype%': ['Uint32Array', 'prototype'],
	'%URIErrorPrototype%': ['URIError', 'prototype'],
	'%WeakMapPrototype%': ['WeakMap', 'prototype'],
	'%WeakSetPrototype%': ['WeakSet', 'prototype']
};

var bind = __webpack_require__(95055);
var hasOwn = __webpack_require__(96186);
var $concat = bind.call(Function.call, Array.prototype.concat);
var $spliceApply = bind.call(Function.apply, Array.prototype.splice);
var $replace = bind.call(Function.call, String.prototype.replace);
var $strSlice = bind.call(Function.call, String.prototype.slice);
var $exec = bind.call(Function.call, RegExp.prototype.exec);

/* adapted from https://github.com/lodash/lodash/blob/4.17.15/dist/lodash.js#L6735-L6744 */
var rePropName = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g;
var reEscapeChar = /\\(\\)?/g; /** Used to match backslashes in property paths. */
var stringToPath = function stringToPath(string) {
	var first = $strSlice(string, 0, 1);
	var last = $strSlice(string, -1);
	if (first === '%' && last !== '%') {
		throw new $SyntaxError('invalid intrinsic syntax, expected closing `%`');
	} else if (last === '%' && first !== '%') {
		throw new $SyntaxError('invalid intrinsic syntax, expected opening `%`');
	}
	var result = [];
	$replace(string, rePropName, function (match, number, quote, subString) {
		result[result.length] = quote ? $replace(subString, reEscapeChar, '$1') : number || match;
	});
	return result;
};
/* end adaptation */

var getBaseIntrinsic = function getBaseIntrinsic(name, allowMissing) {
	var intrinsicName = name;
	var alias;
	if (hasOwn(LEGACY_ALIASES, intrinsicName)) {
		alias = LEGACY_ALIASES[intrinsicName];
		intrinsicName = '%' + alias[0] + '%';
	}

	if (hasOwn(INTRINSICS, intrinsicName)) {
		var value = INTRINSICS[intrinsicName];
		if (value === needsEval) {
			value = doEval(intrinsicName);
		}
		if (typeof value === 'undefined' && !allowMissing) {
			throw new $TypeError('intrinsic ' + name + ' exists, but is not available. Please file an issue!');
		}

		return {
			alias: alias,
			name: intrinsicName,
			value: value
		};
	}

	throw new $SyntaxError('intrinsic ' + name + ' does not exist!');
};

module.exports = function GetIntrinsic(name, allowMissing) {
	if (typeof name !== 'string' || name.length === 0) {
		throw new $TypeError('intrinsic name must be a non-empty string');
	}
	if (arguments.length > 1 && typeof allowMissing !== 'boolean') {
		throw new $TypeError('"allowMissing" argument must be a boolean');
	}

	if ($exec(/^%?[^%]*%?$/, name) === null) {
		throw new $SyntaxError('`%` may not be present anywhere but at the beginning and end of the intrinsic name');
	}
	var parts = stringToPath(name);
	var intrinsicBaseName = parts.length > 0 ? parts[0] : '';

	var intrinsic = getBaseIntrinsic('%' + intrinsicBaseName + '%', allowMissing);
	var intrinsicRealName = intrinsic.name;
	var value = intrinsic.value;
	var skipFurtherCaching = false;

	var alias = intrinsic.alias;
	if (alias) {
		intrinsicBaseName = alias[0];
		$spliceApply(parts, $concat([0, 1], alias));
	}

	for (var i = 1, isOwn = true; i < parts.length; i += 1) {
		var part = parts[i];
		var first = $strSlice(part, 0, 1);
		var last = $strSlice(part, -1);
		if (
			(
				(first === '"' || first === "'" || first === '`')
				|| (last === '"' || last === "'" || last === '`')
			)
			&& first !== last
		) {
			throw new $SyntaxError('property names with quotes must have matching quotes');
		}
		if (part === 'constructor' || !isOwn) {
			skipFurtherCaching = true;
		}

		intrinsicBaseName += '.' + part;
		intrinsicRealName = '%' + intrinsicBaseName + '%';

		if (hasOwn(INTRINSICS, intrinsicRealName)) {
			value = INTRINSICS[intrinsicRealName];
		} else if (value != null) {
			if (!(part in value)) {
				if (!allowMissing) {
					throw new $TypeError('base intrinsic for ' + name + ' exists, but the property is not available.');
				}
				return void undefined;
			}
			if ($gOPD && (i + 1) >= parts.length) {
				var desc = $gOPD(value, part);
				isOwn = !!desc;

				// By convention, when a data property is converted to an accessor
				// property to emulate a data property that does not suffer from
				// the override mistake, that accessor's getter is marked with
				// an `originalValue` property. Here, when we detect this, we
				// uphold the illusion by pretending to see that original data
				// property, i.e., returning the value rather than the getter
				// itself.
				if (isOwn && 'get' in desc && !('originalValue' in desc.get)) {
					value = desc.get;
				} else {
					value = value[part];
				}
			} else {
				isOwn = hasOwn(value, part);
				value = value[part];
			}

			if (isOwn && !skipFurtherCaching) {
				INTRINSICS[intrinsicRealName] = value;
			}
		}
	}
	return value;
};


/***/ }),

/***/ 46997:
/***/ ((module) => {

"use strict";


/* eslint no-invalid-this: 1 */

var ERROR_MESSAGE = 'Function.prototype.bind called on incompatible ';
var toStr = Object.prototype.toString;
var max = Math.max;
var funcType = '[object Function]';

var concatty = function concatty(a, b) {
    var arr = [];

    for (var i = 0; i < a.length; i += 1) {
        arr[i] = a[i];
    }
    for (var j = 0; j < b.length; j += 1) {
        arr[j + a.length] = b[j];
    }

    return arr;
};

var slicy = function slicy(arrLike, offset) {
    var arr = [];
    for (var i = offset || 0, j = 0; i < arrLike.length; i += 1, j += 1) {
        arr[j] = arrLike[i];
    }
    return arr;
};

var joiny = function (arr, joiner) {
    var str = '';
    for (var i = 0; i < arr.length; i += 1) {
        str += arr[i];
        if (i + 1 < arr.length) {
            str += joiner;
        }
    }
    return str;
};

module.exports = function bind(that) {
    var target = this;
    if (typeof target !== 'function' || toStr.apply(target) !== funcType) {
        throw new TypeError(ERROR_MESSAGE + target);
    }
    var args = slicy(arguments, 1);

    var bound;
    var binder = function () {
        if (this instanceof bound) {
            var result = target.apply(
                this,
                concatty(args, arguments)
            );
            if (Object(result) === result) {
                return result;
            }
            return this;
        }
        return target.apply(
            that,
            concatty(args, arguments)
        );

    };

    var boundLength = max(0, target.length - args.length);
    var boundArgs = [];
    for (var i = 0; i < boundLength; i++) {
        boundArgs[i] = '$' + i;
    }

    bound = Function('binder', 'return function (' + joiny(boundArgs, ',') + '){ return binder.apply(this,arguments); }')(binder);

    if (target.prototype) {
        var Empty = function Empty() {};
        Empty.prototype = target.prototype;
        bound.prototype = new Empty();
        Empty.prototype = null;
    }

    return bound;
};


/***/ }),

/***/ 95055:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var implementation = __webpack_require__(46997);

module.exports = Function.prototype.bind || implementation;


/***/ }),

/***/ 1256:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var isGlob = __webpack_require__(22767);
var pathPosixDirname = (__webpack_require__(71017).posix.dirname);
var isWin32 = (__webpack_require__(22037).platform)() === 'win32';

var slash = '/';
var backslash = /\\/g;
var enclosure = /[\{\[].*[\}\]]$/;
var globby = /(^|[^\\])([\{\[]|\([^\)]+$)/;
var escaped = /\\([\!\*\?\|\[\]\(\)\{\}])/g;

/**
 * @param {string} str
 * @param {Object} opts
 * @param {boolean} [opts.flipBackslashes=true]
 * @returns {string}
 */
module.exports = function globParent(str, opts) {
  var options = Object.assign({ flipBackslashes: true }, opts);

  // flip windows path separators
  if (options.flipBackslashes && isWin32 && str.indexOf(slash) < 0) {
    str = str.replace(backslash, slash);
  }

  // special case for strings ending in enclosure containing path separator
  if (enclosure.test(str)) {
    str += slash;
  }

  // preserves full path in case of trailing path separator
  str += 'a';

  // remove path parts that are globby
  do {
    str = pathPosixDirname(str);
  } while (isGlob(str) || globby.test(str));

  // remove escape chars and return result
  return str.replace(escaped, '$1');
};


/***/ }),

/***/ 37465:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

exports.setopts = setopts
exports.ownProp = ownProp
exports.makeAbs = makeAbs
exports.finish = finish
exports.mark = mark
exports.isIgnored = isIgnored
exports.childrenIgnored = childrenIgnored

function ownProp (obj, field) {
  return Object.prototype.hasOwnProperty.call(obj, field)
}

var fs = __webpack_require__(57147)
var path = __webpack_require__(71017)
var minimatch = __webpack_require__(45076)
var isAbsolute = __webpack_require__(89991)
var Minimatch = minimatch.Minimatch

function alphasort (a, b) {
  return a.localeCompare(b, 'en')
}

function setupIgnores (self, options) {
  self.ignore = options.ignore || []

  if (!Array.isArray(self.ignore))
    self.ignore = [self.ignore]

  if (self.ignore.length) {
    self.ignore = self.ignore.map(ignoreMap)
  }
}

// ignore patterns are always in dot:true mode.
function ignoreMap (pattern) {
  var gmatcher = null
  if (pattern.slice(-3) === '/**') {
    var gpattern = pattern.replace(/(\/\*\*)+$/, '')
    gmatcher = new Minimatch(gpattern, { dot: true })
  }

  return {
    matcher: new Minimatch(pattern, { dot: true }),
    gmatcher: gmatcher
  }
}

function setopts (self, pattern, options) {
  if (!options)
    options = {}

  // base-matching: just use globstar for that.
  if (options.matchBase && -1 === pattern.indexOf("/")) {
    if (options.noglobstar) {
      throw new Error("base matching requires globstar")
    }
    pattern = "**/" + pattern
  }

  self.silent = !!options.silent
  self.pattern = pattern
  self.strict = options.strict !== false
  self.realpath = !!options.realpath
  self.realpathCache = options.realpathCache || Object.create(null)
  self.follow = !!options.follow
  self.dot = !!options.dot
  self.mark = !!options.mark
  self.nodir = !!options.nodir
  if (self.nodir)
    self.mark = true
  self.sync = !!options.sync
  self.nounique = !!options.nounique
  self.nonull = !!options.nonull
  self.nosort = !!options.nosort
  self.nocase = !!options.nocase
  self.stat = !!options.stat
  self.noprocess = !!options.noprocess
  self.absolute = !!options.absolute
  self.fs = options.fs || fs

  self.maxLength = options.maxLength || Infinity
  self.cache = options.cache || Object.create(null)
  self.statCache = options.statCache || Object.create(null)
  self.symlinks = options.symlinks || Object.create(null)

  setupIgnores(self, options)

  self.changedCwd = false
  var cwd = process.cwd()
  if (!ownProp(options, "cwd"))
    self.cwd = cwd
  else {
    self.cwd = path.resolve(options.cwd)
    self.changedCwd = self.cwd !== cwd
  }

  self.root = options.root || path.resolve(self.cwd, "/")
  self.root = path.resolve(self.root)
  if (process.platform === "win32")
    self.root = self.root.replace(/\\/g, "/")

  // TODO: is an absolute `cwd` supposed to be resolved against `root`?
  // e.g. { cwd: '/test', root: __dirname } === path.join(__dirname, '/test')
  self.cwdAbs = isAbsolute(self.cwd) ? self.cwd : makeAbs(self, self.cwd)
  if (process.platform === "win32")
    self.cwdAbs = self.cwdAbs.replace(/\\/g, "/")
  self.nomount = !!options.nomount

  // disable comments and negation in Minimatch.
  // Note that they are not supported in Glob itself anyway.
  options.nonegate = true
  options.nocomment = true
  // always treat \ in patterns as escapes, not path separators
  options.allowWindowsEscape = false

  self.minimatch = new Minimatch(pattern, options)
  self.options = self.minimatch.options
}

function finish (self) {
  var nou = self.nounique
  var all = nou ? [] : Object.create(null)

  for (var i = 0, l = self.matches.length; i < l; i ++) {
    var matches = self.matches[i]
    if (!matches || Object.keys(matches).length === 0) {
      if (self.nonull) {
        // do like the shell, and spit out the literal glob
        var literal = self.minimatch.globSet[i]
        if (nou)
          all.push(literal)
        else
          all[literal] = true
      }
    } else {
      // had matches
      var m = Object.keys(matches)
      if (nou)
        all.push.apply(all, m)
      else
        m.forEach(function (m) {
          all[m] = true
        })
    }
  }

  if (!nou)
    all = Object.keys(all)

  if (!self.nosort)
    all = all.sort(alphasort)

  // at *some* point we statted all of these
  if (self.mark) {
    for (var i = 0; i < all.length; i++) {
      all[i] = self._mark(all[i])
    }
    if (self.nodir) {
      all = all.filter(function (e) {
        var notDir = !(/\/$/.test(e))
        var c = self.cache[e] || self.cache[makeAbs(self, e)]
        if (notDir && c)
          notDir = c !== 'DIR' && !Array.isArray(c)
        return notDir
      })
    }
  }

  if (self.ignore.length)
    all = all.filter(function(m) {
      return !isIgnored(self, m)
    })

  self.found = all
}

function mark (self, p) {
  var abs = makeAbs(self, p)
  var c = self.cache[abs]
  var m = p
  if (c) {
    var isDir = c === 'DIR' || Array.isArray(c)
    var slash = p.slice(-1) === '/'

    if (isDir && !slash)
      m += '/'
    else if (!isDir && slash)
      m = m.slice(0, -1)

    if (m !== p) {
      var mabs = makeAbs(self, m)
      self.statCache[mabs] = self.statCache[abs]
      self.cache[mabs] = self.cache[abs]
    }
  }

  return m
}

// lotta situps...
function makeAbs (self, f) {
  var abs = f
  if (f.charAt(0) === '/') {
    abs = path.join(self.root, f)
  } else if (isAbsolute(f) || f === '') {
    abs = f
  } else if (self.changedCwd) {
    abs = path.resolve(self.cwd, f)
  } else {
    abs = path.resolve(f)
  }

  if (process.platform === 'win32')
    abs = abs.replace(/\\/g, '/')

  return abs
}


// Return true, if pattern ends with globstar '**', for the accompanying parent directory.
// Ex:- If node_modules/** is the pattern, add 'node_modules' to ignore list along with it's contents
function isIgnored (self, path) {
  if (!self.ignore.length)
    return false

  return self.ignore.some(function(item) {
    return item.matcher.match(path) || !!(item.gmatcher && item.gmatcher.match(path))
  })
}

function childrenIgnored (self, path) {
  if (!self.ignore.length)
    return false

  return self.ignore.some(function(item) {
    return !!(item.gmatcher && item.gmatcher.match(path))
  })
}


/***/ }),

/***/ 76825:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

// Approach:
//
// 1. Get the minimatch set
// 2. For each pattern in the set, PROCESS(pattern, false)
// 3. Store matches per-set, then uniq them
//
// PROCESS(pattern, inGlobStar)
// Get the first [n] items from pattern that are all strings
// Join these together.  This is PREFIX.
//   If there is no more remaining, then stat(PREFIX) and
//   add to matches if it succeeds.  END.
//
// If inGlobStar and PREFIX is symlink and points to dir
//   set ENTRIES = []
// else readdir(PREFIX) as ENTRIES
//   If fail, END
//
// with ENTRIES
//   If pattern[n] is GLOBSTAR
//     // handle the case where the globstar match is empty
//     // by pruning it out, and testing the resulting pattern
//     PROCESS(pattern[0..n] + pattern[n+1 .. $], false)
//     // handle other cases.
//     for ENTRY in ENTRIES (not dotfiles)
//       // attach globstar + tail onto the entry
//       // Mark that this entry is a globstar match
//       PROCESS(pattern[0..n] + ENTRY + pattern[n .. $], true)
//
//   else // not globstar
//     for ENTRY in ENTRIES (not dotfiles, unless pattern[n] is dot)
//       Test ENTRY against pattern[n]
//       If fails, continue
//       If passes, PROCESS(pattern[0..n] + item + pattern[n+1 .. $])
//
// Caveat:
//   Cache all stats and readdirs results to minimize syscall.  Since all
//   we ever care about is existence and directory-ness, we can just keep
//   `true` for files, and [children,...] for directories, or `false` for
//   things that don't exist.

module.exports = glob

var rp = __webpack_require__(53247)
var minimatch = __webpack_require__(45076)
var Minimatch = minimatch.Minimatch
var inherits = __webpack_require__(71947)
var EE = (__webpack_require__(82361).EventEmitter)
var path = __webpack_require__(71017)
var assert = __webpack_require__(39491)
var isAbsolute = __webpack_require__(89991)
var globSync = __webpack_require__(64142)
var common = __webpack_require__(37465)
var setopts = common.setopts
var ownProp = common.ownProp
var inflight = __webpack_require__(48156)
var util = __webpack_require__(73837)
var childrenIgnored = common.childrenIgnored
var isIgnored = common.isIgnored

var once = __webpack_require__(58034)

function glob (pattern, options, cb) {
  if (typeof options === 'function') cb = options, options = {}
  if (!options) options = {}

  if (options.sync) {
    if (cb)
      throw new TypeError('callback provided to sync glob')
    return globSync(pattern, options)
  }

  return new Glob(pattern, options, cb)
}

glob.sync = globSync
var GlobSync = glob.GlobSync = globSync.GlobSync

// old api surface
glob.glob = glob

function extend (origin, add) {
  if (add === null || typeof add !== 'object') {
    return origin
  }

  var keys = Object.keys(add)
  var i = keys.length
  while (i--) {
    origin[keys[i]] = add[keys[i]]
  }
  return origin
}

glob.hasMagic = function (pattern, options_) {
  var options = extend({}, options_)
  options.noprocess = true

  var g = new Glob(pattern, options)
  var set = g.minimatch.set

  if (!pattern)
    return false

  if (set.length > 1)
    return true

  for (var j = 0; j < set[0].length; j++) {
    if (typeof set[0][j] !== 'string')
      return true
  }

  return false
}

glob.Glob = Glob
inherits(Glob, EE)
function Glob (pattern, options, cb) {
  if (typeof options === 'function') {
    cb = options
    options = null
  }

  if (options && options.sync) {
    if (cb)
      throw new TypeError('callback provided to sync glob')
    return new GlobSync(pattern, options)
  }

  if (!(this instanceof Glob))
    return new Glob(pattern, options, cb)

  setopts(this, pattern, options)
  this._didRealPath = false

  // process each pattern in the minimatch set
  var n = this.minimatch.set.length

  // The matches are stored as {<filename>: true,...} so that
  // duplicates are automagically pruned.
  // Later, we do an Object.keys() on these.
  // Keep them as a list so we can fill in when nonull is set.
  this.matches = new Array(n)

  if (typeof cb === 'function') {
    cb = once(cb)
    this.on('error', cb)
    this.on('end', function (matches) {
      cb(null, matches)
    })
  }

  var self = this
  this._processing = 0

  this._emitQueue = []
  this._processQueue = []
  this.paused = false

  if (this.noprocess)
    return this

  if (n === 0)
    return done()

  var sync = true
  for (var i = 0; i < n; i ++) {
    this._process(this.minimatch.set[i], i, false, done)
  }
  sync = false

  function done () {
    --self._processing
    if (self._processing <= 0) {
      if (sync) {
        process.nextTick(function () {
          self._finish()
        })
      } else {
        self._finish()
      }
    }
  }
}

Glob.prototype._finish = function () {
  assert(this instanceof Glob)
  if (this.aborted)
    return

  if (this.realpath && !this._didRealpath)
    return this._realpath()

  common.finish(this)
  this.emit('end', this.found)
}

Glob.prototype._realpath = function () {
  if (this._didRealpath)
    return

  this._didRealpath = true

  var n = this.matches.length
  if (n === 0)
    return this._finish()

  var self = this
  for (var i = 0; i < this.matches.length; i++)
    this._realpathSet(i, next)

  function next () {
    if (--n === 0)
      self._finish()
  }
}

Glob.prototype._realpathSet = function (index, cb) {
  var matchset = this.matches[index]
  if (!matchset)
    return cb()

  var found = Object.keys(matchset)
  var self = this
  var n = found.length

  if (n === 0)
    return cb()

  var set = this.matches[index] = Object.create(null)
  found.forEach(function (p, i) {
    // If there's a problem with the stat, then it means that
    // one or more of the links in the realpath couldn't be
    // resolved.  just return the abs value in that case.
    p = self._makeAbs(p)
    rp.realpath(p, self.realpathCache, function (er, real) {
      if (!er)
        set[real] = true
      else if (er.syscall === 'stat')
        set[p] = true
      else
        self.emit('error', er) // srsly wtf right here

      if (--n === 0) {
        self.matches[index] = set
        cb()
      }
    })
  })
}

Glob.prototype._mark = function (p) {
  return common.mark(this, p)
}

Glob.prototype._makeAbs = function (f) {
  return common.makeAbs(this, f)
}

Glob.prototype.abort = function () {
  this.aborted = true
  this.emit('abort')
}

Glob.prototype.pause = function () {
  if (!this.paused) {
    this.paused = true
    this.emit('pause')
  }
}

Glob.prototype.resume = function () {
  if (this.paused) {
    this.emit('resume')
    this.paused = false
    if (this._emitQueue.length) {
      var eq = this._emitQueue.slice(0)
      this._emitQueue.length = 0
      for (var i = 0; i < eq.length; i ++) {
        var e = eq[i]
        this._emitMatch(e[0], e[1])
      }
    }
    if (this._processQueue.length) {
      var pq = this._processQueue.slice(0)
      this._processQueue.length = 0
      for (var i = 0; i < pq.length; i ++) {
        var p = pq[i]
        this._processing--
        this._process(p[0], p[1], p[2], p[3])
      }
    }
  }
}

Glob.prototype._process = function (pattern, index, inGlobStar, cb) {
  assert(this instanceof Glob)
  assert(typeof cb === 'function')

  if (this.aborted)
    return

  this._processing++
  if (this.paused) {
    this._processQueue.push([pattern, index, inGlobStar, cb])
    return
  }

  //console.error('PROCESS %d', this._processing, pattern)

  // Get the first [n] parts of pattern that are all strings.
  var n = 0
  while (typeof pattern[n] === 'string') {
    n ++
  }
  // now n is the index of the first one that is *not* a string.

  // see if there's anything else
  var prefix
  switch (n) {
    // if not, then this is rather simple
    case pattern.length:
      this._processSimple(pattern.join('/'), index, cb)
      return

    case 0:
      // pattern *starts* with some non-trivial item.
      // going to readdir(cwd), but not include the prefix in matches.
      prefix = null
      break

    default:
      // pattern has some string bits in the front.
      // whatever it starts with, whether that's 'absolute' like /foo/bar,
      // or 'relative' like '../baz'
      prefix = pattern.slice(0, n).join('/')
      break
  }

  var remain = pattern.slice(n)

  // get the list of entries.
  var read
  if (prefix === null)
    read = '.'
  else if (isAbsolute(prefix) ||
      isAbsolute(pattern.map(function (p) {
        return typeof p === 'string' ? p : '[*]'
      }).join('/'))) {
    if (!prefix || !isAbsolute(prefix))
      prefix = '/' + prefix
    read = prefix
  } else
    read = prefix

  var abs = this._makeAbs(read)

  //if ignored, skip _processing
  if (childrenIgnored(this, read))
    return cb()

  var isGlobStar = remain[0] === minimatch.GLOBSTAR
  if (isGlobStar)
    this._processGlobStar(prefix, read, abs, remain, index, inGlobStar, cb)
  else
    this._processReaddir(prefix, read, abs, remain, index, inGlobStar, cb)
}

Glob.prototype._processReaddir = function (prefix, read, abs, remain, index, inGlobStar, cb) {
  var self = this
  this._readdir(abs, inGlobStar, function (er, entries) {
    return self._processReaddir2(prefix, read, abs, remain, index, inGlobStar, entries, cb)
  })
}

Glob.prototype._processReaddir2 = function (prefix, read, abs, remain, index, inGlobStar, entries, cb) {

  // if the abs isn't a dir, then nothing can match!
  if (!entries)
    return cb()

  // It will only match dot entries if it starts with a dot, or if
  // dot is set.  Stuff like @(.foo|.bar) isn't allowed.
  var pn = remain[0]
  var negate = !!this.minimatch.negate
  var rawGlob = pn._glob
  var dotOk = this.dot || rawGlob.charAt(0) === '.'

  var matchedEntries = []
  for (var i = 0; i < entries.length; i++) {
    var e = entries[i]
    if (e.charAt(0) !== '.' || dotOk) {
      var m
      if (negate && !prefix) {
        m = !e.match(pn)
      } else {
        m = e.match(pn)
      }
      if (m)
        matchedEntries.push(e)
    }
  }

  //console.error('prd2', prefix, entries, remain[0]._glob, matchedEntries)

  var len = matchedEntries.length
  // If there are no matched entries, then nothing matches.
  if (len === 0)
    return cb()

  // if this is the last remaining pattern bit, then no need for
  // an additional stat *unless* the user has specified mark or
  // stat explicitly.  We know they exist, since readdir returned
  // them.

  if (remain.length === 1 && !this.mark && !this.stat) {
    if (!this.matches[index])
      this.matches[index] = Object.create(null)

    for (var i = 0; i < len; i ++) {
      var e = matchedEntries[i]
      if (prefix) {
        if (prefix !== '/')
          e = prefix + '/' + e
        else
          e = prefix + e
      }

      if (e.charAt(0) === '/' && !this.nomount) {
        e = path.join(this.root, e)
      }
      this._emitMatch(index, e)
    }
    // This was the last one, and no stats were needed
    return cb()
  }

  // now test all matched entries as stand-ins for that part
  // of the pattern.
  remain.shift()
  for (var i = 0; i < len; i ++) {
    var e = matchedEntries[i]
    var newPattern
    if (prefix) {
      if (prefix !== '/')
        e = prefix + '/' + e
      else
        e = prefix + e
    }
    this._process([e].concat(remain), index, inGlobStar, cb)
  }
  cb()
}

Glob.prototype._emitMatch = function (index, e) {
  if (this.aborted)
    return

  if (isIgnored(this, e))
    return

  if (this.paused) {
    this._emitQueue.push([index, e])
    return
  }

  var abs = isAbsolute(e) ? e : this._makeAbs(e)

  if (this.mark)
    e = this._mark(e)

  if (this.absolute)
    e = abs

  if (this.matches[index][e])
    return

  if (this.nodir) {
    var c = this.cache[abs]
    if (c === 'DIR' || Array.isArray(c))
      return
  }

  this.matches[index][e] = true

  var st = this.statCache[abs]
  if (st)
    this.emit('stat', e, st)

  this.emit('match', e)
}

Glob.prototype._readdirInGlobStar = function (abs, cb) {
  if (this.aborted)
    return

  // follow all symlinked directories forever
  // just proceed as if this is a non-globstar situation
  if (this.follow)
    return this._readdir(abs, false, cb)

  var lstatkey = 'lstat\0' + abs
  var self = this
  var lstatcb = inflight(lstatkey, lstatcb_)

  if (lstatcb)
    self.fs.lstat(abs, lstatcb)

  function lstatcb_ (er, lstat) {
    if (er && er.code === 'ENOENT')
      return cb()

    var isSym = lstat && lstat.isSymbolicLink()
    self.symlinks[abs] = isSym

    // If it's not a symlink or a dir, then it's definitely a regular file.
    // don't bother doing a readdir in that case.
    if (!isSym && lstat && !lstat.isDirectory()) {
      self.cache[abs] = 'FILE'
      cb()
    } else
      self._readdir(abs, false, cb)
  }
}

Glob.prototype._readdir = function (abs, inGlobStar, cb) {
  if (this.aborted)
    return

  cb = inflight('readdir\0'+abs+'\0'+inGlobStar, cb)
  if (!cb)
    return

  //console.error('RD %j %j', +inGlobStar, abs)
  if (inGlobStar && !ownProp(this.symlinks, abs))
    return this._readdirInGlobStar(abs, cb)

  if (ownProp(this.cache, abs)) {
    var c = this.cache[abs]
    if (!c || c === 'FILE')
      return cb()

    if (Array.isArray(c))
      return cb(null, c)
  }

  var self = this
  self.fs.readdir(abs, readdirCb(this, abs, cb))
}

function readdirCb (self, abs, cb) {
  return function (er, entries) {
    if (er)
      self._readdirError(abs, er, cb)
    else
      self._readdirEntries(abs, entries, cb)
  }
}

Glob.prototype._readdirEntries = function (abs, entries, cb) {
  if (this.aborted)
    return

  // if we haven't asked to stat everything, then just
  // assume that everything in there exists, so we can avoid
  // having to stat it a second time.
  if (!this.mark && !this.stat) {
    for (var i = 0; i < entries.length; i ++) {
      var e = entries[i]
      if (abs === '/')
        e = abs + e
      else
        e = abs + '/' + e
      this.cache[e] = true
    }
  }

  this.cache[abs] = entries
  return cb(null, entries)
}

Glob.prototype._readdirError = function (f, er, cb) {
  if (this.aborted)
    return

  // handle errors, and cache the information
  switch (er.code) {
    case 'ENOTSUP': // https://github.com/isaacs/node-glob/issues/205
    case 'ENOTDIR': // totally normal. means it *does* exist.
      var abs = this._makeAbs(f)
      this.cache[abs] = 'FILE'
      if (abs === this.cwdAbs) {
        var error = new Error(er.code + ' invalid cwd ' + this.cwd)
        error.path = this.cwd
        error.code = er.code
        this.emit('error', error)
        this.abort()
      }
      break

    case 'ENOENT': // not terribly unusual
    case 'ELOOP':
    case 'ENAMETOOLONG':
    case 'UNKNOWN':
      this.cache[this._makeAbs(f)] = false
      break

    default: // some unusual error.  Treat as failure.
      this.cache[this._makeAbs(f)] = false
      if (this.strict) {
        this.emit('error', er)
        // If the error is handled, then we abort
        // if not, we threw out of here
        this.abort()
      }
      if (!this.silent)
        console.error('glob error', er)
      break
  }

  return cb()
}

Glob.prototype._processGlobStar = function (prefix, read, abs, remain, index, inGlobStar, cb) {
  var self = this
  this._readdir(abs, inGlobStar, function (er, entries) {
    self._processGlobStar2(prefix, read, abs, remain, index, inGlobStar, entries, cb)
  })
}


Glob.prototype._processGlobStar2 = function (prefix, read, abs, remain, index, inGlobStar, entries, cb) {
  //console.error('pgs2', prefix, remain[0], entries)

  // no entries means not a dir, so it can never have matches
  // foo.txt/** doesn't match foo.txt
  if (!entries)
    return cb()

  // test without the globstar, and with every child both below
  // and replacing the globstar.
  var remainWithoutGlobStar = remain.slice(1)
  var gspref = prefix ? [ prefix ] : []
  var noGlobStar = gspref.concat(remainWithoutGlobStar)

  // the noGlobStar pattern exits the inGlobStar state
  this._process(noGlobStar, index, false, cb)

  var isSym = this.symlinks[abs]
  var len = entries.length

  // If it's a symlink, and we're in a globstar, then stop
  if (isSym && inGlobStar)
    return cb()

  for (var i = 0; i < len; i++) {
    var e = entries[i]
    if (e.charAt(0) === '.' && !this.dot)
      continue

    // these two cases enter the inGlobStar state
    var instead = gspref.concat(entries[i], remainWithoutGlobStar)
    this._process(instead, index, true, cb)

    var below = gspref.concat(entries[i], remain)
    this._process(below, index, true, cb)
  }

  cb()
}

Glob.prototype._processSimple = function (prefix, index, cb) {
  // XXX review this.  Shouldn't it be doing the mounting etc
  // before doing stat?  kinda weird?
  var self = this
  this._stat(prefix, function (er, exists) {
    self._processSimple2(prefix, index, er, exists, cb)
  })
}
Glob.prototype._processSimple2 = function (prefix, index, er, exists, cb) {

  //console.error('ps2', prefix, exists)

  if (!this.matches[index])
    this.matches[index] = Object.create(null)

  // If it doesn't exist, then just mark the lack of results
  if (!exists)
    return cb()

  if (prefix && isAbsolute(prefix) && !this.nomount) {
    var trail = /[\/\\]$/.test(prefix)
    if (prefix.charAt(0) === '/') {
      prefix = path.join(this.root, prefix)
    } else {
      prefix = path.resolve(this.root, prefix)
      if (trail)
        prefix += '/'
    }
  }

  if (process.platform === 'win32')
    prefix = prefix.replace(/\\/g, '/')

  // Mark this as a match
  this._emitMatch(index, prefix)
  cb()
}

// Returns either 'DIR', 'FILE', or false
Glob.prototype._stat = function (f, cb) {
  var abs = this._makeAbs(f)
  var needDir = f.slice(-1) === '/'

  if (f.length > this.maxLength)
    return cb()

  if (!this.stat && ownProp(this.cache, abs)) {
    var c = this.cache[abs]

    if (Array.isArray(c))
      c = 'DIR'

    // It exists, but maybe not how we need it
    if (!needDir || c === 'DIR')
      return cb(null, c)

    if (needDir && c === 'FILE')
      return cb()

    // otherwise we have to stat, because maybe c=true
    // if we know it exists, but not what it is.
  }

  var exists
  var stat = this.statCache[abs]
  if (stat !== undefined) {
    if (stat === false)
      return cb(null, stat)
    else {
      var type = stat.isDirectory() ? 'DIR' : 'FILE'
      if (needDir && type === 'FILE')
        return cb()
      else
        return cb(null, type, stat)
    }
  }

  var self = this
  var statcb = inflight('stat\0' + abs, lstatcb_)
  if (statcb)
    self.fs.lstat(abs, statcb)

  function lstatcb_ (er, lstat) {
    if (lstat && lstat.isSymbolicLink()) {
      // If it's a symlink, then treat it as the target, unless
      // the target does not exist, then treat it as a file.
      return self.fs.stat(abs, function (er, stat) {
        if (er)
          self._stat2(f, abs, null, lstat, cb)
        else
          self._stat2(f, abs, er, stat, cb)
      })
    } else {
      self._stat2(f, abs, er, lstat, cb)
    }
  }
}

Glob.prototype._stat2 = function (f, abs, er, stat, cb) {
  if (er && (er.code === 'ENOENT' || er.code === 'ENOTDIR')) {
    this.statCache[abs] = false
    return cb()
  }

  var needDir = f.slice(-1) === '/'
  this.statCache[abs] = stat

  if (abs.slice(-1) === '/' && stat && !stat.isDirectory())
    return cb(null, false, stat)

  var c = true
  if (stat)
    c = stat.isDirectory() ? 'DIR' : 'FILE'
  this.cache[abs] = this.cache[abs] || c

  if (needDir && c === 'FILE')
    return cb()

  return cb(null, c, stat)
}


/***/ }),

/***/ 64142:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = globSync
globSync.GlobSync = GlobSync

var rp = __webpack_require__(53247)
var minimatch = __webpack_require__(45076)
var Minimatch = minimatch.Minimatch
var Glob = (__webpack_require__(76825).Glob)
var util = __webpack_require__(73837)
var path = __webpack_require__(71017)
var assert = __webpack_require__(39491)
var isAbsolute = __webpack_require__(89991)
var common = __webpack_require__(37465)
var setopts = common.setopts
var ownProp = common.ownProp
var childrenIgnored = common.childrenIgnored
var isIgnored = common.isIgnored

function globSync (pattern, options) {
  if (typeof options === 'function' || arguments.length === 3)
    throw new TypeError('callback provided to sync glob\n'+
                        'See: https://github.com/isaacs/node-glob/issues/167')

  return new GlobSync(pattern, options).found
}

function GlobSync (pattern, options) {
  if (!pattern)
    throw new Error('must provide pattern')

  if (typeof options === 'function' || arguments.length === 3)
    throw new TypeError('callback provided to sync glob\n'+
                        'See: https://github.com/isaacs/node-glob/issues/167')

  if (!(this instanceof GlobSync))
    return new GlobSync(pattern, options)

  setopts(this, pattern, options)

  if (this.noprocess)
    return this

  var n = this.minimatch.set.length
  this.matches = new Array(n)
  for (var i = 0; i < n; i ++) {
    this._process(this.minimatch.set[i], i, false)
  }
  this._finish()
}

GlobSync.prototype._finish = function () {
  assert.ok(this instanceof GlobSync)
  if (this.realpath) {
    var self = this
    this.matches.forEach(function (matchset, index) {
      var set = self.matches[index] = Object.create(null)
      for (var p in matchset) {
        try {
          p = self._makeAbs(p)
          var real = rp.realpathSync(p, self.realpathCache)
          set[real] = true
        } catch (er) {
          if (er.syscall === 'stat')
            set[self._makeAbs(p)] = true
          else
            throw er
        }
      }
    })
  }
  common.finish(this)
}


GlobSync.prototype._process = function (pattern, index, inGlobStar) {
  assert.ok(this instanceof GlobSync)

  // Get the first [n] parts of pattern that are all strings.
  var n = 0
  while (typeof pattern[n] === 'string') {
    n ++
  }
  // now n is the index of the first one that is *not* a string.

  // See if there's anything else
  var prefix
  switch (n) {
    // if not, then this is rather simple
    case pattern.length:
      this._processSimple(pattern.join('/'), index)
      return

    case 0:
      // pattern *starts* with some non-trivial item.
      // going to readdir(cwd), but not include the prefix in matches.
      prefix = null
      break

    default:
      // pattern has some string bits in the front.
      // whatever it starts with, whether that's 'absolute' like /foo/bar,
      // or 'relative' like '../baz'
      prefix = pattern.slice(0, n).join('/')
      break
  }

  var remain = pattern.slice(n)

  // get the list of entries.
  var read
  if (prefix === null)
    read = '.'
  else if (isAbsolute(prefix) ||
      isAbsolute(pattern.map(function (p) {
        return typeof p === 'string' ? p : '[*]'
      }).join('/'))) {
    if (!prefix || !isAbsolute(prefix))
      prefix = '/' + prefix
    read = prefix
  } else
    read = prefix

  var abs = this._makeAbs(read)

  //if ignored, skip processing
  if (childrenIgnored(this, read))
    return

  var isGlobStar = remain[0] === minimatch.GLOBSTAR
  if (isGlobStar)
    this._processGlobStar(prefix, read, abs, remain, index, inGlobStar)
  else
    this._processReaddir(prefix, read, abs, remain, index, inGlobStar)
}


GlobSync.prototype._processReaddir = function (prefix, read, abs, remain, index, inGlobStar) {
  var entries = this._readdir(abs, inGlobStar)

  // if the abs isn't a dir, then nothing can match!
  if (!entries)
    return

  // It will only match dot entries if it starts with a dot, or if
  // dot is set.  Stuff like @(.foo|.bar) isn't allowed.
  var pn = remain[0]
  var negate = !!this.minimatch.negate
  var rawGlob = pn._glob
  var dotOk = this.dot || rawGlob.charAt(0) === '.'

  var matchedEntries = []
  for (var i = 0; i < entries.length; i++) {
    var e = entries[i]
    if (e.charAt(0) !== '.' || dotOk) {
      var m
      if (negate && !prefix) {
        m = !e.match(pn)
      } else {
        m = e.match(pn)
      }
      if (m)
        matchedEntries.push(e)
    }
  }

  var len = matchedEntries.length
  // If there are no matched entries, then nothing matches.
  if (len === 0)
    return

  // if this is the last remaining pattern bit, then no need for
  // an additional stat *unless* the user has specified mark or
  // stat explicitly.  We know they exist, since readdir returned
  // them.

  if (remain.length === 1 && !this.mark && !this.stat) {
    if (!this.matches[index])
      this.matches[index] = Object.create(null)

    for (var i = 0; i < len; i ++) {
      var e = matchedEntries[i]
      if (prefix) {
        if (prefix.slice(-1) !== '/')
          e = prefix + '/' + e
        else
          e = prefix + e
      }

      if (e.charAt(0) === '/' && !this.nomount) {
        e = path.join(this.root, e)
      }
      this._emitMatch(index, e)
    }
    // This was the last one, and no stats were needed
    return
  }

  // now test all matched entries as stand-ins for that part
  // of the pattern.
  remain.shift()
  for (var i = 0; i < len; i ++) {
    var e = matchedEntries[i]
    var newPattern
    if (prefix)
      newPattern = [prefix, e]
    else
      newPattern = [e]
    this._process(newPattern.concat(remain), index, inGlobStar)
  }
}


GlobSync.prototype._emitMatch = function (index, e) {
  if (isIgnored(this, e))
    return

  var abs = this._makeAbs(e)

  if (this.mark)
    e = this._mark(e)

  if (this.absolute) {
    e = abs
  }

  if (this.matches[index][e])
    return

  if (this.nodir) {
    var c = this.cache[abs]
    if (c === 'DIR' || Array.isArray(c))
      return
  }

  this.matches[index][e] = true

  if (this.stat)
    this._stat(e)
}


GlobSync.prototype._readdirInGlobStar = function (abs) {
  // follow all symlinked directories forever
  // just proceed as if this is a non-globstar situation
  if (this.follow)
    return this._readdir(abs, false)

  var entries
  var lstat
  var stat
  try {
    lstat = this.fs.lstatSync(abs)
  } catch (er) {
    if (er.code === 'ENOENT') {
      // lstat failed, doesn't exist
      return null
    }
  }

  var isSym = lstat && lstat.isSymbolicLink()
  this.symlinks[abs] = isSym

  // If it's not a symlink or a dir, then it's definitely a regular file.
  // don't bother doing a readdir in that case.
  if (!isSym && lstat && !lstat.isDirectory())
    this.cache[abs] = 'FILE'
  else
    entries = this._readdir(abs, false)

  return entries
}

GlobSync.prototype._readdir = function (abs, inGlobStar) {
  var entries

  if (inGlobStar && !ownProp(this.symlinks, abs))
    return this._readdirInGlobStar(abs)

  if (ownProp(this.cache, abs)) {
    var c = this.cache[abs]
    if (!c || c === 'FILE')
      return null

    if (Array.isArray(c))
      return c
  }

  try {
    return this._readdirEntries(abs, this.fs.readdirSync(abs))
  } catch (er) {
    this._readdirError(abs, er)
    return null
  }
}

GlobSync.prototype._readdirEntries = function (abs, entries) {
  // if we haven't asked to stat everything, then just
  // assume that everything in there exists, so we can avoid
  // having to stat it a second time.
  if (!this.mark && !this.stat) {
    for (var i = 0; i < entries.length; i ++) {
      var e = entries[i]
      if (abs === '/')
        e = abs + e
      else
        e = abs + '/' + e
      this.cache[e] = true
    }
  }

  this.cache[abs] = entries

  // mark and cache dir-ness
  return entries
}

GlobSync.prototype._readdirError = function (f, er) {
  // handle errors, and cache the information
  switch (er.code) {
    case 'ENOTSUP': // https://github.com/isaacs/node-glob/issues/205
    case 'ENOTDIR': // totally normal. means it *does* exist.
      var abs = this._makeAbs(f)
      this.cache[abs] = 'FILE'
      if (abs === this.cwdAbs) {
        var error = new Error(er.code + ' invalid cwd ' + this.cwd)
        error.path = this.cwd
        error.code = er.code
        throw error
      }
      break

    case 'ENOENT': // not terribly unusual
    case 'ELOOP':
    case 'ENAMETOOLONG':
    case 'UNKNOWN':
      this.cache[this._makeAbs(f)] = false
      break

    default: // some unusual error.  Treat as failure.
      this.cache[this._makeAbs(f)] = false
      if (this.strict)
        throw er
      if (!this.silent)
        console.error('glob error', er)
      break
  }
}

GlobSync.prototype._processGlobStar = function (prefix, read, abs, remain, index, inGlobStar) {

  var entries = this._readdir(abs, inGlobStar)

  // no entries means not a dir, so it can never have matches
  // foo.txt/** doesn't match foo.txt
  if (!entries)
    return

  // test without the globstar, and with every child both below
  // and replacing the globstar.
  var remainWithoutGlobStar = remain.slice(1)
  var gspref = prefix ? [ prefix ] : []
  var noGlobStar = gspref.concat(remainWithoutGlobStar)

  // the noGlobStar pattern exits the inGlobStar state
  this._process(noGlobStar, index, false)

  var len = entries.length
  var isSym = this.symlinks[abs]

  // If it's a symlink, and we're in a globstar, then stop
  if (isSym && inGlobStar)
    return

  for (var i = 0; i < len; i++) {
    var e = entries[i]
    if (e.charAt(0) === '.' && !this.dot)
      continue

    // these two cases enter the inGlobStar state
    var instead = gspref.concat(entries[i], remainWithoutGlobStar)
    this._process(instead, index, true)

    var below = gspref.concat(entries[i], remain)
    this._process(below, index, true)
  }
}

GlobSync.prototype._processSimple = function (prefix, index) {
  // XXX review this.  Shouldn't it be doing the mounting etc
  // before doing stat?  kinda weird?
  var exists = this._stat(prefix)

  if (!this.matches[index])
    this.matches[index] = Object.create(null)

  // If it doesn't exist, then just mark the lack of results
  if (!exists)
    return

  if (prefix && isAbsolute(prefix) && !this.nomount) {
    var trail = /[\/\\]$/.test(prefix)
    if (prefix.charAt(0) === '/') {
      prefix = path.join(this.root, prefix)
    } else {
      prefix = path.resolve(this.root, prefix)
      if (trail)
        prefix += '/'
    }
  }

  if (process.platform === 'win32')
    prefix = prefix.replace(/\\/g, '/')

  // Mark this as a match
  this._emitMatch(index, prefix)
}

// Returns either 'DIR', 'FILE', or false
GlobSync.prototype._stat = function (f) {
  var abs = this._makeAbs(f)
  var needDir = f.slice(-1) === '/'

  if (f.length > this.maxLength)
    return false

  if (!this.stat && ownProp(this.cache, abs)) {
    var c = this.cache[abs]

    if (Array.isArray(c))
      c = 'DIR'

    // It exists, but maybe not how we need it
    if (!needDir || c === 'DIR')
      return c

    if (needDir && c === 'FILE')
      return false

    // otherwise we have to stat, because maybe c=true
    // if we know it exists, but not what it is.
  }

  var exists
  var stat = this.statCache[abs]
  if (!stat) {
    var lstat
    try {
      lstat = this.fs.lstatSync(abs)
    } catch (er) {
      if (er && (er.code === 'ENOENT' || er.code === 'ENOTDIR')) {
        this.statCache[abs] = false
        return false
      }
    }

    if (lstat && lstat.isSymbolicLink()) {
      try {
        stat = this.fs.statSync(abs)
      } catch (er) {
        stat = lstat
      }
    } else {
      stat = lstat
    }
  }

  this.statCache[abs] = stat

  var c = true
  if (stat)
    c = stat.isDirectory() ? 'DIR' : 'FILE'

  this.cache[abs] = this.cache[abs] || c

  if (needDir && c === 'FILE')
    return false

  return c
}

GlobSync.prototype._mark = function (p) {
  return common.mark(this, p)
}

GlobSync.prototype._makeAbs = function (f) {
  return common.makeAbs(this, f)
}


/***/ }),

/***/ 99966:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var GetIntrinsic = __webpack_require__(41033);

var $gOPD = GetIntrinsic('%Object.getOwnPropertyDescriptor%', true);

if ($gOPD) {
	try {
		$gOPD([], 'length');
	} catch (e) {
		// IE 8 has a broken gOPD
		$gOPD = null;
	}
}

module.exports = $gOPD;


/***/ }),

/***/ 93827:
/***/ ((module, exports, __webpack_require__) => {

"use strict";


exports.__esModule = true;
// istanbul ignore next

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _handlebarsRuntime = __webpack_require__(42588);

var _handlebarsRuntime2 = _interopRequireDefault(_handlebarsRuntime);

// Compiler imports

var _handlebarsCompilerAst = __webpack_require__(89920);

var _handlebarsCompilerAst2 = _interopRequireDefault(_handlebarsCompilerAst);

var _handlebarsCompilerBase = __webpack_require__(97193);

var _handlebarsCompilerCompiler = __webpack_require__(82630);

var _handlebarsCompilerJavascriptCompiler = __webpack_require__(44006);

var _handlebarsCompilerJavascriptCompiler2 = _interopRequireDefault(_handlebarsCompilerJavascriptCompiler);

var _handlebarsCompilerVisitor = __webpack_require__(96763);

var _handlebarsCompilerVisitor2 = _interopRequireDefault(_handlebarsCompilerVisitor);

var _handlebarsNoConflict = __webpack_require__(60068);

var _handlebarsNoConflict2 = _interopRequireDefault(_handlebarsNoConflict);

var _create = _handlebarsRuntime2['default'].create;
function create() {
  var hb = _create();

  hb.compile = function (input, options) {
    return _handlebarsCompilerCompiler.compile(input, options, hb);
  };
  hb.precompile = function (input, options) {
    return _handlebarsCompilerCompiler.precompile(input, options, hb);
  };

  hb.AST = _handlebarsCompilerAst2['default'];
  hb.Compiler = _handlebarsCompilerCompiler.Compiler;
  hb.JavaScriptCompiler = _handlebarsCompilerJavascriptCompiler2['default'];
  hb.Parser = _handlebarsCompilerBase.parser;
  hb.parse = _handlebarsCompilerBase.parse;
  hb.parseWithoutProcessing = _handlebarsCompilerBase.parseWithoutProcessing;

  return hb;
}

var inst = create();
inst.create = create;

_handlebarsNoConflict2['default'](inst);

inst.Visitor = _handlebarsCompilerVisitor2['default'];

inst['default'] = inst;

exports["default"] = inst;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2xpYi9oYW5kbGViYXJzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7aUNBQW9CLHNCQUFzQjs7Ozs7O3FDQUcxQiwyQkFBMkI7Ozs7c0NBS3BDLDRCQUE0Qjs7MENBQ1csZ0NBQWdDOztvREFDL0MsMkNBQTJDOzs7O3lDQUN0RCwrQkFBK0I7Ozs7b0NBRTVCLDBCQUEwQjs7OztBQUVqRCxJQUFJLE9BQU8sR0FBRywrQkFBUSxNQUFNLENBQUM7QUFDN0IsU0FBUyxNQUFNLEdBQUc7QUFDaEIsTUFBSSxFQUFFLEdBQUcsT0FBTyxFQUFFLENBQUM7O0FBRW5CLElBQUUsQ0FBQyxPQUFPLEdBQUcsVUFBUyxLQUFLLEVBQUUsT0FBTyxFQUFFO0FBQ3BDLFdBQU8sb0NBQVEsS0FBSyxFQUFFLE9BQU8sRUFBRSxFQUFFLENBQUMsQ0FBQztHQUNwQyxDQUFDO0FBQ0YsSUFBRSxDQUFDLFVBQVUsR0FBRyxVQUFTLEtBQUssRUFBRSxPQUFPLEVBQUU7QUFDdkMsV0FBTyx1Q0FBVyxLQUFLLEVBQUUsT0FBTyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0dBQ3ZDLENBQUM7O0FBRUYsSUFBRSxDQUFDLEdBQUcscUNBQU0sQ0FBQztBQUNiLElBQUUsQ0FBQyxRQUFRLHVDQUFXLENBQUM7QUFDdkIsSUFBRSxDQUFDLGtCQUFrQixvREFBcUIsQ0FBQztBQUMzQyxJQUFFLENBQUMsTUFBTSxpQ0FBUyxDQUFDO0FBQ25CLElBQUUsQ0FBQyxLQUFLLGdDQUFRLENBQUM7QUFDakIsSUFBRSxDQUFDLHNCQUFzQixpREFBeUIsQ0FBQzs7QUFFbkQsU0FBTyxFQUFFLENBQUM7Q0FDWDs7QUFFRCxJQUFJLElBQUksR0FBRyxNQUFNLEVBQUUsQ0FBQztBQUNwQixJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQzs7QUFFckIsa0NBQVcsSUFBSSxDQUFDLENBQUM7O0FBRWpCLElBQUksQ0FBQyxPQUFPLHlDQUFVLENBQUM7O0FBRXZCLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxJQUFJLENBQUM7O3FCQUVSLElBQUkiLCJmaWxlIjoiaGFuZGxlYmFycy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBydW50aW1lIGZyb20gJy4vaGFuZGxlYmFycy5ydW50aW1lJztcblxuLy8gQ29tcGlsZXIgaW1wb3J0c1xuaW1wb3J0IEFTVCBmcm9tICcuL2hhbmRsZWJhcnMvY29tcGlsZXIvYXN0JztcbmltcG9ydCB7XG4gIHBhcnNlciBhcyBQYXJzZXIsXG4gIHBhcnNlLFxuICBwYXJzZVdpdGhvdXRQcm9jZXNzaW5nXG59IGZyb20gJy4vaGFuZGxlYmFycy9jb21waWxlci9iYXNlJztcbmltcG9ydCB7IENvbXBpbGVyLCBjb21waWxlLCBwcmVjb21waWxlIH0gZnJvbSAnLi9oYW5kbGViYXJzL2NvbXBpbGVyL2NvbXBpbGVyJztcbmltcG9ydCBKYXZhU2NyaXB0Q29tcGlsZXIgZnJvbSAnLi9oYW5kbGViYXJzL2NvbXBpbGVyL2phdmFzY3JpcHQtY29tcGlsZXInO1xuaW1wb3J0IFZpc2l0b3IgZnJvbSAnLi9oYW5kbGViYXJzL2NvbXBpbGVyL3Zpc2l0b3InO1xuXG5pbXBvcnQgbm9Db25mbGljdCBmcm9tICcuL2hhbmRsZWJhcnMvbm8tY29uZmxpY3QnO1xuXG5sZXQgX2NyZWF0ZSA9IHJ1bnRpbWUuY3JlYXRlO1xuZnVuY3Rpb24gY3JlYXRlKCkge1xuICBsZXQgaGIgPSBfY3JlYXRlKCk7XG5cbiAgaGIuY29tcGlsZSA9IGZ1bmN0aW9uKGlucHV0LCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIGNvbXBpbGUoaW5wdXQsIG9wdGlvbnMsIGhiKTtcbiAgfTtcbiAgaGIucHJlY29tcGlsZSA9IGZ1bmN0aW9uKGlucHV0LCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIHByZWNvbXBpbGUoaW5wdXQsIG9wdGlvbnMsIGhiKTtcbiAgfTtcblxuICBoYi5BU1QgPSBBU1Q7XG4gIGhiLkNvbXBpbGVyID0gQ29tcGlsZXI7XG4gIGhiLkphdmFTY3JpcHRDb21waWxlciA9IEphdmFTY3JpcHRDb21waWxlcjtcbiAgaGIuUGFyc2VyID0gUGFyc2VyO1xuICBoYi5wYXJzZSA9IHBhcnNlO1xuICBoYi5wYXJzZVdpdGhvdXRQcm9jZXNzaW5nID0gcGFyc2VXaXRob3V0UHJvY2Vzc2luZztcblxuICByZXR1cm4gaGI7XG59XG5cbmxldCBpbnN0ID0gY3JlYXRlKCk7XG5pbnN0LmNyZWF0ZSA9IGNyZWF0ZTtcblxubm9Db25mbGljdChpbnN0KTtcblxuaW5zdC5WaXNpdG9yID0gVmlzaXRvcjtcblxuaW5zdFsnZGVmYXVsdCddID0gaW5zdDtcblxuZXhwb3J0IGRlZmF1bHQgaW5zdDtcbiJdfQ==


/***/ }),

/***/ 42588:
/***/ ((module, exports, __webpack_require__) => {

"use strict";


exports.__esModule = true;
// istanbul ignore next

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

// istanbul ignore next

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

var _handlebarsBase = __webpack_require__(95040);

var base = _interopRequireWildcard(_handlebarsBase);

// Each of these augment the Handlebars object. No need to setup here.
// (This is done to easily share code between commonjs and browse envs)

var _handlebarsSafeString = __webpack_require__(10274);

var _handlebarsSafeString2 = _interopRequireDefault(_handlebarsSafeString);

var _handlebarsException = __webpack_require__(3403);

var _handlebarsException2 = _interopRequireDefault(_handlebarsException);

var _handlebarsUtils = __webpack_require__(57471);

var Utils = _interopRequireWildcard(_handlebarsUtils);

var _handlebarsRuntime = __webpack_require__(77862);

var runtime = _interopRequireWildcard(_handlebarsRuntime);

var _handlebarsNoConflict = __webpack_require__(60068);

var _handlebarsNoConflict2 = _interopRequireDefault(_handlebarsNoConflict);

// For compatibility and usage outside of module systems, make the Handlebars object a namespace
function create() {
  var hb = new base.HandlebarsEnvironment();

  Utils.extend(hb, base);
  hb.SafeString = _handlebarsSafeString2['default'];
  hb.Exception = _handlebarsException2['default'];
  hb.Utils = Utils;
  hb.escapeExpression = Utils.escapeExpression;

  hb.VM = runtime;
  hb.template = function (spec) {
    return runtime.template(spec, hb);
  };

  return hb;
}

var inst = create();
inst.create = create;

_handlebarsNoConflict2['default'](inst);

inst['default'] = inst;

exports["default"] = inst;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2xpYi9oYW5kbGViYXJzLnJ1bnRpbWUuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OEJBQXNCLG1CQUFtQjs7SUFBN0IsSUFBSTs7Ozs7b0NBSU8sMEJBQTBCOzs7O21DQUMzQix3QkFBd0I7Ozs7K0JBQ3ZCLG9CQUFvQjs7SUFBL0IsS0FBSzs7aUNBQ1Esc0JBQXNCOztJQUFuQyxPQUFPOztvQ0FFSSwwQkFBMEI7Ozs7O0FBR2pELFNBQVMsTUFBTSxHQUFHO0FBQ2hCLE1BQUksRUFBRSxHQUFHLElBQUksSUFBSSxDQUFDLHFCQUFxQixFQUFFLENBQUM7O0FBRTFDLE9BQUssQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLElBQUksQ0FBQyxDQUFDO0FBQ3ZCLElBQUUsQ0FBQyxVQUFVLG9DQUFhLENBQUM7QUFDM0IsSUFBRSxDQUFDLFNBQVMsbUNBQVksQ0FBQztBQUN6QixJQUFFLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztBQUNqQixJQUFFLENBQUMsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLGdCQUFnQixDQUFDOztBQUU3QyxJQUFFLENBQUMsRUFBRSxHQUFHLE9BQU8sQ0FBQztBQUNoQixJQUFFLENBQUMsUUFBUSxHQUFHLFVBQVMsSUFBSSxFQUFFO0FBQzNCLFdBQU8sT0FBTyxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLENBQUM7R0FDbkMsQ0FBQzs7QUFFRixTQUFPLEVBQUUsQ0FBQztDQUNYOztBQUVELElBQUksSUFBSSxHQUFHLE1BQU0sRUFBRSxDQUFDO0FBQ3BCLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDOztBQUVyQixrQ0FBVyxJQUFJLENBQUMsQ0FBQzs7QUFFakIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLElBQUksQ0FBQzs7cUJBRVIsSUFBSSIsImZpbGUiOiJoYW5kbGViYXJzLnJ1bnRpbWUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBiYXNlIGZyb20gJy4vaGFuZGxlYmFycy9iYXNlJztcblxuLy8gRWFjaCBvZiB0aGVzZSBhdWdtZW50IHRoZSBIYW5kbGViYXJzIG9iamVjdC4gTm8gbmVlZCB0byBzZXR1cCBoZXJlLlxuLy8gKFRoaXMgaXMgZG9uZSB0byBlYXNpbHkgc2hhcmUgY29kZSBiZXR3ZWVuIGNvbW1vbmpzIGFuZCBicm93c2UgZW52cylcbmltcG9ydCBTYWZlU3RyaW5nIGZyb20gJy4vaGFuZGxlYmFycy9zYWZlLXN0cmluZyc7XG5pbXBvcnQgRXhjZXB0aW9uIGZyb20gJy4vaGFuZGxlYmFycy9leGNlcHRpb24nO1xuaW1wb3J0ICogYXMgVXRpbHMgZnJvbSAnLi9oYW5kbGViYXJzL3V0aWxzJztcbmltcG9ydCAqIGFzIHJ1bnRpbWUgZnJvbSAnLi9oYW5kbGViYXJzL3J1bnRpbWUnO1xuXG5pbXBvcnQgbm9Db25mbGljdCBmcm9tICcuL2hhbmRsZWJhcnMvbm8tY29uZmxpY3QnO1xuXG4vLyBGb3IgY29tcGF0aWJpbGl0eSBhbmQgdXNhZ2Ugb3V0c2lkZSBvZiBtb2R1bGUgc3lzdGVtcywgbWFrZSB0aGUgSGFuZGxlYmFycyBvYmplY3QgYSBuYW1lc3BhY2VcbmZ1bmN0aW9uIGNyZWF0ZSgpIHtcbiAgbGV0IGhiID0gbmV3IGJhc2UuSGFuZGxlYmFyc0Vudmlyb25tZW50KCk7XG5cbiAgVXRpbHMuZXh0ZW5kKGhiLCBiYXNlKTtcbiAgaGIuU2FmZVN0cmluZyA9IFNhZmVTdHJpbmc7XG4gIGhiLkV4Y2VwdGlvbiA9IEV4Y2VwdGlvbjtcbiAgaGIuVXRpbHMgPSBVdGlscztcbiAgaGIuZXNjYXBlRXhwcmVzc2lvbiA9IFV0aWxzLmVzY2FwZUV4cHJlc3Npb247XG5cbiAgaGIuVk0gPSBydW50aW1lO1xuICBoYi50ZW1wbGF0ZSA9IGZ1bmN0aW9uKHNwZWMpIHtcbiAgICByZXR1cm4gcnVudGltZS50ZW1wbGF0ZShzcGVjLCBoYik7XG4gIH07XG5cbiAgcmV0dXJuIGhiO1xufVxuXG5sZXQgaW5zdCA9IGNyZWF0ZSgpO1xuaW5zdC5jcmVhdGUgPSBjcmVhdGU7XG5cbm5vQ29uZmxpY3QoaW5zdCk7XG5cbmluc3RbJ2RlZmF1bHQnXSA9IGluc3Q7XG5cbmV4cG9ydCBkZWZhdWx0IGluc3Q7XG4iXX0=


/***/ }),

/***/ 95040:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


exports.__esModule = true;
exports.HandlebarsEnvironment = HandlebarsEnvironment;
// istanbul ignore next

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _utils = __webpack_require__(57471);

var _exception = __webpack_require__(3403);

var _exception2 = _interopRequireDefault(_exception);

var _helpers = __webpack_require__(32423);

var _decorators = __webpack_require__(62006);

var _logger = __webpack_require__(87118);

var _logger2 = _interopRequireDefault(_logger);

var _internalProtoAccess = __webpack_require__(5657);

var VERSION = '4.7.7';
exports.VERSION = VERSION;
var COMPILER_REVISION = 8;
exports.COMPILER_REVISION = COMPILER_REVISION;
var LAST_COMPATIBLE_COMPILER_REVISION = 7;

exports.LAST_COMPATIBLE_COMPILER_REVISION = LAST_COMPATIBLE_COMPILER_REVISION;
var REVISION_CHANGES = {
  1: '<= 1.0.rc.2', // 1.0.rc.2 is actually rev2 but doesn't report it
  2: '== 1.0.0-rc.3',
  3: '== 1.0.0-rc.4',
  4: '== 1.x.x',
  5: '== 2.0.0-alpha.x',
  6: '>= 2.0.0-beta.1',
  7: '>= 4.0.0 <4.3.0',
  8: '>= 4.3.0'
};

exports.REVISION_CHANGES = REVISION_CHANGES;
var objectType = '[object Object]';

function HandlebarsEnvironment(helpers, partials, decorators) {
  this.helpers = helpers || {};
  this.partials = partials || {};
  this.decorators = decorators || {};

  _helpers.registerDefaultHelpers(this);
  _decorators.registerDefaultDecorators(this);
}

HandlebarsEnvironment.prototype = {
  constructor: HandlebarsEnvironment,

  logger: _logger2['default'],
  log: _logger2['default'].log,

  registerHelper: function registerHelper(name, fn) {
    if (_utils.toString.call(name) === objectType) {
      if (fn) {
        throw new _exception2['default']('Arg not supported with multiple helpers');
      }
      _utils.extend(this.helpers, name);
    } else {
      this.helpers[name] = fn;
    }
  },
  unregisterHelper: function unregisterHelper(name) {
    delete this.helpers[name];
  },

  registerPartial: function registerPartial(name, partial) {
    if (_utils.toString.call(name) === objectType) {
      _utils.extend(this.partials, name);
    } else {
      if (typeof partial === 'undefined') {
        throw new _exception2['default']('Attempting to register a partial called "' + name + '" as undefined');
      }
      this.partials[name] = partial;
    }
  },
  unregisterPartial: function unregisterPartial(name) {
    delete this.partials[name];
  },

  registerDecorator: function registerDecorator(name, fn) {
    if (_utils.toString.call(name) === objectType) {
      if (fn) {
        throw new _exception2['default']('Arg not supported with multiple decorators');
      }
      _utils.extend(this.decorators, name);
    } else {
      this.decorators[name] = fn;
    }
  },
  unregisterDecorator: function unregisterDecorator(name) {
    delete this.decorators[name];
  },
  /**
   * Reset the memory of illegal property accesses that have already been logged.
   * @deprecated should only be used in handlebars test-cases
   */
  resetLoggedPropertyAccesses: function resetLoggedPropertyAccesses() {
    _internalProtoAccess.resetLoggedProperties();
  }
};

var log = _logger2['default'].log;

exports.log = log;
exports.createFrame = _utils.createFrame;
exports.logger = _logger2['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9oYW5kbGViYXJzL2Jhc2UuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7cUJBQThDLFNBQVM7O3lCQUNqQyxhQUFhOzs7O3VCQUNJLFdBQVc7OzBCQUNSLGNBQWM7O3NCQUNyQyxVQUFVOzs7O21DQUNTLHlCQUF5Qjs7QUFFeEQsSUFBTSxPQUFPLEdBQUcsT0FBTyxDQUFDOztBQUN4QixJQUFNLGlCQUFpQixHQUFHLENBQUMsQ0FBQzs7QUFDNUIsSUFBTSxpQ0FBaUMsR0FBRyxDQUFDLENBQUM7OztBQUU1QyxJQUFNLGdCQUFnQixHQUFHO0FBQzlCLEdBQUMsRUFBRSxhQUFhO0FBQ2hCLEdBQUMsRUFBRSxlQUFlO0FBQ2xCLEdBQUMsRUFBRSxlQUFlO0FBQ2xCLEdBQUMsRUFBRSxVQUFVO0FBQ2IsR0FBQyxFQUFFLGtCQUFrQjtBQUNyQixHQUFDLEVBQUUsaUJBQWlCO0FBQ3BCLEdBQUMsRUFBRSxpQkFBaUI7QUFDcEIsR0FBQyxFQUFFLFVBQVU7Q0FDZCxDQUFDOzs7QUFFRixJQUFNLFVBQVUsR0FBRyxpQkFBaUIsQ0FBQzs7QUFFOUIsU0FBUyxxQkFBcUIsQ0FBQyxPQUFPLEVBQUUsUUFBUSxFQUFFLFVBQVUsRUFBRTtBQUNuRSxNQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sSUFBSSxFQUFFLENBQUM7QUFDN0IsTUFBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLElBQUksRUFBRSxDQUFDO0FBQy9CLE1BQUksQ0FBQyxVQUFVLEdBQUcsVUFBVSxJQUFJLEVBQUUsQ0FBQzs7QUFFbkMsa0NBQXVCLElBQUksQ0FBQyxDQUFDO0FBQzdCLHdDQUEwQixJQUFJLENBQUMsQ0FBQztDQUNqQzs7QUFFRCxxQkFBcUIsQ0FBQyxTQUFTLEdBQUc7QUFDaEMsYUFBVyxFQUFFLHFCQUFxQjs7QUFFbEMsUUFBTSxxQkFBUTtBQUNkLEtBQUcsRUFBRSxvQkFBTyxHQUFHOztBQUVmLGdCQUFjLEVBQUUsd0JBQVMsSUFBSSxFQUFFLEVBQUUsRUFBRTtBQUNqQyxRQUFJLGdCQUFTLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxVQUFVLEVBQUU7QUFDdEMsVUFBSSxFQUFFLEVBQUU7QUFDTixjQUFNLDJCQUFjLHlDQUF5QyxDQUFDLENBQUM7T0FDaEU7QUFDRCxvQkFBTyxJQUFJLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDO0tBQzVCLE1BQU07QUFDTCxVQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztLQUN6QjtHQUNGO0FBQ0Qsa0JBQWdCLEVBQUUsMEJBQVMsSUFBSSxFQUFFO0FBQy9CLFdBQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztHQUMzQjs7QUFFRCxpQkFBZSxFQUFFLHlCQUFTLElBQUksRUFBRSxPQUFPLEVBQUU7QUFDdkMsUUFBSSxnQkFBUyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssVUFBVSxFQUFFO0FBQ3RDLG9CQUFPLElBQUksQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLENBQUM7S0FDN0IsTUFBTTtBQUNMLFVBQUksT0FBTyxPQUFPLEtBQUssV0FBVyxFQUFFO0FBQ2xDLGNBQU0seUVBQ3dDLElBQUksb0JBQ2pELENBQUM7T0FDSDtBQUNELFVBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEdBQUcsT0FBTyxDQUFDO0tBQy9CO0dBQ0Y7QUFDRCxtQkFBaUIsRUFBRSwyQkFBUyxJQUFJLEVBQUU7QUFDaEMsV0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDO0dBQzVCOztBQUVELG1CQUFpQixFQUFFLDJCQUFTLElBQUksRUFBRSxFQUFFLEVBQUU7QUFDcEMsUUFBSSxnQkFBUyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssVUFBVSxFQUFFO0FBQ3RDLFVBQUksRUFBRSxFQUFFO0FBQ04sY0FBTSwyQkFBYyw0Q0FBNEMsQ0FBQyxDQUFDO09BQ25FO0FBQ0Qsb0JBQU8sSUFBSSxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsQ0FBQztLQUMvQixNQUFNO0FBQ0wsVUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7S0FDNUI7R0FDRjtBQUNELHFCQUFtQixFQUFFLDZCQUFTLElBQUksRUFBRTtBQUNsQyxXQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUM7R0FDOUI7Ozs7O0FBS0QsNkJBQTJCLEVBQUEsdUNBQUc7QUFDNUIsZ0RBQXVCLENBQUM7R0FDekI7Q0FDRixDQUFDOztBQUVLLElBQUksR0FBRyxHQUFHLG9CQUFPLEdBQUcsQ0FBQzs7O1FBRW5CLFdBQVc7UUFBRSxNQUFNIiwiZmlsZSI6ImJhc2UuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjcmVhdGVGcmFtZSwgZXh0ZW5kLCB0b1N0cmluZyB9IGZyb20gJy4vdXRpbHMnO1xuaW1wb3J0IEV4Y2VwdGlvbiBmcm9tICcuL2V4Y2VwdGlvbic7XG5pbXBvcnQgeyByZWdpc3RlckRlZmF1bHRIZWxwZXJzIH0gZnJvbSAnLi9oZWxwZXJzJztcbmltcG9ydCB7IHJlZ2lzdGVyRGVmYXVsdERlY29yYXRvcnMgfSBmcm9tICcuL2RlY29yYXRvcnMnO1xuaW1wb3J0IGxvZ2dlciBmcm9tICcuL2xvZ2dlcic7XG5pbXBvcnQgeyByZXNldExvZ2dlZFByb3BlcnRpZXMgfSBmcm9tICcuL2ludGVybmFsL3Byb3RvLWFjY2Vzcyc7XG5cbmV4cG9ydCBjb25zdCBWRVJTSU9OID0gJzQuNy43JztcbmV4cG9ydCBjb25zdCBDT01QSUxFUl9SRVZJU0lPTiA9IDg7XG5leHBvcnQgY29uc3QgTEFTVF9DT01QQVRJQkxFX0NPTVBJTEVSX1JFVklTSU9OID0gNztcblxuZXhwb3J0IGNvbnN0IFJFVklTSU9OX0NIQU5HRVMgPSB7XG4gIDE6ICc8PSAxLjAucmMuMicsIC8vIDEuMC5yYy4yIGlzIGFjdHVhbGx5IHJldjIgYnV0IGRvZXNuJ3QgcmVwb3J0IGl0XG4gIDI6ICc9PSAxLjAuMC1yYy4zJyxcbiAgMzogJz09IDEuMC4wLXJjLjQnLFxuICA0OiAnPT0gMS54LngnLFxuICA1OiAnPT0gMi4wLjAtYWxwaGEueCcsXG4gIDY6ICc+PSAyLjAuMC1iZXRhLjEnLFxuICA3OiAnPj0gNC4wLjAgPDQuMy4wJyxcbiAgODogJz49IDQuMy4wJ1xufTtcblxuY29uc3Qgb2JqZWN0VHlwZSA9ICdbb2JqZWN0IE9iamVjdF0nO1xuXG5leHBvcnQgZnVuY3Rpb24gSGFuZGxlYmFyc0Vudmlyb25tZW50KGhlbHBlcnMsIHBhcnRpYWxzLCBkZWNvcmF0b3JzKSB7XG4gIHRoaXMuaGVscGVycyA9IGhlbHBlcnMgfHwge307XG4gIHRoaXMucGFydGlhbHMgPSBwYXJ0aWFscyB8fCB7fTtcbiAgdGhpcy5kZWNvcmF0b3JzID0gZGVjb3JhdG9ycyB8fCB7fTtcblxuICByZWdpc3RlckRlZmF1bHRIZWxwZXJzKHRoaXMpO1xuICByZWdpc3RlckRlZmF1bHREZWNvcmF0b3JzKHRoaXMpO1xufVxuXG5IYW5kbGViYXJzRW52aXJvbm1lbnQucHJvdG90eXBlID0ge1xuICBjb25zdHJ1Y3RvcjogSGFuZGxlYmFyc0Vudmlyb25tZW50LFxuXG4gIGxvZ2dlcjogbG9nZ2VyLFxuICBsb2c6IGxvZ2dlci5sb2csXG5cbiAgcmVnaXN0ZXJIZWxwZXI6IGZ1bmN0aW9uKG5hbWUsIGZuKSB7XG4gICAgaWYgKHRvU3RyaW5nLmNhbGwobmFtZSkgPT09IG9iamVjdFR5cGUpIHtcbiAgICAgIGlmIChmbikge1xuICAgICAgICB0aHJvdyBuZXcgRXhjZXB0aW9uKCdBcmcgbm90IHN1cHBvcnRlZCB3aXRoIG11bHRpcGxlIGhlbHBlcnMnKTtcbiAgICAgIH1cbiAgICAgIGV4dGVuZCh0aGlzLmhlbHBlcnMsIG5hbWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmhlbHBlcnNbbmFtZV0gPSBmbjtcbiAgICB9XG4gIH0sXG4gIHVucmVnaXN0ZXJIZWxwZXI6IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICBkZWxldGUgdGhpcy5oZWxwZXJzW25hbWVdO1xuICB9LFxuXG4gIHJlZ2lzdGVyUGFydGlhbDogZnVuY3Rpb24obmFtZSwgcGFydGlhbCkge1xuICAgIGlmICh0b1N0cmluZy5jYWxsKG5hbWUpID09PSBvYmplY3RUeXBlKSB7XG4gICAgICBleHRlbmQodGhpcy5wYXJ0aWFscywgbmFtZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICh0eXBlb2YgcGFydGlhbCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgdGhyb3cgbmV3IEV4Y2VwdGlvbihcbiAgICAgICAgICBgQXR0ZW1wdGluZyB0byByZWdpc3RlciBhIHBhcnRpYWwgY2FsbGVkIFwiJHtuYW1lfVwiIGFzIHVuZGVmaW5lZGBcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIHRoaXMucGFydGlhbHNbbmFtZV0gPSBwYXJ0aWFsO1xuICAgIH1cbiAgfSxcbiAgdW5yZWdpc3RlclBhcnRpYWw6IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICBkZWxldGUgdGhpcy5wYXJ0aWFsc1tuYW1lXTtcbiAgfSxcblxuICByZWdpc3RlckRlY29yYXRvcjogZnVuY3Rpb24obmFtZSwgZm4pIHtcbiAgICBpZiAodG9TdHJpbmcuY2FsbChuYW1lKSA9PT0gb2JqZWN0VHlwZSkge1xuICAgICAgaWYgKGZuKSB7XG4gICAgICAgIHRocm93IG5ldyBFeGNlcHRpb24oJ0FyZyBub3Qgc3VwcG9ydGVkIHdpdGggbXVsdGlwbGUgZGVjb3JhdG9ycycpO1xuICAgICAgfVxuICAgICAgZXh0ZW5kKHRoaXMuZGVjb3JhdG9ycywgbmFtZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZGVjb3JhdG9yc1tuYW1lXSA9IGZuO1xuICAgIH1cbiAgfSxcbiAgdW5yZWdpc3RlckRlY29yYXRvcjogZnVuY3Rpb24obmFtZSkge1xuICAgIGRlbGV0ZSB0aGlzLmRlY29yYXRvcnNbbmFtZV07XG4gIH0sXG4gIC8qKlxuICAgKiBSZXNldCB0aGUgbWVtb3J5IG9mIGlsbGVnYWwgcHJvcGVydHkgYWNjZXNzZXMgdGhhdCBoYXZlIGFscmVhZHkgYmVlbiBsb2dnZWQuXG4gICAqIEBkZXByZWNhdGVkIHNob3VsZCBvbmx5IGJlIHVzZWQgaW4gaGFuZGxlYmFycyB0ZXN0LWNhc2VzXG4gICAqL1xuICByZXNldExvZ2dlZFByb3BlcnR5QWNjZXNzZXMoKSB7XG4gICAgcmVzZXRMb2dnZWRQcm9wZXJ0aWVzKCk7XG4gIH1cbn07XG5cbmV4cG9ydCBsZXQgbG9nID0gbG9nZ2VyLmxvZztcblxuZXhwb3J0IHsgY3JlYXRlRnJhbWUsIGxvZ2dlciB9O1xuIl19


/***/ }),

/***/ 89920:
/***/ ((module, exports) => {

"use strict";


exports.__esModule = true;
var AST = {
  // Public API used to evaluate derived attributes regarding AST nodes
  helpers: {
    // a mustache is definitely a helper if:
    // * it is an eligible helper, and
    // * it has at least one parameter or hash segment
    helperExpression: function helperExpression(node) {
      return node.type === 'SubExpression' || (node.type === 'MustacheStatement' || node.type === 'BlockStatement') && !!(node.params && node.params.length || node.hash);
    },

    scopedId: function scopedId(path) {
      return (/^\.|this\b/.test(path.original)
      );
    },

    // an ID is simple if it only has one part, and that part is not
    // `..` or `this`.
    simpleId: function simpleId(path) {
      return path.parts.length === 1 && !AST.helpers.scopedId(path) && !path.depth;
    }
  }
};

// Must be exported as an object rather than the root of the module as the jison lexer
// must modify the object to operate properly.
exports["default"] = AST;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2xpYi9oYW5kbGViYXJzL2NvbXBpbGVyL2FzdC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxJQUFJLEdBQUcsR0FBRzs7QUFFUixTQUFPLEVBQUU7Ozs7QUFJUCxvQkFBZ0IsRUFBRSwwQkFBUyxJQUFJLEVBQUU7QUFDL0IsYUFDRSxJQUFJLENBQUMsSUFBSSxLQUFLLGVBQWUsSUFDNUIsQ0FBQyxJQUFJLENBQUMsSUFBSSxLQUFLLG1CQUFtQixJQUNqQyxJQUFJLENBQUMsSUFBSSxLQUFLLGdCQUFnQixDQUFBLElBQzlCLENBQUMsRUFBRSxBQUFDLElBQUksQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLElBQUssSUFBSSxDQUFDLElBQUksQ0FBQSxBQUFDLEFBQUMsQ0FDdkQ7S0FDSDs7QUFFRCxZQUFRLEVBQUUsa0JBQVMsSUFBSSxFQUFFO0FBQ3ZCLGFBQU8sYUFBWSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDO1FBQUM7S0FDekM7Ozs7QUFJRCxZQUFRLEVBQUUsa0JBQVMsSUFBSSxFQUFFO0FBQ3ZCLGFBQ0UsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUNyRTtLQUNIO0dBQ0Y7Q0FDRixDQUFDOzs7O3FCQUlhLEdBQUciLCJmaWxlIjoiYXN0LmpzIiwic291cmNlc0NvbnRlbnQiOlsibGV0IEFTVCA9IHtcbiAgLy8gUHVibGljIEFQSSB1c2VkIHRvIGV2YWx1YXRlIGRlcml2ZWQgYXR0cmlidXRlcyByZWdhcmRpbmcgQVNUIG5vZGVzXG4gIGhlbHBlcnM6IHtcbiAgICAvLyBhIG11c3RhY2hlIGlzIGRlZmluaXRlbHkgYSBoZWxwZXIgaWY6XG4gICAgLy8gKiBpdCBpcyBhbiBlbGlnaWJsZSBoZWxwZXIsIGFuZFxuICAgIC8vICogaXQgaGFzIGF0IGxlYXN0IG9uZSBwYXJhbWV0ZXIgb3IgaGFzaCBzZWdtZW50XG4gICAgaGVscGVyRXhwcmVzc2lvbjogZnVuY3Rpb24obm9kZSkge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgbm9kZS50eXBlID09PSAnU3ViRXhwcmVzc2lvbicgfHxcbiAgICAgICAgKChub2RlLnR5cGUgPT09ICdNdXN0YWNoZVN0YXRlbWVudCcgfHxcbiAgICAgICAgICBub2RlLnR5cGUgPT09ICdCbG9ja1N0YXRlbWVudCcpICYmXG4gICAgICAgICAgISEoKG5vZGUucGFyYW1zICYmIG5vZGUucGFyYW1zLmxlbmd0aCkgfHwgbm9kZS5oYXNoKSlcbiAgICAgICk7XG4gICAgfSxcblxuICAgIHNjb3BlZElkOiBmdW5jdGlvbihwYXRoKSB7XG4gICAgICByZXR1cm4gL15cXC58dGhpc1xcYi8udGVzdChwYXRoLm9yaWdpbmFsKTtcbiAgICB9LFxuXG4gICAgLy8gYW4gSUQgaXMgc2ltcGxlIGlmIGl0IG9ubHkgaGFzIG9uZSBwYXJ0LCBhbmQgdGhhdCBwYXJ0IGlzIG5vdFxuICAgIC8vIGAuLmAgb3IgYHRoaXNgLlxuICAgIHNpbXBsZUlkOiBmdW5jdGlvbihwYXRoKSB7XG4gICAgICByZXR1cm4gKFxuICAgICAgICBwYXRoLnBhcnRzLmxlbmd0aCA9PT0gMSAmJiAhQVNULmhlbHBlcnMuc2NvcGVkSWQocGF0aCkgJiYgIXBhdGguZGVwdGhcbiAgICAgICk7XG4gICAgfVxuICB9XG59O1xuXG4vLyBNdXN0IGJlIGV4cG9ydGVkIGFzIGFuIG9iamVjdCByYXRoZXIgdGhhbiB0aGUgcm9vdCBvZiB0aGUgbW9kdWxlIGFzIHRoZSBqaXNvbiBsZXhlclxuLy8gbXVzdCBtb2RpZnkgdGhlIG9iamVjdCB0byBvcGVyYXRlIHByb3Blcmx5LlxuZXhwb3J0IGRlZmF1bHQgQVNUO1xuIl19


/***/ }),

/***/ 97193:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


exports.__esModule = true;
exports.parseWithoutProcessing = parseWithoutProcessing;
exports.parse = parse;
// istanbul ignore next

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

// istanbul ignore next

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _parser = __webpack_require__(22113);

var _parser2 = _interopRequireDefault(_parser);

var _whitespaceControl = __webpack_require__(40167);

var _whitespaceControl2 = _interopRequireDefault(_whitespaceControl);

var _helpers = __webpack_require__(43196);

var Helpers = _interopRequireWildcard(_helpers);

var _utils = __webpack_require__(57471);

exports.parser = _parser2['default'];

var yy = {};
_utils.extend(yy, Helpers);

function parseWithoutProcessing(input, options) {
  // Just return if an already-compiled AST was passed in.
  if (input.type === 'Program') {
    return input;
  }

  _parser2['default'].yy = yy;

  // Altering the shared object here, but this is ok as parser is a sync operation
  yy.locInfo = function (locInfo) {
    return new yy.SourceLocation(options && options.srcName, locInfo);
  };

  var ast = _parser2['default'].parse(input);

  return ast;
}

function parse(input, options) {
  var ast = parseWithoutProcessing(input, options);
  var strip = new _whitespaceControl2['default'](options);

  return strip.accept(ast);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2xpYi9oYW5kbGViYXJzL2NvbXBpbGVyL2Jhc2UuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztzQkFBbUIsVUFBVTs7OztpQ0FDQyxzQkFBc0I7Ozs7dUJBQzNCLFdBQVc7O0lBQXhCLE9BQU87O3FCQUNJLFVBQVU7O1FBRXhCLE1BQU07O0FBRWYsSUFBSSxFQUFFLEdBQUcsRUFBRSxDQUFDO0FBQ1osY0FBTyxFQUFFLEVBQUUsT0FBTyxDQUFDLENBQUM7O0FBRWIsU0FBUyxzQkFBc0IsQ0FBQyxLQUFLLEVBQUUsT0FBTyxFQUFFOztBQUVyRCxNQUFJLEtBQUssQ0FBQyxJQUFJLEtBQUssU0FBUyxFQUFFO0FBQzVCLFdBQU8sS0FBSyxDQUFDO0dBQ2Q7O0FBRUQsc0JBQU8sRUFBRSxHQUFHLEVBQUUsQ0FBQzs7O0FBR2YsSUFBRSxDQUFDLE9BQU8sR0FBRyxVQUFTLE9BQU8sRUFBRTtBQUM3QixXQUFPLElBQUksRUFBRSxDQUFDLGNBQWMsQ0FBQyxPQUFPLElBQUksT0FBTyxDQUFDLE9BQU8sRUFBRSxPQUFPLENBQUMsQ0FBQztHQUNuRSxDQUFDOztBQUVGLE1BQUksR0FBRyxHQUFHLG9CQUFPLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQzs7QUFFOUIsU0FBTyxHQUFHLENBQUM7Q0FDWjs7QUFFTSxTQUFTLEtBQUssQ0FBQyxLQUFLLEVBQUUsT0FBTyxFQUFFO0FBQ3BDLE1BQUksR0FBRyxHQUFHLHNCQUFzQixDQUFDLEtBQUssRUFBRSxPQUFPLENBQUMsQ0FBQztBQUNqRCxNQUFJLEtBQUssR0FBRyxtQ0FBc0IsT0FBTyxDQUFDLENBQUM7O0FBRTNDLFNBQU8sS0FBSyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztDQUMxQiIsImZpbGUiOiJiYXNlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHBhcnNlciBmcm9tICcuL3BhcnNlcic7XG5pbXBvcnQgV2hpdGVzcGFjZUNvbnRyb2wgZnJvbSAnLi93aGl0ZXNwYWNlLWNvbnRyb2wnO1xuaW1wb3J0ICogYXMgSGVscGVycyBmcm9tICcuL2hlbHBlcnMnO1xuaW1wb3J0IHsgZXh0ZW5kIH0gZnJvbSAnLi4vdXRpbHMnO1xuXG5leHBvcnQgeyBwYXJzZXIgfTtcblxubGV0IHl5ID0ge307XG5leHRlbmQoeXksIEhlbHBlcnMpO1xuXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VXaXRob3V0UHJvY2Vzc2luZyhpbnB1dCwgb3B0aW9ucykge1xuICAvLyBKdXN0IHJldHVybiBpZiBhbiBhbHJlYWR5LWNvbXBpbGVkIEFTVCB3YXMgcGFzc2VkIGluLlxuICBpZiAoaW5wdXQudHlwZSA9PT0gJ1Byb2dyYW0nKSB7XG4gICAgcmV0dXJuIGlucHV0O1xuICB9XG5cbiAgcGFyc2VyLnl5ID0geXk7XG5cbiAgLy8gQWx0ZXJpbmcgdGhlIHNoYXJlZCBvYmplY3QgaGVyZSwgYnV0IHRoaXMgaXMgb2sgYXMgcGFyc2VyIGlzIGEgc3luYyBvcGVyYXRpb25cbiAgeXkubG9jSW5mbyA9IGZ1bmN0aW9uKGxvY0luZm8pIHtcbiAgICByZXR1cm4gbmV3IHl5LlNvdXJjZUxvY2F0aW9uKG9wdGlvbnMgJiYgb3B0aW9ucy5zcmNOYW1lLCBsb2NJbmZvKTtcbiAgfTtcblxuICBsZXQgYXN0ID0gcGFyc2VyLnBhcnNlKGlucHV0KTtcblxuICByZXR1cm4gYXN0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcGFyc2UoaW5wdXQsIG9wdGlvbnMpIHtcbiAgbGV0IGFzdCA9IHBhcnNlV2l0aG91dFByb2Nlc3NpbmcoaW5wdXQsIG9wdGlvbnMpO1xuICBsZXQgc3RyaXAgPSBuZXcgV2hpdGVzcGFjZUNvbnRyb2wob3B0aW9ucyk7XG5cbiAgcmV0dXJuIHN0cmlwLmFjY2VwdChhc3QpO1xufVxuIl19


/***/ }),

/***/ 14869:
/***/ ((module, exports, __webpack_require__) => {

"use strict";
/* global define */


exports.__esModule = true;

var _utils = __webpack_require__(57471);

var SourceNode = undefined;

try {
  /* istanbul ignore next */
  if (false) { var SourceMap; }
} catch (err) {}
/* NOP */

/* istanbul ignore if: tested but not covered in istanbul due to dist build  */
if (!SourceNode) {
  SourceNode = function (line, column, srcFile, chunks) {
    this.src = '';
    if (chunks) {
      this.add(chunks);
    }
  };
  /* istanbul ignore next */
  SourceNode.prototype = {
    add: function add(chunks) {
      if (_utils.isArray(chunks)) {
        chunks = chunks.join('');
      }
      this.src += chunks;
    },
    prepend: function prepend(chunks) {
      if (_utils.isArray(chunks)) {
        chunks = chunks.join('');
      }
      this.src = chunks + this.src;
    },
    toStringWithSourceMap: function toStringWithSourceMap() {
      return { code: this.toString() };
    },
    toString: function toString() {
      return this.src;
    }
  };
}

function castChunk(chunk, codeGen, loc) {
  if (_utils.isArray(chunk)) {
    var ret = [];

    for (var i = 0, len = chunk.length; i < len; i++) {
      ret.push(codeGen.wrap(chunk[i], loc));
    }
    return ret;
  } else if (typeof chunk === 'boolean' || typeof chunk === 'number') {
    // Handle primitives that the SourceNode will throw up on
    return chunk + '';
  }
  return chunk;
}

function CodeGen(srcFile) {
  this.srcFile = srcFile;
  this.source = [];
}

CodeGen.prototype = {
  isEmpty: function isEmpty() {
    return !this.source.length;
  },
  prepend: function prepend(source, loc) {
    this.source.unshift(this.wrap(source, loc));
  },
  push: function push(source, loc) {
    this.source.push(this.wrap(source, loc));
  },

  merge: function merge() {
    var source = this.empty();
    this.each(function (line) {
      source.add(['  ', line, '\n']);
    });
    return source;
  },

  each: function each(iter) {
    for (var i = 0, len = this.source.length; i < len; i++) {
      iter(this.source[i]);
    }
  },

  empty: function empty() {
    var loc = this.currentLocation || { start: {} };
    return new SourceNode(loc.start.line, loc.start.column, this.srcFile);
  },
  wrap: function wrap(chunk) {
    var loc = arguments.length <= 1 || arguments[1] === undefined ? this.currentLocation || { start: {} } : arguments[1];

    if (chunk instanceof SourceNode) {
      return chunk;
    }

    chunk = castChunk(chunk, this, loc);

    return new SourceNode(loc.start.line, loc.start.column, this.srcFile, chunk);
  },

  functionCall: function functionCall(fn, type, params) {
    params = this.generateList(params);
    return this.wrap([fn, type ? '.' + type + '(' : '(', params, ')']);
  },

  quotedString: function quotedString(str) {
    return '"' + (str + '').replace(/\\/g, '\\\\').replace(/"/g, '\\"').replace(/\n/g, '\\n').replace(/\r/g, '\\r').replace(/\u2028/g, '\\u2028') // Per Ecma-262 7.3 + 7.8.4
    .replace(/\u2029/g, '\\u2029') + '"';
  },

  objectLiteral: function objectLiteral(obj) {
    // istanbul ignore next

    var _this = this;

    var pairs = [];

    Object.keys(obj).forEach(function (key) {
      var value = castChunk(obj[key], _this);
      if (value !== 'undefined') {
        pairs.push([_this.quotedString(key), ':', value]);
      }
    });

    var ret = this.generateList(pairs);
    ret.prepend('{');
    ret.add('}');
    return ret;
  },

  generateList: function generateList(entries) {
    var ret = this.empty();

    for (var i = 0, len = entries.length; i < len; i++) {
      if (i) {
        ret.add(',');
      }

      ret.add(castChunk(entries[i], this));
    }

    return ret;
  },

  generateArray: function generateArray(entries) {
    var ret = this.generateList(entries);
    ret.prepend('[');
    ret.add(']');

    return ret;
  }
};

exports["default"] = CodeGen;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,


/***/ }),

/***/ 82630:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
/* eslint-disable new-cap */



exports.__esModule = true;
exports.Compiler = Compiler;
exports.precompile = precompile;
exports.compile = compile;
// istanbul ignore next

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _exception = __webpack_require__(3403);

var _exception2 = _interopRequireDefault(_exception);

var _utils = __webpack_require__(57471);

var _ast = __webpack_require__(89920);

var _ast2 = _interopRequireDefault(_ast);

var slice = [].slice;

function Compiler() {}

// the foundHelper register will disambiguate helper lookup from finding a
// function in a context. This is necessary for mustache compatibility, which
// requires that context functions in blocks are evaluated by blockHelperMissing,
// and then proceed as if the resulting value was provided to blockHelperMissing.

Compiler.prototype = {
  compiler: Compiler,

  equals: function equals(other) {
    var len = this.opcodes.length;
    if (other.opcodes.length !== len) {
      return false;
    }

    for (var i = 0; i < len; i++) {
      var opcode = this.opcodes[i],
          otherOpcode = other.opcodes[i];
      if (opcode.opcode !== otherOpcode.opcode || !argEquals(opcode.args, otherOpcode.args)) {
        return false;
      }
    }

    // We know that length is the same between the two arrays because they are directly tied
    // to the opcode behavior above.
    len = this.children.length;
    for (var i = 0; i < len; i++) {
      if (!this.children[i].equals(other.children[i])) {
        return false;
      }
    }

    return true;
  },

  guid: 0,

  compile: function compile(program, options) {
    this.sourceNode = [];
    this.opcodes = [];
    this.children = [];
    this.options = options;
    this.stringParams = options.stringParams;
    this.trackIds = options.trackIds;

    options.blockParams = options.blockParams || [];

    options.knownHelpers = _utils.extend(Object.create(null), {
      helperMissing: true,
      blockHelperMissing: true,
      each: true,
      'if': true,
      unless: true,
      'with': true,
      log: true,
      lookup: true
    }, options.knownHelpers);

    return this.accept(program);
  },

  compileProgram: function compileProgram(program) {
    var childCompiler = new this.compiler(),
        // eslint-disable-line new-cap
    result = childCompiler.compile(program, this.options),
        guid = this.guid++;

    this.usePartial = this.usePartial || result.usePartial;

    this.children[guid] = result;
    this.useDepths = this.useDepths || result.useDepths;

    return guid;
  },

  accept: function accept(node) {
    /* istanbul ignore next: Sanity code */
    if (!this[node.type]) {
      throw new _exception2['default']('Unknown type: ' + node.type, node);
    }

    this.sourceNode.unshift(node);
    var ret = this[node.type](node);
    this.sourceNode.shift();
    return ret;
  },

  Program: function Program(program) {
    this.options.blockParams.unshift(program.blockParams);

    var body = program.body,
        bodyLength = body.length;
    for (var i = 0; i < bodyLength; i++) {
      this.accept(body[i]);
    }

    this.options.blockParams.shift();

    this.isSimple = bodyLength === 1;
    this.blockParams = program.blockParams ? program.blockParams.length : 0;

    return this;
  },

  BlockStatement: function BlockStatement(block) {
    transformLiteralToPath(block);

    var program = block.program,
        inverse = block.inverse;

    program = program && this.compileProgram(program);
    inverse = inverse && this.compileProgram(inverse);

    var type = this.classifySexpr(block);

    if (type === 'helper') {
      this.helperSexpr(block, program, inverse);
    } else if (type === 'simple') {
      this.simpleSexpr(block);

      // now that the simple mustache is resolved, we need to
      // evaluate it by executing `blockHelperMissing`
      this.opcode('pushProgram', program);
      this.opcode('pushProgram', inverse);
      this.opcode('emptyHash');
      this.opcode('blockValue', block.path.original);
    } else {
      this.ambiguousSexpr(block, program, inverse);

      // now that the simple mustache is resolved, we need to
      // evaluate it by executing `blockHelperMissing`
      this.opcode('pushProgram', program);
      this.opcode('pushProgram', inverse);
      this.opcode('emptyHash');
      this.opcode('ambiguousBlockValue');
    }

    this.opcode('append');
  },

  DecoratorBlock: function DecoratorBlock(decorator) {
    var program = decorator.program && this.compileProgram(decorator.program);
    var params = this.setupFullMustacheParams(decorator, program, undefined),
        path = decorator.path;

    this.useDecorators = true;
    this.opcode('registerDecorator', params.length, path.original);
  },

  PartialStatement: function PartialStatement(partial) {
    this.usePartial = true;

    var program = partial.program;
    if (program) {
      program = this.compileProgram(partial.program);
    }

    var params = partial.params;
    if (params.length > 1) {
      throw new _exception2['default']('Unsupported number of partial arguments: ' + params.length, partial);
    } else if (!params.length) {
      if (this.options.explicitPartialContext) {
        this.opcode('pushLiteral', 'undefined');
      } else {
        params.push({ type: 'PathExpression', parts: [], depth: 0 });
      }
    }

    var partialName = partial.name.original,
        isDynamic = partial.name.type === 'SubExpression';
    if (isDynamic) {
      this.accept(partial.name);
    }

    this.setupFullMustacheParams(partial, program, undefined, true);

    var indent = partial.indent || '';
    if (this.options.preventIndent && indent) {
      this.opcode('appendContent', indent);
      indent = '';
    }

    this.opcode('invokePartial', isDynamic, partialName, indent);
    this.opcode('append');
  },
  PartialBlockStatement: function PartialBlockStatement(partialBlock) {
    this.PartialStatement(partialBlock);
  },

  MustacheStatement: function MustacheStatement(mustache) {
    this.SubExpression(mustache);

    if (mustache.escaped && !this.options.noEscape) {
      this.opcode('appendEscaped');
    } else {
      this.opcode('append');
    }
  },
  Decorator: function Decorator(decorator) {
    this.DecoratorBlock(decorator);
  },

  ContentStatement: function ContentStatement(content) {
    if (content.value) {
      this.opcode('appendContent', content.value);
    }
  },

  CommentStatement: function CommentStatement() {},

  SubExpression: function SubExpression(sexpr) {
    transformLiteralToPath(sexpr);
    var type = this.classifySexpr(sexpr);

    if (type === 'simple') {
      this.simpleSexpr(sexpr);
    } else if (type === 'helper') {
      this.helperSexpr(sexpr);
    } else {
      this.ambiguousSexpr(sexpr);
    }
  },
  ambiguousSexpr: function ambiguousSexpr(sexpr, program, inverse) {
    var path = sexpr.path,
        name = path.parts[0],
        isBlock = program != null || inverse != null;

    this.opcode('getContext', path.depth);

    this.opcode('pushProgram', program);
    this.opcode('pushProgram', inverse);

    path.strict = true;
    this.accept(path);

    this.opcode('invokeAmbiguous', name, isBlock);
  },

  simpleSexpr: function simpleSexpr(sexpr) {
    var path = sexpr.path;
    path.strict = true;
    this.accept(path);
    this.opcode('resolvePossibleLambda');
  },

  helperSexpr: function helperSexpr(sexpr, program, inverse) {
    var params = this.setupFullMustacheParams(sexpr, program, inverse),
        path = sexpr.path,
        name = path.parts[0];

    if (this.options.knownHelpers[name]) {
      this.opcode('invokeKnownHelper', params.length, name);
    } else if (this.options.knownHelpersOnly) {
      throw new _exception2['default']('You specified knownHelpersOnly, but used the unknown helper ' + name, sexpr);
    } else {
      path.strict = true;
      path.falsy = true;

      this.accept(path);
      this.opcode('invokeHelper', params.length, path.original, _ast2['default'].helpers.simpleId(path));
    }
  },

  PathExpression: function PathExpression(path) {
    this.addDepth(path.depth);
    this.opcode('getContext', path.depth);

    var name = path.parts[0],
        scoped = _ast2['default'].helpers.scopedId(path),
        blockParamId = !path.depth && !scoped && this.blockParamIndex(name);

    if (blockParamId) {
      this.opcode('lookupBlockParam', blockParamId, path.parts);
    } else if (!name) {
      // Context reference, i.e. `{{foo .}}` or `{{foo ..}}`
      this.opcode('pushContext');
    } else if (path.data) {
      this.options.data = true;
      this.opcode('lookupData', path.depth, path.parts, path.strict);
    } else {
      this.opcode('lookupOnContext', path.parts, path.falsy, path.strict, scoped);
    }
  },

  StringLiteral: function StringLiteral(string) {
    this.opcode('pushString', string.value);
  },

  NumberLiteral: function NumberLiteral(number) {
    this.opcode('pushLiteral', number.value);
  },

  BooleanLiteral: function BooleanLiteral(bool) {
    this.opcode('pushLiteral', bool.value);
  },

  UndefinedLiteral: function UndefinedLiteral() {
    this.opcode('pushLiteral', 'undefined');
  },

  NullLiteral: function NullLiteral() {
    this.opcode('pushLiteral', 'null');
  },

  Hash: function Hash(hash) {
    var pairs = hash.pairs,
        i = 0,
        l = pairs.length;

    this.opcode('pushHash');

    for (; i < l; i++) {
      this.pushParam(pairs[i].value);
    }
    while (i--) {
      this.opcode('assignToHash', pairs[i].key);
    }
    this.opcode('popHash');
  },

  // HELPERS
  opcode: function opcode(name) {
    this.opcodes.push({
      opcode: name,
      args: slice.call(arguments, 1),
      loc: this.sourceNode[0].loc
    });
  },

  addDepth: function addDepth(depth) {
    if (!depth) {
      return;
    }

    this.useDepths = true;
  },

  classifySexpr: function classifySexpr(sexpr) {
    var isSimple = _ast2['default'].helpers.simpleId(sexpr.path);

    var isBlockParam = isSimple && !!this.blockParamIndex(sexpr.path.parts[0]);

    // a mustache is an eligible helper if:
    // * its id is simple (a single part, not `this` or `..`)
    var isHelper = !isBlockParam && _ast2['default'].helpers.helperExpression(sexpr);

    // if a mustache is an eligible helper but not a definite
    // helper, it is ambiguous, and will be resolved in a later
    // pass or at runtime.
    var isEligible = !isBlockParam && (isHelper || isSimple);

    // if ambiguous, we can possibly resolve the ambiguity now
    // An eligible helper is one that does not have a complex path, i.e. `this.foo`, `../foo` etc.
    if (isEligible && !isHelper) {
      var _name = sexpr.path.parts[0],
          options = this.options;
      if (options.knownHelpers[_name]) {
        isHelper = true;
      } else if (options.knownHelpersOnly) {
        isEligible = false;
      }
    }

    if (isHelper) {
      return 'helper';
    } else if (isEligible) {
      return 'ambiguous';
    } else {
      return 'simple';
    }
  },

  pushParams: function pushParams(params) {
    for (var i = 0, l = params.length; i < l; i++) {
      this.pushParam(params[i]);
    }
  },

  pushParam: function pushParam(val) {
    var value = val.value != null ? val.value : val.original || '';

    if (this.stringParams) {
      if (value.replace) {
        value = value.replace(/^(\.?\.\/)*/g, '').replace(/\//g, '.');
      }

      if (val.depth) {
        this.addDepth(val.depth);
      }
      this.opcode('getContext', val.depth || 0);
      this.opcode('pushStringParam', value, val.type);

      if (val.type === 'SubExpression') {
        // SubExpressions get evaluated and passed in
        // in string params mode.
        this.accept(val);
      }
    } else {
      if (this.trackIds) {
        var blockParamIndex = undefined;
        if (val.parts && !_ast2['default'].helpers.scopedId(val) && !val.depth) {
          blockParamIndex = this.blockParamIndex(val.parts[0]);
        }
        if (blockParamIndex) {
          var blockParamChild = val.parts.slice(1).join('.');
          this.opcode('pushId', 'BlockParam', blockParamIndex, blockParamChild);
        } else {
          value = val.original || value;
          if (value.replace) {
            value = value.replace(/^this(?:\.|$)/, '').replace(/^\.\//, '').replace(/^\.$/, '');
          }

          this.opcode('pushId', val.type, value);
        }
      }
      this.accept(val);
    }
  },

  setupFullMustacheParams: function setupFullMustacheParams(sexpr, program, inverse, omitEmpty) {
    var params = sexpr.params;
    this.pushParams(params);

    this.opcode('pushProgram', program);
    this.opcode('pushProgram', inverse);

    if (sexpr.hash) {
      this.accept(sexpr.hash);
    } else {
      this.opcode('emptyHash', omitEmpty);
    }

    return params;
  },

  blockParamIndex: function blockParamIndex(name) {
    for (var depth = 0, len = this.options.blockParams.length; depth < len; depth++) {
      var blockParams = this.options.blockParams[depth],
          param = blockParams && _utils.indexOf(blockParams, name);
      if (blockParams && param >= 0) {
        return [depth, param];
      }
    }
  }
};

function precompile(input, options, env) {
  if (input == null || typeof input !== 'string' && input.type !== 'Program') {
    throw new _exception2['default']('You must pass a string or Handlebars AST to Handlebars.precompile. You passed ' + input);
  }

  options = options || {};
  if (!('data' in options)) {
    options.data = true;
  }
  if (options.compat) {
    options.useDepths = true;
  }

  var ast = env.parse(input, options),
      environment = new env.Compiler().compile(ast, options);
  return new env.JavaScriptCompiler().compile(environment, options);
}

function compile(input, options, env) {
  if (options === undefined) options = {};

  if (input == null || typeof input !== 'string' && input.type !== 'Program') {
    throw new _exception2['default']('You must pass a string or Handlebars AST to Handlebars.compile. You passed ' + input);
  }

  options = _utils.extend({}, options);
  if (!('data' in options)) {
    options.data = true;
  }
  if (options.compat) {
    options.useDepths = true;
  }

  var compiled = undefined;

  function compileInput() {
    var ast = env.parse(input, options),
        environment = new env.Compiler().compile(ast, options),
        templateSpec = new env.JavaScriptCompiler().compile(environment, options, undefined, true);
    return env.template(templateSpec);
  }

  // Template is only compiled on first use and cached after that point.
  function ret(context, execOptions) {
    if (!compiled) {
      compiled = compileInput();
    }
    return compiled.call(this, context, execOptions);
  }
  ret._setup = function (setupOptions) {
    if (!compiled) {
      compiled = compileInput();
    }
    return compiled._setup(setupOptions);
  };
  ret._child = function (i, data, blockParams, depths) {
    if (!compiled) {
      compiled = compileInput();
    }
    return compiled._child(i, data, blockParams, depths);
  };
  return ret;
}

function argEquals(a, b) {
  if (a === b) {
    return true;
  }

  if (_utils.isArray(a) && _utils.isArray(b) && a.length === b.length) {
    for (var i = 0; i < a.length; i++) {
      if (!argEquals(a[i], b[i])) {
        return false;
      }
    }
    return true;
  }
}

function transformLiteralToPath(sexpr) {
  if (!sexpr.path.parts) {
    var literal = sexpr.path;
    // Casting to string here to make false and 0 literal values play nicely with the rest
    // of the system.
    sexpr.path = {
      type: 'PathExpression',
      data: false,
      depth: 0,
      parts: [literal.original + ''],
      original: literal.original + '',
      loc: literal.loc
    };
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,


/***/ }),

/***/ 43196:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


exports.__esModule = true;
exports.SourceLocation = SourceLocation;
exports.id = id;
exports.stripFlags = stripFlags;
exports.stripComment = stripComment;
exports.preparePath = preparePath;
exports.prepareMustache = prepareMustache;
exports.prepareRawBlock = prepareRawBlock;
exports.prepareBlock = prepareBlock;
exports.prepareProgram = prepareProgram;
exports.preparePartialBlock = preparePartialBlock;
// istanbul ignore next

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _exception = __webpack_require__(3403);

var _exception2 = _interopRequireDefault(_exception);

function validateClose(open, close) {
  close = close.path ? close.path.original : close;

  if (open.path.original !== close) {
    var errorNode = { loc: open.path.loc };

    throw new _exception2['default'](open.path.original + " doesn't match " + close, errorNode);
  }
}

function SourceLocation(source, locInfo) {
  this.source = source;
  this.start = {
    line: locInfo.first_line,
    column: locInfo.first_column
  };
  this.end = {
    line: locInfo.last_line,
    column: locInfo.last_column
  };
}

function id(token) {
  if (/^\[.*\]$/.test(token)) {
    return token.substring(1, token.length - 1);
  } else {
    return token;
  }
}

function stripFlags(open, close) {
  return {
    open: open.charAt(2) === '~',
    close: close.charAt(close.length - 3) === '~'
  };
}

function stripComment(comment) {
  return comment.replace(/^\{\{~?!-?-?/, '').replace(/-?-?~?\}\}$/, '');
}

function preparePath(data, parts, loc) {
  loc = this.locInfo(loc);

  var original = data ? '@' : '',
      dig = [],
      depth = 0;

  for (var i = 0, l = parts.length; i < l; i++) {
    var part = parts[i].part,

    // If we have [] syntax then we do not treat path references as operators,
    // i.e. foo.[this] resolves to approximately context.foo['this']
    isLiteral = parts[i].original !== part;
    original += (parts[i].separator || '') + part;

    if (!isLiteral && (part === '..' || part === '.' || part === 'this')) {
      if (dig.length > 0) {
        throw new _exception2['default']('Invalid path: ' + original, { loc: loc });
      } else if (part === '..') {
        depth++;
      }
    } else {
      dig.push(part);
    }
  }

  return {
    type: 'PathExpression',
    data: data,
    depth: depth,
    parts: dig,
    original: original,
    loc: loc
  };
}

function prepareMustache(path, params, hash, open, strip, locInfo) {
  // Must use charAt to support IE pre-10
  var escapeFlag = open.charAt(3) || open.charAt(2),
      escaped = escapeFlag !== '{' && escapeFlag !== '&';

  var decorator = /\*/.test(open);
  return {
    type: decorator ? 'Decorator' : 'MustacheStatement',
    path: path,
    params: params,
    hash: hash,
    escaped: escaped,
    strip: strip,
    loc: this.locInfo(locInfo)
  };
}

function prepareRawBlock(openRawBlock, contents, close, locInfo) {
  validateClose(openRawBlock, close);

  locInfo = this.locInfo(locInfo);
  var program = {
    type: 'Program',
    body: contents,
    strip: {},
    loc: locInfo
  };

  return {
    type: 'BlockStatement',
    path: openRawBlock.path,
    params: openRawBlock.params,
    hash: openRawBlock.hash,
    program: program,
    openStrip: {},
    inverseStrip: {},
    closeStrip: {},
    loc: locInfo
  };
}

function prepareBlock(openBlock, program, inverseAndProgram, close, inverted, locInfo) {
  if (close && close.path) {
    validateClose(openBlock, close);
  }

  var decorator = /\*/.test(openBlock.open);

  program.blockParams = openBlock.blockParams;

  var inverse = undefined,
      inverseStrip = undefined;

  if (inverseAndProgram) {
    if (decorator) {
      throw new _exception2['default']('Unexpected inverse block on decorator', inverseAndProgram);
    }

    if (inverseAndProgram.chain) {
      inverseAndProgram.program.body[0].closeStrip = close.strip;
    }

    inverseStrip = inverseAndProgram.strip;
    inverse = inverseAndProgram.program;
  }

  if (inverted) {
    inverted = inverse;
    inverse = program;
    program = inverted;
  }

  return {
    type: decorator ? 'DecoratorBlock' : 'BlockStatement',
    path: openBlock.path,
    params: openBlock.params,
    hash: openBlock.hash,
    program: program,
    inverse: inverse,
    openStrip: openBlock.strip,
    inverseStrip: inverseStrip,
    closeStrip: close && close.strip,
    loc: this.locInfo(locInfo)
  };
}

function prepareProgram(statements, loc) {
  if (!loc && statements.length) {
    var firstLoc = statements[0].loc,
        lastLoc = statements[statements.length - 1].loc;

    /* istanbul ignore else */
    if (firstLoc && lastLoc) {
      loc = {
        source: firstLoc.source,
        start: {
          line: firstLoc.start.line,
          column: firstLoc.start.column
        },
        end: {
          line: lastLoc.end.line,
          column: lastLoc.end.column
        }
      };
    }
  }

  return {
    type: 'Program',
    body: statements,
    strip: {},
    loc: loc
  };
}

function preparePartialBlock(open, program, close, locInfo) {
  validateClose(open, close);

  return {
    type: 'PartialBlockStatement',
    name: open.path,
    params: open.params,
    hash: open.hash,
    program: program,
    openStrip: open.strip,
    closeStrip: close && close.strip,
    loc: this.locInfo(locInfo)
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,


/***/ }),

/***/ 44006:
/***/ ((module, exports, __webpack_require__) => {

"use strict";


exports.__esModule = true;
// istanbul ignore next

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _base = __webpack_require__(95040);

var _exception = __webpack_require__(3403);

var _exception2 = _interopRequireDefault(_exception);

var _utils = __webpack_require__(57471);

var _codeGen = __webpack_require__(14869);

var _codeGen2 = _interopRequireDefault(_codeGen);

function Literal(value) {
  this.value = value;
}

function JavaScriptCompiler() {}

JavaScriptCompiler.prototype = {
  // PUBLIC API: You can override these methods in a subclass to provide
  // alternative compiled forms for name lookup and buffering semantics
  nameLookup: function nameLookup(parent, name /*,  type */) {
    return this.internalNameLookup(parent, name);
  },
  depthedLookup: function depthedLookup(name) {
    return [this.aliasable('container.lookup'), '(depths, ', JSON.stringify(name), ')'];
  },

  compilerInfo: function compilerInfo() {
    var revision = _base.COMPILER_REVISION,
        versions = _base.REVISION_CHANGES[revision];
    return [revision, versions];
  },

  appendToBuffer: function appendToBuffer(source, location, explicit) {
    // Force a source as this simplifies the merge logic.
    if (!_utils.isArray(source)) {
      source = [source];
    }
    source = this.source.wrap(source, location);

    if (this.environment.isSimple) {
      return ['return ', source, ';'];
    } else if (explicit) {
      // This is a case where the buffer operation occurs as a child of another
      // construct, generally braces. We have to explicitly output these buffer
      // operations to ensure that the emitted code goes in the correct location.
      return ['buffer += ', source, ';'];
    } else {
      source.appendToBuffer = true;
      return source;
    }
  },

  initializeBuffer: function initializeBuffer() {
    return this.quotedString('');
  },
  // END PUBLIC API
  internalNameLookup: function internalNameLookup(parent, name) {
    this.lookupPropertyFunctionIsUsed = true;
    return ['lookupProperty(', parent, ',', JSON.stringify(name), ')'];
  },

  lookupPropertyFunctionIsUsed: false,

  compile: function compile(environment, options, context, asObject) {
    this.environment = environment;
    this.options = options;
    this.stringParams = this.options.stringParams;
    this.trackIds = this.options.trackIds;
    this.precompile = !asObject;

    this.name = this.environment.name;
    this.isChild = !!context;
    this.context = context || {
      decorators: [],
      programs: [],
      environments: []
    };

    this.preamble();

    this.stackSlot = 0;
    this.stackVars = [];
    this.aliases = {};
    this.registers = { list: [] };
    this.hashes = [];
    this.compileStack = [];
    this.inlineStack = [];
    this.blockParams = [];

    this.compileChildren(environment, options);

    this.useDepths = this.useDepths || environment.useDepths || environment.useDecorators || this.options.compat;
    this.useBlockParams = this.useBlockParams || environment.useBlockParams;

    var opcodes = environment.opcodes,
        opcode = undefined,
        firstLoc = undefined,
        i = undefined,
        l = undefined;

    for (i = 0, l = opcodes.length; i < l; i++) {
      opcode = opcodes[i];

      this.source.currentLocation = opcode.loc;
      firstLoc = firstLoc || opcode.loc;
      this[opcode.opcode].apply(this, opcode.args);
    }

    // Flush any trailing content that might be pending.
    this.source.currentLocation = firstLoc;
    this.pushSource('');

    /* istanbul ignore next */
    if (this.stackSlot || this.inlineStack.length || this.compileStack.length) {
      throw new _exception2['default']('Compile completed with content left on stack');
    }

    if (!this.decorators.isEmpty()) {
      this.useDecorators = true;

      this.decorators.prepend(['var decorators = container.decorators, ', this.lookupPropertyFunctionVarDeclaration(), ';\n']);
      this.decorators.push('return fn;');

      if (asObject) {
        this.decorators = Function.apply(this, ['fn', 'props', 'container', 'depth0', 'data', 'blockParams', 'depths', this.decorators.merge()]);
      } else {
        this.decorators.prepend('function(fn, props, container, depth0, data, blockParams, depths) {\n');
        this.decorators.push('}\n');
        this.decorators = this.decorators.merge();
      }
    } else {
      this.decorators = undefined;
    }

    var fn = this.createFunctionContext(asObject);
    if (!this.isChild) {
      var ret = {
        compiler: this.compilerInfo(),
        main: fn
      };

      if (this.decorators) {
        ret.main_d = this.decorators; // eslint-disable-line camelcase
        ret.useDecorators = true;
      }

      var _context = this.context;
      var programs = _context.programs;
      var decorators = _context.decorators;

      for (i = 0, l = programs.length; i < l; i++) {
        if (programs[i]) {
          ret[i] = programs[i];
          if (decorators[i]) {
            ret[i + '_d'] = decorators[i];
            ret.useDecorators = true;
          }
        }
      }

      if (this.environment.usePartial) {
        ret.usePartial = true;
      }
      if (this.options.data) {
        ret.useData = true;
      }
      if (this.useDepths) {
        ret.useDepths = true;
      }
      if (this.useBlockParams) {
        ret.useBlockParams = true;
      }
      if (this.options.compat) {
        ret.compat = true;
      }

      if (!asObject) {
        ret.compiler = JSON.stringify(ret.compiler);

        this.source.currentLocation = { start: { line: 1, column: 0 } };
        ret = this.objectLiteral(ret);

        if (options.srcName) {
          ret = ret.toStringWithSourceMap({ file: options.destName });
          ret.map = ret.map && ret.map.toString();
        } else {
          ret = ret.toString();
        }
      } else {
        ret.compilerOptions = this.options;
      }

      return ret;
    } else {
      return fn;
    }
  },

  preamble: function preamble() {
    // track the last context pushed into place to allow skipping the
    // getContext opcode when it would be a noop
    this.lastContext = 0;
    this.source = new _codeGen2['default'](this.options.srcName);
    this.decorators = new _codeGen2['default'](this.options.srcName);
  },

  createFunctionContext: function createFunctionContext(asObject) {
    // istanbul ignore next

    var _this = this;

    var varDeclarations = '';

    var locals = this.stackVars.concat(this.registers.list);
    if (locals.length > 0) {
      varDeclarations += ', ' + locals.join(', ');
    }

    // Generate minimizer alias mappings
    //
    // When using true SourceNodes, this will update all references to the given alias
    // as the source nodes are reused in situ. For the non-source node compilation mode,
    // aliases will not be used, but this case is already being run on the client and
    // we aren't concern about minimizing the template size.
    var aliasCount = 0;
    Object.keys(this.aliases).forEach(function (alias) {
      var node = _this.aliases[alias];
      if (node.children && node.referenceCount > 1) {
        varDeclarations += ', alias' + ++aliasCount + '=' + alias;
        node.children[0] = 'alias' + aliasCount;
      }
    });

    if (this.lookupPropertyFunctionIsUsed) {
      varDeclarations += ', ' + this.lookupPropertyFunctionVarDeclaration();
    }

    var params = ['container', 'depth0', 'helpers', 'partials', 'data'];

    if (this.useBlockParams || this.useDepths) {
      params.push('blockParams');
    }
    if (this.useDepths) {
      params.push('depths');
    }

    // Perform a second pass over the output to merge content when possible
    var source = this.mergeSource(varDeclarations);

    if (asObject) {
      params.push(source);

      return Function.apply(this, params);
    } else {
      return this.source.wrap(['function(', params.join(','), ') {\n  ', source, '}']);
    }
  },
  mergeSource: function mergeSource(varDeclarations) {
    var isSimple = this.environment.isSimple,
        appendOnly = !this.forceBuffer,
        appendFirst = undefined,
        sourceSeen = undefined,
        bufferStart = undefined,
        bufferEnd = undefined;
    this.source.each(function (line) {
      if (line.appendToBuffer) {
        if (bufferStart) {
          line.prepend('  + ');
        } else {
          bufferStart = line;
        }
        bufferEnd = line;
      } else {
        if (bufferStart) {
          if (!sourceSeen) {
            appendFirst = true;
          } else {
            bufferStart.prepend('buffer += ');
          }
          bufferEnd.add(';');
          bufferStart = bufferEnd = undefined;
        }

        sourceSeen = true;
        if (!isSimple) {
          appendOnly = false;
        }
      }
    });

    if (appendOnly) {
      if (bufferStart) {
        bufferStart.prepend('return ');
        bufferEnd.add(';');
      } else if (!sourceSeen) {
        this.source.push('return "";');
      }
    } else {
      varDeclarations += ', buffer = ' + (appendFirst ? '' : this.initializeBuffer());

      if (bufferStart) {
        bufferStart.prepend('return buffer + ');
        bufferEnd.add(';');
      } else {
        this.source.push('return buffer;');
      }
    }

    if (varDeclarations) {
      this.source.prepend('var ' + varDeclarations.substring(2) + (appendFirst ? '' : ';\n'));
    }

    return this.source.merge();
  },

  lookupPropertyFunctionVarDeclaration: function lookupPropertyFunctionVarDeclaration() {
    return '\n      lookupProperty = container.lookupProperty || function(parent, propertyName) {\n        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {\n          return parent[propertyName];\n        }\n        return undefined\n    }\n    '.trim();
  },

  // [blockValue]
  //
  // On stack, before: hash, inverse, program, value
  // On stack, after: return value of blockHelperMissing
  //
  // The purpose of this opcode is to take a block of the form
  // `{{#this.foo}}...{{/this.foo}}`, resolve the value of `foo`, and
  // replace it on the stack with the result of properly
  // invoking blockHelperMissing.
  blockValue: function blockValue(name) {
    var blockHelperMissing = this.aliasable('container.hooks.blockHelperMissing'),
        params = [this.contextName(0)];
    this.setupHelperArgs(name, 0, params);

    var blockName = this.popStack();
    params.splice(1, 0, blockName);

    this.push(this.source.functionCall(blockHelperMissing, 'call', params));
  },

  // [ambiguousBlockValue]
  //
  // On stack, before: hash, inverse, program, value
  // Compiler value, before: lastHelper=value of last found helper, if any
  // On stack, after, if no lastHelper: same as [blockValue]
  // On stack, after, if lastHelper: value
  ambiguousBlockValue: function ambiguousBlockValue() {
    // We're being a bit cheeky and reusing the options value from the prior exec
    var blockHelperMissing = this.aliasable('container.hooks.blockHelperMissing'),
        params = [this.contextName(0)];
    this.setupHelperArgs('', 0, params, true);

    this.flushInline();

    var current = this.topStack();
    params.splice(1, 0, current);

    this.pushSource(['if (!', this.lastHelper, ') { ', current, ' = ', this.source.functionCall(blockHelperMissing, 'call', params), '}']);
  },

  // [appendContent]
  //
  // On stack, before: ...
  // On stack, after: ...
  //
  // Appends the string value of `content` to the current buffer
  appendContent: function appendContent(content) {
    if (this.pendingContent) {
      content = this.pendingContent + content;
    } else {
      this.pendingLocation = this.source.currentLocation;
    }

    this.pendingContent = content;
  },

  // [append]
  //
  // On stack, before: value, ...
  // On stack, after: ...
  //
  // Coerces `value` to a String and appends it to the current buffer.
  //
  // If `value` is truthy, or 0, it is coerced into a string and appended
  // Otherwise, the empty string is appended
  append: function append() {
    if (this.isInline()) {
      this.replaceStack(function (current) {
        return [' != null ? ', current, ' : ""'];
      });

      this.pushSource(this.appendToBuffer(this.popStack()));
    } else {
      var local = this.popStack();
      this.pushSource(['if (', local, ' != null) { ', this.appendToBuffer(local, undefined, true), ' }']);
      if (this.environment.isSimple) {
        this.pushSource(['else { ', this.appendToBuffer("''", undefined, true), ' }']);
      }
    }
  },

  // [appendEscaped]
  //
  // On stack, before: value, ...
  // On stack, after: ...
  //
  // Escape `value` and append it to the buffer
  appendEscaped: function appendEscaped() {
    this.pushSource(this.appendToBuffer([this.aliasable('container.escapeExpression'), '(', this.popStack(), ')']));
  },

  // [getContext]
  //
  // On stack, before: ...
  // On stack, after: ...
  // Compiler value, after: lastContext=depth
  //
  // Set the value of the `lastContext` compiler value to the depth
  getContext: function getContext(depth) {
    this.lastContext = depth;
  },

  // [pushContext]
  //
  // On stack, before: ...
  // On stack, after: currentContext, ...
  //
  // Pushes the value of the current context onto the stack.
  pushContext: function pushContext() {
    this.pushStackLiteral(this.contextName(this.lastContext));
  },

  // [lookupOnContext]
  //
  // On stack, before: ...
  // On stack, after: currentContext[name], ...
  //
  // Looks up the value of `name` on the current context and pushes
  // it onto the stack.
  lookupOnContext: function lookupOnContext(parts, falsy, strict, scoped) {
    var i = 0;

    if (!scoped && this.options.compat && !this.lastContext) {
      // The depthed query is expected to handle the undefined logic for the root level that
      // is implemented below, so we evaluate that directly in compat mode
      this.push(this.depthedLookup(parts[i++]));
    } else {
      this.pushContext();
    }

    this.resolvePath('context', parts, i, falsy, strict);
  },

  // [lookupBlockParam]
  //
  // On stack, before: ...
  // On stack, after: blockParam[name], ...
  //
  // Looks up the value of `parts` on the given block param and pushes
  // it onto the stack.
  lookupBlockParam: function lookupBlockParam(blockParamId, parts) {
    this.useBlockParams = true;

    this.push(['blockParams[', blockParamId[0], '][', blockParamId[1], ']']);
    this.resolvePath('context', parts, 1);
  },

  // [lookupData]
  //
  // On stack, before: ...
  // On stack, after: data, ...
  //
  // Push the data lookup operator
  lookupData: function lookupData(depth, parts, strict) {
    if (!depth) {
      this.pushStackLiteral('data');
    } else {
      this.pushStackLiteral('container.data(data, ' + depth + ')');
    }

    this.resolvePath('data', parts, 0, true, strict);
  },

  resolvePath: function resolvePath(type, parts, i, falsy, strict) {
    // istanbul ignore next

    var _this2 = this;

    if (this.options.strict || this.options.assumeObjects) {
      this.push(strictLookup(this.options.strict && strict, this, parts, type));
      return;
    }

    var len = parts.length;
    for (; i < len; i++) {
      /* eslint-disable no-loop-func */
      this.replaceStack(function (current) {
        var lookup = _this2.nameLookup(current, parts[i], type);
        // We want to ensure that zero and false are handled properly if the context (falsy flag)
        // needs to have the special handling for these values.
        if (!falsy) {
          return [' != null ? ', lookup, ' : ', current];
        } else {
          // Otherwise we can use generic falsy handling
          return [' && ', lookup];
        }
      });
      /* eslint-enable no-loop-func */
    }
  },

  // [resolvePossibleLambda]
  //
  // On stack, before: value, ...
  // On stack, after: resolved value, ...
  //
  // If the `value` is a lambda, replace it on the stack by
  // the return value of the lambda
  resolvePossibleLambda: function resolvePossibleLambda() {
    this.push([this.aliasable('container.lambda'), '(', this.popStack(), ', ', this.contextName(0), ')']);
  },

  // [pushStringParam]
  //
  // On stack, before: ...
  // On stack, after: string, currentContext, ...
  //
  // This opcode is designed for use in string mode, which
  // provides the string value of a parameter along with its
  // depth rather than resolving it immediately.
  pushStringParam: function pushStringParam(string, type) {
    this.pushContext();
    this.pushString(type);

    // If it's a subexpression, the string result
    // will be pushed after this opcode.
    if (type !== 'SubExpression') {
      if (typeof string === 'string') {
        this.pushString(string);
      } else {
        this.pushStackLiteral(string);
      }
    }
  },

  emptyHash: function emptyHash(omitEmpty) {
    if (this.trackIds) {
      this.push('{}'); // hashIds
    }
    if (this.stringParams) {
      this.push('{}'); // hashContexts
      this.push('{}'); // hashTypes
    }
    this.pushStackLiteral(omitEmpty ? 'undefined' : '{}');
  },
  pushHash: function pushHash() {
    if (this.hash) {
      this.hashes.push(this.hash);
    }
    this.hash = { values: {}, types: [], contexts: [], ids: [] };
  },
  popHash: function popHash() {
    var hash = this.hash;
    this.hash = this.hashes.pop();

    if (this.trackIds) {
      this.push(this.objectLiteral(hash.ids));
    }
    if (this.stringParams) {
      this.push(this.objectLiteral(hash.contexts));
      this.push(this.objectLiteral(hash.types));
    }

    this.push(this.objectLiteral(hash.values));
  },

  // [pushString]
  //
  // On stack, before: ...
  // On stack, after: quotedString(string), ...
  //
  // Push a quoted version of `string` onto the stack
  pushString: function pushString(string) {
    this.pushStackLiteral(this.quotedString(string));
  },

  // [pushLiteral]
  //
  // On stack, before: ...
  // On stack, after: value, ...
  //
  // Pushes a value onto the stack. This operation prevents
  // the compiler from creating a temporary variable to hold
  // it.
  pushLiteral: function pushLiteral(value) {
    this.pushStackLiteral(value);
  },

  // [pushProgram]
  //
  // On stack, before: ...
  // On stack, after: program(guid), ...
  //
  // Push a program expression onto the stack. This takes
  // a compile-time guid and converts it into a runtime-accessible
  // expression.
  pushProgram: function pushProgram(guid) {
    if (guid != null) {
      this.pushStackLiteral(this.programExpression(guid));
    } else {
      this.pushStackLiteral(null);
    }
  },

  // [registerDecorator]
  //
  // On stack, before: hash, program, params..., ...
  // On stack, after: ...
  //
  // Pops off the decorator's parameters, invokes the decorator,
  // and inserts the decorator into the decorators list.
  registerDecorator: function registerDecorator(paramSize, name) {
    var foundDecorator = this.nameLookup('decorators', name, 'decorator'),
        options = this.setupHelperArgs(name, paramSize);

    this.decorators.push(['fn = ', this.decorators.functionCall(foundDecorator, '', ['fn', 'props', 'container', options]), ' || fn;']);
  },

  // [invokeHelper]
  //
  // On stack, before: hash, inverse, program, params..., ...
  // On stack, after: result of helper invocation
  //
  // Pops off the helper's parameters, invokes the helper,
  // and pushes the helper's return value onto the stack.
  //
  // If the helper is not found, `helperMissing` is called.
  invokeHelper: function invokeHelper(paramSize, name, isSimple) {
    var nonHelper = this.popStack(),
        helper = this.setupHelper(paramSize, name);

    var possibleFunctionCalls = [];

    if (isSimple) {
      // direct call to helper
      possibleFunctionCalls.push(helper.name);
    }
    // call a function from the input object
    possibleFunctionCalls.push(nonHelper);
    if (!this.options.strict) {
      possibleFunctionCalls.push(this.aliasable('container.hooks.helperMissing'));
    }

    var functionLookupCode = ['(', this.itemsSeparatedBy(possibleFunctionCalls, '||'), ')'];
    var functionCall = this.source.functionCall(functionLookupCode, 'call', helper.callParams);
    this.push(functionCall);
  },

  itemsSeparatedBy: function itemsSeparatedBy(items, separator) {
    var result = [];
    result.push(items[0]);
    for (var i = 1; i < items.length; i++) {
      result.push(separator, items[i]);
    }
    return result;
  },
  // [invokeKnownHelper]
  //
  // On stack, before: hash, inverse, program, params..., ...
  // On stack, after: result of helper invocation
  //
  // This operation is used when the helper is known to exist,
  // so a `helperMissing` fallback is not required.
  invokeKnownHelper: function invokeKnownHelper(paramSize, name) {
    var helper = this.setupHelper(paramSize, name);
    this.push(this.source.functionCall(helper.name, 'call', helper.callParams));
  },

  // [invokeAmbiguous]
  //
  // On stack, before: hash, inverse, program, params..., ...
  // On stack, after: result of disambiguation
  //
  // This operation is used when an expression like `{{foo}}`
  // is provided, but we don't know at compile-time whether it
  // is a helper or a path.
  //
  // This operation emits more code than the other options,
  // and can be avoided by passing the `knownHelpers` and
  // `knownHelpersOnly` flags at compile-time.
  invokeAmbiguous: function invokeAmbiguous(name, helperCall) {
    this.useRegister('helper');

    var nonHelper = this.popStack();

    this.emptyHash();
    var helper = this.setupHelper(0, name, helperCall);

    var helperName = this.lastHelper = this.nameLookup('helpers', name, 'helper');

    var lookup = ['(', '(helper = ', helperName, ' || ', nonHelper, ')'];
    if (!this.options.strict) {
      lookup[0] = '(helper = ';
      lookup.push(' != null ? helper : ', this.aliasable('container.hooks.helperMissing'));
    }

    this.push(['(', lookup, helper.paramsInit ? ['),(', helper.paramsInit] : [], '),', '(typeof helper === ', this.aliasable('"function"'), ' ? ', this.source.functionCall('helper', 'call', helper.callParams), ' : helper))']);
  },

  // [invokePartial]
  //
  // On stack, before: context, ...
  // On stack after: result of partial invocation
  //
  // This operation pops off a context, invokes a partial with that context,
  // and pushes the result of the invocation back.
  invokePartial: function invokePartial(isDynamic, name, indent) {
    var params = [],
        options = this.setupParams(name, 1, params);

    if (isDynamic) {
      name = this.popStack();
      delete options.name;
    }

    if (indent) {
      options.indent = JSON.stringify(indent);
    }
    options.helpers = 'helpers';
    options.partials = 'partials';
    options.decorators = 'container.decorators';

    if (!isDynamic) {
      params.unshift(this.nameLookup('partials', name, 'partial'));
    } else {
      params.unshift(name);
    }

    if (this.options.compat) {
      options.depths = 'depths';
    }
    options = this.objectLiteral(options);
    params.push(options);

    this.push(this.source.functionCall('container.invokePartial', '', params));
  },

  // [assignToHash]
  //
  // On stack, before: value, ..., hash, ...
  // On stack, after: ..., hash, ...
  //
  // Pops a value off the stack and assigns it to the current hash
  assignToHash: function assignToHash(key) {
    var value = this.popStack(),
        context = undefined,
        type = undefined,
        id = undefined;

    if (this.trackIds) {
      id = this.popStack();
    }
    if (this.stringParams) {
      type = this.popStack();
      context = this.popStack();
    }

    var hash = this.hash;
    if (context) {
      hash.contexts[key] = context;
    }
    if (type) {
      hash.types[key] = type;
    }
    if (id) {
      hash.ids[key] = id;
    }
    hash.values[key] = value;
  },

  pushId: function pushId(type, name, child) {
    if (type === 'BlockParam') {
      this.pushStackLiteral('blockParams[' + name[0] + '].path[' + name[1] + ']' + (child ? ' + ' + JSON.stringify('.' + child) : ''));
    } else if (type === 'PathExpression') {
      this.pushString(name);
    } else if (type === 'SubExpression') {
      this.pushStackLiteral('true');
    } else {
      this.pushStackLiteral('null');
    }
  },

  // HELPERS

  compiler: JavaScriptCompiler,

  compileChildren: function compileChildren(environment, options) {
    var children = environment.children,
        child = undefined,
        compiler = undefined;

    for (var i = 0, l = children.length; i < l; i++) {
      child = children[i];
      compiler = new this.compiler(); // eslint-disable-line new-cap

      var existing = this.matchExistingProgram(child);

      if (existing == null) {
        this.context.programs.push(''); // Placeholder to prevent name conflicts for nested children
        var index = this.context.programs.length;
        child.index = index;
        child.name = 'program' + index;
        this.context.programs[index] = compiler.compile(child, options, this.context, !this.precompile);
        this.context.decorators[index] = compiler.decorators;
        this.context.environments[index] = child;

        this.useDepths = this.useDepths || compiler.useDepths;
        this.useBlockParams = this.useBlockParams || compiler.useBlockParams;
        child.useDepths = this.useDepths;
        child.useBlockParams = this.useBlockParams;
      } else {
        child.index = existing.index;
        child.name = 'program' + existing.index;

        this.useDepths = this.useDepths || existing.useDepths;
        this.useBlockParams = this.useBlockParams || existing.useBlockParams;
      }
    }
  },
  matchExistingProgram: function matchExistingProgram(child) {
    for (var i = 0, len = this.context.environments.length; i < len; i++) {
      var environment = this.context.environments[i];
      if (environment && environment.equals(child)) {
        return environment;
      }
    }
  },

  programExpression: function programExpression(guid) {
    var child = this.environment.children[guid],
        programParams = [child.index, 'data', child.blockParams];

    if (this.useBlockParams || this.useDepths) {
      programParams.push('blockParams');
    }
    if (this.useDepths) {
      programParams.push('depths');
    }

    return 'container.program(' + programParams.join(', ') + ')';
  },

  useRegister: function useRegister(name) {
    if (!this.registers[name]) {
      this.registers[name] = true;
      this.registers.list.push(name);
    }
  },

  push: function push(expr) {
    if (!(expr instanceof Literal)) {
      expr = this.source.wrap(expr);
    }

    this.inlineStack.push(expr);
    return expr;
  },

  pushStackLiteral: function pushStackLiteral(item) {
    this.push(new Literal(item));
  },

  pushSource: function pushSource(source) {
    if (this.pendingContent) {
      this.source.push(this.appendToBuffer(this.source.quotedString(this.pendingContent), this.pendingLocation));
      this.pendingContent = undefined;
    }

    if (source) {
      this.source.push(source);
    }
  },

  replaceStack: function replaceStack(callback) {
    var prefix = ['('],
        stack = undefined,
        createdStack = undefined,
        usedLiteral = undefined;

    /* istanbul ignore next */
    if (!this.isInline()) {
      throw new _exception2['default']('replaceStack on non-inline');
    }

    // We want to merge the inline statement into the replacement statement via ','
    var top = this.popStack(true);

    if (top instanceof Literal) {
      // Literals do not need to be inlined
      stack = [top.value];
      prefix = ['(', stack];
      usedLiteral = true;
    } else {
      // Get or create the current stack name for use by the inline
      createdStack = true;
      var _name = this.incrStack();

      prefix = ['((', this.push(_name), ' = ', top, ')'];
      stack = this.topStack();
    }

    var item = callback.call(this, stack);

    if (!usedLiteral) {
      this.popStack();
    }
    if (createdStack) {
      this.stackSlot--;
    }
    this.push(prefix.concat(item, ')'));
  },

  incrStack: function incrStack() {
    this.stackSlot++;
    if (this.stackSlot > this.stackVars.length) {
      this.stackVars.push('stack' + this.stackSlot);
    }
    return this.topStackName();
  },
  topStackName: function topStackName() {
    return 'stack' + this.stackSlot;
  },
  flushInline: function flushInline() {
    var inlineStack = this.inlineStack;
    this.inlineStack = [];
    for (var i = 0, len = inlineStack.length; i < len; i++) {
      var entry = inlineStack[i];
      /* istanbul ignore if */
      if (entry instanceof Literal) {
        this.compileStack.push(entry);
      } else {
        var stack = this.incrStack();
        this.pushSource([stack, ' = ', entry, ';']);
        this.compileStack.push(stack);
      }
    }
  },
  isInline: function isInline() {
    return this.inlineStack.length;
  },

  popStack: function popStack(wrapped) {
    var inline = this.isInline(),
        item = (inline ? this.inlineStack : this.compileStack).pop();

    if (!wrapped && item instanceof Literal) {
      return item.value;
    } else {
      if (!inline) {
        /* istanbul ignore next */
        if (!this.stackSlot) {
          throw new _exception2['default']('Invalid stack pop');
        }
        this.stackSlot--;
      }
      return item;
    }
  },

  topStack: function topStack() {
    var stack = this.isInline() ? this.inlineStack : this.compileStack,
        item = stack[stack.length - 1];

    /* istanbul ignore if */
    if (item instanceof Literal) {
      return item.value;
    } else {
      return item;
    }
  },

  contextName: function contextName(context) {
    if (this.useDepths && context) {
      return 'depths[' + context + ']';
    } else {
      return 'depth' + context;
    }
  },

  quotedString: function quotedString(str) {
    return this.source.quotedString(str);
  },

  objectLiteral: function objectLiteral(obj) {
    return this.source.objectLiteral(obj);
  },

  aliasable: function aliasable(name) {
    var ret = this.aliases[name];
    if (ret) {
      ret.referenceCount++;
      return ret;
    }

    ret = this.aliases[name] = this.source.wrap(name);
    ret.aliasable = true;
    ret.referenceCount = 1;

    return ret;
  },

  setupHelper: function setupHelper(paramSize, name, blockHelper) {
    var params = [],
        paramsInit = this.setupHelperArgs(name, paramSize, params, blockHelper);
    var foundHelper = this.nameLookup('helpers', name, 'helper'),
        callContext = this.aliasable(this.contextName(0) + ' != null ? ' + this.contextName(0) + ' : (container.nullContext || {})');

    return {
      params: params,
      paramsInit: paramsInit,
      name: foundHelper,
      callParams: [callContext].concat(params)
    };
  },

  setupParams: function setupParams(helper, paramSize, params) {
    var options = {},
        contexts = [],
        types = [],
        ids = [],
        objectArgs = !params,
        param = undefined;

    if (objectArgs) {
      params = [];
    }

    options.name = this.quotedString(helper);
    options.hash = this.popStack();

    if (this.trackIds) {
      options.hashIds = this.popStack();
    }
    if (this.stringParams) {
      options.hashTypes = this.popStack();
      options.hashContexts = this.popStack();
    }

    var inverse = this.popStack(),
        program = this.popStack();

    // Avoid setting fn and inverse if neither are set. This allows
    // helpers to do a check for `if (options.fn)`
    if (program || inverse) {
      options.fn = program || 'container.noop';
      options.inverse = inverse || 'container.noop';
    }

    // The parameters go on to the stack in order (making sure that they are evaluated in order)
    // so we need to pop them off the stack in reverse order
    var i = paramSize;
    while (i--) {
      param = this.popStack();
      params[i] = param;

      if (this.trackIds) {
        ids[i] = this.popStack();
      }
      if (this.stringParams) {
        types[i] = this.popStack();
        contexts[i] = this.popStack();
      }
    }

    if (objectArgs) {
      options.args = this.source.generateArray(params);
    }

    if (this.trackIds) {
      options.ids = this.source.generateArray(ids);
    }
    if (this.stringParams) {
      options.types = this.source.generateArray(types);
      options.contexts = this.source.generateArray(contexts);
    }

    if (this.options.data) {
      options.data = 'data';
    }
    if (this.useBlockParams) {
      options.blockParams = 'blockParams';
    }
    return options;
  },

  setupHelperArgs: function setupHelperArgs(helper, paramSize, params, useRegister) {
    var options = this.setupParams(helper, paramSize, params);
    options.loc = JSON.stringify(this.source.currentLocation);
    options = this.objectLiteral(options);
    if (useRegister) {
      this.useRegister('options');
      params.push('options');
      return ['options=', options];
    } else if (params) {
      params.push(options);
      return '';
    } else {
      return options;
    }
  }
};

(function () {
  var reservedWords = ('break else new var' + ' case finally return void' + ' catch for switch while' + ' continue function this with' + ' default if throw' + ' delete in try' + ' do instanceof typeof' + ' abstract enum int short' + ' boolean export interface static' + ' byte extends long super' + ' char final native synchronized' + ' class float package throws' + ' const goto private transient' + ' debugger implements protected volatile' + ' double import public let yield await' + ' null true false').split(' ');

  var compilerWords = JavaScriptCompiler.RESERVED_WORDS = {};

  for (var i = 0, l = reservedWords.length; i < l; i++) {
    compilerWords[reservedWords[i]] = true;
  }
})();

/**
 * @deprecated May be removed in the next major version
 */
JavaScriptCompiler.isValidJavaScriptVariableName = function (name) {
  return !JavaScriptCompiler.RESERVED_WORDS[name] && /^[a-zA-Z_$][0-9a-zA-Z_$]*$/.test(name);
};

function strictLookup(requireTerminal, compiler, parts, type) {
  var stack = compiler.popStack(),
      i = 0,
      len = parts.length;
  if (requireTerminal) {
    len--;
  }

  for (; i < len; i++) {
    stack = compiler.nameLookup(stack, parts[i], type);
  }

  if (requireTerminal) {
    return [compiler.aliasable('container.strict'), '(', stack, ', ', compiler.quotedString(parts[i]), ', ', JSON.stringify(compiler.source.currentLocation), ' )'];
  } else {
    return stack;
  }
}

exports["default"] = JavaScriptCompiler;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,


/***/ }),

/***/ 22113:
/***/ ((module, exports) => {

"use strict";
// File ignored in coverage tests via setting in .istanbul.yml
/* Jison generated parser */


exports.__esModule = true;
var handlebars = (function () {
    var parser = { trace: function trace() {},
        yy: {},
        symbols_: { "error": 2, "root": 3, "program": 4, "EOF": 5, "program_repetition0": 6, "statement": 7, "mustache": 8, "block": 9, "rawBlock": 10, "partial": 11, "partialBlock": 12, "content": 13, "COMMENT": 14, "CONTENT": 15, "openRawBlock": 16, "rawBlock_repetition0": 17, "END_RAW_BLOCK": 18, "OPEN_RAW_BLOCK": 19, "helperName": 20, "openRawBlock_repetition0": 21, "openRawBlock_option0": 22, "CLOSE_RAW_BLOCK": 23, "openBlock": 24, "block_option0": 25, "closeBlock": 26, "openInverse": 27, "block_option1": 28, "OPEN_BLOCK": 29, "openBlock_repetition0": 30, "openBlock_option0": 31, "openBlock_option1": 32, "CLOSE": 33, "OPEN_INVERSE": 34, "openInverse_repetition0": 35, "openInverse_option0": 36, "openInverse_option1": 37, "openInverseChain": 38, "OPEN_INVERSE_CHAIN": 39, "openInverseChain_repetition0": 40, "openInverseChain_option0": 41, "openInverseChain_option1": 42, "inverseAndProgram": 43, "INVERSE": 44, "inverseChain": 45, "inverseChain_option0": 46, "OPEN_ENDBLOCK": 47, "OPEN": 48, "mustache_repetition0": 49, "mustache_option0": 50, "OPEN_UNESCAPED": 51, "mustache_repetition1": 52, "mustache_option1": 53, "CLOSE_UNESCAPED": 54, "OPEN_PARTIAL": 55, "partialName": 56, "partial_repetition0": 57, "partial_option0": 58, "openPartialBlock": 59, "OPEN_PARTIAL_BLOCK": 60, "openPartialBlock_repetition0": 61, "openPartialBlock_option0": 62, "param": 63, "sexpr": 64, "OPEN_SEXPR": 65, "sexpr_repetition0": 66, "sexpr_option0": 67, "CLOSE_SEXPR": 68, "hash": 69, "hash_repetition_plus0": 70, "hashSegment": 71, "ID": 72, "EQUALS": 73, "blockParams": 74, "OPEN_BLOCK_PARAMS": 75, "blockParams_repetition_plus0": 76, "CLOSE_BLOCK_PARAMS": 77, "path": 78, "dataName": 79, "STRING": 80, "NUMBER": 81, "BOOLEAN": 82, "UNDEFINED": 83, "NULL": 84, "DATA": 85, "pathSegments": 86, "SEP": 87, "$accept": 0, "$end": 1 },
        terminals_: { 2: "error", 5: "EOF", 14: "COMMENT", 15: "CONTENT", 18: "END_RAW_BLOCK", 19: "OPEN_RAW_BLOCK", 23: "CLOSE_RAW_BLOCK", 29: "OPEN_BLOCK", 33: "CLOSE", 34: "OPEN_INVERSE", 39: "OPEN_INVERSE_CHAIN", 44: "INVERSE", 47: "OPEN_ENDBLOCK", 48: "OPEN", 51: "OPEN_UNESCAPED", 54: "CLOSE_UNESCAPED", 55: "OPEN_PARTIAL", 60: "OPEN_PARTIAL_BLOCK", 65: "OPEN_SEXPR", 68: "CLOSE_SEXPR", 72: "ID", 73: "EQUALS", 75: "OPEN_BLOCK_PARAMS", 77: "CLOSE_BLOCK_PARAMS", 80: "STRING", 81: "NUMBER", 82: "BOOLEAN", 83: "UNDEFINED", 84: "NULL", 85: "DATA", 87: "SEP" },
        productions_: [0, [3, 2], [4, 1], [7, 1], [7, 1], [7, 1], [7, 1], [7, 1], [7, 1], [7, 1], [13, 1], [10, 3], [16, 5], [9, 4], [9, 4], [24, 6], [27, 6], [38, 6], [43, 2], [45, 3], [45, 1], [26, 3], [8, 5], [8, 5], [11, 5], [12, 3], [59, 5], [63, 1], [63, 1], [64, 5], [69, 1], [71, 3], [74, 3], [20, 1], [20, 1], [20, 1], [20, 1], [20, 1], [20, 1], [20, 1], [56, 1], [56, 1], [79, 2], [78, 1], [86, 3], [86, 1], [6, 0], [6, 2], [17, 0], [17, 2], [21, 0], [21, 2], [22, 0], [22, 1], [25, 0], [25, 1], [28, 0], [28, 1], [30, 0], [30, 2], [31, 0], [31, 1], [32, 0], [32, 1], [35, 0], [35, 2], [36, 0], [36, 1], [37, 0], [37, 1], [40, 0], [40, 2], [41, 0], [41, 1], [42, 0], [42, 1], [46, 0], [46, 1], [49, 0], [49, 2], [50, 0], [50, 1], [52, 0], [52, 2], [53, 0], [53, 1], [57, 0], [57, 2], [58, 0], [58, 1], [61, 0], [61, 2], [62, 0], [62, 1], [66, 0], [66, 2], [67, 0], [67, 1], [70, 1], [70, 2], [76, 1], [76, 2]],
        performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$) {

            var $0 = $$.length - 1;
            switch (yystate) {
                case 1:
                    return $$[$0 - 1];
                    break;
                case 2:
                    this.$ = yy.prepareProgram($$[$0]);
                    break;
                case 3:
                    this.$ = $$[$0];
                    break;
                case 4:
                    this.$ = $$[$0];
                    break;
                case 5:
                    this.$ = $$[$0];
                    break;
                case 6:
                    this.$ = $$[$0];
                    break;
                case 7:
                    this.$ = $$[$0];
                    break;
                case 8:
                    this.$ = $$[$0];
                    break;
                case 9:
                    this.$ = {
                        type: 'CommentStatement',
                        value: yy.stripComment($$[$0]),
                        strip: yy.stripFlags($$[$0], $$[$0]),
                        loc: yy.locInfo(this._$)
                    };

                    break;
                case 10:
                    this.$ = {
                        type: 'ContentStatement',
                        original: $$[$0],
                        value: $$[$0],
                        loc: yy.locInfo(this._$)
                    };

                    break;
                case 11:
                    this.$ = yy.prepareRawBlock($$[$0 - 2], $$[$0 - 1], $$[$0], this._$);
                    break;
                case 12:
                    this.$ = { path: $$[$0 - 3], params: $$[$0 - 2], hash: $$[$0 - 1] };
                    break;
                case 13:
                    this.$ = yy.prepareBlock($$[$0 - 3], $$[$0 - 2], $$[$0 - 1], $$[$0], false, this._$);
                    break;
                case 14:
                    this.$ = yy.prepareBlock($$[$0 - 3], $$[$0 - 2], $$[$0 - 1], $$[$0], true, this._$);
                    break;
                case 15:
                    this.$ = { open: $$[$0 - 5], path: $$[$0 - 4], params: $$[$0 - 3], hash: $$[$0 - 2], blockParams: $$[$0 - 1], strip: yy.stripFlags($$[$0 - 5], $$[$0]) };
                    break;
                case 16:
                    this.$ = { path: $$[$0 - 4], params: $$[$0 - 3], hash: $$[$0 - 2], blockParams: $$[$0 - 1], strip: yy.stripFlags($$[$0 - 5], $$[$0]) };
                    break;
                case 17:
                    this.$ = { path: $$[$0 - 4], params: $$[$0 - 3], hash: $$[$0 - 2], blockParams: $$[$0 - 1], strip: yy.stripFlags($$[$0 - 5], $$[$0]) };
                    break;
                case 18:
                    this.$ = { strip: yy.stripFlags($$[$0 - 1], $$[$0 - 1]), program: $$[$0] };
                    break;
                case 19:
                    var inverse = yy.prepareBlock($$[$0 - 2], $$[$0 - 1], $$[$0], $$[$0], false, this._$),
                        program = yy.prepareProgram([inverse], $$[$0 - 1].loc);
                    program.chained = true;

                    this.$ = { strip: $$[$0 - 2].strip, program: program, chain: true };

                    break;
                case 20:
                    this.$ = $$[$0];
                    break;
                case 21:
                    this.$ = { path: $$[$0 - 1], strip: yy.stripFlags($$[$0 - 2], $$[$0]) };
                    break;
                case 22:
                    this.$ = yy.prepareMustache($$[$0 - 3], $$[$0 - 2], $$[$0 - 1], $$[$0 - 4], yy.stripFlags($$[$0 - 4], $$[$0]), this._$);
                    break;
                case 23:
                    this.$ = yy.prepareMustache($$[$0 - 3], $$[$0 - 2], $$[$0 - 1], $$[$0 - 4], yy.stripFlags($$[$0 - 4], $$[$0]), this._$);
                    break;
                case 24:
                    this.$ = {
                        type: 'PartialStatement',
                        name: $$[$0 - 3],
                        params: $$[$0 - 2],
                        hash: $$[$0 - 1],
                        indent: '',
                        strip: yy.stripFlags($$[$0 - 4], $$[$0]),
                        loc: yy.locInfo(this._$)
                    };

                    break;
                case 25:
                    this.$ = yy.preparePartialBlock($$[$0 - 2], $$[$0 - 1], $$[$0], this._$);
                    break;
                case 26:
                    this.$ = { path: $$[$0 - 3], params: $$[$0 - 2], hash: $$[$0 - 1], strip: yy.stripFlags($$[$0 - 4], $$[$0]) };
                    break;
                case 27:
                    this.$ = $$[$0];
                    break;
                case 28:
                    this.$ = $$[$0];
                    break;
                case 29:
                    this.$ = {
                        type: 'SubExpression',
                        path: $$[$0 - 3],
                        params: $$[$0 - 2],
                        hash: $$[$0 - 1],
                        loc: yy.locInfo(this._$)
                    };

                    break;
                case 30:
                    this.$ = { type: 'Hash', pairs: $$[$0], loc: yy.locInfo(this._$) };
                    break;
                case 31:
                    this.$ = { type: 'HashPair', key: yy.id($$[$0 - 2]), value: $$[$0], loc: yy.locInfo(this._$) };
                    break;
                case 32:
                    this.$ = yy.id($$[$0 - 1]);
                    break;
                case 33:
                    this.$ = $$[$0];
                    break;
                case 34:
                    this.$ = $$[$0];
                    break;
                case 35:
                    this.$ = { type: 'StringLiteral', value: $$[$0], original: $$[$0], loc: yy.locInfo(this._$) };
                    break;
                case 36:
                    this.$ = { type: 'NumberLiteral', value: Number($$[$0]), original: Number($$[$0]), loc: yy.locInfo(this._$) };
                    break;
                case 37:
                    this.$ = { type: 'BooleanLiteral', value: $$[$0] === 'true', original: $$[$0] === 'true', loc: yy.locInfo(this._$) };
                    break;
                case 38:
                    this.$ = { type: 'UndefinedLiteral', original: undefined, value: undefined, loc: yy.locInfo(this._$) };
                    break;
                case 39:
                    this.$ = { type: 'NullLiteral', original: null, value: null, loc: yy.locInfo(this._$) };
                    break;
                case 40:
                    this.$ = $$[$0];
                    break;
                case 41:
                    this.$ = $$[$0];
                    break;
                case 42:
                    this.$ = yy.preparePath(true, $$[$0], this._$);
                    break;
                case 43:
                    this.$ = yy.preparePath(false, $$[$0], this._$);
                    break;
                case 44:
                    $$[$0 - 2].push({ part: yy.id($$[$0]), original: $$[$0], separator: $$[$0 - 1] });this.$ = $$[$0 - 2];
                    break;
                case 45:
                    this.$ = [{ part: yy.id($$[$0]), original: $$[$0] }];
                    break;
                case 46:
                    this.$ = [];
                    break;
                case 47:
                    $$[$0 - 1].push($$[$0]);
                    break;
                case 48:
                    this.$ = [];
                    break;
                case 49:
                    $$[$0 - 1].push($$[$0]);
                    break;
                case 50:
                    this.$ = [];
                    break;
                case 51:
                    $$[$0 - 1].push($$[$0]);
                    break;
                case 58:
                    this.$ = [];
                    break;
                case 59:
                    $$[$0 - 1].push($$[$0]);
                    break;
                case 64:
                    this.$ = [];
                    break;
                case 65:
                    $$[$0 - 1].push($$[$0]);
                    break;
                case 70:
                    this.$ = [];
                    break;
                case 71:
                    $$[$0 - 1].push($$[$0]);
                    break;
                case 78:
                    this.$ = [];
                    break;
                case 79:
                    $$[$0 - 1].push($$[$0]);
                    break;
                case 82:
                    this.$ = [];
                    break;
                case 83:
                    $$[$0 - 1].push($$[$0]);
                    break;
                case 86:
                    this.$ = [];
                    break;
                case 87:
                    $$[$0 - 1].push($$[$0]);
                    break;
                case 90:
                    this.$ = [];
                    break;
                case 91:
                    $$[$0 - 1].push($$[$0]);
                    break;
                case 94:
                    this.$ = [];
                    break;
                case 95:
                    $$[$0 - 1].push($$[$0]);
                    break;
                case 98:
                    this.$ = [$$[$0]];
                    break;
                case 99:
                    $$[$0 - 1].push($$[$0]);
                    break;
                case 100:
                    this.$ = [$$[$0]];
                    break;
                case 101:
                    $$[$0 - 1].push($$[$0]);
                    break;
            }
        },
        table: [{ 3: 1, 4: 2, 5: [2, 46], 6: 3, 14: [2, 46], 15: [2, 46], 19: [2, 46], 29: [2, 46], 34: [2, 46], 48: [2, 46], 51: [2, 46], 55: [2, 46], 60: [2, 46] }, { 1: [3] }, { 5: [1, 4] }, { 5: [2, 2], 7: 5, 8: 6, 9: 7, 10: 8, 11: 9, 12: 10, 13: 11, 14: [1, 12], 15: [1, 20], 16: 17, 19: [1, 23], 24: 15, 27: 16, 29: [1, 21], 34: [1, 22], 39: [2, 2], 44: [2, 2], 47: [2, 2], 48: [1, 13], 51: [1, 14], 55: [1, 18], 59: 19, 60: [1, 24] }, { 1: [2, 1] }, { 5: [2, 47], 14: [2, 47], 15: [2, 47], 19: [2, 47], 29: [2, 47], 34: [2, 47], 39: [2, 47], 44: [2, 47], 47: [2, 47], 48: [2, 47], 51: [2, 47], 55: [2, 47], 60: [2, 47] }, { 5: [2, 3], 14: [2, 3], 15: [2, 3], 19: [2, 3], 29: [2, 3], 34: [2, 3], 39: [2, 3], 44: [2, 3], 47: [2, 3], 48: [2, 3], 51: [2, 3], 55: [2, 3], 60: [2, 3] }, { 5: [2, 4], 14: [2, 4], 15: [2, 4], 19: [2, 4], 29: [2, 4], 34: [2, 4], 39: [2, 4], 44: [2, 4], 47: [2, 4], 48: [2, 4], 51: [2, 4], 55: [2, 4], 60: [2, 4] }, { 5: [2, 5], 14: [2, 5], 15: [2, 5], 19: [2, 5], 29: [2, 5], 34: [2, 5], 39: [2, 5], 44: [2, 5], 47: [2, 5], 48: [2, 5], 51: [2, 5], 55: [2, 5], 60: [2, 5] }, { 5: [2, 6], 14: [2, 6], 15: [2, 6], 19: [2, 6], 29: [2, 6], 34: [2, 6], 39: [2, 6], 44: [2, 6], 47: [2, 6], 48: [2, 6], 51: [2, 6], 55: [2, 6], 60: [2, 6] }, { 5: [2, 7], 14: [2, 7], 15: [2, 7], 19: [2, 7], 29: [2, 7], 34: [2, 7], 39: [2, 7], 44: [2, 7], 47: [2, 7], 48: [2, 7], 51: [2, 7], 55: [2, 7], 60: [2, 7] }, { 5: [2, 8], 14: [2, 8], 15: [2, 8], 19: [2, 8], 29: [2, 8], 34: [2, 8], 39: [2, 8], 44: [2, 8], 47: [2, 8], 48: [2, 8], 51: [2, 8], 55: [2, 8], 60: [2, 8] }, { 5: [2, 9], 14: [2, 9], 15: [2, 9], 19: [2, 9], 29: [2, 9], 34: [2, 9], 39: [2, 9], 44: [2, 9], 47: [2, 9], 48: [2, 9], 51: [2, 9], 55: [2, 9], 60: [2, 9] }, { 20: 25, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 20: 36, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 4: 37, 6: 3, 14: [2, 46], 15: [2, 46], 19: [2, 46], 29: [2, 46], 34: [2, 46], 39: [2, 46], 44: [2, 46], 47: [2, 46], 48: [2, 46], 51: [2, 46], 55: [2, 46], 60: [2, 46] }, { 4: 38, 6: 3, 14: [2, 46], 15: [2, 46], 19: [2, 46], 29: [2, 46], 34: [2, 46], 44: [2, 46], 47: [2, 46], 48: [2, 46], 51: [2, 46], 55: [2, 46], 60: [2, 46] }, { 15: [2, 48], 17: 39, 18: [2, 48] }, { 20: 41, 56: 40, 64: 42, 65: [1, 43], 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 4: 44, 6: 3, 14: [2, 46], 15: [2, 46], 19: [2, 46], 29: [2, 46], 34: [2, 46], 47: [2, 46], 48: [2, 46], 51: [2, 46], 55: [2, 46], 60: [2, 46] }, { 5: [2, 10], 14: [2, 10], 15: [2, 10], 18: [2, 10], 19: [2, 10], 29: [2, 10], 34: [2, 10], 39: [2, 10], 44: [2, 10], 47: [2, 10], 48: [2, 10], 51: [2, 10], 55: [2, 10], 60: [2, 10] }, { 20: 45, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 20: 46, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 20: 47, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 20: 41, 56: 48, 64: 42, 65: [1, 43], 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 33: [2, 78], 49: 49, 65: [2, 78], 72: [2, 78], 80: [2, 78], 81: [2, 78], 82: [2, 78], 83: [2, 78], 84: [2, 78], 85: [2, 78] }, { 23: [2, 33], 33: [2, 33], 54: [2, 33], 65: [2, 33], 68: [2, 33], 72: [2, 33], 75: [2, 33], 80: [2, 33], 81: [2, 33], 82: [2, 33], 83: [2, 33], 84: [2, 33], 85: [2, 33] }, { 23: [2, 34], 33: [2, 34], 54: [2, 34], 65: [2, 34], 68: [2, 34], 72: [2, 34], 75: [2, 34], 80: [2, 34], 81: [2, 34], 82: [2, 34], 83: [2, 34], 84: [2, 34], 85: [2, 34] }, { 23: [2, 35], 33: [2, 35], 54: [2, 35], 65: [2, 35], 68: [2, 35], 72: [2, 35], 75: [2, 35], 80: [2, 35], 81: [2, 35], 82: [2, 35], 83: [2, 35], 84: [2, 35], 85: [2, 35] }, { 23: [2, 36], 33: [2, 36], 54: [2, 36], 65: [2, 36], 68: [2, 36], 72: [2, 36], 75: [2, 36], 80: [2, 36], 81: [2, 36], 82: [2, 36], 83: [2, 36], 84: [2, 36], 85: [2, 36] }, { 23: [2, 37], 33: [2, 37], 54: [2, 37], 65: [2, 37], 68: [2, 37], 72: [2, 37], 75: [2, 37], 80: [2, 37], 81: [2, 37], 82: [2, 37], 83: [2, 37], 84: [2, 37], 85: [2, 37] }, { 23: [2, 38], 33: [2, 38], 54: [2, 38], 65: [2, 38], 68: [2, 38], 72: [2, 38], 75: [2, 38], 80: [2, 38], 81: [2, 38], 82: [2, 38], 83: [2, 38], 84: [2, 38], 85: [2, 38] }, { 23: [2, 39], 33: [2, 39], 54: [2, 39], 65: [2, 39], 68: [2, 39], 72: [2, 39], 75: [2, 39], 80: [2, 39], 81: [2, 39], 82: [2, 39], 83: [2, 39], 84: [2, 39], 85: [2, 39] }, { 23: [2, 43], 33: [2, 43], 54: [2, 43], 65: [2, 43], 68: [2, 43], 72: [2, 43], 75: [2, 43], 80: [2, 43], 81: [2, 43], 82: [2, 43], 83: [2, 43], 84: [2, 43], 85: [2, 43], 87: [1, 50] }, { 72: [1, 35], 86: 51 }, { 23: [2, 45], 33: [2, 45], 54: [2, 45], 65: [2, 45], 68: [2, 45], 72: [2, 45], 75: [2, 45], 80: [2, 45], 81: [2, 45], 82: [2, 45], 83: [2, 45], 84: [2, 45], 85: [2, 45], 87: [2, 45] }, { 52: 52, 54: [2, 82], 65: [2, 82], 72: [2, 82], 80: [2, 82], 81: [2, 82], 82: [2, 82], 83: [2, 82], 84: [2, 82], 85: [2, 82] }, { 25: 53, 38: 55, 39: [1, 57], 43: 56, 44: [1, 58], 45: 54, 47: [2, 54] }, { 28: 59, 43: 60, 44: [1, 58], 47: [2, 56] }, { 13: 62, 15: [1, 20], 18: [1, 61] }, { 33: [2, 86], 57: 63, 65: [2, 86], 72: [2, 86], 80: [2, 86], 81: [2, 86], 82: [2, 86], 83: [2, 86], 84: [2, 86], 85: [2, 86] }, { 33: [2, 40], 65: [2, 40], 72: [2, 40], 80: [2, 40], 81: [2, 40], 82: [2, 40], 83: [2, 40], 84: [2, 40], 85: [2, 40] }, { 33: [2, 41], 65: [2, 41], 72: [2, 41], 80: [2, 41], 81: [2, 41], 82: [2, 41], 83: [2, 41], 84: [2, 41], 85: [2, 41] }, { 20: 64, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 26: 65, 47: [1, 66] }, { 30: 67, 33: [2, 58], 65: [2, 58], 72: [2, 58], 75: [2, 58], 80: [2, 58], 81: [2, 58], 82: [2, 58], 83: [2, 58], 84: [2, 58], 85: [2, 58] }, { 33: [2, 64], 35: 68, 65: [2, 64], 72: [2, 64], 75: [2, 64], 80: [2, 64], 81: [2, 64], 82: [2, 64], 83: [2, 64], 84: [2, 64], 85: [2, 64] }, { 21: 69, 23: [2, 50], 65: [2, 50], 72: [2, 50], 80: [2, 50], 81: [2, 50], 82: [2, 50], 83: [2, 50], 84: [2, 50], 85: [2, 50] }, { 33: [2, 90], 61: 70, 65: [2, 90], 72: [2, 90], 80: [2, 90], 81: [2, 90], 82: [2, 90], 83: [2, 90], 84: [2, 90], 85: [2, 90] }, { 20: 74, 33: [2, 80], 50: 71, 63: 72, 64: 75, 65: [1, 43], 69: 73, 70: 76, 71: 77, 72: [1, 78], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 72: [1, 79] }, { 23: [2, 42], 33: [2, 42], 54: [2, 42], 65: [2, 42], 68: [2, 42], 72: [2, 42], 75: [2, 42], 80: [2, 42], 81: [2, 42], 82: [2, 42], 83: [2, 42], 84: [2, 42], 85: [2, 42], 87: [1, 50] }, { 20: 74, 53: 80, 54: [2, 84], 63: 81, 64: 75, 65: [1, 43], 69: 82, 70: 76, 71: 77, 72: [1, 78], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 26: 83, 47: [1, 66] }, { 47: [2, 55] }, { 4: 84, 6: 3, 14: [2, 46], 15: [2, 46], 19: [2, 46], 29: [2, 46], 34: [2, 46], 39: [2, 46], 44: [2, 46], 47: [2, 46], 48: [2, 46], 51: [2, 46], 55: [2, 46], 60: [2, 46] }, { 47: [2, 20] }, { 20: 85, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 4: 86, 6: 3, 14: [2, 46], 15: [2, 46], 19: [2, 46], 29: [2, 46], 34: [2, 46], 47: [2, 46], 48: [2, 46], 51: [2, 46], 55: [2, 46], 60: [2, 46] }, { 26: 87, 47: [1, 66] }, { 47: [2, 57] }, { 5: [2, 11], 14: [2, 11], 15: [2, 11], 19: [2, 11], 29: [2, 11], 34: [2, 11], 39: [2, 11], 44: [2, 11], 47: [2, 11], 48: [2, 11], 51: [2, 11], 55: [2, 11], 60: [2, 11] }, { 15: [2, 49], 18: [2, 49] }, { 20: 74, 33: [2, 88], 58: 88, 63: 89, 64: 75, 65: [1, 43], 69: 90, 70: 76, 71: 77, 72: [1, 78], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 65: [2, 94], 66: 91, 68: [2, 94], 72: [2, 94], 80: [2, 94], 81: [2, 94], 82: [2, 94], 83: [2, 94], 84: [2, 94], 85: [2, 94] }, { 5: [2, 25], 14: [2, 25], 15: [2, 25], 19: [2, 25], 29: [2, 25], 34: [2, 25], 39: [2, 25], 44: [2, 25], 47: [2, 25], 48: [2, 25], 51: [2, 25], 55: [2, 25], 60: [2, 25] }, { 20: 92, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 20: 74, 31: 93, 33: [2, 60], 63: 94, 64: 75, 65: [1, 43], 69: 95, 70: 76, 71: 77, 72: [1, 78], 75: [2, 60], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 20: 74, 33: [2, 66], 36: 96, 63: 97, 64: 75, 65: [1, 43], 69: 98, 70: 76, 71: 77, 72: [1, 78], 75: [2, 66], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 20: 74, 22: 99, 23: [2, 52], 63: 100, 64: 75, 65: [1, 43], 69: 101, 70: 76, 71: 77, 72: [1, 78], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 20: 74, 33: [2, 92], 62: 102, 63: 103, 64: 75, 65: [1, 43], 69: 104, 70: 76, 71: 77, 72: [1, 78], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 33: [1, 105] }, { 33: [2, 79], 65: [2, 79], 72: [2, 79], 80: [2, 79], 81: [2, 79], 82: [2, 79], 83: [2, 79], 84: [2, 79], 85: [2, 79] }, { 33: [2, 81] }, { 23: [2, 27], 33: [2, 27], 54: [2, 27], 65: [2, 27], 68: [2, 27], 72: [2, 27], 75: [2, 27], 80: [2, 27], 81: [2, 27], 82: [2, 27], 83: [2, 27], 84: [2, 27], 85: [2, 27] }, { 23: [2, 28], 33: [2, 28], 54: [2, 28], 65: [2, 28], 68: [2, 28], 72: [2, 28], 75: [2, 28], 80: [2, 28], 81: [2, 28], 82: [2, 28], 83: [2, 28], 84: [2, 28], 85: [2, 28] }, { 23: [2, 30], 33: [2, 30], 54: [2, 30], 68: [2, 30], 71: 106, 72: [1, 107], 75: [2, 30] }, { 23: [2, 98], 33: [2, 98], 54: [2, 98], 68: [2, 98], 72: [2, 98], 75: [2, 98] }, { 23: [2, 45], 33: [2, 45], 54: [2, 45], 65: [2, 45], 68: [2, 45], 72: [2, 45], 73: [1, 108], 75: [2, 45], 80: [2, 45], 81: [2, 45], 82: [2, 45], 83: [2, 45], 84: [2, 45], 85: [2, 45], 87: [2, 45] }, { 23: [2, 44], 33: [2, 44], 54: [2, 44], 65: [2, 44], 68: [2, 44], 72: [2, 44], 75: [2, 44], 80: [2, 44], 81: [2, 44], 82: [2, 44], 83: [2, 44], 84: [2, 44], 85: [2, 44], 87: [2, 44] }, { 54: [1, 109] }, { 54: [2, 83], 65: [2, 83], 72: [2, 83], 80: [2, 83], 81: [2, 83], 82: [2, 83], 83: [2, 83], 84: [2, 83], 85: [2, 83] }, { 54: [2, 85] }, { 5: [2, 13], 14: [2, 13], 15: [2, 13], 19: [2, 13], 29: [2, 13], 34: [2, 13], 39: [2, 13], 44: [2, 13], 47: [2, 13], 48: [2, 13], 51: [2, 13], 55: [2, 13], 60: [2, 13] }, { 38: 55, 39: [1, 57], 43: 56, 44: [1, 58], 45: 111, 46: 110, 47: [2, 76] }, { 33: [2, 70], 40: 112, 65: [2, 70], 72: [2, 70], 75: [2, 70], 80: [2, 70], 81: [2, 70], 82: [2, 70], 83: [2, 70], 84: [2, 70], 85: [2, 70] }, { 47: [2, 18] }, { 5: [2, 14], 14: [2, 14], 15: [2, 14], 19: [2, 14], 29: [2, 14], 34: [2, 14], 39: [2, 14], 44: [2, 14], 47: [2, 14], 48: [2, 14], 51: [2, 14], 55: [2, 14], 60: [2, 14] }, { 33: [1, 113] }, { 33: [2, 87], 65: [2, 87], 72: [2, 87], 80: [2, 87], 81: [2, 87], 82: [2, 87], 83: [2, 87], 84: [2, 87], 85: [2, 87] }, { 33: [2, 89] }, { 20: 74, 63: 115, 64: 75, 65: [1, 43], 67: 114, 68: [2, 96], 69: 116, 70: 76, 71: 77, 72: [1, 78], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 33: [1, 117] }, { 32: 118, 33: [2, 62], 74: 119, 75: [1, 120] }, { 33: [2, 59], 65: [2, 59], 72: [2, 59], 75: [2, 59], 80: [2, 59], 81: [2, 59], 82: [2, 59], 83: [2, 59], 84: [2, 59], 85: [2, 59] }, { 33: [2, 61], 75: [2, 61] }, { 33: [2, 68], 37: 121, 74: 122, 75: [1, 120] }, { 33: [2, 65], 65: [2, 65], 72: [2, 65], 75: [2, 65], 80: [2, 65], 81: [2, 65], 82: [2, 65], 83: [2, 65], 84: [2, 65], 85: [2, 65] }, { 33: [2, 67], 75: [2, 67] }, { 23: [1, 123] }, { 23: [2, 51], 65: [2, 51], 72: [2, 51], 80: [2, 51], 81: [2, 51], 82: [2, 51], 83: [2, 51], 84: [2, 51], 85: [2, 51] }, { 23: [2, 53] }, { 33: [1, 124] }, { 33: [2, 91], 65: [2, 91], 72: [2, 91], 80: [2, 91], 81: [2, 91], 82: [2, 91], 83: [2, 91], 84: [2, 91], 85: [2, 91] }, { 33: [2, 93] }, { 5: [2, 22], 14: [2, 22], 15: [2, 22], 19: [2, 22], 29: [2, 22], 34: [2, 22], 39: [2, 22], 44: [2, 22], 47: [2, 22], 48: [2, 22], 51: [2, 22], 55: [2, 22], 60: [2, 22] }, { 23: [2, 99], 33: [2, 99], 54: [2, 99], 68: [2, 99], 72: [2, 99], 75: [2, 99] }, { 73: [1, 108] }, { 20: 74, 63: 125, 64: 75, 65: [1, 43], 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 5: [2, 23], 14: [2, 23], 15: [2, 23], 19: [2, 23], 29: [2, 23], 34: [2, 23], 39: [2, 23], 44: [2, 23], 47: [2, 23], 48: [2, 23], 51: [2, 23], 55: [2, 23], 60: [2, 23] }, { 47: [2, 19] }, { 47: [2, 77] }, { 20: 74, 33: [2, 72], 41: 126, 63: 127, 64: 75, 65: [1, 43], 69: 128, 70: 76, 71: 77, 72: [1, 78], 75: [2, 72], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 5: [2, 24], 14: [2, 24], 15: [2, 24], 19: [2, 24], 29: [2, 24], 34: [2, 24], 39: [2, 24], 44: [2, 24], 47: [2, 24], 48: [2, 24], 51: [2, 24], 55: [2, 24], 60: [2, 24] }, { 68: [1, 129] }, { 65: [2, 95], 68: [2, 95], 72: [2, 95], 80: [2, 95], 81: [2, 95], 82: [2, 95], 83: [2, 95], 84: [2, 95], 85: [2, 95] }, { 68: [2, 97] }, { 5: [2, 21], 14: [2, 21], 15: [2, 21], 19: [2, 21], 29: [2, 21], 34: [2, 21], 39: [2, 21], 44: [2, 21], 47: [2, 21], 48: [2, 21], 51: [2, 21], 55: [2, 21], 60: [2, 21] }, { 33: [1, 130] }, { 33: [2, 63] }, { 72: [1, 132], 76: 131 }, { 33: [1, 133] }, { 33: [2, 69] }, { 15: [2, 12], 18: [2, 12] }, { 14: [2, 26], 15: [2, 26], 19: [2, 26], 29: [2, 26], 34: [2, 26], 47: [2, 26], 48: [2, 26], 51: [2, 26], 55: [2, 26], 60: [2, 26] }, { 23: [2, 31], 33: [2, 31], 54: [2, 31], 68: [2, 31], 72: [2, 31], 75: [2, 31] }, { 33: [2, 74], 42: 134, 74: 135, 75: [1, 120] }, { 33: [2, 71], 65: [2, 71], 72: [2, 71], 75: [2, 71], 80: [2, 71], 81: [2, 71], 82: [2, 71], 83: [2, 71], 84: [2, 71], 85: [2, 71] }, { 33: [2, 73], 75: [2, 73] }, { 23: [2, 29], 33: [2, 29], 54: [2, 29], 65: [2, 29], 68: [2, 29], 72: [2, 29], 75: [2, 29], 80: [2, 29], 81: [2, 29], 82: [2, 29], 83: [2, 29], 84: [2, 29], 85: [2, 29] }, { 14: [2, 15], 15: [2, 15], 19: [2, 15], 29: [2, 15], 34: [2, 15], 39: [2, 15], 44: [2, 15], 47: [2, 15], 48: [2, 15], 51: [2, 15], 55: [2, 15], 60: [2, 15] }, { 72: [1, 137], 77: [1, 136] }, { 72: [2, 100], 77: [2, 100] }, { 14: [2, 16], 15: [2, 16], 19: [2, 16], 29: [2, 16], 34: [2, 16], 44: [2, 16], 47: [2, 16], 48: [2, 16], 51: [2, 16], 55: [2, 16], 60: [2, 16] }, { 33: [1, 138] }, { 33: [2, 75] }, { 33: [2, 32] }, { 72: [2, 101], 77: [2, 101] }, { 14: [2, 17], 15: [2, 17], 19: [2, 17], 29: [2, 17], 34: [2, 17], 39: [2, 17], 44: [2, 17], 47: [2, 17], 48: [2, 17], 51: [2, 17], 55: [2, 17], 60: [2, 17] }],
        defaultActions: { 4: [2, 1], 54: [2, 55], 56: [2, 20], 60: [2, 57], 73: [2, 81], 82: [2, 85], 86: [2, 18], 90: [2, 89], 101: [2, 53], 104: [2, 93], 110: [2, 19], 111: [2, 77], 116: [2, 97], 119: [2, 63], 122: [2, 69], 135: [2, 75], 136: [2, 32] },
        parseError: function parseError(str, hash) {
            throw new Error(str);
        },
        parse: function parse(input) {
            var self = this,
                stack = [0],
                vstack = [null],
                lstack = [],
                table = this.table,
                yytext = "",
                yylineno = 0,
                yyleng = 0,
                recovering = 0,
                TERROR = 2,
                EOF = 1;
            this.lexer.setInput(input);
            this.lexer.yy = this.yy;
            this.yy.lexer = this.lexer;
            this.yy.parser = this;
            if (typeof this.lexer.yylloc == "undefined") this.lexer.yylloc = {};
            var yyloc = this.lexer.yylloc;
            lstack.push(yyloc);
            var ranges = this.lexer.options && this.lexer.options.ranges;
            if (typeof this.yy.parseError === "function") this.parseError = this.yy.parseError;
            function popStack(n) {
                stack.length = stack.length - 2 * n;
                vstack.length = vstack.length - n;
                lstack.length = lstack.length - n;
            }
            function lex() {
                var token;
                token = self.lexer.lex() || 1;
                if (typeof token !== "number") {
                    token = self.symbols_[token] || token;
                }
                return token;
            }
            var symbol,
                preErrorSymbol,
                state,
                action,
                a,
                r,
                yyval = {},
                p,
                len,
                newState,
                expected;
            while (true) {
                state = stack[stack.length - 1];
                if (this.defaultActions[state]) {
                    action = this.defaultActions[state];
                } else {
                    if (symbol === null || typeof symbol == "undefined") {
                        symbol = lex();
                    }
                    action = table[state] && table[state][symbol];
                }
                if (typeof action === "undefined" || !action.length || !action[0]) {
                    var errStr = "";
                    if (!recovering) {
                        expected = [];
                        for (p in table[state]) if (this.terminals_[p] && p > 2) {
                            expected.push("'" + this.terminals_[p] + "'");
                        }
                        if (this.lexer.showPosition) {
                            errStr = "Parse error on line " + (yylineno + 1) + ":\n" + this.lexer.showPosition() + "\nExpecting " + expected.join(", ") + ", got '" + (this.terminals_[symbol] || symbol) + "'";
                        } else {
                            errStr = "Parse error on line " + (yylineno + 1) + ": Unexpected " + (symbol == 1 ? "end of input" : "'" + (this.terminals_[symbol] || symbol) + "'");
                        }
                        this.parseError(errStr, { text: this.lexer.match, token: this.terminals_[symbol] || symbol, line: this.lexer.yylineno, loc: yyloc, expected: expected });
                    }
                }
                if (action[0] instanceof Array && action.length > 1) {
                    throw new Error("Parse Error: multiple actions possible at state: " + state + ", token: " + symbol);
                }
                switch (action[0]) {
                    case 1:
                        stack.push(symbol);
                        vstack.push(this.lexer.yytext);
                        lstack.push(this.lexer.yylloc);
                        stack.push(action[1]);
                        symbol = null;
                        if (!preErrorSymbol) {
                            yyleng = this.lexer.yyleng;
                            yytext = this.lexer.yytext;
                            yylineno = this.lexer.yylineno;
                            yyloc = this.lexer.yylloc;
                            if (recovering > 0) recovering--;
                        } else {
                            symbol = preErrorSymbol;
                            preErrorSymbol = null;
                        }
                        break;
                    case 2:
                        len = this.productions_[action[1]][1];
                        yyval.$ = vstack[vstack.length - len];
                        yyval._$ = { first_line: lstack[lstack.length - (len || 1)].first_line, last_line: lstack[lstack.length - 1].last_line, first_column: lstack[lstack.length - (len || 1)].first_column, last_column: lstack[lstack.length - 1].last_column };
                        if (ranges) {
                            yyval._$.range = [lstack[lstack.length - (len || 1)].range[0], lstack[lstack.length - 1].range[1]];
                        }
                        r = this.performAction.call(yyval, yytext, yyleng, yylineno, this.yy, action[1], vstack, lstack);
                        if (typeof r !== "undefined") {
                            return r;
                        }
                        if (len) {
                            stack = stack.slice(0, -1 * len * 2);
                            vstack = vstack.slice(0, -1 * len);
                            lstack = lstack.slice(0, -1 * len);
                        }
                        stack.push(this.productions_[action[1]][0]);
                        vstack.push(yyval.$);
                        lstack.push(yyval._$);
                        newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
                        stack.push(newState);
                        break;
                    case 3:
                        return true;
                }
            }
            return true;
        }
    };
    /* Jison generated lexer */
    var lexer = (function () {
        var lexer = { EOF: 1,
            parseError: function parseError(str, hash) {
                if (this.yy.parser) {
                    this.yy.parser.parseError(str, hash);
                } else {
                    throw new Error(str);
                }
            },
            setInput: function setInput(input) {
                this._input = input;
                this._more = this._less = this.done = false;
                this.yylineno = this.yyleng = 0;
                this.yytext = this.matched = this.match = '';
                this.conditionStack = ['INITIAL'];
                this.yylloc = { first_line: 1, first_column: 0, last_line: 1, last_column: 0 };
                if (this.options.ranges) this.yylloc.range = [0, 0];
                this.offset = 0;
                return this;
            },
            input: function input() {
                var ch = this._input[0];
                this.yytext += ch;
                this.yyleng++;
                this.offset++;
                this.match += ch;
                this.matched += ch;
                var lines = ch.match(/(?:\r\n?|\n).*/g);
                if (lines) {
                    this.yylineno++;
                    this.yylloc.last_line++;
                } else {
                    this.yylloc.last_column++;
                }
                if (this.options.ranges) this.yylloc.range[1]++;

                this._input = this._input.slice(1);
                return ch;
            },
            unput: function unput(ch) {
                var len = ch.length;
                var lines = ch.split(/(?:\r\n?|\n)/g);

                this._input = ch + this._input;
                this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
                //this.yyleng -= len;
                this.offset -= len;
                var oldLines = this.match.split(/(?:\r\n?|\n)/g);
                this.match = this.match.substr(0, this.match.length - 1);
                this.matched = this.matched.substr(0, this.matched.length - 1);

                if (lines.length - 1) this.yylineno -= lines.length - 1;
                var r = this.yylloc.range;

                this.yylloc = { first_line: this.yylloc.first_line,
                    last_line: this.yylineno + 1,
                    first_column: this.yylloc.first_column,
                    last_column: lines ? (lines.length === oldLines.length ? this.yylloc.first_column : 0) + oldLines[oldLines.length - lines.length].length - lines[0].length : this.yylloc.first_column - len
                };

                if (this.options.ranges) {
                    this.yylloc.range = [r[0], r[0] + this.yyleng - len];
                }
                return this;
            },
            more: function more() {
                this._more = true;
                return this;
            },
            less: function less(n) {
                this.unput(this.match.slice(n));
            },
            pastInput: function pastInput() {
                var past = this.matched.substr(0, this.matched.length - this.match.length);
                return (past.length > 20 ? '...' : '') + past.substr(-20).replace(/\n/g, "");
            },
            upcomingInput: function upcomingInput() {
                var next = this.match;
                if (next.length < 20) {
                    next += this._input.substr(0, 20 - next.length);
                }
                return (next.substr(0, 20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
            },
            showPosition: function showPosition() {
                var pre = this.pastInput();
                var c = new Array(pre.length + 1).join("-");
                return pre + this.upcomingInput() + "\n" + c + "^";
            },
            next: function next() {
                if (this.done) {
                    return this.EOF;
                }
                if (!this._input) this.done = true;

                var token, match, tempMatch, index, col, lines;
                if (!this._more) {
                    this.yytext = '';
                    this.match = '';
                }
                var rules = this._currentRules();
                for (var i = 0; i < rules.length; i++) {
                    tempMatch = this._input.match(this.rules[rules[i]]);
                    if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                        match = tempMatch;
                        index = i;
                        if (!this.options.flex) break;
                    }
                }
                if (match) {
                    lines = match[0].match(/(?:\r\n?|\n).*/g);
                    if (lines) this.yylineno += lines.length;
                    this.yylloc = { first_line: this.yylloc.last_line,
                        last_line: this.yylineno + 1,
                        first_column: this.yylloc.last_column,
                        last_column: lines ? lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length : this.yylloc.last_column + match[0].length };
                    this.yytext += match[0];
                    this.match += match[0];
                    this.matches = match;
                    this.yyleng = this.yytext.length;
                    if (this.options.ranges) {
                        this.yylloc.range = [this.offset, this.offset += this.yyleng];
                    }
                    this._more = false;
                    this._input = this._input.slice(match[0].length);
                    this.matched += match[0];
                    token = this.performAction.call(this, this.yy, this, rules[index], this.conditionStack[this.conditionStack.length - 1]);
                    if (this.done && this._input) this.done = false;
                    if (token) return token;else return;
                }
                if (this._input === "") {
                    return this.EOF;
                } else {
                    return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), { text: "", token: null, line: this.yylineno });
                }
            },
            lex: function lex() {
                var r = this.next();
                if (typeof r !== 'undefined') {
                    return r;
                } else {
                    return this.lex();
                }
            },
            begin: function begin(condition) {
                this.conditionStack.push(condition);
            },
            popState: function popState() {
                return this.conditionStack.pop();
            },
            _currentRules: function _currentRules() {
                return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
            },
            topState: function topState() {
                return this.conditionStack[this.conditionStack.length - 2];
            },
            pushState: function begin(condition) {
                this.begin(condition);
            } };
        lexer.options = {};
        lexer.performAction = function anonymous(yy, yy_, $avoiding_name_collisions, YY_START) {

            function strip(start, end) {
                return yy_.yytext = yy_.yytext.substring(start, yy_.yyleng - end + start);
            }

            var YYSTATE = YY_START;
            switch ($avoiding_name_collisions) {
                case 0:
                    if (yy_.yytext.slice(-2) === "\\\\") {
                        strip(0, 1);
                        this.begin("mu");
                    } else if (yy_.yytext.slice(-1) === "\\") {
                        strip(0, 1);
                        this.begin("emu");
                    } else {
                        this.begin("mu");
                    }
                    if (yy_.yytext) return 15;

                    break;
                case 1:
                    return 15;
                    break;
                case 2:
                    this.popState();
                    return 15;

                    break;
                case 3:
                    this.begin('raw');return 15;
                    break;
                case 4:
                    this.popState();
                    // Should be using `this.topState()` below, but it currently
                    // returns the second top instead of the first top. Opened an
                    // issue about it at https://github.com/zaach/jison/issues/291
                    if (this.conditionStack[this.conditionStack.length - 1] === 'raw') {
                        return 15;
                    } else {
                        strip(5, 9);
                        return 'END_RAW_BLOCK';
                    }

                    break;
                case 5:
                    return 15;
                    break;
                case 6:
                    this.popState();
                    return 14;

                    break;
                case 7:
                    return 65;
                    break;
                case 8:
                    return 68;
                    break;
                case 9:
                    return 19;
                    break;
                case 10:
                    this.popState();
                    this.begin('raw');
                    return 23;

                    break;
                case 11:
                    return 55;
                    break;
                case 12:
                    return 60;
                    break;
                case 13:
                    return 29;
                    break;
                case 14:
                    return 47;
                    break;
                case 15:
                    this.popState();return 44;
                    break;
                case 16:
                    this.popState();return 44;
                    break;
                case 17:
                    return 34;
                    break;
                case 18:
                    return 39;
                    break;
                case 19:
                    return 51;
                    break;
                case 20:
                    return 48;
                    break;
                case 21:
                    this.unput(yy_.yytext);
                    this.popState();
                    this.begin('com');

                    break;
                case 22:
                    this.popState();
                    return 14;

                    break;
                case 23:
                    return 48;
                    break;
                case 24:
                    return 73;
                    break;
                case 25:
                    return 72;
                    break;
                case 26:
                    return 72;
                    break;
                case 27:
                    return 87;
                    break;
                case 28:
                    // ignore whitespace
                    break;
                case 29:
                    this.popState();return 54;
                    break;
                case 30:
                    this.popState();return 33;
                    break;
                case 31:
                    yy_.yytext = strip(1, 2).replace(/\\"/g, '"');return 80;
                    break;
                case 32:
                    yy_.yytext = strip(1, 2).replace(/\\'/g, "'");return 80;
                    break;
                case 33:
                    return 85;
                    break;
                case 34:
                    return 82;
                    break;
                case 35:
                    return 82;
                    break;
                case 36:
                    return 83;
                    break;
                case 37:
                    return 84;
                    break;
                case 38:
                    return 81;
                    break;
                case 39:
                    return 75;
                    break;
                case 40:
                    return 77;
                    break;
                case 41:
                    return 72;
                    break;
                case 42:
                    yy_.yytext = yy_.yytext.replace(/\\([\\\]])/g, '$1');return 72;
                    break;
                case 43:
                    return 'INVALID';
                    break;
                case 44:
                    return 5;
                    break;
            }
        };
        lexer.rules = [/^(?:[^\x00]*?(?=(\{\{)))/, /^(?:[^\x00]+)/, /^(?:[^\x00]{2,}?(?=(\{\{|\\\{\{|\\\\\{\{|$)))/, /^(?:\{\{\{\{(?=[^\/]))/, /^(?:\{\{\{\{\/[^\s!"#%-,\.\/;->@\[-\^`\{-~]+(?=[=}\s\/.])\}\}\}\})/, /^(?:[^\x00]+?(?=(\{\{\{\{)))/, /^(?:[\s\S]*?--(~)?\}\})/, /^(?:\()/, /^(?:\))/, /^(?:\{\{\{\{)/, /^(?:\}\}\}\})/, /^(?:\{\{(~)?>)/, /^(?:\{\{(~)?#>)/, /^(?:\{\{(~)?#\*?)/, /^(?:\{\{(~)?\/)/, /^(?:\{\{(~)?\^\s*(~)?\}\})/, /^(?:\{\{(~)?\s*else\s*(~)?\}\})/, /^(?:\{\{(~)?\^)/, /^(?:\{\{(~)?\s*else\b)/, /^(?:\{\{(~)?\{)/, /^(?:\{\{(~)?&)/, /^(?:\{\{(~)?!--)/, /^(?:\{\{(~)?![\s\S]*?\}\})/, /^(?:\{\{(~)?\*?)/, /^(?:=)/, /^(?:\.\.)/, /^(?:\.(?=([=~}\s\/.)|])))/, /^(?:[\/.])/, /^(?:\s+)/, /^(?:\}(~)?\}\})/, /^(?:(~)?\}\})/, /^(?:"(\\["]|[^"])*")/, /^(?:'(\\[']|[^'])*')/, /^(?:@)/, /^(?:true(?=([~}\s)])))/, /^(?:false(?=([~}\s)])))/, /^(?:undefined(?=([~}\s)])))/, /^(?:null(?=([~}\s)])))/, /^(?:-?[0-9]+(?:\.[0-9]+)?(?=([~}\s)])))/, /^(?:as\s+\|)/, /^(?:\|)/, /^(?:([^\s!"#%-,\.\/;->@\[-\^`\{-~]+(?=([=~}\s\/.)|]))))/, /^(?:\[(\\\]|[^\]])*\])/, /^(?:.)/, /^(?:$)/];
        lexer.conditions = { "mu": { "rules": [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44], "inclusive": false }, "emu": { "rules": [2], "inclusive": false }, "com": { "rules": [6], "inclusive": false }, "raw": { "rules": [3, 4, 5], "inclusive": false }, "INITIAL": { "rules": [0, 1, 44], "inclusive": true } };
        return lexer;
    })();
    parser.lexer = lexer;
    function Parser() {
        this.yy = {};
    }Parser.prototype = parser;parser.Parser = Parser;
    return new Parser();
})();exports["default"] = handlebars;
module.exports = exports["default"];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,


/***/ }),

/***/ 1149:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
/* eslint-disable new-cap */


exports.__esModule = true;
exports.print = print;
exports.PrintVisitor = PrintVisitor;
// istanbul ignore next

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _visitor = __webpack_require__(96763);

var _visitor2 = _interopRequireDefault(_visitor);

function print(ast) {
  return new PrintVisitor().accept(ast);
}

function PrintVisitor() {
  this.padding = 0;
}

PrintVisitor.prototype = new _visitor2['default']();

PrintVisitor.prototype.pad = function (string) {
  var out = '';

  for (var i = 0, l = this.padding; i < l; i++) {
    out += '  ';
  }

  out += string + '\n';
  return out;
};

PrintVisitor.prototype.Program = function (program) {
  var out = '',
      body = program.body,
      i = undefined,
      l = undefined;

  if (program.blockParams) {
    var blockParams = 'BLOCK PARAMS: [';
    for (i = 0, l = program.blockParams.length; i < l; i++) {
      blockParams += ' ' + program.blockParams[i];
    }
    blockParams += ' ]';
    out += this.pad(blockParams);
  }

  for (i = 0, l = body.length; i < l; i++) {
    out += this.accept(body[i]);
  }

  this.padding--;

  return out;
};

PrintVisitor.prototype.MustacheStatement = function (mustache) {
  return this.pad('{{ ' + this.SubExpression(mustache) + ' }}');
};
PrintVisitor.prototype.Decorator = function (mustache) {
  return this.pad('{{ DIRECTIVE ' + this.SubExpression(mustache) + ' }}');
};

PrintVisitor.prototype.BlockStatement = PrintVisitor.prototype.DecoratorBlock = function (block) {
  var out = '';

  out += this.pad((block.type === 'DecoratorBlock' ? 'DIRECTIVE ' : '') + 'BLOCK:');
  this.padding++;
  out += this.pad(this.SubExpression(block));
  if (block.program) {
    out += this.pad('PROGRAM:');
    this.padding++;
    out += this.accept(block.program);
    this.padding--;
  }
  if (block.inverse) {
    if (block.program) {
      this.padding++;
    }
    out += this.pad('{{^}}');
    this.padding++;
    out += this.accept(block.inverse);
    this.padding--;
    if (block.program) {
      this.padding--;
    }
  }
  this.padding--;

  return out;
};

PrintVisitor.prototype.PartialStatement = function (partial) {
  var content = 'PARTIAL:' + partial.name.original;
  if (partial.params[0]) {
    content += ' ' + this.accept(partial.params[0]);
  }
  if (partial.hash) {
    content += ' ' + this.accept(partial.hash);
  }
  return this.pad('{{> ' + content + ' }}');
};
PrintVisitor.prototype.PartialBlockStatement = function (partial) {
  var content = 'PARTIAL BLOCK:' + partial.name.original;
  if (partial.params[0]) {
    content += ' ' + this.accept(partial.params[0]);
  }
  if (partial.hash) {
    content += ' ' + this.accept(partial.hash);
  }

  content += ' ' + this.pad('PROGRAM:');
  this.padding++;
  content += this.accept(partial.program);
  this.padding--;

  return this.pad('{{> ' + content + ' }}');
};

PrintVisitor.prototype.ContentStatement = function (content) {
  return this.pad("CONTENT[ '" + content.value + "' ]");
};

PrintVisitor.prototype.CommentStatement = function (comment) {
  return this.pad("{{! '" + comment.value + "' }}");
};

PrintVisitor.prototype.SubExpression = function (sexpr) {
  var params = sexpr.params,
      paramStrings = [],
      hash = undefined;

  for (var i = 0, l = params.length; i < l; i++) {
    paramStrings.push(this.accept(params[i]));
  }

  params = '[' + paramStrings.join(', ') + ']';

  hash = sexpr.hash ? ' ' + this.accept(sexpr.hash) : '';

  return this.accept(sexpr.path) + ' ' + params + hash;
};

PrintVisitor.prototype.PathExpression = function (id) {
  var path = id.parts.join('/');
  return (id.data ? '@' : '') + 'PATH:' + path;
};

PrintVisitor.prototype.StringLiteral = function (string) {
  return '"' + string.value + '"';
};

PrintVisitor.prototype.NumberLiteral = function (number) {
  return 'NUMBER{' + number.value + '}';
};

PrintVisitor.prototype.BooleanLiteral = function (bool) {
  return 'BOOLEAN{' + bool.value + '}';
};

PrintVisitor.prototype.UndefinedLiteral = function () {
  return 'UNDEFINED';
};

PrintVisitor.prototype.NullLiteral = function () {
  return 'NULL';
};

PrintVisitor.prototype.Hash = function (hash) {
  var pairs = hash.pairs,
      joinedPairs = [];

  for (var i = 0, l = pairs.length; i < l; i++) {
    joinedPairs.push(this.accept(pairs[i]));
  }

  return 'HASH{' + joinedPairs.join(', ') + '}';
};
PrintVisitor.prototype.HashPair = function (pair) {
  return pair.key + '=' + this.accept(pair.value);
};
/* eslint-enable new-cap */
//# sourceMappingURL=data:application/json;charset=utf-8;base64,


/***/ }),

/***/ 96763:
/***/ ((module, exports, __webpack_require__) => {

"use strict";


exports.__esModule = true;
// istanbul ignore next

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _exception = __webpack_require__(3403);

var _exception2 = _interopRequireDefault(_exception);

function Visitor() {
  this.parents = [];
}

Visitor.prototype = {
  constructor: Visitor,
  mutating: false,

  // Visits a given value. If mutating, will replace the value if necessary.
  acceptKey: function acceptKey(node, name) {
    var value = this.accept(node[name]);
    if (this.mutating) {
      // Hacky sanity check: This may have a few false positives for type for the helper
      // methods but will generally do the right thing without a lot of overhead.
      if (value && !Visitor.prototype[value.type]) {
        throw new _exception2['default']('Unexpected node type "' + value.type + '" found when accepting ' + name + ' on ' + node.type);
      }
      node[name] = value;
    }
  },

  // Performs an accept operation with added sanity check to ensure
  // required keys are not removed.
  acceptRequired: function acceptRequired(node, name) {
    this.acceptKey(node, name);

    if (!node[name]) {
      throw new _exception2['default'](node.type + ' requires ' + name);
    }
  },

  // Traverses a given array. If mutating, empty respnses will be removed
  // for child elements.
  acceptArray: function acceptArray(array) {
    for (var i = 0, l = array.length; i < l; i++) {
      this.acceptKey(array, i);

      if (!array[i]) {
        array.splice(i, 1);
        i--;
        l--;
      }
    }
  },

  accept: function accept(object) {
    if (!object) {
      return;
    }

    /* istanbul ignore next: Sanity code */
    if (!this[object.type]) {
      throw new _exception2['default']('Unknown type: ' + object.type, object);
    }

    if (this.current) {
      this.parents.unshift(this.current);
    }
    this.current = object;

    var ret = this[object.type](object);

    this.current = this.parents.shift();

    if (!this.mutating || ret) {
      return ret;
    } else if (ret !== false) {
      return object;
    }
  },

  Program: function Program(program) {
    this.acceptArray(program.body);
  },

  MustacheStatement: visitSubExpression,
  Decorator: visitSubExpression,

  BlockStatement: visitBlock,
  DecoratorBlock: visitBlock,

  PartialStatement: visitPartial,
  PartialBlockStatement: function PartialBlockStatement(partial) {
    visitPartial.call(this, partial);

    this.acceptKey(partial, 'program');
  },

  ContentStatement: function ContentStatement() /* content */{},
  CommentStatement: function CommentStatement() /* comment */{},

  SubExpression: visitSubExpression,

  PathExpression: function PathExpression() /* path */{},

  StringLiteral: function StringLiteral() /* string */{},
  NumberLiteral: function NumberLiteral() /* number */{},
  BooleanLiteral: function BooleanLiteral() /* bool */{},
  UndefinedLiteral: function UndefinedLiteral() /* literal */{},
  NullLiteral: function NullLiteral() /* literal */{},

  Hash: function Hash(hash) {
    this.acceptArray(hash.pairs);
  },
  HashPair: function HashPair(pair) {
    this.acceptRequired(pair, 'value');
  }
};

function visitSubExpression(mustache) {
  this.acceptRequired(mustache, 'path');
  this.acceptArray(mustache.params);
  this.acceptKey(mustache, 'hash');
}
function visitBlock(block) {
  visitSubExpression.call(this, block);

  this.acceptKey(block, 'program');
  this.acceptKey(block, 'inverse');
}
function visitPartial(partial) {
  this.acceptRequired(partial, 'name');
  this.acceptArray(partial.params);
  this.acceptKey(partial, 'hash');
}

exports["default"] = Visitor;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,


/***/ }),

/***/ 40167:
/***/ ((module, exports, __webpack_require__) => {

"use strict";


exports.__esModule = true;
// istanbul ignore next

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _visitor = __webpack_require__(96763);

var _visitor2 = _interopRequireDefault(_visitor);

function WhitespaceControl() {
  var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

  this.options = options;
}
WhitespaceControl.prototype = new _visitor2['default']();

WhitespaceControl.prototype.Program = function (program) {
  var doStandalone = !this.options.ignoreStandalone;

  var isRoot = !this.isRootSeen;
  this.isRootSeen = true;

  var body = program.body;
  for (var i = 0, l = body.length; i < l; i++) {
    var current = body[i],
        strip = this.accept(current);

    if (!strip) {
      continue;
    }

    var _isPrevWhitespace = isPrevWhitespace(body, i, isRoot),
        _isNextWhitespace = isNextWhitespace(body, i, isRoot),
        openStandalone = strip.openStandalone && _isPrevWhitespace,
        closeStandalone = strip.closeStandalone && _isNextWhitespace,
        inlineStandalone = strip.inlineStandalone && _isPrevWhitespace && _isNextWhitespace;

    if (strip.close) {
      omitRight(body, i, true);
    }
    if (strip.open) {
      omitLeft(body, i, true);
    }

    if (doStandalone && inlineStandalone) {
      omitRight(body, i);

      if (omitLeft(body, i)) {
        // If we are on a standalone node, save the indent info for partials
        if (current.type === 'PartialStatement') {
          // Pull out the whitespace from the final line
          current.indent = /([ \t]+$)/.exec(body[i - 1].original)[1];
        }
      }
    }
    if (doStandalone && openStandalone) {
      omitRight((current.program || current.inverse).body);

      // Strip out the previous content node if it's whitespace only
      omitLeft(body, i);
    }
    if (doStandalone && closeStandalone) {
      // Always strip the next node
      omitRight(body, i);

      omitLeft((current.inverse || current.program).body);
    }
  }

  return program;
};

WhitespaceControl.prototype.BlockStatement = WhitespaceControl.prototype.DecoratorBlock = WhitespaceControl.prototype.PartialBlockStatement = function (block) {
  this.accept(block.program);
  this.accept(block.inverse);

  // Find the inverse program that is involed with whitespace stripping.
  var program = block.program || block.inverse,
      inverse = block.program && block.inverse,
      firstInverse = inverse,
      lastInverse = inverse;

  if (inverse && inverse.chained) {
    firstInverse = inverse.body[0].program;

    // Walk the inverse chain to find the last inverse that is actually in the chain.
    while (lastInverse.chained) {
      lastInverse = lastInverse.body[lastInverse.body.length - 1].program;
    }
  }

  var strip = {
    open: block.openStrip.open,
    close: block.closeStrip.close,

    // Determine the standalone candiacy. Basically flag our content as being possibly standalone
    // so our parent can determine if we actually are standalone
    openStandalone: isNextWhitespace(program.body),
    closeStandalone: isPrevWhitespace((firstInverse || program).body)
  };

  if (block.openStrip.close) {
    omitRight(program.body, null, true);
  }

  if (inverse) {
    var inverseStrip = block.inverseStrip;

    if (inverseStrip.open) {
      omitLeft(program.body, null, true);
    }

    if (inverseStrip.close) {
      omitRight(firstInverse.body, null, true);
    }
    if (block.closeStrip.open) {
      omitLeft(lastInverse.body, null, true);
    }

    // Find standalone else statments
    if (!this.options.ignoreStandalone && isPrevWhitespace(program.body) && isNextWhitespace(firstInverse.body)) {
      omitLeft(program.body);
      omitRight(firstInverse.body);
    }
  } else if (block.closeStrip.open) {
    omitLeft(program.body, null, true);
  }

  return strip;
};

WhitespaceControl.prototype.Decorator = WhitespaceControl.prototype.MustacheStatement = function (mustache) {
  return mustache.strip;
};

WhitespaceControl.prototype.PartialStatement = WhitespaceControl.prototype.CommentStatement = function (node) {
  /* istanbul ignore next */
  var strip = node.strip || {};
  return {
    inlineStandalone: true,
    open: strip.open,
    close: strip.close
  };
};

function isPrevWhitespace(body, i, isRoot) {
  if (i === undefined) {
    i = body.length;
  }

  // Nodes that end with newlines are considered whitespace (but are special
  // cased for strip operations)
  var prev = body[i - 1],
      sibling = body[i - 2];
  if (!prev) {
    return isRoot;
  }

  if (prev.type === 'ContentStatement') {
    return (sibling || !isRoot ? /\r?\n\s*?$/ : /(^|\r?\n)\s*?$/).test(prev.original);
  }
}
function isNextWhitespace(body, i, isRoot) {
  if (i === undefined) {
    i = -1;
  }

  var next = body[i + 1],
      sibling = body[i + 2];
  if (!next) {
    return isRoot;
  }

  if (next.type === 'ContentStatement') {
    return (sibling || !isRoot ? /^\s*?\r?\n/ : /^\s*?(\r?\n|$)/).test(next.original);
  }
}

// Marks the node to the right of the position as omitted.
// I.e. {{foo}}' ' will mark the ' ' node as omitted.
//
// If i is undefined, then the first child will be marked as such.
//
// If mulitple is truthy then all whitespace will be stripped out until non-whitespace
// content is met.
function omitRight(body, i, multiple) {
  var current = body[i == null ? 0 : i + 1];
  if (!current || current.type !== 'ContentStatement' || !multiple && current.rightStripped) {
    return;
  }

  var original = current.value;
  current.value = current.value.replace(multiple ? /^\s+/ : /^[ \t]*\r?\n?/, '');
  current.rightStripped = current.value !== original;
}

// Marks the node to the left of the position as omitted.
// I.e. ' '{{foo}} will mark the ' ' node as omitted.
//
// If i is undefined then the last child will be marked as such.
//
// If mulitple is truthy then all whitespace will be stripped out until non-whitespace
// content is met.
function omitLeft(body, i, multiple) {
  var current = body[i == null ? body.length - 1 : i - 1];
  if (!current || current.type !== 'ContentStatement' || !multiple && current.leftStripped) {
    return;
  }

  // We omit the last node if it's whitespace only and not preceded by a non-content node.
  var original = current.value;
  current.value = current.value.replace(multiple ? /\s+$/ : /[ \t]+$/, '');
  current.leftStripped = current.value !== original;
  return current.leftStripped;
}

exports["default"] = WhitespaceControl;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,


/***/ }),

/***/ 62006:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


exports.__esModule = true;
exports.registerDefaultDecorators = registerDefaultDecorators;
// istanbul ignore next

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _decoratorsInline = __webpack_require__(34606);

var _decoratorsInline2 = _interopRequireDefault(_decoratorsInline);

function registerDefaultDecorators(instance) {
  _decoratorsInline2['default'](instance);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9oYW5kbGViYXJzL2RlY29yYXRvcnMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Z0NBQTJCLHFCQUFxQjs7OztBQUV6QyxTQUFTLHlCQUF5QixDQUFDLFFBQVEsRUFBRTtBQUNsRCxnQ0FBZSxRQUFRLENBQUMsQ0FBQztDQUMxQiIsImZpbGUiOiJkZWNvcmF0b3JzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHJlZ2lzdGVySW5saW5lIGZyb20gJy4vZGVjb3JhdG9ycy9pbmxpbmUnO1xuXG5leHBvcnQgZnVuY3Rpb24gcmVnaXN0ZXJEZWZhdWx0RGVjb3JhdG9ycyhpbnN0YW5jZSkge1xuICByZWdpc3RlcklubGluZShpbnN0YW5jZSk7XG59XG4iXX0=


/***/ }),

/***/ 34606:
/***/ ((module, exports, __webpack_require__) => {

"use strict";


exports.__esModule = true;

var _utils = __webpack_require__(57471);

exports["default"] = function (instance) {
  instance.registerDecorator('inline', function (fn, props, container, options) {
    var ret = fn;
    if (!props.partials) {
      props.partials = {};
      ret = function (context, options) {
        // Create a new partials stack frame prior to exec.
        var original = container.partials;
        container.partials = _utils.extend({}, original, props.partials);
        var ret = fn(context, options);
        container.partials = original;
        return ret;
      };
    }

    props.partials[options.args[0]] = options.fn;

    return ret;
  });
};

module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2xpYi9oYW5kbGViYXJzL2RlY29yYXRvcnMvaW5saW5lLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7cUJBQXVCLFVBQVU7O3FCQUVsQixVQUFTLFFBQVEsRUFBRTtBQUNoQyxVQUFRLENBQUMsaUJBQWlCLENBQUMsUUFBUSxFQUFFLFVBQVMsRUFBRSxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsT0FBTyxFQUFFO0FBQzNFLFFBQUksR0FBRyxHQUFHLEVBQUUsQ0FBQztBQUNiLFFBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFO0FBQ25CLFdBQUssQ0FBQyxRQUFRLEdBQUcsRUFBRSxDQUFDO0FBQ3BCLFNBQUcsR0FBRyxVQUFTLE9BQU8sRUFBRSxPQUFPLEVBQUU7O0FBRS9CLFlBQUksUUFBUSxHQUFHLFNBQVMsQ0FBQyxRQUFRLENBQUM7QUFDbEMsaUJBQVMsQ0FBQyxRQUFRLEdBQUcsY0FBTyxFQUFFLEVBQUUsUUFBUSxFQUFFLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUMxRCxZQUFJLEdBQUcsR0FBRyxFQUFFLENBQUMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0FBQy9CLGlCQUFTLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztBQUM5QixlQUFPLEdBQUcsQ0FBQztPQUNaLENBQUM7S0FDSDs7QUFFRCxTQUFLLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxPQUFPLENBQUMsRUFBRSxDQUFDOztBQUU3QyxXQUFPLEdBQUcsQ0FBQztHQUNaLENBQUMsQ0FBQztDQUNKIiwiZmlsZSI6ImlubGluZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGV4dGVuZCB9IGZyb20gJy4uL3V0aWxzJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oaW5zdGFuY2UpIHtcbiAgaW5zdGFuY2UucmVnaXN0ZXJEZWNvcmF0b3IoJ2lubGluZScsIGZ1bmN0aW9uKGZuLCBwcm9wcywgY29udGFpbmVyLCBvcHRpb25zKSB7XG4gICAgbGV0IHJldCA9IGZuO1xuICAgIGlmICghcHJvcHMucGFydGlhbHMpIHtcbiAgICAgIHByb3BzLnBhcnRpYWxzID0ge307XG4gICAgICByZXQgPSBmdW5jdGlvbihjb250ZXh0LCBvcHRpb25zKSB7XG4gICAgICAgIC8vIENyZWF0ZSBhIG5ldyBwYXJ0aWFscyBzdGFjayBmcmFtZSBwcmlvciB0byBleGVjLlxuICAgICAgICBsZXQgb3JpZ2luYWwgPSBjb250YWluZXIucGFydGlhbHM7XG4gICAgICAgIGNvbnRhaW5lci5wYXJ0aWFscyA9IGV4dGVuZCh7fSwgb3JpZ2luYWwsIHByb3BzLnBhcnRpYWxzKTtcbiAgICAgICAgbGV0IHJldCA9IGZuKGNvbnRleHQsIG9wdGlvbnMpO1xuICAgICAgICBjb250YWluZXIucGFydGlhbHMgPSBvcmlnaW5hbDtcbiAgICAgICAgcmV0dXJuIHJldDtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgcHJvcHMucGFydGlhbHNbb3B0aW9ucy5hcmdzWzBdXSA9IG9wdGlvbnMuZm47XG5cbiAgICByZXR1cm4gcmV0O1xuICB9KTtcbn1cbiJdfQ==


/***/ }),

/***/ 3403:
/***/ ((module, exports) => {

"use strict";


exports.__esModule = true;
var errorProps = ['description', 'fileName', 'lineNumber', 'endLineNumber', 'message', 'name', 'number', 'stack'];

function Exception(message, node) {
  var loc = node && node.loc,
      line = undefined,
      endLineNumber = undefined,
      column = undefined,
      endColumn = undefined;

  if (loc) {
    line = loc.start.line;
    endLineNumber = loc.end.line;
    column = loc.start.column;
    endColumn = loc.end.column;

    message += ' - ' + line + ':' + column;
  }

  var tmp = Error.prototype.constructor.call(this, message);

  // Unfortunately errors are not enumerable in Chrome (at least), so `for prop in tmp` doesn't work.
  for (var idx = 0; idx < errorProps.length; idx++) {
    this[errorProps[idx]] = tmp[errorProps[idx]];
  }

  /* istanbul ignore else */
  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, Exception);
  }

  try {
    if (loc) {
      this.lineNumber = line;
      this.endLineNumber = endLineNumber;

      // Work around issue under safari where we can't directly set the column value
      /* istanbul ignore next */
      if (Object.defineProperty) {
        Object.defineProperty(this, 'column', {
          value: column,
          enumerable: true
        });
        Object.defineProperty(this, 'endColumn', {
          value: endColumn,
          enumerable: true
        });
      } else {
        this.column = column;
        this.endColumn = endColumn;
      }
    }
  } catch (nop) {
    /* Ignore if the browser is very particular */
  }
}

Exception.prototype = new Error();

exports["default"] = Exception;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9oYW5kbGViYXJzL2V4Y2VwdGlvbi5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxJQUFNLFVBQVUsR0FBRyxDQUNqQixhQUFhLEVBQ2IsVUFBVSxFQUNWLFlBQVksRUFDWixlQUFlLEVBQ2YsU0FBUyxFQUNULE1BQU0sRUFDTixRQUFRLEVBQ1IsT0FBTyxDQUNSLENBQUM7O0FBRUYsU0FBUyxTQUFTLENBQUMsT0FBTyxFQUFFLElBQUksRUFBRTtBQUNoQyxNQUFJLEdBQUcsR0FBRyxJQUFJLElBQUksSUFBSSxDQUFDLEdBQUc7TUFDeEIsSUFBSSxZQUFBO01BQ0osYUFBYSxZQUFBO01BQ2IsTUFBTSxZQUFBO01BQ04sU0FBUyxZQUFBLENBQUM7O0FBRVosTUFBSSxHQUFHLEVBQUU7QUFDUCxRQUFJLEdBQUcsR0FBRyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUM7QUFDdEIsaUJBQWEsR0FBRyxHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQztBQUM3QixVQUFNLEdBQUcsR0FBRyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUM7QUFDMUIsYUFBUyxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDOztBQUUzQixXQUFPLElBQUksS0FBSyxHQUFHLElBQUksR0FBRyxHQUFHLEdBQUcsTUFBTSxDQUFDO0dBQ3hDOztBQUVELE1BQUksR0FBRyxHQUFHLEtBQUssQ0FBQyxTQUFTLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUM7OztBQUcxRCxPQUFLLElBQUksR0FBRyxHQUFHLENBQUMsRUFBRSxHQUFHLEdBQUcsVUFBVSxDQUFDLE1BQU0sRUFBRSxHQUFHLEVBQUUsRUFBRTtBQUNoRCxRQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0dBQzlDOzs7QUFHRCxNQUFJLEtBQUssQ0FBQyxpQkFBaUIsRUFBRTtBQUMzQixTQUFLLENBQUMsaUJBQWlCLENBQUMsSUFBSSxFQUFFLFNBQVMsQ0FBQyxDQUFDO0dBQzFDOztBQUVELE1BQUk7QUFDRixRQUFJLEdBQUcsRUFBRTtBQUNQLFVBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDO0FBQ3ZCLFVBQUksQ0FBQyxhQUFhLEdBQUcsYUFBYSxDQUFDOzs7O0FBSW5DLFVBQUksTUFBTSxDQUFDLGNBQWMsRUFBRTtBQUN6QixjQUFNLENBQUMsY0FBYyxDQUFDLElBQUksRUFBRSxRQUFRLEVBQUU7QUFDcEMsZUFBSyxFQUFFLE1BQU07QUFDYixvQkFBVSxFQUFFLElBQUk7U0FDakIsQ0FBQyxDQUFDO0FBQ0gsY0FBTSxDQUFDLGNBQWMsQ0FBQyxJQUFJLEVBQUUsV0FBVyxFQUFFO0FBQ3ZDLGVBQUssRUFBRSxTQUFTO0FBQ2hCLG9CQUFVLEVBQUUsSUFBSTtTQUNqQixDQUFDLENBQUM7T0FDSixNQUFNO0FBQ0wsWUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7QUFDckIsWUFBSSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7T0FDNUI7S0FDRjtHQUNGLENBQUMsT0FBTyxHQUFHLEVBQUU7O0dBRWI7Q0FDRjs7QUFFRCxTQUFTLENBQUMsU0FBUyxHQUFHLElBQUksS0FBSyxFQUFFLENBQUM7O3FCQUVuQixTQUFTIiwiZmlsZSI6ImV4Y2VwdGlvbi5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGVycm9yUHJvcHMgPSBbXG4gICdkZXNjcmlwdGlvbicsXG4gICdmaWxlTmFtZScsXG4gICdsaW5lTnVtYmVyJyxcbiAgJ2VuZExpbmVOdW1iZXInLFxuICAnbWVzc2FnZScsXG4gICduYW1lJyxcbiAgJ251bWJlcicsXG4gICdzdGFjaydcbl07XG5cbmZ1bmN0aW9uIEV4Y2VwdGlvbihtZXNzYWdlLCBub2RlKSB7XG4gIGxldCBsb2MgPSBub2RlICYmIG5vZGUubG9jLFxuICAgIGxpbmUsXG4gICAgZW5kTGluZU51bWJlcixcbiAgICBjb2x1bW4sXG4gICAgZW5kQ29sdW1uO1xuXG4gIGlmIChsb2MpIHtcbiAgICBsaW5lID0gbG9jLnN0YXJ0LmxpbmU7XG4gICAgZW5kTGluZU51bWJlciA9IGxvYy5lbmQubGluZTtcbiAgICBjb2x1bW4gPSBsb2Muc3RhcnQuY29sdW1uO1xuICAgIGVuZENvbHVtbiA9IGxvYy5lbmQuY29sdW1uO1xuXG4gICAgbWVzc2FnZSArPSAnIC0gJyArIGxpbmUgKyAnOicgKyBjb2x1bW47XG4gIH1cblxuICBsZXQgdG1wID0gRXJyb3IucHJvdG90eXBlLmNvbnN0cnVjdG9yLmNhbGwodGhpcywgbWVzc2FnZSk7XG5cbiAgLy8gVW5mb3J0dW5hdGVseSBlcnJvcnMgYXJlIG5vdCBlbnVtZXJhYmxlIGluIENocm9tZSAoYXQgbGVhc3QpLCBzbyBgZm9yIHByb3AgaW4gdG1wYCBkb2Vzbid0IHdvcmsuXG4gIGZvciAobGV0IGlkeCA9IDA7IGlkeCA8IGVycm9yUHJvcHMubGVuZ3RoOyBpZHgrKykge1xuICAgIHRoaXNbZXJyb3JQcm9wc1tpZHhdXSA9IHRtcFtlcnJvclByb3BzW2lkeF1dO1xuICB9XG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgaWYgKEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKSB7XG4gICAgRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UodGhpcywgRXhjZXB0aW9uKTtcbiAgfVxuXG4gIHRyeSB7XG4gICAgaWYgKGxvYykge1xuICAgICAgdGhpcy5saW5lTnVtYmVyID0gbGluZTtcbiAgICAgIHRoaXMuZW5kTGluZU51bWJlciA9IGVuZExpbmVOdW1iZXI7XG5cbiAgICAgIC8vIFdvcmsgYXJvdW5kIGlzc3VlIHVuZGVyIHNhZmFyaSB3aGVyZSB3ZSBjYW4ndCBkaXJlY3RseSBzZXQgdGhlIGNvbHVtbiB2YWx1ZVxuICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICAgIGlmIChPYmplY3QuZGVmaW5lUHJvcGVydHkpIHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsICdjb2x1bW4nLCB7XG4gICAgICAgICAgdmFsdWU6IGNvbHVtbixcbiAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ2VuZENvbHVtbicsIHtcbiAgICAgICAgICB2YWx1ZTogZW5kQ29sdW1uLFxuICAgICAgICAgIGVudW1lcmFibGU6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmNvbHVtbiA9IGNvbHVtbjtcbiAgICAgICAgdGhpcy5lbmRDb2x1bW4gPSBlbmRDb2x1bW47XG4gICAgICB9XG4gICAgfVxuICB9IGNhdGNoIChub3ApIHtcbiAgICAvKiBJZ25vcmUgaWYgdGhlIGJyb3dzZXIgaXMgdmVyeSBwYXJ0aWN1bGFyICovXG4gIH1cbn1cblxuRXhjZXB0aW9uLnByb3RvdHlwZSA9IG5ldyBFcnJvcigpO1xuXG5leHBvcnQgZGVmYXVsdCBFeGNlcHRpb247XG4iXX0=


/***/ }),

/***/ 32423:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


exports.__esModule = true;
exports.registerDefaultHelpers = registerDefaultHelpers;
exports.moveHelperToHooks = moveHelperToHooks;
// istanbul ignore next

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _helpersBlockHelperMissing = __webpack_require__(54920);

var _helpersBlockHelperMissing2 = _interopRequireDefault(_helpersBlockHelperMissing);

var _helpersEach = __webpack_require__(56927);

var _helpersEach2 = _interopRequireDefault(_helpersEach);

var _helpersHelperMissing = __webpack_require__(70879);

var _helpersHelperMissing2 = _interopRequireDefault(_helpersHelperMissing);

var _helpersIf = __webpack_require__(1163);

var _helpersIf2 = _interopRequireDefault(_helpersIf);

var _helpersLog = __webpack_require__(11287);

var _helpersLog2 = _interopRequireDefault(_helpersLog);

var _helpersLookup = __webpack_require__(19141);

var _helpersLookup2 = _interopRequireDefault(_helpersLookup);

var _helpersWith = __webpack_require__(59030);

var _helpersWith2 = _interopRequireDefault(_helpersWith);

function registerDefaultHelpers(instance) {
  _helpersBlockHelperMissing2['default'](instance);
  _helpersEach2['default'](instance);
  _helpersHelperMissing2['default'](instance);
  _helpersIf2['default'](instance);
  _helpersLog2['default'](instance);
  _helpersLookup2['default'](instance);
  _helpersWith2['default'](instance);
}

function moveHelperToHooks(instance, helperName, keepHelper) {
  if (instance.helpers[helperName]) {
    instance.hooks[helperName] = instance.helpers[helperName];
    if (!keepHelper) {
      delete instance.helpers[helperName];
    }
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9oYW5kbGViYXJzL2hlbHBlcnMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O3lDQUF1QyxnQ0FBZ0M7Ozs7MkJBQzlDLGdCQUFnQjs7OztvQ0FDUCwwQkFBMEI7Ozs7eUJBQ3JDLGNBQWM7Ozs7MEJBQ2IsZUFBZTs7Ozs2QkFDWixrQkFBa0I7Ozs7MkJBQ3BCLGdCQUFnQjs7OztBQUVsQyxTQUFTLHNCQUFzQixDQUFDLFFBQVEsRUFBRTtBQUMvQyx5Q0FBMkIsUUFBUSxDQUFDLENBQUM7QUFDckMsMkJBQWEsUUFBUSxDQUFDLENBQUM7QUFDdkIsb0NBQXNCLFFBQVEsQ0FBQyxDQUFDO0FBQ2hDLHlCQUFXLFFBQVEsQ0FBQyxDQUFDO0FBQ3JCLDBCQUFZLFFBQVEsQ0FBQyxDQUFDO0FBQ3RCLDZCQUFlLFFBQVEsQ0FBQyxDQUFDO0FBQ3pCLDJCQUFhLFFBQVEsQ0FBQyxDQUFDO0NBQ3hCOztBQUVNLFNBQVMsaUJBQWlCLENBQUMsUUFBUSxFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQUU7QUFDbEUsTUFBSSxRQUFRLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxFQUFFO0FBQ2hDLFlBQVEsQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLEdBQUcsUUFBUSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQztBQUMxRCxRQUFJLENBQUMsVUFBVSxFQUFFO0FBQ2YsYUFBTyxRQUFRLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0tBQ3JDO0dBQ0Y7Q0FDRiIsImZpbGUiOiJoZWxwZXJzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHJlZ2lzdGVyQmxvY2tIZWxwZXJNaXNzaW5nIGZyb20gJy4vaGVscGVycy9ibG9jay1oZWxwZXItbWlzc2luZyc7XG5pbXBvcnQgcmVnaXN0ZXJFYWNoIGZyb20gJy4vaGVscGVycy9lYWNoJztcbmltcG9ydCByZWdpc3RlckhlbHBlck1pc3NpbmcgZnJvbSAnLi9oZWxwZXJzL2hlbHBlci1taXNzaW5nJztcbmltcG9ydCByZWdpc3RlcklmIGZyb20gJy4vaGVscGVycy9pZic7XG5pbXBvcnQgcmVnaXN0ZXJMb2cgZnJvbSAnLi9oZWxwZXJzL2xvZyc7XG5pbXBvcnQgcmVnaXN0ZXJMb29rdXAgZnJvbSAnLi9oZWxwZXJzL2xvb2t1cCc7XG5pbXBvcnQgcmVnaXN0ZXJXaXRoIGZyb20gJy4vaGVscGVycy93aXRoJztcblxuZXhwb3J0IGZ1bmN0aW9uIHJlZ2lzdGVyRGVmYXVsdEhlbHBlcnMoaW5zdGFuY2UpIHtcbiAgcmVnaXN0ZXJCbG9ja0hlbHBlck1pc3NpbmcoaW5zdGFuY2UpO1xuICByZWdpc3RlckVhY2goaW5zdGFuY2UpO1xuICByZWdpc3RlckhlbHBlck1pc3NpbmcoaW5zdGFuY2UpO1xuICByZWdpc3RlcklmKGluc3RhbmNlKTtcbiAgcmVnaXN0ZXJMb2coaW5zdGFuY2UpO1xuICByZWdpc3Rlckxvb2t1cChpbnN0YW5jZSk7XG4gIHJlZ2lzdGVyV2l0aChpbnN0YW5jZSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBtb3ZlSGVscGVyVG9Ib29rcyhpbnN0YW5jZSwgaGVscGVyTmFtZSwga2VlcEhlbHBlcikge1xuICBpZiAoaW5zdGFuY2UuaGVscGVyc1toZWxwZXJOYW1lXSkge1xuICAgIGluc3RhbmNlLmhvb2tzW2hlbHBlck5hbWVdID0gaW5zdGFuY2UuaGVscGVyc1toZWxwZXJOYW1lXTtcbiAgICBpZiAoIWtlZXBIZWxwZXIpIHtcbiAgICAgIGRlbGV0ZSBpbnN0YW5jZS5oZWxwZXJzW2hlbHBlck5hbWVdO1xuICAgIH1cbiAgfVxufVxuIl19


/***/ }),

/***/ 54920:
/***/ ((module, exports, __webpack_require__) => {

"use strict";


exports.__esModule = true;

var _utils = __webpack_require__(57471);

exports["default"] = function (instance) {
  instance.registerHelper('blockHelperMissing', function (context, options) {
    var inverse = options.inverse,
        fn = options.fn;

    if (context === true) {
      return fn(this);
    } else if (context === false || context == null) {
      return inverse(this);
    } else if (_utils.isArray(context)) {
      if (context.length > 0) {
        if (options.ids) {
          options.ids = [options.name];
        }

        return instance.helpers.each(context, options);
      } else {
        return inverse(this);
      }
    } else {
      if (options.data && options.ids) {
        var data = _utils.createFrame(options.data);
        data.contextPath = _utils.appendContextPath(options.data.contextPath, options.name);
        options = { data: data };
      }

      return fn(context, options);
    }
  });
};

module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2xpYi9oYW5kbGViYXJzL2hlbHBlcnMvYmxvY2staGVscGVyLW1pc3NpbmcuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztxQkFBd0QsVUFBVTs7cUJBRW5ELFVBQVMsUUFBUSxFQUFFO0FBQ2hDLFVBQVEsQ0FBQyxjQUFjLENBQUMsb0JBQW9CLEVBQUUsVUFBUyxPQUFPLEVBQUUsT0FBTyxFQUFFO0FBQ3ZFLFFBQUksT0FBTyxHQUFHLE9BQU8sQ0FBQyxPQUFPO1FBQzNCLEVBQUUsR0FBRyxPQUFPLENBQUMsRUFBRSxDQUFDOztBQUVsQixRQUFJLE9BQU8sS0FBSyxJQUFJLEVBQUU7QUFDcEIsYUFBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUM7S0FDakIsTUFBTSxJQUFJLE9BQU8sS0FBSyxLQUFLLElBQUksT0FBTyxJQUFJLElBQUksRUFBRTtBQUMvQyxhQUFPLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztLQUN0QixNQUFNLElBQUksZUFBUSxPQUFPLENBQUMsRUFBRTtBQUMzQixVQUFJLE9BQU8sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO0FBQ3RCLFlBQUksT0FBTyxDQUFDLEdBQUcsRUFBRTtBQUNmLGlCQUFPLENBQUMsR0FBRyxHQUFHLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQzlCOztBQUVELGVBQU8sUUFBUSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxDQUFDO09BQ2hELE1BQU07QUFDTCxlQUFPLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztPQUN0QjtLQUNGLE1BQU07QUFDTCxVQUFJLE9BQU8sQ0FBQyxJQUFJLElBQUksT0FBTyxDQUFDLEdBQUcsRUFBRTtBQUMvQixZQUFJLElBQUksR0FBRyxtQkFBWSxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDckMsWUFBSSxDQUFDLFdBQVcsR0FBRyx5QkFDakIsT0FBTyxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQ3hCLE9BQU8sQ0FBQyxJQUFJLENBQ2IsQ0FBQztBQUNGLGVBQU8sR0FBRyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsQ0FBQztPQUMxQjs7QUFFRCxhQUFPLEVBQUUsQ0FBQyxPQUFPLEVBQUUsT0FBTyxDQUFDLENBQUM7S0FDN0I7R0FDRixDQUFDLENBQUM7Q0FDSiIsImZpbGUiOiJibG9jay1oZWxwZXItbWlzc2luZy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGFwcGVuZENvbnRleHRQYXRoLCBjcmVhdGVGcmFtZSwgaXNBcnJheSB9IGZyb20gJy4uL3V0aWxzJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oaW5zdGFuY2UpIHtcbiAgaW5zdGFuY2UucmVnaXN0ZXJIZWxwZXIoJ2Jsb2NrSGVscGVyTWlzc2luZycsIGZ1bmN0aW9uKGNvbnRleHQsIG9wdGlvbnMpIHtcbiAgICBsZXQgaW52ZXJzZSA9IG9wdGlvbnMuaW52ZXJzZSxcbiAgICAgIGZuID0gb3B0aW9ucy5mbjtcblxuICAgIGlmIChjb250ZXh0ID09PSB0cnVlKSB7XG4gICAgICByZXR1cm4gZm4odGhpcyk7XG4gICAgfSBlbHNlIGlmIChjb250ZXh0ID09PSBmYWxzZSB8fCBjb250ZXh0ID09IG51bGwpIHtcbiAgICAgIHJldHVybiBpbnZlcnNlKHRoaXMpO1xuICAgIH0gZWxzZSBpZiAoaXNBcnJheShjb250ZXh0KSkge1xuICAgICAgaWYgKGNvbnRleHQubGVuZ3RoID4gMCkge1xuICAgICAgICBpZiAob3B0aW9ucy5pZHMpIHtcbiAgICAgICAgICBvcHRpb25zLmlkcyA9IFtvcHRpb25zLm5hbWVdO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGluc3RhbmNlLmhlbHBlcnMuZWFjaChjb250ZXh0LCBvcHRpb25zKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBpbnZlcnNlKHRoaXMpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAob3B0aW9ucy5kYXRhICYmIG9wdGlvbnMuaWRzKSB7XG4gICAgICAgIGxldCBkYXRhID0gY3JlYXRlRnJhbWUob3B0aW9ucy5kYXRhKTtcbiAgICAgICAgZGF0YS5jb250ZXh0UGF0aCA9IGFwcGVuZENvbnRleHRQYXRoKFxuICAgICAgICAgIG9wdGlvbnMuZGF0YS5jb250ZXh0UGF0aCxcbiAgICAgICAgICBvcHRpb25zLm5hbWVcbiAgICAgICAgKTtcbiAgICAgICAgb3B0aW9ucyA9IHsgZGF0YTogZGF0YSB9O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZm4oY29udGV4dCwgb3B0aW9ucyk7XG4gICAgfVxuICB9KTtcbn1cbiJdfQ==


/***/ }),

/***/ 56927:
/***/ ((module, exports, __webpack_require__) => {

"use strict";


exports.__esModule = true;
// istanbul ignore next

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _utils = __webpack_require__(57471);

var _exception = __webpack_require__(3403);

var _exception2 = _interopRequireDefault(_exception);

exports["default"] = function (instance) {
  instance.registerHelper('each', function (context, options) {
    if (!options) {
      throw new _exception2['default']('Must pass iterator to #each');
    }

    var fn = options.fn,
        inverse = options.inverse,
        i = 0,
        ret = '',
        data = undefined,
        contextPath = undefined;

    if (options.data && options.ids) {
      contextPath = _utils.appendContextPath(options.data.contextPath, options.ids[0]) + '.';
    }

    if (_utils.isFunction(context)) {
      context = context.call(this);
    }

    if (options.data) {
      data = _utils.createFrame(options.data);
    }

    function execIteration(field, index, last) {
      if (data) {
        data.key = field;
        data.index = index;
        data.first = index === 0;
        data.last = !!last;

        if (contextPath) {
          data.contextPath = contextPath + field;
        }
      }

      ret = ret + fn(context[field], {
        data: data,
        blockParams: _utils.blockParams([context[field], field], [contextPath + field, null])
      });
    }

    if (context && typeof context === 'object') {
      if (_utils.isArray(context)) {
        for (var j = context.length; i < j; i++) {
          if (i in context) {
            execIteration(i, i, i === context.length - 1);
          }
        }
      } else if (global.Symbol && context[global.Symbol.iterator]) {
        var newContext = [];
        var iterator = context[global.Symbol.iterator]();
        for (var it = iterator.next(); !it.done; it = iterator.next()) {
          newContext.push(it.value);
        }
        context = newContext;
        for (var j = context.length; i < j; i++) {
          execIteration(i, i, i === context.length - 1);
        }
      } else {
        (function () {
          var priorKey = undefined;

          Object.keys(context).forEach(function (key) {
            // We're running the iterations one step out of sync so we can detect
            // the last iteration without have to scan the object twice and create
            // an itermediate keys array.
            if (priorKey !== undefined) {
              execIteration(priorKey, i - 1);
            }
            priorKey = key;
            i++;
          });
          if (priorKey !== undefined) {
            execIteration(priorKey, i - 1, true);
          }
        })();
      }
    }

    if (i === 0) {
      ret = inverse(this);
    }

    return ret;
  });
};

module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2xpYi9oYW5kbGViYXJzL2hlbHBlcnMvZWFjaC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7O3FCQU1PLFVBQVU7O3lCQUNLLGNBQWM7Ozs7cUJBRXJCLFVBQVMsUUFBUSxFQUFFO0FBQ2hDLFVBQVEsQ0FBQyxjQUFjLENBQUMsTUFBTSxFQUFFLFVBQVMsT0FBTyxFQUFFLE9BQU8sRUFBRTtBQUN6RCxRQUFJLENBQUMsT0FBTyxFQUFFO0FBQ1osWUFBTSwyQkFBYyw2QkFBNkIsQ0FBQyxDQUFDO0tBQ3BEOztBQUVELFFBQUksRUFBRSxHQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQ2pCLE9BQU8sR0FBRyxPQUFPLENBQUMsT0FBTztRQUN6QixDQUFDLEdBQUcsQ0FBQztRQUNMLEdBQUcsR0FBRyxFQUFFO1FBQ1IsSUFBSSxZQUFBO1FBQ0osV0FBVyxZQUFBLENBQUM7O0FBRWQsUUFBSSxPQUFPLENBQUMsSUFBSSxJQUFJLE9BQU8sQ0FBQyxHQUFHLEVBQUU7QUFDL0IsaUJBQVcsR0FDVCx5QkFBa0IsT0FBTyxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQztLQUNyRTs7QUFFRCxRQUFJLGtCQUFXLE9BQU8sQ0FBQyxFQUFFO0FBQ3ZCLGFBQU8sR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0tBQzlCOztBQUVELFFBQUksT0FBTyxDQUFDLElBQUksRUFBRTtBQUNoQixVQUFJLEdBQUcsbUJBQVksT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO0tBQ2xDOztBQUVELGFBQVMsYUFBYSxDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFO0FBQ3pDLFVBQUksSUFBSSxFQUFFO0FBQ1IsWUFBSSxDQUFDLEdBQUcsR0FBRyxLQUFLLENBQUM7QUFDakIsWUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7QUFDbkIsWUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLEtBQUssQ0FBQyxDQUFDO0FBQ3pCLFlBQUksQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQzs7QUFFbkIsWUFBSSxXQUFXLEVBQUU7QUFDZixjQUFJLENBQUMsV0FBVyxHQUFHLFdBQVcsR0FBRyxLQUFLLENBQUM7U0FDeEM7T0FDRjs7QUFFRCxTQUFHLEdBQ0QsR0FBRyxHQUNILEVBQUUsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEVBQUU7QUFDakIsWUFBSSxFQUFFLElBQUk7QUFDVixtQkFBVyxFQUFFLG1CQUNYLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUFFLEtBQUssQ0FBQyxFQUN2QixDQUFDLFdBQVcsR0FBRyxLQUFLLEVBQUUsSUFBSSxDQUFDLENBQzVCO09BQ0YsQ0FBQyxDQUFDO0tBQ047O0FBRUQsUUFBSSxPQUFPLElBQUksT0FBTyxPQUFPLEtBQUssUUFBUSxFQUFFO0FBQzFDLFVBQUksZUFBUSxPQUFPLENBQUMsRUFBRTtBQUNwQixhQUFLLElBQUksQ0FBQyxHQUFHLE9BQU8sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRTtBQUN2QyxjQUFJLENBQUMsSUFBSSxPQUFPLEVBQUU7QUFDaEIseUJBQWEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsS0FBSyxPQUFPLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDO1dBQy9DO1NBQ0Y7T0FDRixNQUFNLElBQUksTUFBTSxDQUFDLE1BQU0sSUFBSSxPQUFPLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsRUFBRTtBQUMzRCxZQUFNLFVBQVUsR0FBRyxFQUFFLENBQUM7QUFDdEIsWUFBTSxRQUFRLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQztBQUNuRCxhQUFLLElBQUksRUFBRSxHQUFHLFFBQVEsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxJQUFJLEVBQUUsRUFBRSxHQUFHLFFBQVEsQ0FBQyxJQUFJLEVBQUUsRUFBRTtBQUM3RCxvQkFBVSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDM0I7QUFDRCxlQUFPLEdBQUcsVUFBVSxDQUFDO0FBQ3JCLGFBQUssSUFBSSxDQUFDLEdBQUcsT0FBTyxDQUFDLE1BQU0sRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFO0FBQ3ZDLHVCQUFhLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEtBQUssT0FBTyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQztTQUMvQztPQUNGLE1BQU07O0FBQ0wsY0FBSSxRQUFRLFlBQUEsQ0FBQzs7QUFFYixnQkFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxPQUFPLENBQUMsVUFBQSxHQUFHLEVBQUk7Ozs7QUFJbEMsZ0JBQUksUUFBUSxLQUFLLFNBQVMsRUFBRTtBQUMxQiwyQkFBYSxDQUFDLFFBQVEsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7YUFDaEM7QUFDRCxvQkFBUSxHQUFHLEdBQUcsQ0FBQztBQUNmLGFBQUMsRUFBRSxDQUFDO1dBQ0wsQ0FBQyxDQUFDO0FBQ0gsY0FBSSxRQUFRLEtBQUssU0FBUyxFQUFFO0FBQzFCLHlCQUFhLENBQUMsUUFBUSxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUM7V0FDdEM7O09BQ0Y7S0FDRjs7QUFFRCxRQUFJLENBQUMsS0FBSyxDQUFDLEVBQUU7QUFDWCxTQUFHLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO0tBQ3JCOztBQUVELFdBQU8sR0FBRyxDQUFDO0dBQ1osQ0FBQyxDQUFDO0NBQ0oiLCJmaWxlIjoiZWFjaC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIGFwcGVuZENvbnRleHRQYXRoLFxuICBibG9ja1BhcmFtcyxcbiAgY3JlYXRlRnJhbWUsXG4gIGlzQXJyYXksXG4gIGlzRnVuY3Rpb25cbn0gZnJvbSAnLi4vdXRpbHMnO1xuaW1wb3J0IEV4Y2VwdGlvbiBmcm9tICcuLi9leGNlcHRpb24nO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihpbnN0YW5jZSkge1xuICBpbnN0YW5jZS5yZWdpc3RlckhlbHBlcignZWFjaCcsIGZ1bmN0aW9uKGNvbnRleHQsIG9wdGlvbnMpIHtcbiAgICBpZiAoIW9wdGlvbnMpIHtcbiAgICAgIHRocm93IG5ldyBFeGNlcHRpb24oJ011c3QgcGFzcyBpdGVyYXRvciB0byAjZWFjaCcpO1xuICAgIH1cblxuICAgIGxldCBmbiA9IG9wdGlvbnMuZm4sXG4gICAgICBpbnZlcnNlID0gb3B0aW9ucy5pbnZlcnNlLFxuICAgICAgaSA9IDAsXG4gICAgICByZXQgPSAnJyxcbiAgICAgIGRhdGEsXG4gICAgICBjb250ZXh0UGF0aDtcblxuICAgIGlmIChvcHRpb25zLmRhdGEgJiYgb3B0aW9ucy5pZHMpIHtcbiAgICAgIGNvbnRleHRQYXRoID1cbiAgICAgICAgYXBwZW5kQ29udGV4dFBhdGgob3B0aW9ucy5kYXRhLmNvbnRleHRQYXRoLCBvcHRpb25zLmlkc1swXSkgKyAnLic7XG4gICAgfVxuXG4gICAgaWYgKGlzRnVuY3Rpb24oY29udGV4dCkpIHtcbiAgICAgIGNvbnRleHQgPSBjb250ZXh0LmNhbGwodGhpcyk7XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMuZGF0YSkge1xuICAgICAgZGF0YSA9IGNyZWF0ZUZyYW1lKG9wdGlvbnMuZGF0YSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZXhlY0l0ZXJhdGlvbihmaWVsZCwgaW5kZXgsIGxhc3QpIHtcbiAgICAgIGlmIChkYXRhKSB7XG4gICAgICAgIGRhdGEua2V5ID0gZmllbGQ7XG4gICAgICAgIGRhdGEuaW5kZXggPSBpbmRleDtcbiAgICAgICAgZGF0YS5maXJzdCA9IGluZGV4ID09PSAwO1xuICAgICAgICBkYXRhLmxhc3QgPSAhIWxhc3Q7XG5cbiAgICAgICAgaWYgKGNvbnRleHRQYXRoKSB7XG4gICAgICAgICAgZGF0YS5jb250ZXh0UGF0aCA9IGNvbnRleHRQYXRoICsgZmllbGQ7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0ID1cbiAgICAgICAgcmV0ICtcbiAgICAgICAgZm4oY29udGV4dFtmaWVsZF0sIHtcbiAgICAgICAgICBkYXRhOiBkYXRhLFxuICAgICAgICAgIGJsb2NrUGFyYW1zOiBibG9ja1BhcmFtcyhcbiAgICAgICAgICAgIFtjb250ZXh0W2ZpZWxkXSwgZmllbGRdLFxuICAgICAgICAgICAgW2NvbnRleHRQYXRoICsgZmllbGQsIG51bGxdXG4gICAgICAgICAgKVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAoY29udGV4dCAmJiB0eXBlb2YgY29udGV4dCA9PT0gJ29iamVjdCcpIHtcbiAgICAgIGlmIChpc0FycmF5KGNvbnRleHQpKSB7XG4gICAgICAgIGZvciAobGV0IGogPSBjb250ZXh0Lmxlbmd0aDsgaSA8IGo7IGkrKykge1xuICAgICAgICAgIGlmIChpIGluIGNvbnRleHQpIHtcbiAgICAgICAgICAgIGV4ZWNJdGVyYXRpb24oaSwgaSwgaSA9PT0gY29udGV4dC5sZW5ndGggLSAxKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoZ2xvYmFsLlN5bWJvbCAmJiBjb250ZXh0W2dsb2JhbC5TeW1ib2wuaXRlcmF0b3JdKSB7XG4gICAgICAgIGNvbnN0IG5ld0NvbnRleHQgPSBbXTtcbiAgICAgICAgY29uc3QgaXRlcmF0b3IgPSBjb250ZXh0W2dsb2JhbC5TeW1ib2wuaXRlcmF0b3JdKCk7XG4gICAgICAgIGZvciAobGV0IGl0ID0gaXRlcmF0b3IubmV4dCgpOyAhaXQuZG9uZTsgaXQgPSBpdGVyYXRvci5uZXh0KCkpIHtcbiAgICAgICAgICBuZXdDb250ZXh0LnB1c2goaXQudmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnRleHQgPSBuZXdDb250ZXh0O1xuICAgICAgICBmb3IgKGxldCBqID0gY29udGV4dC5sZW5ndGg7IGkgPCBqOyBpKyspIHtcbiAgICAgICAgICBleGVjSXRlcmF0aW9uKGksIGksIGkgPT09IGNvbnRleHQubGVuZ3RoIC0gMSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxldCBwcmlvcktleTtcblxuICAgICAgICBPYmplY3Qua2V5cyhjb250ZXh0KS5mb3JFYWNoKGtleSA9PiB7XG4gICAgICAgICAgLy8gV2UncmUgcnVubmluZyB0aGUgaXRlcmF0aW9ucyBvbmUgc3RlcCBvdXQgb2Ygc3luYyBzbyB3ZSBjYW4gZGV0ZWN0XG4gICAgICAgICAgLy8gdGhlIGxhc3QgaXRlcmF0aW9uIHdpdGhvdXQgaGF2ZSB0byBzY2FuIHRoZSBvYmplY3QgdHdpY2UgYW5kIGNyZWF0ZVxuICAgICAgICAgIC8vIGFuIGl0ZXJtZWRpYXRlIGtleXMgYXJyYXkuXG4gICAgICAgICAgaWYgKHByaW9yS2V5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGV4ZWNJdGVyYXRpb24ocHJpb3JLZXksIGkgLSAxKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcHJpb3JLZXkgPSBrZXk7XG4gICAgICAgICAgaSsrO1xuICAgICAgICB9KTtcbiAgICAgICAgaWYgKHByaW9yS2V5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBleGVjSXRlcmF0aW9uKHByaW9yS2V5LCBpIC0gMSwgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoaSA9PT0gMCkge1xuICAgICAgcmV0ID0gaW52ZXJzZSh0aGlzKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmV0O1xuICB9KTtcbn1cbiJdfQ==


/***/ }),

/***/ 70879:
/***/ ((module, exports, __webpack_require__) => {

"use strict";


exports.__esModule = true;
// istanbul ignore next

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _exception = __webpack_require__(3403);

var _exception2 = _interopRequireDefault(_exception);

exports["default"] = function (instance) {
  instance.registerHelper('helperMissing', function () /* [args, ]options */{
    if (arguments.length === 1) {
      // A missing field in a {{foo}} construct.
      return undefined;
    } else {
      // Someone is actually trying to call something, blow up.
      throw new _exception2['default']('Missing helper: "' + arguments[arguments.length - 1].name + '"');
    }
  });
};

module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2xpYi9oYW5kbGViYXJzL2hlbHBlcnMvaGVscGVyLW1pc3NpbmcuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozt5QkFBc0IsY0FBYzs7OztxQkFFckIsVUFBUyxRQUFRLEVBQUU7QUFDaEMsVUFBUSxDQUFDLGNBQWMsQ0FBQyxlQUFlLEVBQUUsaUNBQWdDO0FBQ3ZFLFFBQUksU0FBUyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7O0FBRTFCLGFBQU8sU0FBUyxDQUFDO0tBQ2xCLE1BQU07O0FBRUwsWUFBTSwyQkFDSixtQkFBbUIsR0FBRyxTQUFTLENBQUMsU0FBUyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxJQUFJLEdBQUcsR0FBRyxDQUNqRSxDQUFDO0tBQ0g7R0FDRixDQUFDLENBQUM7Q0FDSiIsImZpbGUiOiJoZWxwZXItbWlzc2luZy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBFeGNlcHRpb24gZnJvbSAnLi4vZXhjZXB0aW9uJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oaW5zdGFuY2UpIHtcbiAgaW5zdGFuY2UucmVnaXN0ZXJIZWxwZXIoJ2hlbHBlck1pc3NpbmcnLCBmdW5jdGlvbigvKiBbYXJncywgXW9wdGlvbnMgKi8pIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgLy8gQSBtaXNzaW5nIGZpZWxkIGluIGEge3tmb299fSBjb25zdHJ1Y3QuXG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBTb21lb25lIGlzIGFjdHVhbGx5IHRyeWluZyB0byBjYWxsIHNvbWV0aGluZywgYmxvdyB1cC5cbiAgICAgIHRocm93IG5ldyBFeGNlcHRpb24oXG4gICAgICAgICdNaXNzaW5nIGhlbHBlcjogXCInICsgYXJndW1lbnRzW2FyZ3VtZW50cy5sZW5ndGggLSAxXS5uYW1lICsgJ1wiJ1xuICAgICAgKTtcbiAgICB9XG4gIH0pO1xufVxuIl19


/***/ }),

/***/ 1163:
/***/ ((module, exports, __webpack_require__) => {

"use strict";


exports.__esModule = true;
// istanbul ignore next

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _utils = __webpack_require__(57471);

var _exception = __webpack_require__(3403);

var _exception2 = _interopRequireDefault(_exception);

exports["default"] = function (instance) {
  instance.registerHelper('if', function (conditional, options) {
    if (arguments.length != 2) {
      throw new _exception2['default']('#if requires exactly one argument');
    }
    if (_utils.isFunction(conditional)) {
      conditional = conditional.call(this);
    }

    // Default behavior is to render the positive path if the value is truthy and not empty.
    // The `includeZero` option may be set to treat the condtional as purely not empty based on the
    // behavior of isEmpty. Effectively this determines if 0 is handled by the positive path or negative.
    if (!options.hash.includeZero && !conditional || _utils.isEmpty(conditional)) {
      return options.inverse(this);
    } else {
      return options.fn(this);
    }
  });

  instance.registerHelper('unless', function (conditional, options) {
    if (arguments.length != 2) {
      throw new _exception2['default']('#unless requires exactly one argument');
    }
    return instance.helpers['if'].call(this, conditional, {
      fn: options.inverse,
      inverse: options.fn,
      hash: options.hash
    });
  });
};

module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2xpYi9oYW5kbGViYXJzL2hlbHBlcnMvaWYuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7OztxQkFBb0MsVUFBVTs7eUJBQ3hCLGNBQWM7Ozs7cUJBRXJCLFVBQVMsUUFBUSxFQUFFO0FBQ2hDLFVBQVEsQ0FBQyxjQUFjLENBQUMsSUFBSSxFQUFFLFVBQVMsV0FBVyxFQUFFLE9BQU8sRUFBRTtBQUMzRCxRQUFJLFNBQVMsQ0FBQyxNQUFNLElBQUksQ0FBQyxFQUFFO0FBQ3pCLFlBQU0sMkJBQWMsbUNBQW1DLENBQUMsQ0FBQztLQUMxRDtBQUNELFFBQUksa0JBQVcsV0FBVyxDQUFDLEVBQUU7QUFDM0IsaUJBQVcsR0FBRyxXQUFXLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0tBQ3RDOzs7OztBQUtELFFBQUksQUFBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsV0FBVyxJQUFJLENBQUMsV0FBVyxJQUFLLGVBQVEsV0FBVyxDQUFDLEVBQUU7QUFDdkUsYUFBTyxPQUFPLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO0tBQzlCLE1BQU07QUFDTCxhQUFPLE9BQU8sQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUM7S0FDekI7R0FDRixDQUFDLENBQUM7O0FBRUgsVUFBUSxDQUFDLGNBQWMsQ0FBQyxRQUFRLEVBQUUsVUFBUyxXQUFXLEVBQUUsT0FBTyxFQUFFO0FBQy9ELFFBQUksU0FBUyxDQUFDLE1BQU0sSUFBSSxDQUFDLEVBQUU7QUFDekIsWUFBTSwyQkFBYyx1Q0FBdUMsQ0FBQyxDQUFDO0tBQzlEO0FBQ0QsV0FBTyxRQUFRLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsV0FBVyxFQUFFO0FBQ3BELFFBQUUsRUFBRSxPQUFPLENBQUMsT0FBTztBQUNuQixhQUFPLEVBQUUsT0FBTyxDQUFDLEVBQUU7QUFDbkIsVUFBSSxFQUFFLE9BQU8sQ0FBQyxJQUFJO0tBQ25CLENBQUMsQ0FBQztHQUNKLENBQUMsQ0FBQztDQUNKIiwiZmlsZSI6ImlmLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaXNFbXB0eSwgaXNGdW5jdGlvbiB9IGZyb20gJy4uL3V0aWxzJztcbmltcG9ydCBFeGNlcHRpb24gZnJvbSAnLi4vZXhjZXB0aW9uJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oaW5zdGFuY2UpIHtcbiAgaW5zdGFuY2UucmVnaXN0ZXJIZWxwZXIoJ2lmJywgZnVuY3Rpb24oY29uZGl0aW9uYWwsIG9wdGlvbnMpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCAhPSAyKSB7XG4gICAgICB0aHJvdyBuZXcgRXhjZXB0aW9uKCcjaWYgcmVxdWlyZXMgZXhhY3RseSBvbmUgYXJndW1lbnQnKTtcbiAgICB9XG4gICAgaWYgKGlzRnVuY3Rpb24oY29uZGl0aW9uYWwpKSB7XG4gICAgICBjb25kaXRpb25hbCA9IGNvbmRpdGlvbmFsLmNhbGwodGhpcyk7XG4gICAgfVxuXG4gICAgLy8gRGVmYXVsdCBiZWhhdmlvciBpcyB0byByZW5kZXIgdGhlIHBvc2l0aXZlIHBhdGggaWYgdGhlIHZhbHVlIGlzIHRydXRoeSBhbmQgbm90IGVtcHR5LlxuICAgIC8vIFRoZSBgaW5jbHVkZVplcm9gIG9wdGlvbiBtYXkgYmUgc2V0IHRvIHRyZWF0IHRoZSBjb25kdGlvbmFsIGFzIHB1cmVseSBub3QgZW1wdHkgYmFzZWQgb24gdGhlXG4gICAgLy8gYmVoYXZpb3Igb2YgaXNFbXB0eS4gRWZmZWN0aXZlbHkgdGhpcyBkZXRlcm1pbmVzIGlmIDAgaXMgaGFuZGxlZCBieSB0aGUgcG9zaXRpdmUgcGF0aCBvciBuZWdhdGl2ZS5cbiAgICBpZiAoKCFvcHRpb25zLmhhc2guaW5jbHVkZVplcm8gJiYgIWNvbmRpdGlvbmFsKSB8fCBpc0VtcHR5KGNvbmRpdGlvbmFsKSkge1xuICAgICAgcmV0dXJuIG9wdGlvbnMuaW52ZXJzZSh0aGlzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG9wdGlvbnMuZm4odGhpcyk7XG4gICAgfVxuICB9KTtcblxuICBpbnN0YW5jZS5yZWdpc3RlckhlbHBlcigndW5sZXNzJywgZnVuY3Rpb24oY29uZGl0aW9uYWwsIG9wdGlvbnMpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCAhPSAyKSB7XG4gICAgICB0aHJvdyBuZXcgRXhjZXB0aW9uKCcjdW5sZXNzIHJlcXVpcmVzIGV4YWN0bHkgb25lIGFyZ3VtZW50Jyk7XG4gICAgfVxuICAgIHJldHVybiBpbnN0YW5jZS5oZWxwZXJzWydpZiddLmNhbGwodGhpcywgY29uZGl0aW9uYWwsIHtcbiAgICAgIGZuOiBvcHRpb25zLmludmVyc2UsXG4gICAgICBpbnZlcnNlOiBvcHRpb25zLmZuLFxuICAgICAgaGFzaDogb3B0aW9ucy5oYXNoXG4gICAgfSk7XG4gIH0pO1xufVxuIl19


/***/ }),

/***/ 11287:
/***/ ((module, exports) => {

"use strict";


exports.__esModule = true;

exports["default"] = function (instance) {
  instance.registerHelper('log', function () /* message, options */{
    var args = [undefined],
        options = arguments[arguments.length - 1];
    for (var i = 0; i < arguments.length - 1; i++) {
      args.push(arguments[i]);
    }

    var level = 1;
    if (options.hash.level != null) {
      level = options.hash.level;
    } else if (options.data && options.data.level != null) {
      level = options.data.level;
    }
    args[0] = level;

    instance.log.apply(instance, args);
  });
};

module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2xpYi9oYW5kbGViYXJzL2hlbHBlcnMvbG9nLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7cUJBQWUsVUFBUyxRQUFRLEVBQUU7QUFDaEMsVUFBUSxDQUFDLGNBQWMsQ0FBQyxLQUFLLEVBQUUsa0NBQWlDO0FBQzlELFFBQUksSUFBSSxHQUFHLENBQUMsU0FBUyxDQUFDO1FBQ3BCLE9BQU8sR0FBRyxTQUFTLENBQUMsU0FBUyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQztBQUM1QyxTQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsU0FBUyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUU7QUFDN0MsVUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztLQUN6Qjs7QUFFRCxRQUFJLEtBQUssR0FBRyxDQUFDLENBQUM7QUFDZCxRQUFJLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxJQUFJLElBQUksRUFBRTtBQUM5QixXQUFLLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUM7S0FDNUIsTUFBTSxJQUFJLE9BQU8sQ0FBQyxJQUFJLElBQUksT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLElBQUksSUFBSSxFQUFFO0FBQ3JELFdBQUssR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQztLQUM1QjtBQUNELFFBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUM7O0FBRWhCLFlBQVEsQ0FBQyxHQUFHLE1BQUEsQ0FBWixRQUFRLEVBQVEsSUFBSSxDQUFDLENBQUM7R0FDdkIsQ0FBQyxDQUFDO0NBQ0oiLCJmaWxlIjoibG9nLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oaW5zdGFuY2UpIHtcbiAgaW5zdGFuY2UucmVnaXN0ZXJIZWxwZXIoJ2xvZycsIGZ1bmN0aW9uKC8qIG1lc3NhZ2UsIG9wdGlvbnMgKi8pIHtcbiAgICBsZXQgYXJncyA9IFt1bmRlZmluZWRdLFxuICAgICAgb3B0aW9ucyA9IGFyZ3VtZW50c1thcmd1bWVudHMubGVuZ3RoIC0gMV07XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoIC0gMTsgaSsrKSB7XG4gICAgICBhcmdzLnB1c2goYXJndW1lbnRzW2ldKTtcbiAgICB9XG5cbiAgICBsZXQgbGV2ZWwgPSAxO1xuICAgIGlmIChvcHRpb25zLmhhc2gubGV2ZWwgIT0gbnVsbCkge1xuICAgICAgbGV2ZWwgPSBvcHRpb25zLmhhc2gubGV2ZWw7XG4gICAgfSBlbHNlIGlmIChvcHRpb25zLmRhdGEgJiYgb3B0aW9ucy5kYXRhLmxldmVsICE9IG51bGwpIHtcbiAgICAgIGxldmVsID0gb3B0aW9ucy5kYXRhLmxldmVsO1xuICAgIH1cbiAgICBhcmdzWzBdID0gbGV2ZWw7XG5cbiAgICBpbnN0YW5jZS5sb2coLi4uYXJncyk7XG4gIH0pO1xufVxuIl19


/***/ }),

/***/ 19141:
/***/ ((module, exports) => {

"use strict";


exports.__esModule = true;

exports["default"] = function (instance) {
  instance.registerHelper('lookup', function (obj, field, options) {
    if (!obj) {
      // Note for 5.0: Change to "obj == null" in 5.0
      return obj;
    }
    return options.lookupProperty(obj, field);
  });
};

module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2xpYi9oYW5kbGViYXJzL2hlbHBlcnMvbG9va3VwLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7cUJBQWUsVUFBUyxRQUFRLEVBQUU7QUFDaEMsVUFBUSxDQUFDLGNBQWMsQ0FBQyxRQUFRLEVBQUUsVUFBUyxHQUFHLEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBRTtBQUM5RCxRQUFJLENBQUMsR0FBRyxFQUFFOztBQUVSLGFBQU8sR0FBRyxDQUFDO0tBQ1o7QUFDRCxXQUFPLE9BQU8sQ0FBQyxjQUFjLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxDQUFDO0dBQzNDLENBQUMsQ0FBQztDQUNKIiwiZmlsZSI6Imxvb2t1cC5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGluc3RhbmNlKSB7XG4gIGluc3RhbmNlLnJlZ2lzdGVySGVscGVyKCdsb29rdXAnLCBmdW5jdGlvbihvYmosIGZpZWxkLCBvcHRpb25zKSB7XG4gICAgaWYgKCFvYmopIHtcbiAgICAgIC8vIE5vdGUgZm9yIDUuMDogQ2hhbmdlIHRvIFwib2JqID09IG51bGxcIiBpbiA1LjBcbiAgICAgIHJldHVybiBvYmo7XG4gICAgfVxuICAgIHJldHVybiBvcHRpb25zLmxvb2t1cFByb3BlcnR5KG9iaiwgZmllbGQpO1xuICB9KTtcbn1cbiJdfQ==


/***/ }),

/***/ 59030:
/***/ ((module, exports, __webpack_require__) => {

"use strict";


exports.__esModule = true;
// istanbul ignore next

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _utils = __webpack_require__(57471);

var _exception = __webpack_require__(3403);

var _exception2 = _interopRequireDefault(_exception);

exports["default"] = function (instance) {
  instance.registerHelper('with', function (context, options) {
    if (arguments.length != 2) {
      throw new _exception2['default']('#with requires exactly one argument');
    }
    if (_utils.isFunction(context)) {
      context = context.call(this);
    }

    var fn = options.fn;

    if (!_utils.isEmpty(context)) {
      var data = options.data;
      if (options.data && options.ids) {
        data = _utils.createFrame(options.data);
        data.contextPath = _utils.appendContextPath(options.data.contextPath, options.ids[0]);
      }

      return fn(context, {
        data: data,
        blockParams: _utils.blockParams([context], [data && data.contextPath])
      });
    } else {
      return options.inverse(this);
    }
  });
};

module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2xpYi9oYW5kbGViYXJzL2hlbHBlcnMvd2l0aC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7O3FCQU1PLFVBQVU7O3lCQUNLLGNBQWM7Ozs7cUJBRXJCLFVBQVMsUUFBUSxFQUFFO0FBQ2hDLFVBQVEsQ0FBQyxjQUFjLENBQUMsTUFBTSxFQUFFLFVBQVMsT0FBTyxFQUFFLE9BQU8sRUFBRTtBQUN6RCxRQUFJLFNBQVMsQ0FBQyxNQUFNLElBQUksQ0FBQyxFQUFFO0FBQ3pCLFlBQU0sMkJBQWMscUNBQXFDLENBQUMsQ0FBQztLQUM1RDtBQUNELFFBQUksa0JBQVcsT0FBTyxDQUFDLEVBQUU7QUFDdkIsYUFBTyxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7S0FDOUI7O0FBRUQsUUFBSSxFQUFFLEdBQUcsT0FBTyxDQUFDLEVBQUUsQ0FBQzs7QUFFcEIsUUFBSSxDQUFDLGVBQVEsT0FBTyxDQUFDLEVBQUU7QUFDckIsVUFBSSxJQUFJLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQztBQUN4QixVQUFJLE9BQU8sQ0FBQyxJQUFJLElBQUksT0FBTyxDQUFDLEdBQUcsRUFBRTtBQUMvQixZQUFJLEdBQUcsbUJBQVksT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ2pDLFlBQUksQ0FBQyxXQUFXLEdBQUcseUJBQ2pCLE9BQU8sQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUN4QixPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUNmLENBQUM7T0FDSDs7QUFFRCxhQUFPLEVBQUUsQ0FBQyxPQUFPLEVBQUU7QUFDakIsWUFBSSxFQUFFLElBQUk7QUFDVixtQkFBVyxFQUFFLG1CQUFZLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO09BQ2hFLENBQUMsQ0FBQztLQUNKLE1BQU07QUFDTCxhQUFPLE9BQU8sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7S0FDOUI7R0FDRixDQUFDLENBQUM7Q0FDSiIsImZpbGUiOiJ3aXRoLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgYXBwZW5kQ29udGV4dFBhdGgsXG4gIGJsb2NrUGFyYW1zLFxuICBjcmVhdGVGcmFtZSxcbiAgaXNFbXB0eSxcbiAgaXNGdW5jdGlvblxufSBmcm9tICcuLi91dGlscyc7XG5pbXBvcnQgRXhjZXB0aW9uIGZyb20gJy4uL2V4Y2VwdGlvbic7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGluc3RhbmNlKSB7XG4gIGluc3RhbmNlLnJlZ2lzdGVySGVscGVyKCd3aXRoJywgZnVuY3Rpb24oY29udGV4dCwgb3B0aW9ucykge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoICE9IDIpIHtcbiAgICAgIHRocm93IG5ldyBFeGNlcHRpb24oJyN3aXRoIHJlcXVpcmVzIGV4YWN0bHkgb25lIGFyZ3VtZW50Jyk7XG4gICAgfVxuICAgIGlmIChpc0Z1bmN0aW9uKGNvbnRleHQpKSB7XG4gICAgICBjb250ZXh0ID0gY29udGV4dC5jYWxsKHRoaXMpO1xuICAgIH1cblxuICAgIGxldCBmbiA9IG9wdGlvbnMuZm47XG5cbiAgICBpZiAoIWlzRW1wdHkoY29udGV4dCkpIHtcbiAgICAgIGxldCBkYXRhID0gb3B0aW9ucy5kYXRhO1xuICAgICAgaWYgKG9wdGlvbnMuZGF0YSAmJiBvcHRpb25zLmlkcykge1xuICAgICAgICBkYXRhID0gY3JlYXRlRnJhbWUob3B0aW9ucy5kYXRhKTtcbiAgICAgICAgZGF0YS5jb250ZXh0UGF0aCA9IGFwcGVuZENvbnRleHRQYXRoKFxuICAgICAgICAgIG9wdGlvbnMuZGF0YS5jb250ZXh0UGF0aCxcbiAgICAgICAgICBvcHRpb25zLmlkc1swXVxuICAgICAgICApO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZm4oY29udGV4dCwge1xuICAgICAgICBkYXRhOiBkYXRhLFxuICAgICAgICBibG9ja1BhcmFtczogYmxvY2tQYXJhbXMoW2NvbnRleHRdLCBbZGF0YSAmJiBkYXRhLmNvbnRleHRQYXRoXSlcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gb3B0aW9ucy5pbnZlcnNlKHRoaXMpO1xuICAgIH1cbiAgfSk7XG59XG4iXX0=


/***/ }),

/***/ 93538:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


exports.__esModule = true;
exports.createNewLookupObject = createNewLookupObject;

var _utils = __webpack_require__(57471);

/**
 * Create a new object with "null"-prototype to avoid truthy results on prototype properties.
 * The resulting object can be used with "object[property]" to check if a property exists
 * @param {...object} sources a varargs parameter of source objects that will be merged
 * @returns {object}
 */

function createNewLookupObject() {
  for (var _len = arguments.length, sources = Array(_len), _key = 0; _key < _len; _key++) {
    sources[_key] = arguments[_key];
  }

  return _utils.extend.apply(undefined, [Object.create(null)].concat(sources));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2xpYi9oYW5kbGViYXJzL2ludGVybmFsL2NyZWF0ZS1uZXctbG9va3VwLW9iamVjdC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztxQkFBdUIsVUFBVTs7Ozs7Ozs7O0FBUTFCLFNBQVMscUJBQXFCLEdBQWE7b0NBQVQsT0FBTztBQUFQLFdBQU87OztBQUM5QyxTQUFPLGdDQUFPLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFNBQUssT0FBTyxFQUFDLENBQUM7Q0FDaEQiLCJmaWxlIjoiY3JlYXRlLW5ldy1sb29rdXAtb2JqZWN0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZXh0ZW5kIH0gZnJvbSAnLi4vdXRpbHMnO1xuXG4vKipcbiAqIENyZWF0ZSBhIG5ldyBvYmplY3Qgd2l0aCBcIm51bGxcIi1wcm90b3R5cGUgdG8gYXZvaWQgdHJ1dGh5IHJlc3VsdHMgb24gcHJvdG90eXBlIHByb3BlcnRpZXMuXG4gKiBUaGUgcmVzdWx0aW5nIG9iamVjdCBjYW4gYmUgdXNlZCB3aXRoIFwib2JqZWN0W3Byb3BlcnR5XVwiIHRvIGNoZWNrIGlmIGEgcHJvcGVydHkgZXhpc3RzXG4gKiBAcGFyYW0gey4uLm9iamVjdH0gc291cmNlcyBhIHZhcmFyZ3MgcGFyYW1ldGVyIG9mIHNvdXJjZSBvYmplY3RzIHRoYXQgd2lsbCBiZSBtZXJnZWRcbiAqIEByZXR1cm5zIHtvYmplY3R9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVOZXdMb29rdXBPYmplY3QoLi4uc291cmNlcykge1xuICByZXR1cm4gZXh0ZW5kKE9iamVjdC5jcmVhdGUobnVsbCksIC4uLnNvdXJjZXMpO1xufVxuIl19


/***/ }),

/***/ 5657:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


exports.__esModule = true;
exports.createProtoAccessControl = createProtoAccessControl;
exports.resultIsAllowed = resultIsAllowed;
exports.resetLoggedProperties = resetLoggedProperties;
// istanbul ignore next

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

var _createNewLookupObject = __webpack_require__(93538);

var _logger = __webpack_require__(87118);

var logger = _interopRequireWildcard(_logger);

var loggedProperties = Object.create(null);

function createProtoAccessControl(runtimeOptions) {
  var defaultMethodWhiteList = Object.create(null);
  defaultMethodWhiteList['constructor'] = false;
  defaultMethodWhiteList['__defineGetter__'] = false;
  defaultMethodWhiteList['__defineSetter__'] = false;
  defaultMethodWhiteList['__lookupGetter__'] = false;

  var defaultPropertyWhiteList = Object.create(null);
  // eslint-disable-next-line no-proto
  defaultPropertyWhiteList['__proto__'] = false;

  return {
    properties: {
      whitelist: _createNewLookupObject.createNewLookupObject(defaultPropertyWhiteList, runtimeOptions.allowedProtoProperties),
      defaultValue: runtimeOptions.allowProtoPropertiesByDefault
    },
    methods: {
      whitelist: _createNewLookupObject.createNewLookupObject(defaultMethodWhiteList, runtimeOptions.allowedProtoMethods),
      defaultValue: runtimeOptions.allowProtoMethodsByDefault
    }
  };
}

function resultIsAllowed(result, protoAccessControl, propertyName) {
  if (typeof result === 'function') {
    return checkWhiteList(protoAccessControl.methods, propertyName);
  } else {
    return checkWhiteList(protoAccessControl.properties, propertyName);
  }
}

function checkWhiteList(protoAccessControlForType, propertyName) {
  if (protoAccessControlForType.whitelist[propertyName] !== undefined) {
    return protoAccessControlForType.whitelist[propertyName] === true;
  }
  if (protoAccessControlForType.defaultValue !== undefined) {
    return protoAccessControlForType.defaultValue;
  }
  logUnexpecedPropertyAccessOnce(propertyName);
  return false;
}

function logUnexpecedPropertyAccessOnce(propertyName) {
  if (loggedProperties[propertyName] !== true) {
    loggedProperties[propertyName] = true;
    logger.log('error', 'Handlebars: Access has been denied to resolve the property "' + propertyName + '" because it is not an "own property" of its parent.\n' + 'You can add a runtime option to disable the check or this warning:\n' + 'See https://handlebarsjs.com/api-reference/runtime-options.html#options-to-control-prototype-access for details');
  }
}

function resetLoggedProperties() {
  Object.keys(loggedProperties).forEach(function (propertyName) {
    delete loggedProperties[propertyName];
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2xpYi9oYW5kbGViYXJzL2ludGVybmFsL3Byb3RvLWFjY2Vzcy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O3FDQUFzQyw0QkFBNEI7O3NCQUMxQyxXQUFXOztJQUF2QixNQUFNOztBQUVsQixJQUFNLGdCQUFnQixHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7O0FBRXRDLFNBQVMsd0JBQXdCLENBQUMsY0FBYyxFQUFFO0FBQ3ZELE1BQUksc0JBQXNCLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUNqRCx3QkFBc0IsQ0FBQyxhQUFhLENBQUMsR0FBRyxLQUFLLENBQUM7QUFDOUMsd0JBQXNCLENBQUMsa0JBQWtCLENBQUMsR0FBRyxLQUFLLENBQUM7QUFDbkQsd0JBQXNCLENBQUMsa0JBQWtCLENBQUMsR0FBRyxLQUFLLENBQUM7QUFDbkQsd0JBQXNCLENBQUMsa0JBQWtCLENBQUMsR0FBRyxLQUFLLENBQUM7O0FBRW5ELE1BQUksd0JBQXdCLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQzs7QUFFbkQsMEJBQXdCLENBQUMsV0FBVyxDQUFDLEdBQUcsS0FBSyxDQUFDOztBQUU5QyxTQUFPO0FBQ0wsY0FBVSxFQUFFO0FBQ1YsZUFBUyxFQUFFLDZDQUNULHdCQUF3QixFQUN4QixjQUFjLENBQUMsc0JBQXNCLENBQ3RDO0FBQ0Qsa0JBQVksRUFBRSxjQUFjLENBQUMsNkJBQTZCO0tBQzNEO0FBQ0QsV0FBTyxFQUFFO0FBQ1AsZUFBUyxFQUFFLDZDQUNULHNCQUFzQixFQUN0QixjQUFjLENBQUMsbUJBQW1CLENBQ25DO0FBQ0Qsa0JBQVksRUFBRSxjQUFjLENBQUMsMEJBQTBCO0tBQ3hEO0dBQ0YsQ0FBQztDQUNIOztBQUVNLFNBQVMsZUFBZSxDQUFDLE1BQU0sRUFBRSxrQkFBa0IsRUFBRSxZQUFZLEVBQUU7QUFDeEUsTUFBSSxPQUFPLE1BQU0sS0FBSyxVQUFVLEVBQUU7QUFDaEMsV0FBTyxjQUFjLENBQUMsa0JBQWtCLENBQUMsT0FBTyxFQUFFLFlBQVksQ0FBQyxDQUFDO0dBQ2pFLE1BQU07QUFDTCxXQUFPLGNBQWMsQ0FBQyxrQkFBa0IsQ0FBQyxVQUFVLEVBQUUsWUFBWSxDQUFDLENBQUM7R0FDcEU7Q0FDRjs7QUFFRCxTQUFTLGNBQWMsQ0FBQyx5QkFBeUIsRUFBRSxZQUFZLEVBQUU7QUFDL0QsTUFBSSx5QkFBeUIsQ0FBQyxTQUFTLENBQUMsWUFBWSxDQUFDLEtBQUssU0FBUyxFQUFFO0FBQ25FLFdBQU8seUJBQXlCLENBQUMsU0FBUyxDQUFDLFlBQVksQ0FBQyxLQUFLLElBQUksQ0FBQztHQUNuRTtBQUNELE1BQUkseUJBQXlCLENBQUMsWUFBWSxLQUFLLFNBQVMsRUFBRTtBQUN4RCxXQUFPLHlCQUF5QixDQUFDLFlBQVksQ0FBQztHQUMvQztBQUNELGdDQUE4QixDQUFDLFlBQVksQ0FBQyxDQUFDO0FBQzdDLFNBQU8sS0FBSyxDQUFDO0NBQ2Q7O0FBRUQsU0FBUyw4QkFBOEIsQ0FBQyxZQUFZLEVBQUU7QUFDcEQsTUFBSSxnQkFBZ0IsQ0FBQyxZQUFZLENBQUMsS0FBSyxJQUFJLEVBQUU7QUFDM0Msb0JBQWdCLENBQUMsWUFBWSxDQUFDLEdBQUcsSUFBSSxDQUFDO0FBQ3RDLFVBQU0sQ0FBQyxHQUFHLENBQ1IsT0FBTyxFQUNQLGlFQUErRCxZQUFZLG9JQUNILG9IQUMyQyxDQUNwSCxDQUFDO0dBQ0g7Q0FDRjs7QUFFTSxTQUFTLHFCQUFxQixHQUFHO0FBQ3RDLFFBQU0sQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxPQUFPLENBQUMsVUFBQSxZQUFZLEVBQUk7QUFDcEQsV0FBTyxnQkFBZ0IsQ0FBQyxZQUFZLENBQUMsQ0FBQztHQUN2QyxDQUFDLENBQUM7Q0FDSiIsImZpbGUiOiJwcm90by1hY2Nlc3MuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjcmVhdGVOZXdMb29rdXBPYmplY3QgfSBmcm9tICcuL2NyZWF0ZS1uZXctbG9va3VwLW9iamVjdCc7XG5pbXBvcnQgKiBhcyBsb2dnZXIgZnJvbSAnLi4vbG9nZ2VyJztcblxuY29uc3QgbG9nZ2VkUHJvcGVydGllcyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVQcm90b0FjY2Vzc0NvbnRyb2wocnVudGltZU9wdGlvbnMpIHtcbiAgbGV0IGRlZmF1bHRNZXRob2RXaGl0ZUxpc3QgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICBkZWZhdWx0TWV0aG9kV2hpdGVMaXN0Wydjb25zdHJ1Y3RvciddID0gZmFsc2U7XG4gIGRlZmF1bHRNZXRob2RXaGl0ZUxpc3RbJ19fZGVmaW5lR2V0dGVyX18nXSA9IGZhbHNlO1xuICBkZWZhdWx0TWV0aG9kV2hpdGVMaXN0WydfX2RlZmluZVNldHRlcl9fJ10gPSBmYWxzZTtcbiAgZGVmYXVsdE1ldGhvZFdoaXRlTGlzdFsnX19sb29rdXBHZXR0ZXJfXyddID0gZmFsc2U7XG5cbiAgbGV0IGRlZmF1bHRQcm9wZXJ0eVdoaXRlTGlzdCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wcm90b1xuICBkZWZhdWx0UHJvcGVydHlXaGl0ZUxpc3RbJ19fcHJvdG9fXyddID0gZmFsc2U7XG5cbiAgcmV0dXJuIHtcbiAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICB3aGl0ZWxpc3Q6IGNyZWF0ZU5ld0xvb2t1cE9iamVjdChcbiAgICAgICAgZGVmYXVsdFByb3BlcnR5V2hpdGVMaXN0LFxuICAgICAgICBydW50aW1lT3B0aW9ucy5hbGxvd2VkUHJvdG9Qcm9wZXJ0aWVzXG4gICAgICApLFxuICAgICAgZGVmYXVsdFZhbHVlOiBydW50aW1lT3B0aW9ucy5hbGxvd1Byb3RvUHJvcGVydGllc0J5RGVmYXVsdFxuICAgIH0sXG4gICAgbWV0aG9kczoge1xuICAgICAgd2hpdGVsaXN0OiBjcmVhdGVOZXdMb29rdXBPYmplY3QoXG4gICAgICAgIGRlZmF1bHRNZXRob2RXaGl0ZUxpc3QsXG4gICAgICAgIHJ1bnRpbWVPcHRpb25zLmFsbG93ZWRQcm90b01ldGhvZHNcbiAgICAgICksXG4gICAgICBkZWZhdWx0VmFsdWU6IHJ1bnRpbWVPcHRpb25zLmFsbG93UHJvdG9NZXRob2RzQnlEZWZhdWx0XG4gICAgfVxuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVzdWx0SXNBbGxvd2VkKHJlc3VsdCwgcHJvdG9BY2Nlc3NDb250cm9sLCBwcm9wZXJ0eU5hbWUpIHtcbiAgaWYgKHR5cGVvZiByZXN1bHQgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gY2hlY2tXaGl0ZUxpc3QocHJvdG9BY2Nlc3NDb250cm9sLm1ldGhvZHMsIHByb3BlcnR5TmFtZSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGNoZWNrV2hpdGVMaXN0KHByb3RvQWNjZXNzQ29udHJvbC5wcm9wZXJ0aWVzLCBwcm9wZXJ0eU5hbWUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNoZWNrV2hpdGVMaXN0KHByb3RvQWNjZXNzQ29udHJvbEZvclR5cGUsIHByb3BlcnR5TmFtZSkge1xuICBpZiAocHJvdG9BY2Nlc3NDb250cm9sRm9yVHlwZS53aGl0ZWxpc3RbcHJvcGVydHlOYW1lXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIHByb3RvQWNjZXNzQ29udHJvbEZvclR5cGUud2hpdGVsaXN0W3Byb3BlcnR5TmFtZV0gPT09IHRydWU7XG4gIH1cbiAgaWYgKHByb3RvQWNjZXNzQ29udHJvbEZvclR5cGUuZGVmYXVsdFZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gcHJvdG9BY2Nlc3NDb250cm9sRm9yVHlwZS5kZWZhdWx0VmFsdWU7XG4gIH1cbiAgbG9nVW5leHBlY2VkUHJvcGVydHlBY2Nlc3NPbmNlKHByb3BlcnR5TmFtZSk7XG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gbG9nVW5leHBlY2VkUHJvcGVydHlBY2Nlc3NPbmNlKHByb3BlcnR5TmFtZSkge1xuICBpZiAobG9nZ2VkUHJvcGVydGllc1twcm9wZXJ0eU5hbWVdICE9PSB0cnVlKSB7XG4gICAgbG9nZ2VkUHJvcGVydGllc1twcm9wZXJ0eU5hbWVdID0gdHJ1ZTtcbiAgICBsb2dnZXIubG9nKFxuICAgICAgJ2Vycm9yJyxcbiAgICAgIGBIYW5kbGViYXJzOiBBY2Nlc3MgaGFzIGJlZW4gZGVuaWVkIHRvIHJlc29sdmUgdGhlIHByb3BlcnR5IFwiJHtwcm9wZXJ0eU5hbWV9XCIgYmVjYXVzZSBpdCBpcyBub3QgYW4gXCJvd24gcHJvcGVydHlcIiBvZiBpdHMgcGFyZW50LlxcbmAgK1xuICAgICAgICBgWW91IGNhbiBhZGQgYSBydW50aW1lIG9wdGlvbiB0byBkaXNhYmxlIHRoZSBjaGVjayBvciB0aGlzIHdhcm5pbmc6XFxuYCArXG4gICAgICAgIGBTZWUgaHR0cHM6Ly9oYW5kbGViYXJzanMuY29tL2FwaS1yZWZlcmVuY2UvcnVudGltZS1vcHRpb25zLmh0bWwjb3B0aW9ucy10by1jb250cm9sLXByb3RvdHlwZS1hY2Nlc3MgZm9yIGRldGFpbHNgXG4gICAgKTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVzZXRMb2dnZWRQcm9wZXJ0aWVzKCkge1xuICBPYmplY3Qua2V5cyhsb2dnZWRQcm9wZXJ0aWVzKS5mb3JFYWNoKHByb3BlcnR5TmFtZSA9PiB7XG4gICAgZGVsZXRlIGxvZ2dlZFByb3BlcnRpZXNbcHJvcGVydHlOYW1lXTtcbiAgfSk7XG59XG4iXX0=


/***/ }),

/***/ 18552:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


exports.__esModule = true;
exports.wrapHelper = wrapHelper;

function wrapHelper(helper, transformOptionsFn) {
  if (typeof helper !== 'function') {
    // This should not happen, but apparently it does in https://github.com/wycats/handlebars.js/issues/1639
    // We try to make the wrapper least-invasive by not wrapping it, if the helper is not a function.
    return helper;
  }
  var wrapper = function wrapper() /* dynamic arguments */{
    var options = arguments[arguments.length - 1];
    arguments[arguments.length - 1] = transformOptionsFn(options);
    return helper.apply(this, arguments);
  };
  return wrapper;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2xpYi9oYW5kbGViYXJzL2ludGVybmFsL3dyYXBIZWxwZXIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBTyxTQUFTLFVBQVUsQ0FBQyxNQUFNLEVBQUUsa0JBQWtCLEVBQUU7QUFDckQsTUFBSSxPQUFPLE1BQU0sS0FBSyxVQUFVLEVBQUU7OztBQUdoQyxXQUFPLE1BQU0sQ0FBQztHQUNmO0FBQ0QsTUFBSSxPQUFPLEdBQUcsU0FBVixPQUFPLDBCQUFxQztBQUM5QyxRQUFNLE9BQU8sR0FBRyxTQUFTLENBQUMsU0FBUyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQztBQUNoRCxhQUFTLENBQUMsU0FBUyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsR0FBRyxrQkFBa0IsQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUM5RCxXQUFPLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLFNBQVMsQ0FBQyxDQUFDO0dBQ3RDLENBQUM7QUFDRixTQUFPLE9BQU8sQ0FBQztDQUNoQiIsImZpbGUiOiJ3cmFwSGVscGVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGZ1bmN0aW9uIHdyYXBIZWxwZXIoaGVscGVyLCB0cmFuc2Zvcm1PcHRpb25zRm4pIHtcbiAgaWYgKHR5cGVvZiBoZWxwZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAvLyBUaGlzIHNob3VsZCBub3QgaGFwcGVuLCBidXQgYXBwYXJlbnRseSBpdCBkb2VzIGluIGh0dHBzOi8vZ2l0aHViLmNvbS93eWNhdHMvaGFuZGxlYmFycy5qcy9pc3N1ZXMvMTYzOVxuICAgIC8vIFdlIHRyeSB0byBtYWtlIHRoZSB3cmFwcGVyIGxlYXN0LWludmFzaXZlIGJ5IG5vdCB3cmFwcGluZyBpdCwgaWYgdGhlIGhlbHBlciBpcyBub3QgYSBmdW5jdGlvbi5cbiAgICByZXR1cm4gaGVscGVyO1xuICB9XG4gIGxldCB3cmFwcGVyID0gZnVuY3Rpb24oLyogZHluYW1pYyBhcmd1bWVudHMgKi8pIHtcbiAgICBjb25zdCBvcHRpb25zID0gYXJndW1lbnRzW2FyZ3VtZW50cy5sZW5ndGggLSAxXTtcbiAgICBhcmd1bWVudHNbYXJndW1lbnRzLmxlbmd0aCAtIDFdID0gdHJhbnNmb3JtT3B0aW9uc0ZuKG9wdGlvbnMpO1xuICAgIHJldHVybiBoZWxwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfTtcbiAgcmV0dXJuIHdyYXBwZXI7XG59XG4iXX0=


/***/ }),

/***/ 87118:
/***/ ((module, exports, __webpack_require__) => {

"use strict";


exports.__esModule = true;

var _utils = __webpack_require__(57471);

var logger = {
  methodMap: ['debug', 'info', 'warn', 'error'],
  level: 'info',

  // Maps a given level value to the `methodMap` indexes above.
  lookupLevel: function lookupLevel(level) {
    if (typeof level === 'string') {
      var levelMap = _utils.indexOf(logger.methodMap, level.toLowerCase());
      if (levelMap >= 0) {
        level = levelMap;
      } else {
        level = parseInt(level, 10);
      }
    }

    return level;
  },

  // Can be overridden in the host environment
  log: function log(level) {
    level = logger.lookupLevel(level);

    if (typeof console !== 'undefined' && logger.lookupLevel(logger.level) <= level) {
      var method = logger.methodMap[level];
      // eslint-disable-next-line no-console
      if (!console[method]) {
        method = 'log';
      }

      for (var _len = arguments.length, message = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        message[_key - 1] = arguments[_key];
      }

      console[method].apply(console, message); // eslint-disable-line no-console
    }
  }
};

exports["default"] = logger;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9oYW5kbGViYXJzL2xvZ2dlci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O3FCQUF3QixTQUFTOztBQUVqQyxJQUFJLE1BQU0sR0FBRztBQUNYLFdBQVMsRUFBRSxDQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLE9BQU8sQ0FBQztBQUM3QyxPQUFLLEVBQUUsTUFBTTs7O0FBR2IsYUFBVyxFQUFFLHFCQUFTLEtBQUssRUFBRTtBQUMzQixRQUFJLE9BQU8sS0FBSyxLQUFLLFFBQVEsRUFBRTtBQUM3QixVQUFJLFFBQVEsR0FBRyxlQUFRLE1BQU0sQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUM7QUFDOUQsVUFBSSxRQUFRLElBQUksQ0FBQyxFQUFFO0FBQ2pCLGFBQUssR0FBRyxRQUFRLENBQUM7T0FDbEIsTUFBTTtBQUNMLGFBQUssR0FBRyxRQUFRLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO09BQzdCO0tBQ0Y7O0FBRUQsV0FBTyxLQUFLLENBQUM7R0FDZDs7O0FBR0QsS0FBRyxFQUFFLGFBQVMsS0FBSyxFQUFjO0FBQy9CLFNBQUssR0FBRyxNQUFNLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDOztBQUVsQyxRQUNFLE9BQU8sT0FBTyxLQUFLLFdBQVcsSUFDOUIsTUFBTSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksS0FBSyxFQUN6QztBQUNBLFVBQUksTUFBTSxHQUFHLE1BQU0sQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUM7O0FBRXJDLFVBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEVBQUU7QUFDcEIsY0FBTSxHQUFHLEtBQUssQ0FBQztPQUNoQjs7d0NBWG1CLE9BQU87QUFBUCxlQUFPOzs7QUFZM0IsYUFBTyxDQUFDLE1BQU0sT0FBQyxDQUFmLE9BQU8sRUFBWSxPQUFPLENBQUMsQ0FBQztLQUM3QjtHQUNGO0NBQ0YsQ0FBQzs7cUJBRWEsTUFBTSIsImZpbGUiOiJsb2dnZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpbmRleE9mIH0gZnJvbSAnLi91dGlscyc7XG5cbmxldCBsb2dnZXIgPSB7XG4gIG1ldGhvZE1hcDogWydkZWJ1ZycsICdpbmZvJywgJ3dhcm4nLCAnZXJyb3InXSxcbiAgbGV2ZWw6ICdpbmZvJyxcblxuICAvLyBNYXBzIGEgZ2l2ZW4gbGV2ZWwgdmFsdWUgdG8gdGhlIGBtZXRob2RNYXBgIGluZGV4ZXMgYWJvdmUuXG4gIGxvb2t1cExldmVsOiBmdW5jdGlvbihsZXZlbCkge1xuICAgIGlmICh0eXBlb2YgbGV2ZWwgPT09ICdzdHJpbmcnKSB7XG4gICAgICBsZXQgbGV2ZWxNYXAgPSBpbmRleE9mKGxvZ2dlci5tZXRob2RNYXAsIGxldmVsLnRvTG93ZXJDYXNlKCkpO1xuICAgICAgaWYgKGxldmVsTWFwID49IDApIHtcbiAgICAgICAgbGV2ZWwgPSBsZXZlbE1hcDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxldmVsID0gcGFyc2VJbnQobGV2ZWwsIDEwKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbGV2ZWw7XG4gIH0sXG5cbiAgLy8gQ2FuIGJlIG92ZXJyaWRkZW4gaW4gdGhlIGhvc3QgZW52aXJvbm1lbnRcbiAgbG9nOiBmdW5jdGlvbihsZXZlbCwgLi4ubWVzc2FnZSkge1xuICAgIGxldmVsID0gbG9nZ2VyLmxvb2t1cExldmVsKGxldmVsKTtcblxuICAgIGlmIChcbiAgICAgIHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICAgbG9nZ2VyLmxvb2t1cExldmVsKGxvZ2dlci5sZXZlbCkgPD0gbGV2ZWxcbiAgICApIHtcbiAgICAgIGxldCBtZXRob2QgPSBsb2dnZXIubWV0aG9kTWFwW2xldmVsXTtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICBpZiAoIWNvbnNvbGVbbWV0aG9kXSkge1xuICAgICAgICBtZXRob2QgPSAnbG9nJztcbiAgICAgIH1cbiAgICAgIGNvbnNvbGVbbWV0aG9kXSguLi5tZXNzYWdlKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1jb25zb2xlXG4gICAgfVxuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBsb2dnZXI7XG4iXX0=


/***/ }),

/***/ 60068:
/***/ ((module, exports) => {

"use strict";


exports.__esModule = true;

exports["default"] = function (Handlebars) {
  /* istanbul ignore next */
  var root = typeof global !== 'undefined' ? global : window,
      $Handlebars = root.Handlebars;
  /* istanbul ignore next */
  Handlebars.noConflict = function () {
    if (root.Handlebars === Handlebars) {
      root.Handlebars = $Handlebars;
    }
    return Handlebars;
  };
};

module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9oYW5kbGViYXJzL25vLWNvbmZsaWN0LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7cUJBQWUsVUFBUyxVQUFVLEVBQUU7O0FBRWxDLE1BQUksSUFBSSxHQUFHLE9BQU8sTUFBTSxLQUFLLFdBQVcsR0FBRyxNQUFNLEdBQUcsTUFBTTtNQUN4RCxXQUFXLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQzs7QUFFaEMsWUFBVSxDQUFDLFVBQVUsR0FBRyxZQUFXO0FBQ2pDLFFBQUksSUFBSSxDQUFDLFVBQVUsS0FBSyxVQUFVLEVBQUU7QUFDbEMsVUFBSSxDQUFDLFVBQVUsR0FBRyxXQUFXLENBQUM7S0FDL0I7QUFDRCxXQUFPLFVBQVUsQ0FBQztHQUNuQixDQUFDO0NBQ0giLCJmaWxlIjoibm8tY29uZmxpY3QuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihIYW5kbGViYXJzKSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gIGxldCByb290ID0gdHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcgPyBnbG9iYWwgOiB3aW5kb3csXG4gICAgJEhhbmRsZWJhcnMgPSByb290LkhhbmRsZWJhcnM7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gIEhhbmRsZWJhcnMubm9Db25mbGljdCA9IGZ1bmN0aW9uKCkge1xuICAgIGlmIChyb290LkhhbmRsZWJhcnMgPT09IEhhbmRsZWJhcnMpIHtcbiAgICAgIHJvb3QuSGFuZGxlYmFycyA9ICRIYW5kbGViYXJzO1xuICAgIH1cbiAgICByZXR1cm4gSGFuZGxlYmFycztcbiAgfTtcbn1cbiJdfQ==


/***/ }),

/***/ 77862:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


exports.__esModule = true;
exports.checkRevision = checkRevision;
exports.template = template;
exports.wrapProgram = wrapProgram;
exports.resolvePartial = resolvePartial;
exports.invokePartial = invokePartial;
exports.noop = noop;
// istanbul ignore next

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

// istanbul ignore next

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

var _utils = __webpack_require__(57471);

var Utils = _interopRequireWildcard(_utils);

var _exception = __webpack_require__(3403);

var _exception2 = _interopRequireDefault(_exception);

var _base = __webpack_require__(95040);

var _helpers = __webpack_require__(32423);

var _internalWrapHelper = __webpack_require__(18552);

var _internalProtoAccess = __webpack_require__(5657);

function checkRevision(compilerInfo) {
  var compilerRevision = compilerInfo && compilerInfo[0] || 1,
      currentRevision = _base.COMPILER_REVISION;

  if (compilerRevision >= _base.LAST_COMPATIBLE_COMPILER_REVISION && compilerRevision <= _base.COMPILER_REVISION) {
    return;
  }

  if (compilerRevision < _base.LAST_COMPATIBLE_COMPILER_REVISION) {
    var runtimeVersions = _base.REVISION_CHANGES[currentRevision],
        compilerVersions = _base.REVISION_CHANGES[compilerRevision];
    throw new _exception2['default']('Template was precompiled with an older version of Handlebars than the current runtime. ' + 'Please update your precompiler to a newer version (' + runtimeVersions + ') or downgrade your runtime to an older version (' + compilerVersions + ').');
  } else {
    // Use the embedded version info since the runtime doesn't know about this revision yet
    throw new _exception2['default']('Template was precompiled with a newer version of Handlebars than the current runtime. ' + 'Please update your runtime to a newer version (' + compilerInfo[1] + ').');
  }
}

function template(templateSpec, env) {
  /* istanbul ignore next */
  if (!env) {
    throw new _exception2['default']('No environment passed to template');
  }
  if (!templateSpec || !templateSpec.main) {
    throw new _exception2['default']('Unknown template object: ' + typeof templateSpec);
  }

  templateSpec.main.decorator = templateSpec.main_d;

  // Note: Using env.VM references rather than local var references throughout this section to allow
  // for external users to override these as pseudo-supported APIs.
  env.VM.checkRevision(templateSpec.compiler);

  // backwards compatibility for precompiled templates with compiler-version 7 (<4.3.0)
  var templateWasPrecompiledWithCompilerV7 = templateSpec.compiler && templateSpec.compiler[0] === 7;

  function invokePartialWrapper(partial, context, options) {
    if (options.hash) {
      context = Utils.extend({}, context, options.hash);
      if (options.ids) {
        options.ids[0] = true;
      }
    }
    partial = env.VM.resolvePartial.call(this, partial, context, options);

    var extendedOptions = Utils.extend({}, options, {
      hooks: this.hooks,
      protoAccessControl: this.protoAccessControl
    });

    var result = env.VM.invokePartial.call(this, partial, context, extendedOptions);

    if (result == null && env.compile) {
      options.partials[options.name] = env.compile(partial, templateSpec.compilerOptions, env);
      result = options.partials[options.name](context, extendedOptions);
    }
    if (result != null) {
      if (options.indent) {
        var lines = result.split('\n');
        for (var i = 0, l = lines.length; i < l; i++) {
          if (!lines[i] && i + 1 === l) {
            break;
          }

          lines[i] = options.indent + lines[i];
        }
        result = lines.join('\n');
      }
      return result;
    } else {
      throw new _exception2['default']('The partial ' + options.name + ' could not be compiled when running in runtime-only mode');
    }
  }

  // Just add water
  var container = {
    strict: function strict(obj, name, loc) {
      if (!obj || !(name in obj)) {
        throw new _exception2['default']('"' + name + '" not defined in ' + obj, {
          loc: loc
        });
      }
      return container.lookupProperty(obj, name);
    },
    lookupProperty: function lookupProperty(parent, propertyName) {
      var result = parent[propertyName];
      if (result == null) {
        return result;
      }
      if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
        return result;
      }

      if (_internalProtoAccess.resultIsAllowed(result, container.protoAccessControl, propertyName)) {
        return result;
      }
      return undefined;
    },
    lookup: function lookup(depths, name) {
      var len = depths.length;
      for (var i = 0; i < len; i++) {
        var result = depths[i] && container.lookupProperty(depths[i], name);
        if (result != null) {
          return depths[i][name];
        }
      }
    },
    lambda: function lambda(current, context) {
      return typeof current === 'function' ? current.call(context) : current;
    },

    escapeExpression: Utils.escapeExpression,
    invokePartial: invokePartialWrapper,

    fn: function fn(i) {
      var ret = templateSpec[i];
      ret.decorator = templateSpec[i + '_d'];
      return ret;
    },

    programs: [],
    program: function program(i, data, declaredBlockParams, blockParams, depths) {
      var programWrapper = this.programs[i],
          fn = this.fn(i);
      if (data || depths || blockParams || declaredBlockParams) {
        programWrapper = wrapProgram(this, i, fn, data, declaredBlockParams, blockParams, depths);
      } else if (!programWrapper) {
        programWrapper = this.programs[i] = wrapProgram(this, i, fn);
      }
      return programWrapper;
    },

    data: function data(value, depth) {
      while (value && depth--) {
        value = value._parent;
      }
      return value;
    },
    mergeIfNeeded: function mergeIfNeeded(param, common) {
      var obj = param || common;

      if (param && common && param !== common) {
        obj = Utils.extend({}, common, param);
      }

      return obj;
    },
    // An empty object to use as replacement for null-contexts
    nullContext: Object.seal({}),

    noop: env.VM.noop,
    compilerInfo: templateSpec.compiler
  };

  function ret(context) {
    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

    var data = options.data;

    ret._setup(options);
    if (!options.partial && templateSpec.useData) {
      data = initData(context, data);
    }
    var depths = undefined,
        blockParams = templateSpec.useBlockParams ? [] : undefined;
    if (templateSpec.useDepths) {
      if (options.depths) {
        depths = context != options.depths[0] ? [context].concat(options.depths) : options.depths;
      } else {
        depths = [context];
      }
    }

    function main(context /*, options*/) {
      return '' + templateSpec.main(container, context, container.helpers, container.partials, data, blockParams, depths);
    }

    main = executeDecorators(templateSpec.main, main, container, options.depths || [], data, blockParams);
    return main(context, options);
  }

  ret.isTop = true;

  ret._setup = function (options) {
    if (!options.partial) {
      var mergedHelpers = Utils.extend({}, env.helpers, options.helpers);
      wrapHelpersToPassLookupProperty(mergedHelpers, container);
      container.helpers = mergedHelpers;

      if (templateSpec.usePartial) {
        // Use mergeIfNeeded here to prevent compiling global partials multiple times
        container.partials = container.mergeIfNeeded(options.partials, env.partials);
      }
      if (templateSpec.usePartial || templateSpec.useDecorators) {
        container.decorators = Utils.extend({}, env.decorators, options.decorators);
      }

      container.hooks = {};
      container.protoAccessControl = _internalProtoAccess.createProtoAccessControl(options);

      var keepHelperInHelpers = options.allowCallsToHelperMissing || templateWasPrecompiledWithCompilerV7;
      _helpers.moveHelperToHooks(container, 'helperMissing', keepHelperInHelpers);
      _helpers.moveHelperToHooks(container, 'blockHelperMissing', keepHelperInHelpers);
    } else {
      container.protoAccessControl = options.protoAccessControl; // internal option
      container.helpers = options.helpers;
      container.partials = options.partials;
      container.decorators = options.decorators;
      container.hooks = options.hooks;
    }
  };

  ret._child = function (i, data, blockParams, depths) {
    if (templateSpec.useBlockParams && !blockParams) {
      throw new _exception2['default']('must pass block params');
    }
    if (templateSpec.useDepths && !depths) {
      throw new _exception2['default']('must pass parent depths');
    }

    return wrapProgram(container, i, templateSpec[i], data, 0, blockParams, depths);
  };
  return ret;
}

function wrapProgram(container, i, fn, data, declaredBlockParams, blockParams, depths) {
  function prog(context) {
    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

    var currentDepths = depths;
    if (depths && context != depths[0] && !(context === container.nullContext && depths[0] === null)) {
      currentDepths = [context].concat(depths);
    }

    return fn(container, context, container.helpers, container.partials, options.data || data, blockParams && [options.blockParams].concat(blockParams), currentDepths);
  }

  prog = executeDecorators(fn, prog, container, depths, data, blockParams);

  prog.program = i;
  prog.depth = depths ? depths.length : 0;
  prog.blockParams = declaredBlockParams || 0;
  return prog;
}

/**
 * This is currently part of the official API, therefore implementation details should not be changed.
 */

function resolvePartial(partial, context, options) {
  if (!partial) {
    if (options.name === '@partial-block') {
      partial = options.data['partial-block'];
    } else {
      partial = options.partials[options.name];
    }
  } else if (!partial.call && !options.name) {
    // This is a dynamic partial that returned a string
    options.name = partial;
    partial = options.partials[partial];
  }
  return partial;
}

function invokePartial(partial, context, options) {
  // Use the current closure context to save the partial-block if this partial
  var currentPartialBlock = options.data && options.data['partial-block'];
  options.partial = true;
  if (options.ids) {
    options.data.contextPath = options.ids[0] || options.data.contextPath;
  }

  var partialBlock = undefined;
  if (options.fn && options.fn !== noop) {
    (function () {
      options.data = _base.createFrame(options.data);
      // Wrapper function to get access to currentPartialBlock from the closure
      var fn = options.fn;
      partialBlock = options.data['partial-block'] = function partialBlockWrapper(context) {
        var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

        // Restore the partial-block from the closure for the execution of the block
        // i.e. the part inside the block of the partial call.
        options.data = _base.createFrame(options.data);
        options.data['partial-block'] = currentPartialBlock;
        return fn(context, options);
      };
      if (fn.partials) {
        options.partials = Utils.extend({}, options.partials, fn.partials);
      }
    })();
  }

  if (partial === undefined && partialBlock) {
    partial = partialBlock;
  }

  if (partial === undefined) {
    throw new _exception2['default']('The partial ' + options.name + ' could not be found');
  } else if (partial instanceof Function) {
    return partial(context, options);
  }
}

function noop() {
  return '';
}

function initData(context, data) {
  if (!data || !('root' in data)) {
    data = data ? _base.createFrame(data) : {};
    data.root = context;
  }
  return data;
}

function executeDecorators(fn, prog, container, depths, data, blockParams) {
  if (fn.decorator) {
    var props = {};
    prog = fn.decorator(prog, props, container, depths && depths[0], data, blockParams, depths);
    Utils.extend(prog, props);
  }
  return prog;
}

function wrapHelpersToPassLookupProperty(mergedHelpers, container) {
  Object.keys(mergedHelpers).forEach(function (helperName) {
    var helper = mergedHelpers[helperName];
    mergedHelpers[helperName] = passLookupPropertyOption(helper, container);
  });
}

function passLookupPropertyOption(helper, container) {
  var lookupProperty = container.lookupProperty;
  return _internalWrapHelper.wrapHelper(helper, function (options) {
    return Utils.extend({ lookupProperty: lookupProperty }, options);
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,


/***/ }),

/***/ 10274:
/***/ ((module, exports) => {

"use strict";
// Build out our basic SafeString type


exports.__esModule = true;
function SafeString(string) {
  this.string = string;
}

SafeString.prototype.toString = SafeString.prototype.toHTML = function () {
  return '' + this.string;
};

exports["default"] = SafeString;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9oYW5kbGViYXJzL3NhZmUtc3RyaW5nLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFDQSxTQUFTLFVBQVUsQ0FBQyxNQUFNLEVBQUU7QUFDMUIsTUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7Q0FDdEI7O0FBRUQsVUFBVSxDQUFDLFNBQVMsQ0FBQyxRQUFRLEdBQUcsVUFBVSxDQUFDLFNBQVMsQ0FBQyxNQUFNLEdBQUcsWUFBVztBQUN2RSxTQUFPLEVBQUUsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO0NBQ3pCLENBQUM7O3FCQUVhLFVBQVUiLCJmaWxlIjoic2FmZS1zdHJpbmcuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBCdWlsZCBvdXQgb3VyIGJhc2ljIFNhZmVTdHJpbmcgdHlwZVxuZnVuY3Rpb24gU2FmZVN0cmluZyhzdHJpbmcpIHtcbiAgdGhpcy5zdHJpbmcgPSBzdHJpbmc7XG59XG5cblNhZmVTdHJpbmcucHJvdG90eXBlLnRvU3RyaW5nID0gU2FmZVN0cmluZy5wcm90b3R5cGUudG9IVE1MID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiAnJyArIHRoaXMuc3RyaW5nO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgU2FmZVN0cmluZztcbiJdfQ==


/***/ }),

/***/ 57471:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


exports.__esModule = true;
exports.extend = extend;
exports.indexOf = indexOf;
exports.escapeExpression = escapeExpression;
exports.isEmpty = isEmpty;
exports.createFrame = createFrame;
exports.blockParams = blockParams;
exports.appendContextPath = appendContextPath;
var escape = {
  '&': '&amp;',
  '<': '&lt;',
  '>': '&gt;',
  '"': '&quot;',
  "'": '&#x27;',
  '`': '&#x60;',
  '=': '&#x3D;'
};

var badChars = /[&<>"'`=]/g,
    possible = /[&<>"'`=]/;

function escapeChar(chr) {
  return escape[chr];
}

function extend(obj /* , ...source */) {
  for (var i = 1; i < arguments.length; i++) {
    for (var key in arguments[i]) {
      if (Object.prototype.hasOwnProperty.call(arguments[i], key)) {
        obj[key] = arguments[i][key];
      }
    }
  }

  return obj;
}

var toString = Object.prototype.toString;

exports.toString = toString;
// Sourced from lodash
// https://github.com/bestiejs/lodash/blob/master/LICENSE.txt
/* eslint-disable func-style */
var isFunction = function isFunction(value) {
  return typeof value === 'function';
};
// fallback for older versions of Chrome and Safari
/* istanbul ignore next */
if (isFunction(/x/)) {
  exports.isFunction = isFunction = function (value) {
    return typeof value === 'function' && toString.call(value) === '[object Function]';
  };
}
exports.isFunction = isFunction;

/* eslint-enable func-style */

/* istanbul ignore next */
var isArray = Array.isArray || function (value) {
  return value && typeof value === 'object' ? toString.call(value) === '[object Array]' : false;
};

exports.isArray = isArray;
// Older IE versions do not directly support indexOf so we must implement our own, sadly.

function indexOf(array, value) {
  for (var i = 0, len = array.length; i < len; i++) {
    if (array[i] === value) {
      return i;
    }
  }
  return -1;
}

function escapeExpression(string) {
  if (typeof string !== 'string') {
    // don't escape SafeStrings, since they're already safe
    if (string && string.toHTML) {
      return string.toHTML();
    } else if (string == null) {
      return '';
    } else if (!string) {
      return string + '';
    }

    // Force a string conversion as this will be done by the append regardless and
    // the regex test will do this transparently behind the scenes, causing issues if
    // an object's to string has escaped characters in it.
    string = '' + string;
  }

  if (!possible.test(string)) {
    return string;
  }
  return string.replace(badChars, escapeChar);
}

function isEmpty(value) {
  if (!value && value !== 0) {
    return true;
  } else if (isArray(value) && value.length === 0) {
    return true;
  } else {
    return false;
  }
}

function createFrame(object) {
  var frame = extend({}, object);
  frame._parent = object;
  return frame;
}

function blockParams(params, ids) {
  params.path = ids;
  return params;
}

function appendContextPath(contextPath, id) {
  return (contextPath ? contextPath + '.' : '') + id;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9oYW5kbGViYXJzL3V0aWxzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBQSxJQUFNLE1BQU0sR0FBRztBQUNiLEtBQUcsRUFBRSxPQUFPO0FBQ1osS0FBRyxFQUFFLE1BQU07QUFDWCxLQUFHLEVBQUUsTUFBTTtBQUNYLEtBQUcsRUFBRSxRQUFRO0FBQ2IsS0FBRyxFQUFFLFFBQVE7QUFDYixLQUFHLEVBQUUsUUFBUTtBQUNiLEtBQUcsRUFBRSxRQUFRO0NBQ2QsQ0FBQzs7QUFFRixJQUFNLFFBQVEsR0FBRyxZQUFZO0lBQzNCLFFBQVEsR0FBRyxXQUFXLENBQUM7O0FBRXpCLFNBQVMsVUFBVSxDQUFDLEdBQUcsRUFBRTtBQUN2QixTQUFPLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztDQUNwQjs7QUFFTSxTQUFTLE1BQU0sQ0FBQyxHQUFHLG9CQUFvQjtBQUM1QyxPQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsU0FBUyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtBQUN6QyxTQUFLLElBQUksR0FBRyxJQUFJLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBRTtBQUM1QixVQUFJLE1BQU0sQ0FBQyxTQUFTLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLEVBQUU7QUFDM0QsV0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztPQUM5QjtLQUNGO0dBQ0Y7O0FBRUQsU0FBTyxHQUFHLENBQUM7Q0FDWjs7QUFFTSxJQUFJLFFBQVEsR0FBRyxNQUFNLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQzs7Ozs7O0FBS2hELElBQUksVUFBVSxHQUFHLG9CQUFTLEtBQUssRUFBRTtBQUMvQixTQUFPLE9BQU8sS0FBSyxLQUFLLFVBQVUsQ0FBQztDQUNwQyxDQUFDOzs7QUFHRixJQUFJLFVBQVUsQ0FBQyxHQUFHLENBQUMsRUFBRTtBQUNuQixVQU9PLFVBQVUsR0FQakIsVUFBVSxHQUFHLFVBQVMsS0FBSyxFQUFFO0FBQzNCLFdBQ0UsT0FBTyxLQUFLLEtBQUssVUFBVSxJQUMzQixRQUFRLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLG1CQUFtQixDQUM1QztHQUNILENBQUM7Q0FDSDtRQUNRLFVBQVUsR0FBVixVQUFVOzs7OztBQUlaLElBQU0sT0FBTyxHQUNsQixLQUFLLENBQUMsT0FBTyxJQUNiLFVBQVMsS0FBSyxFQUFFO0FBQ2QsU0FBTyxLQUFLLElBQUksT0FBTyxLQUFLLEtBQUssUUFBUSxHQUNyQyxRQUFRLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLGdCQUFnQixHQUN6QyxLQUFLLENBQUM7Q0FDWCxDQUFDOzs7OztBQUdHLFNBQVMsT0FBTyxDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUU7QUFDcEMsT0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsR0FBRyxHQUFHLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQyxHQUFHLEdBQUcsRUFBRSxDQUFDLEVBQUUsRUFBRTtBQUNoRCxRQUFJLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxLQUFLLEVBQUU7QUFDdEIsYUFBTyxDQUFDLENBQUM7S0FDVjtHQUNGO0FBQ0QsU0FBTyxDQUFDLENBQUMsQ0FBQztDQUNYOztBQUVNLFNBQVMsZ0JBQWdCLENBQUMsTUFBTSxFQUFFO0FBQ3ZDLE1BQUksT0FBTyxNQUFNLEtBQUssUUFBUSxFQUFFOztBQUU5QixRQUFJLE1BQU0sSUFBSSxNQUFNLENBQUMsTUFBTSxFQUFFO0FBQzNCLGFBQU8sTUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFDO0tBQ3hCLE1BQU0sSUFBSSxNQUFNLElBQUksSUFBSSxFQUFFO0FBQ3pCLGFBQU8sRUFBRSxDQUFDO0tBQ1gsTUFBTSxJQUFJLENBQUMsTUFBTSxFQUFFO0FBQ2xCLGFBQU8sTUFBTSxHQUFHLEVBQUUsQ0FBQztLQUNwQjs7Ozs7QUFLRCxVQUFNLEdBQUcsRUFBRSxHQUFHLE1BQU0sQ0FBQztHQUN0Qjs7QUFFRCxNQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRTtBQUMxQixXQUFPLE1BQU0sQ0FBQztHQUNmO0FBQ0QsU0FBTyxNQUFNLENBQUMsT0FBTyxDQUFDLFFBQVEsRUFBRSxVQUFVLENBQUMsQ0FBQztDQUM3Qzs7QUFFTSxTQUFTLE9BQU8sQ0FBQyxLQUFLLEVBQUU7QUFDN0IsTUFBSSxDQUFDLEtBQUssSUFBSSxLQUFLLEtBQUssQ0FBQyxFQUFFO0FBQ3pCLFdBQU8sSUFBSSxDQUFDO0dBQ2IsTUFBTSxJQUFJLE9BQU8sQ0FBQyxLQUFLLENBQUMsSUFBSSxLQUFLLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtBQUMvQyxXQUFPLElBQUksQ0FBQztHQUNiLE1BQU07QUFDTCxXQUFPLEtBQUssQ0FBQztHQUNkO0NBQ0Y7O0FBRU0sU0FBUyxXQUFXLENBQUMsTUFBTSxFQUFFO0FBQ2xDLE1BQUksS0FBSyxHQUFHLE1BQU0sQ0FBQyxFQUFFLEVBQUUsTUFBTSxDQUFDLENBQUM7QUFDL0IsT0FBSyxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUM7QUFDdkIsU0FBTyxLQUFLLENBQUM7Q0FDZDs7QUFFTSxTQUFTLFdBQVcsQ0FBQyxNQUFNLEVBQUUsR0FBRyxFQUFFO0FBQ3ZDLFFBQU0sQ0FBQyxJQUFJLEdBQUcsR0FBRyxDQUFDO0FBQ2xCLFNBQU8sTUFBTSxDQUFDO0NBQ2Y7O0FBRU0sU0FBUyxpQkFBaUIsQ0FBQyxXQUFXLEVBQUUsRUFBRSxFQUFFO0FBQ2pELFNBQU8sQ0FBQyxXQUFXLEdBQUcsV0FBVyxHQUFHLEdBQUcsR0FBRyxFQUFFLENBQUEsR0FBSSxFQUFFLENBQUM7Q0FDcEQiLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBlc2NhcGUgPSB7XG4gICcmJzogJyZhbXA7JyxcbiAgJzwnOiAnJmx0OycsXG4gICc+JzogJyZndDsnLFxuICAnXCInOiAnJnF1b3Q7JyxcbiAgXCInXCI6ICcmI3gyNzsnLFxuICAnYCc6ICcmI3g2MDsnLFxuICAnPSc6ICcmI3gzRDsnXG59O1xuXG5jb25zdCBiYWRDaGFycyA9IC9bJjw+XCInYD1dL2csXG4gIHBvc3NpYmxlID0gL1smPD5cIidgPV0vO1xuXG5mdW5jdGlvbiBlc2NhcGVDaGFyKGNocikge1xuICByZXR1cm4gZXNjYXBlW2Nocl07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBleHRlbmQob2JqIC8qICwgLi4uc291cmNlICovKSB7XG4gIGZvciAobGV0IGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgZm9yIChsZXQga2V5IGluIGFyZ3VtZW50c1tpXSkge1xuICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChhcmd1bWVudHNbaV0sIGtleSkpIHtcbiAgICAgICAgb2JqW2tleV0gPSBhcmd1bWVudHNbaV1ba2V5XTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gb2JqO1xufVxuXG5leHBvcnQgbGV0IHRvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcblxuLy8gU291cmNlZCBmcm9tIGxvZGFzaFxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2Jlc3RpZWpzL2xvZGFzaC9ibG9iL21hc3Rlci9MSUNFTlNFLnR4dFxuLyogZXNsaW50LWRpc2FibGUgZnVuYy1zdHlsZSAqL1xubGV0IGlzRnVuY3Rpb24gPSBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nO1xufTtcbi8vIGZhbGxiYWNrIGZvciBvbGRlciB2ZXJzaW9ucyBvZiBDaHJvbWUgYW5kIFNhZmFyaVxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmlmIChpc0Z1bmN0aW9uKC94LykpIHtcbiAgaXNGdW5jdGlvbiA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJyAmJlxuICAgICAgdG9TdHJpbmcuY2FsbCh2YWx1ZSkgPT09ICdbb2JqZWN0IEZ1bmN0aW9uXSdcbiAgICApO1xuICB9O1xufVxuZXhwb3J0IHsgaXNGdW5jdGlvbiB9O1xuLyogZXNsaW50LWVuYWJsZSBmdW5jLXN0eWxlICovXG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5leHBvcnQgY29uc3QgaXNBcnJheSA9XG4gIEFycmF5LmlzQXJyYXkgfHxcbiAgZnVuY3Rpb24odmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0J1xuICAgICAgPyB0b1N0cmluZy5jYWxsKHZhbHVlKSA9PT0gJ1tvYmplY3QgQXJyYXldJ1xuICAgICAgOiBmYWxzZTtcbiAgfTtcblxuLy8gT2xkZXIgSUUgdmVyc2lvbnMgZG8gbm90IGRpcmVjdGx5IHN1cHBvcnQgaW5kZXhPZiBzbyB3ZSBtdXN0IGltcGxlbWVudCBvdXIgb3duLCBzYWRseS5cbmV4cG9ydCBmdW5jdGlvbiBpbmRleE9mKGFycmF5LCB2YWx1ZSkge1xuICBmb3IgKGxldCBpID0gMCwgbGVuID0gYXJyYXkubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICBpZiAoYXJyYXlbaV0gPT09IHZhbHVlKSB7XG4gICAgICByZXR1cm4gaTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIC0xO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZXNjYXBlRXhwcmVzc2lvbihzdHJpbmcpIHtcbiAgaWYgKHR5cGVvZiBzdHJpbmcgIT09ICdzdHJpbmcnKSB7XG4gICAgLy8gZG9uJ3QgZXNjYXBlIFNhZmVTdHJpbmdzLCBzaW5jZSB0aGV5J3JlIGFscmVhZHkgc2FmZVxuICAgIGlmIChzdHJpbmcgJiYgc3RyaW5nLnRvSFRNTCkge1xuICAgICAgcmV0dXJuIHN0cmluZy50b0hUTUwoKTtcbiAgICB9IGVsc2UgaWYgKHN0cmluZyA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gJyc7XG4gICAgfSBlbHNlIGlmICghc3RyaW5nKSB7XG4gICAgICByZXR1cm4gc3RyaW5nICsgJyc7XG4gICAgfVxuXG4gICAgLy8gRm9yY2UgYSBzdHJpbmcgY29udmVyc2lvbiBhcyB0aGlzIHdpbGwgYmUgZG9uZSBieSB0aGUgYXBwZW5kIHJlZ2FyZGxlc3MgYW5kXG4gICAgLy8gdGhlIHJlZ2V4IHRlc3Qgd2lsbCBkbyB0aGlzIHRyYW5zcGFyZW50bHkgYmVoaW5kIHRoZSBzY2VuZXMsIGNhdXNpbmcgaXNzdWVzIGlmXG4gICAgLy8gYW4gb2JqZWN0J3MgdG8gc3RyaW5nIGhhcyBlc2NhcGVkIGNoYXJhY3RlcnMgaW4gaXQuXG4gICAgc3RyaW5nID0gJycgKyBzdHJpbmc7XG4gIH1cblxuICBpZiAoIXBvc3NpYmxlLnRlc3Qoc3RyaW5nKSkge1xuICAgIHJldHVybiBzdHJpbmc7XG4gIH1cbiAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKGJhZENoYXJzLCBlc2NhcGVDaGFyKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzRW1wdHkodmFsdWUpIHtcbiAgaWYgKCF2YWx1ZSAmJiB2YWx1ZSAhPT0gMCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9IGVsc2UgaWYgKGlzQXJyYXkodmFsdWUpICYmIHZhbHVlLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlRnJhbWUob2JqZWN0KSB7XG4gIGxldCBmcmFtZSA9IGV4dGVuZCh7fSwgb2JqZWN0KTtcbiAgZnJhbWUuX3BhcmVudCA9IG9iamVjdDtcbiAgcmV0dXJuIGZyYW1lO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYmxvY2tQYXJhbXMocGFyYW1zLCBpZHMpIHtcbiAgcGFyYW1zLnBhdGggPSBpZHM7XG4gIHJldHVybiBwYXJhbXM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhcHBlbmRDb250ZXh0UGF0aChjb250ZXh0UGF0aCwgaWQpIHtcbiAgcmV0dXJuIChjb250ZXh0UGF0aCA/IGNvbnRleHRQYXRoICsgJy4nIDogJycpICsgaWQ7XG59XG4iXX0=


/***/ }),

/***/ 52573:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

// USAGE:
// var handlebars = require('handlebars');
/* eslint-disable no-var */

// var local = handlebars.create();

var handlebars = (__webpack_require__(93827)["default"]);

var printer = __webpack_require__(1149);
handlebars.PrintVisitor = printer.PrintVisitor;
handlebars.print = printer.print;

module.exports = handlebars;

// Publish a Node.js require() handler for .handlebars and .hbs files
function extension(module, filename) {
  var fs = __webpack_require__(57147);
  var templateString = fs.readFileSync(filename, 'utf8');
  module.exports = handlebars.compile(templateString);
}
/* istanbul ignore else */
if ( true && (void 0)) {
  (void 0)['.handlebars'] = extension;
  (void 0)['.hbs'] = extension;
}


/***/ }),

/***/ 36275:
/***/ ((module) => {

"use strict";


module.exports = (flag, argv = process.argv) => {
	const prefix = flag.startsWith('-') ? '' : (flag.length === 1 ? '-' : '--');
	const position = argv.indexOf(prefix + flag);
	const terminatorPosition = argv.indexOf('--');
	return position !== -1 && (terminatorPosition === -1 || position < terminatorPosition);
};


/***/ }),

/***/ 64666:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var GetIntrinsic = __webpack_require__(87923);

var $defineProperty = GetIntrinsic('%Object.defineProperty%', true);

var hasPropertyDescriptors = function hasPropertyDescriptors() {
	if ($defineProperty) {
		try {
			$defineProperty({}, 'a', { value: 1 });
			return true;
		} catch (e) {
			// IE 8 has a broken defineProperty
			return false;
		}
	}
	return false;
};

hasPropertyDescriptors.hasArrayLengthDefineBug = function hasArrayLengthDefineBug() {
	// node v0.6 has a bug where array lengths can be Set but not Defined
	if (!hasPropertyDescriptors()) {
		return null;
	}
	try {
		return $defineProperty([], 'length', { value: 1 }).length !== 1;
	} catch (e) {
		// In Firefox 4-22, defining length on an array throws an exception.
		return true;
	}
};

module.exports = hasPropertyDescriptors;


/***/ }),

/***/ 87923:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var undefined;

var $SyntaxError = SyntaxError;
var $Function = Function;
var $TypeError = TypeError;

// eslint-disable-next-line consistent-return
var getEvalledConstructor = function (expressionSyntax) {
	try {
		return $Function('"use strict"; return (' + expressionSyntax + ').constructor;')();
	} catch (e) {}
};

var $gOPD = Object.getOwnPropertyDescriptor;
if ($gOPD) {
	try {
		$gOPD({}, '');
	} catch (e) {
		$gOPD = null; // this is IE 8, which has a broken gOPD
	}
}

var throwTypeError = function () {
	throw new $TypeError();
};
var ThrowTypeError = $gOPD
	? (function () {
		try {
			// eslint-disable-next-line no-unused-expressions, no-caller, no-restricted-properties
			arguments.callee; // IE 8 does not throw here
			return throwTypeError;
		} catch (calleeThrows) {
			try {
				// IE 8 throws on Object.getOwnPropertyDescriptor(arguments, '')
				return $gOPD(arguments, 'callee').get;
			} catch (gOPDthrows) {
				return throwTypeError;
			}
		}
	}())
	: throwTypeError;

var hasSymbols = __webpack_require__(66478)();

var getProto = Object.getPrototypeOf || function (x) { return x.__proto__; }; // eslint-disable-line no-proto

var needsEval = {};

var TypedArray = typeof Uint8Array === 'undefined' ? undefined : getProto(Uint8Array);

var INTRINSICS = {
	'%AggregateError%': typeof AggregateError === 'undefined' ? undefined : AggregateError,
	'%Array%': Array,
	'%ArrayBuffer%': typeof ArrayBuffer === 'undefined' ? undefined : ArrayBuffer,
	'%ArrayIteratorPrototype%': hasSymbols ? getProto([][Symbol.iterator]()) : undefined,
	'%AsyncFromSyncIteratorPrototype%': undefined,
	'%AsyncFunction%': needsEval,
	'%AsyncGenerator%': needsEval,
	'%AsyncGeneratorFunction%': needsEval,
	'%AsyncIteratorPrototype%': needsEval,
	'%Atomics%': typeof Atomics === 'undefined' ? undefined : Atomics,
	'%BigInt%': typeof BigInt === 'undefined' ? undefined : BigInt,
	'%Boolean%': Boolean,
	'%DataView%': typeof DataView === 'undefined' ? undefined : DataView,
	'%Date%': Date,
	'%decodeURI%': decodeURI,
	'%decodeURIComponent%': decodeURIComponent,
	'%encodeURI%': encodeURI,
	'%encodeURIComponent%': encodeURIComponent,
	'%Error%': Error,
	'%eval%': eval, // eslint-disable-line no-eval
	'%EvalError%': EvalError,
	'%Float32Array%': typeof Float32Array === 'undefined' ? undefined : Float32Array,
	'%Float64Array%': typeof Float64Array === 'undefined' ? undefined : Float64Array,
	'%FinalizationRegistry%': typeof FinalizationRegistry === 'undefined' ? undefined : FinalizationRegistry,
	'%Function%': $Function,
	'%GeneratorFunction%': needsEval,
	'%Int8Array%': typeof Int8Array === 'undefined' ? undefined : Int8Array,
	'%Int16Array%': typeof Int16Array === 'undefined' ? undefined : Int16Array,
	'%Int32Array%': typeof Int32Array === 'undefined' ? undefined : Int32Array,
	'%isFinite%': isFinite,
	'%isNaN%': isNaN,
	'%IteratorPrototype%': hasSymbols ? getProto(getProto([][Symbol.iterator]())) : undefined,
	'%JSON%': typeof JSON === 'object' ? JSON : undefined,
	'%Map%': typeof Map === 'undefined' ? undefined : Map,
	'%MapIteratorPrototype%': typeof Map === 'undefined' || !hasSymbols ? undefined : getProto(new Map()[Symbol.iterator]()),
	'%Math%': Math,
	'%Number%': Number,
	'%Object%': Object,
	'%parseFloat%': parseFloat,
	'%parseInt%': parseInt,
	'%Promise%': typeof Promise === 'undefined' ? undefined : Promise,
	'%Proxy%': typeof Proxy === 'undefined' ? undefined : Proxy,
	'%RangeError%': RangeError,
	'%ReferenceError%': ReferenceError,
	'%Reflect%': typeof Reflect === 'undefined' ? undefined : Reflect,
	'%RegExp%': RegExp,
	'%Set%': typeof Set === 'undefined' ? undefined : Set,
	'%SetIteratorPrototype%': typeof Set === 'undefined' || !hasSymbols ? undefined : getProto(new Set()[Symbol.iterator]()),
	'%SharedArrayBuffer%': typeof SharedArrayBuffer === 'undefined' ? undefined : SharedArrayBuffer,
	'%String%': String,
	'%StringIteratorPrototype%': hasSymbols ? getProto(''[Symbol.iterator]()) : undefined,
	'%Symbol%': hasSymbols ? Symbol : undefined,
	'%SyntaxError%': $SyntaxError,
	'%ThrowTypeError%': ThrowTypeError,
	'%TypedArray%': TypedArray,
	'%TypeError%': $TypeError,
	'%Uint8Array%': typeof Uint8Array === 'undefined' ? undefined : Uint8Array,
	'%Uint8ClampedArray%': typeof Uint8ClampedArray === 'undefined' ? undefined : Uint8ClampedArray,
	'%Uint16Array%': typeof Uint16Array === 'undefined' ? undefined : Uint16Array,
	'%Uint32Array%': typeof Uint32Array === 'undefined' ? undefined : Uint32Array,
	'%URIError%': URIError,
	'%WeakMap%': typeof WeakMap === 'undefined' ? undefined : WeakMap,
	'%WeakRef%': typeof WeakRef === 'undefined' ? undefined : WeakRef,
	'%WeakSet%': typeof WeakSet === 'undefined' ? undefined : WeakSet
};

var doEval = function doEval(name) {
	var value;
	if (name === '%AsyncFunction%') {
		value = getEvalledConstructor('async function () {}');
	} else if (name === '%GeneratorFunction%') {
		value = getEvalledConstructor('function* () {}');
	} else if (name === '%AsyncGeneratorFunction%') {
		value = getEvalledConstructor('async function* () {}');
	} else if (name === '%AsyncGenerator%') {
		var fn = doEval('%AsyncGeneratorFunction%');
		if (fn) {
			value = fn.prototype;
		}
	} else if (name === '%AsyncIteratorPrototype%') {
		var gen = doEval('%AsyncGenerator%');
		if (gen) {
			value = getProto(gen.prototype);
		}
	}

	INTRINSICS[name] = value;

	return value;
};

var LEGACY_ALIASES = {
	'%ArrayBufferPrototype%': ['ArrayBuffer', 'prototype'],
	'%ArrayPrototype%': ['Array', 'prototype'],
	'%ArrayProto_entries%': ['Array', 'prototype', 'entries'],
	'%ArrayProto_forEach%': ['Array', 'prototype', 'forEach'],
	'%ArrayProto_keys%': ['Array', 'prototype', 'keys'],
	'%ArrayProto_values%': ['Array', 'prototype', 'values'],
	'%AsyncFunctionPrototype%': ['AsyncFunction', 'prototype'],
	'%AsyncGenerator%': ['AsyncGeneratorFunction', 'prototype'],
	'%AsyncGeneratorPrototype%': ['AsyncGeneratorFunction', 'prototype', 'prototype'],
	'%BooleanPrototype%': ['Boolean', 'prototype'],
	'%DataViewPrototype%': ['DataView', 'prototype'],
	'%DatePrototype%': ['Date', 'prototype'],
	'%ErrorPrototype%': ['Error', 'prototype'],
	'%EvalErrorPrototype%': ['EvalError', 'prototype'],
	'%Float32ArrayPrototype%': ['Float32Array', 'prototype'],
	'%Float64ArrayPrototype%': ['Float64Array', 'prototype'],
	'%FunctionPrototype%': ['Function', 'prototype'],
	'%Generator%': ['GeneratorFunction', 'prototype'],
	'%GeneratorPrototype%': ['GeneratorFunction', 'prototype', 'prototype'],
	'%Int8ArrayPrototype%': ['Int8Array', 'prototype'],
	'%Int16ArrayPrototype%': ['Int16Array', 'prototype'],
	'%Int32ArrayPrototype%': ['Int32Array', 'prototype'],
	'%JSONParse%': ['JSON', 'parse'],
	'%JSONStringify%': ['JSON', 'stringify'],
	'%MapPrototype%': ['Map', 'prototype'],
	'%NumberPrototype%': ['Number', 'prototype'],
	'%ObjectPrototype%': ['Object', 'prototype'],
	'%ObjProto_toString%': ['Object', 'prototype', 'toString'],
	'%ObjProto_valueOf%': ['Object', 'prototype', 'valueOf'],
	'%PromisePrototype%': ['Promise', 'prototype'],
	'%PromiseProto_then%': ['Promise', 'prototype', 'then'],
	'%Promise_all%': ['Promise', 'all'],
	'%Promise_reject%': ['Promise', 'reject'],
	'%Promise_resolve%': ['Promise', 'resolve'],
	'%RangeErrorPrototype%': ['RangeError', 'prototype'],
	'%ReferenceErrorPrototype%': ['ReferenceError', 'prototype'],
	'%RegExpPrototype%': ['RegExp', 'prototype'],
	'%SetPrototype%': ['Set', 'prototype'],
	'%SharedArrayBufferPrototype%': ['SharedArrayBuffer', 'prototype'],
	'%StringPrototype%': ['String', 'prototype'],
	'%SymbolPrototype%': ['Symbol', 'prototype'],
	'%SyntaxErrorPrototype%': ['SyntaxError', 'prototype'],
	'%TypedArrayPrototype%': ['TypedArray', 'prototype'],
	'%TypeErrorPrototype%': ['TypeError', 'prototype'],
	'%Uint8ArrayPrototype%': ['Uint8Array', 'prototype'],
	'%Uint8ClampedArrayPrototype%': ['Uint8ClampedArray', 'prototype'],
	'%Uint16ArrayPrototype%': ['Uint16Array', 'prototype'],
	'%Uint32ArrayPrototype%': ['Uint32Array', 'prototype'],
	'%URIErrorPrototype%': ['URIError', 'prototype'],
	'%WeakMapPrototype%': ['WeakMap', 'prototype'],
	'%WeakSetPrototype%': ['WeakSet', 'prototype']
};

var bind = __webpack_require__(60497);
var hasOwn = __webpack_require__(98356);
var $concat = bind.call(Function.call, Array.prototype.concat);
var $spliceApply = bind.call(Function.apply, Array.prototype.splice);
var $replace = bind.call(Function.call, String.prototype.replace);
var $strSlice = bind.call(Function.call, String.prototype.slice);

/* adapted from https://github.com/lodash/lodash/blob/4.17.15/dist/lodash.js#L6735-L6744 */
var rePropName = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g;
var reEscapeChar = /\\(\\)?/g; /** Used to match backslashes in property paths. */
var stringToPath = function stringToPath(string) {
	var first = $strSlice(string, 0, 1);
	var last = $strSlice(string, -1);
	if (first === '%' && last !== '%') {
		throw new $SyntaxError('invalid intrinsic syntax, expected closing `%`');
	} else if (last === '%' && first !== '%') {
		throw new $SyntaxError('invalid intrinsic syntax, expected opening `%`');
	}
	var result = [];
	$replace(string, rePropName, function (match, number, quote, subString) {
		result[result.length] = quote ? $replace(subString, reEscapeChar, '$1') : number || match;
	});
	return result;
};
/* end adaptation */

var getBaseIntrinsic = function getBaseIntrinsic(name, allowMissing) {
	var intrinsicName = name;
	var alias;
	if (hasOwn(LEGACY_ALIASES, intrinsicName)) {
		alias = LEGACY_ALIASES[intrinsicName];
		intrinsicName = '%' + alias[0] + '%';
	}

	if (hasOwn(INTRINSICS, intrinsicName)) {
		var value = INTRINSICS[intrinsicName];
		if (value === needsEval) {
			value = doEval(intrinsicName);
		}
		if (typeof value === 'undefined' && !allowMissing) {
			throw new $TypeError('intrinsic ' + name + ' exists, but is not available. Please file an issue!');
		}

		return {
			alias: alias,
			name: intrinsicName,
			value: value
		};
	}

	throw new $SyntaxError('intrinsic ' + name + ' does not exist!');
};

module.exports = function GetIntrinsic(name, allowMissing) {
	if (typeof name !== 'string' || name.length === 0) {
		throw new $TypeError('intrinsic name must be a non-empty string');
	}
	if (arguments.length > 1 && typeof allowMissing !== 'boolean') {
		throw new $TypeError('"allowMissing" argument must be a boolean');
	}

	var parts = stringToPath(name);
	var intrinsicBaseName = parts.length > 0 ? parts[0] : '';

	var intrinsic = getBaseIntrinsic('%' + intrinsicBaseName + '%', allowMissing);
	var intrinsicRealName = intrinsic.name;
	var value = intrinsic.value;
	var skipFurtherCaching = false;

	var alias = intrinsic.alias;
	if (alias) {
		intrinsicBaseName = alias[0];
		$spliceApply(parts, $concat([0, 1], alias));
	}

	for (var i = 1, isOwn = true; i < parts.length; i += 1) {
		var part = parts[i];
		var first = $strSlice(part, 0, 1);
		var last = $strSlice(part, -1);
		if (
			(
				(first === '"' || first === "'" || first === '`')
				|| (last === '"' || last === "'" || last === '`')
			)
			&& first !== last
		) {
			throw new $SyntaxError('property names with quotes must have matching quotes');
		}
		if (part === 'constructor' || !isOwn) {
			skipFurtherCaching = true;
		}

		intrinsicBaseName += '.' + part;
		intrinsicRealName = '%' + intrinsicBaseName + '%';

		if (hasOwn(INTRINSICS, intrinsicRealName)) {
			value = INTRINSICS[intrinsicRealName];
		} else if (value != null) {
			if (!(part in value)) {
				if (!allowMissing) {
					throw new $TypeError('base intrinsic for ' + name + ' exists, but the property is not available.');
				}
				return void undefined;
			}
			if ($gOPD && (i + 1) >= parts.length) {
				var desc = $gOPD(value, part);
				isOwn = !!desc;

				// By convention, when a data property is converted to an accessor
				// property to emulate a data property that does not suffer from
				// the override mistake, that accessor's getter is marked with
				// an `originalValue` property. Here, when we detect this, we
				// uphold the illusion by pretending to see that original data
				// property, i.e., returning the value rather than the getter
				// itself.
				if (isOwn && 'get' in desc && !('originalValue' in desc.get)) {
					value = desc.get;
				} else {
					value = value[part];
				}
			} else {
				isOwn = hasOwn(value, part);
				value = value[part];
			}

			if (isOwn && !skipFurtherCaching) {
				INTRINSICS[intrinsicRealName] = value;
			}
		}
	}
	return value;
};


/***/ }),

/***/ 75913:
/***/ ((module) => {

"use strict";


var test = {
	foo: {}
};

var $Object = Object;

module.exports = function hasProto() {
	return { __proto__: test }.foo === test.foo && !({ __proto__: null } instanceof $Object);
};


/***/ }),

/***/ 66478:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var origSymbol = typeof Symbol !== 'undefined' && Symbol;
var hasSymbolSham = __webpack_require__(74860);

module.exports = function hasNativeSymbols() {
	if (typeof origSymbol !== 'function') { return false; }
	if (typeof Symbol !== 'function') { return false; }
	if (typeof origSymbol('foo') !== 'symbol') { return false; }
	if (typeof Symbol('bar') !== 'symbol') { return false; }

	return hasSymbolSham();
};


/***/ }),

/***/ 74860:
/***/ ((module) => {

"use strict";


/* eslint complexity: [2, 18], max-statements: [2, 33] */
module.exports = function hasSymbols() {
	if (typeof Symbol !== 'function' || typeof Object.getOwnPropertySymbols !== 'function') { return false; }
	if (typeof Symbol.iterator === 'symbol') { return true; }

	var obj = {};
	var sym = Symbol('test');
	var symObj = Object(sym);
	if (typeof sym === 'string') { return false; }

	if (Object.prototype.toString.call(sym) !== '[object Symbol]') { return false; }
	if (Object.prototype.toString.call(symObj) !== '[object Symbol]') { return false; }

	// temp disabled per https://github.com/ljharb/object.assign/issues/17
	// if (sym instanceof Symbol) { return false; }
	// temp disabled per https://github.com/WebReflection/get-own-property-symbols/issues/4
	// if (!(symObj instanceof Symbol)) { return false; }

	// if (typeof Symbol.prototype.toString !== 'function') { return false; }
	// if (String(sym) !== Symbol.prototype.toString.call(sym)) { return false; }

	var symVal = 42;
	obj[sym] = symVal;
	for (sym in obj) { return false; } // eslint-disable-line no-restricted-syntax, no-unreachable-loop
	if (typeof Object.keys === 'function' && Object.keys(obj).length !== 0) { return false; }

	if (typeof Object.getOwnPropertyNames === 'function' && Object.getOwnPropertyNames(obj).length !== 0) { return false; }

	var syms = Object.getOwnPropertySymbols(obj);
	if (syms.length !== 1 || syms[0] !== sym) { return false; }

	if (!Object.prototype.propertyIsEnumerable.call(obj, sym)) { return false; }

	if (typeof Object.getOwnPropertyDescriptor === 'function') {
		var descriptor = Object.getOwnPropertyDescriptor(obj, sym);
		if (descriptor.value !== symVal || descriptor.enumerable !== true) { return false; }
	}

	return true;
};


/***/ }),

/***/ 24611:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var hasSymbols = __webpack_require__(74860);

module.exports = function hasToStringTagShams() {
	return hasSymbols() && !!Symbol.toStringTag;
};


/***/ }),

/***/ 98356:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var bind = __webpack_require__(60497);

module.exports = bind.call(Function.call, Object.prototype.hasOwnProperty);


/***/ }),

/***/ 96186:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var call = Function.prototype.call;
var $hasOwn = Object.prototype.hasOwnProperty;
var bind = __webpack_require__(99962);

/** @type {(o: {}, p: PropertyKey) => p is keyof o} */
module.exports = bind.call(call, $hasOwn);


/***/ }),

/***/ 31339:
/***/ ((module) => {

"use strict";


/* eslint no-invalid-this: 1 */

var ERROR_MESSAGE = 'Function.prototype.bind called on incompatible ';
var toStr = Object.prototype.toString;
var max = Math.max;
var funcType = '[object Function]';

var concatty = function concatty(a, b) {
    var arr = [];

    for (var i = 0; i < a.length; i += 1) {
        arr[i] = a[i];
    }
    for (var j = 0; j < b.length; j += 1) {
        arr[j + a.length] = b[j];
    }

    return arr;
};

var slicy = function slicy(arrLike, offset) {
    var arr = [];
    for (var i = offset || 0, j = 0; i < arrLike.length; i += 1, j += 1) {
        arr[j] = arrLike[i];
    }
    return arr;
};

var joiny = function (arr, joiner) {
    var str = '';
    for (var i = 0; i < arr.length; i += 1) {
        str += arr[i];
        if (i + 1 < arr.length) {
            str += joiner;
        }
    }
    return str;
};

module.exports = function bind(that) {
    var target = this;
    if (typeof target !== 'function' || toStr.apply(target) !== funcType) {
        throw new TypeError(ERROR_MESSAGE + target);
    }
    var args = slicy(arguments, 1);

    var bound;
    var binder = function () {
        if (this instanceof bound) {
            var result = target.apply(
                this,
                concatty(args, arguments)
            );
            if (Object(result) === result) {
                return result;
            }
            return this;
        }
        return target.apply(
            that,
            concatty(args, arguments)
        );

    };

    var boundLength = max(0, target.length - args.length);
    var boundArgs = [];
    for (var i = 0; i < boundLength; i++) {
        boundArgs[i] = '$' + i;
    }

    bound = Function('binder', 'return function (' + joiny(boundArgs, ',') + '){ return binder.apply(this,arguments); }')(binder);

    if (target.prototype) {
        var Empty = function Empty() {};
        Empty.prototype = target.prototype;
        bound.prototype = new Empty();
        Empty.prototype = null;
    }

    return bound;
};


/***/ }),

/***/ 99962:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var implementation = __webpack_require__(31339);

module.exports = Function.prototype.bind || implementation;


/***/ }),

/***/ 77572:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

var Buffer = (__webpack_require__(52931).Buffer);

// Multibyte codec. In this scheme, a character is represented by 1 or more bytes.
// Our codec supports UTF-16 surrogates, extensions for GB18030 and unicode sequences.
// To save memory and loading time, we read table files only when requested.

exports._dbcs = DBCSCodec;

var UNASSIGNED = -1,
    GB18030_CODE = -2,
    SEQ_START  = -10,
    NODE_START = -1000,
    UNASSIGNED_NODE = new Array(0x100),
    DEF_CHAR = -1;

for (var i = 0; i < 0x100; i++)
    UNASSIGNED_NODE[i] = UNASSIGNED;


// Class DBCSCodec reads and initializes mapping tables.
function DBCSCodec(codecOptions, iconv) {
    this.encodingName = codecOptions.encodingName;
    if (!codecOptions)
        throw new Error("DBCS codec is called without the data.")
    if (!codecOptions.table)
        throw new Error("Encoding '" + this.encodingName + "' has no data.");

    // Load tables.
    var mappingTable = codecOptions.table();


    // Decode tables: MBCS -> Unicode.

    // decodeTables is a trie, encoded as an array of arrays of integers. Internal arrays are trie nodes and all have len = 256.
    // Trie root is decodeTables[0].
    // Values: >=  0 -> unicode character code. can be > 0xFFFF
    //         == UNASSIGNED -> unknown/unassigned sequence.
    //         == GB18030_CODE -> this is the end of a GB18030 4-byte sequence.
    //         <= NODE_START -> index of the next node in our trie to process next byte.
    //         <= SEQ_START  -> index of the start of a character code sequence, in decodeTableSeq.
    this.decodeTables = [];
    this.decodeTables[0] = UNASSIGNED_NODE.slice(0); // Create root node.

    // Sometimes a MBCS char corresponds to a sequence of unicode chars. We store them as arrays of integers here. 
    this.decodeTableSeq = [];

    // Actual mapping tables consist of chunks. Use them to fill up decode tables.
    for (var i = 0; i < mappingTable.length; i++)
        this._addDecodeChunk(mappingTable[i]);

    // Load & create GB18030 tables when needed.
    if (typeof codecOptions.gb18030 === 'function') {
        this.gb18030 = codecOptions.gb18030(); // Load GB18030 ranges.

        // Add GB18030 common decode nodes.
        var commonThirdByteNodeIdx = this.decodeTables.length;
        this.decodeTables.push(UNASSIGNED_NODE.slice(0));

        var commonFourthByteNodeIdx = this.decodeTables.length;
        this.decodeTables.push(UNASSIGNED_NODE.slice(0));

        // Fill out the tree
        var firstByteNode = this.decodeTables[0];
        for (var i = 0x81; i <= 0xFE; i++) {
            var secondByteNode = this.decodeTables[NODE_START - firstByteNode[i]];
            for (var j = 0x30; j <= 0x39; j++) {
                if (secondByteNode[j] === UNASSIGNED) {
                    secondByteNode[j] = NODE_START - commonThirdByteNodeIdx;
                } else if (secondByteNode[j] > NODE_START) {
                    throw new Error("gb18030 decode tables conflict at byte 2");
                }

                var thirdByteNode = this.decodeTables[NODE_START - secondByteNode[j]];
                for (var k = 0x81; k <= 0xFE; k++) {
                    if (thirdByteNode[k] === UNASSIGNED) {
                        thirdByteNode[k] = NODE_START - commonFourthByteNodeIdx;
                    } else if (thirdByteNode[k] === NODE_START - commonFourthByteNodeIdx) {
                        continue;
                    } else if (thirdByteNode[k] > NODE_START) {
                        throw new Error("gb18030 decode tables conflict at byte 3");
                    }

                    var fourthByteNode = this.decodeTables[NODE_START - thirdByteNode[k]];
                    for (var l = 0x30; l <= 0x39; l++) {
                        if (fourthByteNode[l] === UNASSIGNED)
                            fourthByteNode[l] = GB18030_CODE;
                    }
                }
            }
        }
    }

    this.defaultCharUnicode = iconv.defaultCharUnicode;

    
    // Encode tables: Unicode -> DBCS.

    // `encodeTable` is array mapping from unicode char to encoded char. All its values are integers for performance.
    // Because it can be sparse, it is represented as array of buckets by 256 chars each. Bucket can be null.
    // Values: >=  0 -> it is a normal char. Write the value (if <=256 then 1 byte, if <=65536 then 2 bytes, etc.).
    //         == UNASSIGNED -> no conversion found. Output a default char.
    //         <= SEQ_START  -> it's an index in encodeTableSeq, see below. The character starts a sequence.
    this.encodeTable = [];
    
    // `encodeTableSeq` is used when a sequence of unicode characters is encoded as a single code. We use a tree of
    // objects where keys correspond to characters in sequence and leafs are the encoded dbcs values. A special DEF_CHAR key
    // means end of sequence (needed when one sequence is a strict subsequence of another).
    // Objects are kept separately from encodeTable to increase performance.
    this.encodeTableSeq = [];

    // Some chars can be decoded, but need not be encoded.
    var skipEncodeChars = {};
    if (codecOptions.encodeSkipVals)
        for (var i = 0; i < codecOptions.encodeSkipVals.length; i++) {
            var val = codecOptions.encodeSkipVals[i];
            if (typeof val === 'number')
                skipEncodeChars[val] = true;
            else
                for (var j = val.from; j <= val.to; j++)
                    skipEncodeChars[j] = true;
        }
        
    // Use decode trie to recursively fill out encode tables.
    this._fillEncodeTable(0, 0, skipEncodeChars);

    // Add more encoding pairs when needed.
    if (codecOptions.encodeAdd) {
        for (var uChar in codecOptions.encodeAdd)
            if (Object.prototype.hasOwnProperty.call(codecOptions.encodeAdd, uChar))
                this._setEncodeChar(uChar.charCodeAt(0), codecOptions.encodeAdd[uChar]);
    }

    this.defCharSB  = this.encodeTable[0][iconv.defaultCharSingleByte.charCodeAt(0)];
    if (this.defCharSB === UNASSIGNED) this.defCharSB = this.encodeTable[0]['?'];
    if (this.defCharSB === UNASSIGNED) this.defCharSB = "?".charCodeAt(0);
}

DBCSCodec.prototype.encoder = DBCSEncoder;
DBCSCodec.prototype.decoder = DBCSDecoder;

// Decoder helpers
DBCSCodec.prototype._getDecodeTrieNode = function(addr) {
    var bytes = [];
    for (; addr > 0; addr >>>= 8)
        bytes.push(addr & 0xFF);
    if (bytes.length == 0)
        bytes.push(0);

    var node = this.decodeTables[0];
    for (var i = bytes.length-1; i > 0; i--) { // Traverse nodes deeper into the trie.
        var val = node[bytes[i]];

        if (val == UNASSIGNED) { // Create new node.
            node[bytes[i]] = NODE_START - this.decodeTables.length;
            this.decodeTables.push(node = UNASSIGNED_NODE.slice(0));
        }
        else if (val <= NODE_START) { // Existing node.
            node = this.decodeTables[NODE_START - val];
        }
        else
            throw new Error("Overwrite byte in " + this.encodingName + ", addr: " + addr.toString(16));
    }
    return node;
}


DBCSCodec.prototype._addDecodeChunk = function(chunk) {
    // First element of chunk is the hex mbcs code where we start.
    var curAddr = parseInt(chunk[0], 16);

    // Choose the decoding node where we'll write our chars.
    var writeTable = this._getDecodeTrieNode(curAddr);
    curAddr = curAddr & 0xFF;

    // Write all other elements of the chunk to the table.
    for (var k = 1; k < chunk.length; k++) {
        var part = chunk[k];
        if (typeof part === "string") { // String, write as-is.
            for (var l = 0; l < part.length;) {
                var code = part.charCodeAt(l++);
                if (0xD800 <= code && code < 0xDC00) { // Decode surrogate
                    var codeTrail = part.charCodeAt(l++);
                    if (0xDC00 <= codeTrail && codeTrail < 0xE000)
                        writeTable[curAddr++] = 0x10000 + (code - 0xD800) * 0x400 + (codeTrail - 0xDC00);
                    else
                        throw new Error("Incorrect surrogate pair in "  + this.encodingName + " at chunk " + chunk[0]);
                }
                else if (0x0FF0 < code && code <= 0x0FFF) { // Character sequence (our own encoding used)
                    var len = 0xFFF - code + 2;
                    var seq = [];
                    for (var m = 0; m < len; m++)
                        seq.push(part.charCodeAt(l++)); // Simple variation: don't support surrogates or subsequences in seq.

                    writeTable[curAddr++] = SEQ_START - this.decodeTableSeq.length;
                    this.decodeTableSeq.push(seq);
                }
                else
                    writeTable[curAddr++] = code; // Basic char
            }
        } 
        else if (typeof part === "number") { // Integer, meaning increasing sequence starting with prev character.
            var charCode = writeTable[curAddr - 1] + 1;
            for (var l = 0; l < part; l++)
                writeTable[curAddr++] = charCode++;
        }
        else
            throw new Error("Incorrect type '" + typeof part + "' given in "  + this.encodingName + " at chunk " + chunk[0]);
    }
    if (curAddr > 0xFF)
        throw new Error("Incorrect chunk in "  + this.encodingName + " at addr " + chunk[0] + ": too long" + curAddr);
}

// Encoder helpers
DBCSCodec.prototype._getEncodeBucket = function(uCode) {
    var high = uCode >> 8; // This could be > 0xFF because of astral characters.
    if (this.encodeTable[high] === undefined)
        this.encodeTable[high] = UNASSIGNED_NODE.slice(0); // Create bucket on demand.
    return this.encodeTable[high];
}

DBCSCodec.prototype._setEncodeChar = function(uCode, dbcsCode) {
    var bucket = this._getEncodeBucket(uCode);
    var low = uCode & 0xFF;
    if (bucket[low] <= SEQ_START)
        this.encodeTableSeq[SEQ_START-bucket[low]][DEF_CHAR] = dbcsCode; // There's already a sequence, set a single-char subsequence of it.
    else if (bucket[low] == UNASSIGNED)
        bucket[low] = dbcsCode;
}

DBCSCodec.prototype._setEncodeSequence = function(seq, dbcsCode) {
    
    // Get the root of character tree according to first character of the sequence.
    var uCode = seq[0];
    var bucket = this._getEncodeBucket(uCode);
    var low = uCode & 0xFF;

    var node;
    if (bucket[low] <= SEQ_START) {
        // There's already a sequence with  - use it.
        node = this.encodeTableSeq[SEQ_START-bucket[low]];
    }
    else {
        // There was no sequence object - allocate a new one.
        node = {};
        if (bucket[low] !== UNASSIGNED) node[DEF_CHAR] = bucket[low]; // If a char was set before - make it a single-char subsequence.
        bucket[low] = SEQ_START - this.encodeTableSeq.length;
        this.encodeTableSeq.push(node);
    }

    // Traverse the character tree, allocating new nodes as needed.
    for (var j = 1; j < seq.length-1; j++) {
        var oldVal = node[uCode];
        if (typeof oldVal === 'object')
            node = oldVal;
        else {
            node = node[uCode] = {}
            if (oldVal !== undefined)
                node[DEF_CHAR] = oldVal
        }
    }

    // Set the leaf to given dbcsCode.
    uCode = seq[seq.length-1];
    node[uCode] = dbcsCode;
}

DBCSCodec.prototype._fillEncodeTable = function(nodeIdx, prefix, skipEncodeChars) {
    var node = this.decodeTables[nodeIdx];
    var hasValues = false;
    var subNodeEmpty = {};
    for (var i = 0; i < 0x100; i++) {
        var uCode = node[i];
        var mbCode = prefix + i;
        if (skipEncodeChars[mbCode])
            continue;

        if (uCode >= 0) {
            this._setEncodeChar(uCode, mbCode);
            hasValues = true;
        } else if (uCode <= NODE_START) {
            var subNodeIdx = NODE_START - uCode;
            if (!subNodeEmpty[subNodeIdx]) {  // Skip empty subtrees (they are too large in gb18030).
                var newPrefix = (mbCode << 8) >>> 0;  // NOTE: '>>> 0' keeps 32-bit num positive.
                if (this._fillEncodeTable(subNodeIdx, newPrefix, skipEncodeChars))
                    hasValues = true;
                else
                    subNodeEmpty[subNodeIdx] = true;
            }
        } else if (uCode <= SEQ_START) {
            this._setEncodeSequence(this.decodeTableSeq[SEQ_START - uCode], mbCode);
            hasValues = true;
        }
    }
    return hasValues;
}



// == Encoder ==================================================================

function DBCSEncoder(options, codec) {
    // Encoder state
    this.leadSurrogate = -1;
    this.seqObj = undefined;
    
    // Static data
    this.encodeTable = codec.encodeTable;
    this.encodeTableSeq = codec.encodeTableSeq;
    this.defaultCharSingleByte = codec.defCharSB;
    this.gb18030 = codec.gb18030;
}

DBCSEncoder.prototype.write = function(str) {
    var newBuf = Buffer.alloc(str.length * (this.gb18030 ? 4 : 3)),
        leadSurrogate = this.leadSurrogate,
        seqObj = this.seqObj, nextChar = -1,
        i = 0, j = 0;

    while (true) {
        // 0. Get next character.
        if (nextChar === -1) {
            if (i == str.length) break;
            var uCode = str.charCodeAt(i++);
        }
        else {
            var uCode = nextChar;
            nextChar = -1;    
        }

        // 1. Handle surrogates.
        if (0xD800 <= uCode && uCode < 0xE000) { // Char is one of surrogates.
            if (uCode < 0xDC00) { // We've got lead surrogate.
                if (leadSurrogate === -1) {
                    leadSurrogate = uCode;
                    continue;
                } else {
                    leadSurrogate = uCode;
                    // Double lead surrogate found.
                    uCode = UNASSIGNED;
                }
            } else { // We've got trail surrogate.
                if (leadSurrogate !== -1) {
                    uCode = 0x10000 + (leadSurrogate - 0xD800) * 0x400 + (uCode - 0xDC00);
                    leadSurrogate = -1;
                } else {
                    // Incomplete surrogate pair - only trail surrogate found.
                    uCode = UNASSIGNED;
                }
                
            }
        }
        else if (leadSurrogate !== -1) {
            // Incomplete surrogate pair - only lead surrogate found.
            nextChar = uCode; uCode = UNASSIGNED; // Write an error, then current char.
            leadSurrogate = -1;
        }

        // 2. Convert uCode character.
        var dbcsCode = UNASSIGNED;
        if (seqObj !== undefined && uCode != UNASSIGNED) { // We are in the middle of the sequence
            var resCode = seqObj[uCode];
            if (typeof resCode === 'object') { // Sequence continues.
                seqObj = resCode;
                continue;

            } else if (typeof resCode == 'number') { // Sequence finished. Write it.
                dbcsCode = resCode;

            } else if (resCode == undefined) { // Current character is not part of the sequence.

                // Try default character for this sequence
                resCode = seqObj[DEF_CHAR];
                if (resCode !== undefined) {
                    dbcsCode = resCode; // Found. Write it.
                    nextChar = uCode; // Current character will be written too in the next iteration.

                } else {
                    // TODO: What if we have no default? (resCode == undefined)
                    // Then, we should write first char of the sequence as-is and try the rest recursively.
                    // Didn't do it for now because no encoding has this situation yet.
                    // Currently, just skip the sequence and write current char.
                }
            }
            seqObj = undefined;
        }
        else if (uCode >= 0) {  // Regular character
            var subtable = this.encodeTable[uCode >> 8];
            if (subtable !== undefined)
                dbcsCode = subtable[uCode & 0xFF];
            
            if (dbcsCode <= SEQ_START) { // Sequence start
                seqObj = this.encodeTableSeq[SEQ_START-dbcsCode];
                continue;
            }

            if (dbcsCode == UNASSIGNED && this.gb18030) {
                // Use GB18030 algorithm to find character(s) to write.
                var idx = findIdx(this.gb18030.uChars, uCode);
                if (idx != -1) {
                    var dbcsCode = this.gb18030.gbChars[idx] + (uCode - this.gb18030.uChars[idx]);
                    newBuf[j++] = 0x81 + Math.floor(dbcsCode / 12600); dbcsCode = dbcsCode % 12600;
                    newBuf[j++] = 0x30 + Math.floor(dbcsCode / 1260); dbcsCode = dbcsCode % 1260;
                    newBuf[j++] = 0x81 + Math.floor(dbcsCode / 10); dbcsCode = dbcsCode % 10;
                    newBuf[j++] = 0x30 + dbcsCode;
                    continue;
                }
            }
        }

        // 3. Write dbcsCode character.
        if (dbcsCode === UNASSIGNED)
            dbcsCode = this.defaultCharSingleByte;
        
        if (dbcsCode < 0x100) {
            newBuf[j++] = dbcsCode;
        }
        else if (dbcsCode < 0x10000) {
            newBuf[j++] = dbcsCode >> 8;   // high byte
            newBuf[j++] = dbcsCode & 0xFF; // low byte
        }
        else if (dbcsCode < 0x1000000) {
            newBuf[j++] = dbcsCode >> 16;
            newBuf[j++] = (dbcsCode >> 8) & 0xFF;
            newBuf[j++] = dbcsCode & 0xFF;
        } else {
            newBuf[j++] = dbcsCode >>> 24;
            newBuf[j++] = (dbcsCode >>> 16) & 0xFF;
            newBuf[j++] = (dbcsCode >>> 8) & 0xFF;
            newBuf[j++] = dbcsCode & 0xFF;
        }
    }

    this.seqObj = seqObj;
    this.leadSurrogate = leadSurrogate;
    return newBuf.slice(0, j);
}

DBCSEncoder.prototype.end = function() {
    if (this.leadSurrogate === -1 && this.seqObj === undefined)
        return; // All clean. Most often case.

    var newBuf = Buffer.alloc(10), j = 0;

    if (this.seqObj) { // We're in the sequence.
        var dbcsCode = this.seqObj[DEF_CHAR];
        if (dbcsCode !== undefined) { // Write beginning of the sequence.
            if (dbcsCode < 0x100) {
                newBuf[j++] = dbcsCode;
            }
            else {
                newBuf[j++] = dbcsCode >> 8;   // high byte
                newBuf[j++] = dbcsCode & 0xFF; // low byte
            }
        } else {
            // See todo above.
        }
        this.seqObj = undefined;
    }

    if (this.leadSurrogate !== -1) {
        // Incomplete surrogate pair - only lead surrogate found.
        newBuf[j++] = this.defaultCharSingleByte;
        this.leadSurrogate = -1;
    }
    
    return newBuf.slice(0, j);
}

// Export for testing
DBCSEncoder.prototype.findIdx = findIdx;


// == Decoder ==================================================================

function DBCSDecoder(options, codec) {
    // Decoder state
    this.nodeIdx = 0;
    this.prevBytes = [];

    // Static data
    this.decodeTables = codec.decodeTables;
    this.decodeTableSeq = codec.decodeTableSeq;
    this.defaultCharUnicode = codec.defaultCharUnicode;
    this.gb18030 = codec.gb18030;
}

DBCSDecoder.prototype.write = function(buf) {
    var newBuf = Buffer.alloc(buf.length*2),
        nodeIdx = this.nodeIdx, 
        prevBytes = this.prevBytes, prevOffset = this.prevBytes.length,
        seqStart = -this.prevBytes.length, // idx of the start of current parsed sequence.
        uCode;

    for (var i = 0, j = 0; i < buf.length; i++) {
        var curByte = (i >= 0) ? buf[i] : prevBytes[i + prevOffset];

        // Lookup in current trie node.
        var uCode = this.decodeTables[nodeIdx][curByte];

        if (uCode >= 0) { 
            // Normal character, just use it.
        }
        else if (uCode === UNASSIGNED) { // Unknown char.
            // TODO: Callback with seq.
            uCode = this.defaultCharUnicode.charCodeAt(0);
            i = seqStart; // Skip one byte ('i' will be incremented by the for loop) and try to parse again.
        }
        else if (uCode === GB18030_CODE) {
            if (i >= 3) {
                var ptr = (buf[i-3]-0x81)*12600 + (buf[i-2]-0x30)*1260 + (buf[i-1]-0x81)*10 + (curByte-0x30);
            } else {
                var ptr = (prevBytes[i-3+prevOffset]-0x81)*12600 + 
                          (((i-2 >= 0) ? buf[i-2] : prevBytes[i-2+prevOffset])-0x30)*1260 + 
                          (((i-1 >= 0) ? buf[i-1] : prevBytes[i-1+prevOffset])-0x81)*10 + 
                          (curByte-0x30);
            }
            var idx = findIdx(this.gb18030.gbChars, ptr);
            uCode = this.gb18030.uChars[idx] + ptr - this.gb18030.gbChars[idx];
        }
        else if (uCode <= NODE_START) { // Go to next trie node.
            nodeIdx = NODE_START - uCode;
            continue;
        }
        else if (uCode <= SEQ_START) { // Output a sequence of chars.
            var seq = this.decodeTableSeq[SEQ_START - uCode];
            for (var k = 0; k < seq.length - 1; k++) {
                uCode = seq[k];
                newBuf[j++] = uCode & 0xFF;
                newBuf[j++] = uCode >> 8;
            }
            uCode = seq[seq.length-1];
        }
        else
            throw new Error("iconv-lite internal error: invalid decoding table value " + uCode + " at " + nodeIdx + "/" + curByte);

        // Write the character to buffer, handling higher planes using surrogate pair.
        if (uCode >= 0x10000) { 
            uCode -= 0x10000;
            var uCodeLead = 0xD800 | (uCode >> 10);
            newBuf[j++] = uCodeLead & 0xFF;
            newBuf[j++] = uCodeLead >> 8;

            uCode = 0xDC00 | (uCode & 0x3FF);
        }
        newBuf[j++] = uCode & 0xFF;
        newBuf[j++] = uCode >> 8;

        // Reset trie node.
        nodeIdx = 0; seqStart = i+1;
    }

    this.nodeIdx = nodeIdx;
    this.prevBytes = (seqStart >= 0)
        ? Array.prototype.slice.call(buf, seqStart)
        : prevBytes.slice(seqStart + prevOffset).concat(Array.prototype.slice.call(buf));

    return newBuf.slice(0, j).toString('ucs2');
}

DBCSDecoder.prototype.end = function() {
    var ret = '';

    // Try to parse all remaining chars.
    while (this.prevBytes.length > 0) {
        // Skip 1 character in the buffer.
        ret += this.defaultCharUnicode;
        var bytesArr = this.prevBytes.slice(1);

        // Parse remaining as usual.
        this.prevBytes = [];
        this.nodeIdx = 0;
        if (bytesArr.length > 0)
            ret += this.write(bytesArr);
    }

    this.prevBytes = [];
    this.nodeIdx = 0;
    return ret;
}

// Binary search for GB18030. Returns largest i such that table[i] <= val.
function findIdx(table, val) {
    if (table[0] > val)
        return -1;

    var l = 0, r = table.length;
    while (l < r-1) { // always table[l] <= val < table[r]
        var mid = l + ((r-l+1) >> 1);
        if (table[mid] <= val)
            l = mid;
        else
            r = mid;
    }
    return l;
}



/***/ }),

/***/ 97160:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


// Description of supported double byte encodings and aliases.
// Tables are not require()-d until they are needed to speed up library load.
// require()-s are direct to support Browserify.

module.exports = {
    
    // == Japanese/ShiftJIS ====================================================
    // All japanese encodings are based on JIS X set of standards:
    // JIS X 0201 - Single-byte encoding of ASCII + ¥ + Kana chars at 0xA1-0xDF.
    // JIS X 0208 - Main set of 6879 characters, placed in 94x94 plane, to be encoded by 2 bytes. 
    //              Has several variations in 1978, 1983, 1990 and 1997.
    // JIS X 0212 - Supplementary plane of 6067 chars in 94x94 plane. 1990. Effectively dead.
    // JIS X 0213 - Extension and modern replacement of 0208 and 0212. Total chars: 11233.
    //              2 planes, first is superset of 0208, second - revised 0212.
    //              Introduced in 2000, revised 2004. Some characters are in Unicode Plane 2 (0x2xxxx)

    // Byte encodings are:
    //  * Shift_JIS: Compatible with 0201, uses not defined chars in top half as lead bytes for double-byte
    //               encoding of 0208. Lead byte ranges: 0x81-0x9F, 0xE0-0xEF; Trail byte ranges: 0x40-0x7E, 0x80-0x9E, 0x9F-0xFC.
    //               Windows CP932 is a superset of Shift_JIS. Some companies added more chars, notably KDDI.
    //  * EUC-JP:    Up to 3 bytes per character. Used mostly on *nixes.
    //               0x00-0x7F       - lower part of 0201
    //               0x8E, 0xA1-0xDF - upper part of 0201
    //               (0xA1-0xFE)x2   - 0208 plane (94x94).
    //               0x8F, (0xA1-0xFE)x2 - 0212 plane (94x94).
    //  * JIS X 208: 7-bit, direct encoding of 0208. Byte ranges: 0x21-0x7E (94 values). Uncommon.
    //               Used as-is in ISO2022 family.
    //  * ISO2022-JP: Stateful encoding, with escape sequences to switch between ASCII, 
    //                0201-1976 Roman, 0208-1978, 0208-1983.
    //  * ISO2022-JP-1: Adds esc seq for 0212-1990.
    //  * ISO2022-JP-2: Adds esc seq for GB2313-1980, KSX1001-1992, ISO8859-1, ISO8859-7.
    //  * ISO2022-JP-3: Adds esc seq for 0201-1976 Kana set, 0213-2000 Planes 1, 2.
    //  * ISO2022-JP-2004: Adds 0213-2004 Plane 1.
    //
    // After JIS X 0213 appeared, Shift_JIS-2004, EUC-JISX0213 and ISO2022-JP-2004 followed, with just changing the planes.
    //
    // Overall, it seems that it's a mess :( http://www8.plala.or.jp/tkubota1/unicode-symbols-map2.html

    'shiftjis': {
        type: '_dbcs',
        table: function() { return __webpack_require__(25901) },
        encodeAdd: {'\u00a5': 0x5C, '\u203E': 0x7E},
        encodeSkipVals: [{from: 0xED40, to: 0xF940}],
    },
    'csshiftjis': 'shiftjis',
    'mskanji': 'shiftjis',
    'sjis': 'shiftjis',
    'windows31j': 'shiftjis',
    'ms31j': 'shiftjis',
    'xsjis': 'shiftjis',
    'windows932': 'shiftjis',
    'ms932': 'shiftjis',
    '932': 'shiftjis',
    'cp932': 'shiftjis',

    'eucjp': {
        type: '_dbcs',
        table: function() { return __webpack_require__(29575) },
        encodeAdd: {'\u00a5': 0x5C, '\u203E': 0x7E},
    },

    // TODO: KDDI extension to Shift_JIS
    // TODO: IBM CCSID 942 = CP932, but F0-F9 custom chars and other char changes.
    // TODO: IBM CCSID 943 = Shift_JIS = CP932 with original Shift_JIS lower 128 chars.


    // == Chinese/GBK ==========================================================
    // http://en.wikipedia.org/wiki/GBK
    // We mostly implement W3C recommendation: https://www.w3.org/TR/encoding/#gbk-encoder

    // Oldest GB2312 (1981, ~7600 chars) is a subset of CP936
    'gb2312': 'cp936',
    'gb231280': 'cp936',
    'gb23121980': 'cp936',
    'csgb2312': 'cp936',
    'csiso58gb231280': 'cp936',
    'euccn': 'cp936',

    // Microsoft's CP936 is a subset and approximation of GBK.
    'windows936': 'cp936',
    'ms936': 'cp936',
    '936': 'cp936',
    'cp936': {
        type: '_dbcs',
        table: function() { return __webpack_require__(93969) },
    },

    // GBK (~22000 chars) is an extension of CP936 that added user-mapped chars and some other.
    'gbk': {
        type: '_dbcs',
        table: function() { return (__webpack_require__(93969).concat)(__webpack_require__(14599)) },
    },
    'xgbk': 'gbk',
    'isoir58': 'gbk',

    // GB18030 is an algorithmic extension of GBK.
    // Main source: https://www.w3.org/TR/encoding/#gbk-encoder
    // http://icu-project.org/docs/papers/gb18030.html
    // http://source.icu-project.org/repos/icu/data/trunk/charset/data/xml/gb-18030-2000.xml
    // http://www.khngai.com/chinese/charmap/tblgbk.php?page=0
    'gb18030': {
        type: '_dbcs',
        table: function() { return (__webpack_require__(93969).concat)(__webpack_require__(14599)) },
        gb18030: function() { return __webpack_require__(62135) },
        encodeSkipVals: [0x80],
        encodeAdd: {'€': 0xA2E3},
    },

    'chinese': 'gb18030',


    // == Korean ===============================================================
    // EUC-KR, KS_C_5601 and KS X 1001 are exactly the same.
    'windows949': 'cp949',
    'ms949': 'cp949',
    '949': 'cp949',
    'cp949': {
        type: '_dbcs',
        table: function() { return __webpack_require__(16958) },
    },

    'cseuckr': 'cp949',
    'csksc56011987': 'cp949',
    'euckr': 'cp949',
    'isoir149': 'cp949',
    'korean': 'cp949',
    'ksc56011987': 'cp949',
    'ksc56011989': 'cp949',
    'ksc5601': 'cp949',


    // == Big5/Taiwan/Hong Kong ================================================
    // There are lots of tables for Big5 and cp950. Please see the following links for history:
    // http://moztw.org/docs/big5/  http://www.haible.de/bruno/charsets/conversion-tables/Big5.html
    // Variations, in roughly number of defined chars:
    //  * Windows CP 950: Microsoft variant of Big5. Canonical: http://www.unicode.org/Public/MAPPINGS/VENDORS/MICSFT/WINDOWS/CP950.TXT
    //  * Windows CP 951: Microsoft variant of Big5-HKSCS-2001. Seems to be never public. http://me.abelcheung.org/articles/research/what-is-cp951/
    //  * Big5-2003 (Taiwan standard) almost superset of cp950.
    //  * Unicode-at-on (UAO) / Mozilla 1.8. Falling out of use on the Web. Not supported by other browsers.
    //  * Big5-HKSCS (-2001, -2004, -2008). Hong Kong standard. 
    //    many unicode code points moved from PUA to Supplementary plane (U+2XXXX) over the years.
    //    Plus, it has 4 combining sequences.
    //    Seems that Mozilla refused to support it for 10 yrs. https://bugzilla.mozilla.org/show_bug.cgi?id=162431 https://bugzilla.mozilla.org/show_bug.cgi?id=310299
    //    because big5-hkscs is the only encoding to include astral characters in non-algorithmic way.
    //    Implementations are not consistent within browsers; sometimes labeled as just big5.
    //    MS Internet Explorer switches from big5 to big5-hkscs when a patch applied.
    //    Great discussion & recap of what's going on https://bugzilla.mozilla.org/show_bug.cgi?id=912470#c31
    //    In the encoder, it might make sense to support encoding old PUA mappings to Big5 bytes seq-s.
    //    Official spec: http://www.ogcio.gov.hk/en/business/tech_promotion/ccli/terms/doc/2003cmp_2008.txt
    //                   http://www.ogcio.gov.hk/tc/business/tech_promotion/ccli/terms/doc/hkscs-2008-big5-iso.txt
    // 
    // Current understanding of how to deal with Big5(-HKSCS) is in the Encoding Standard, http://encoding.spec.whatwg.org/#big5-encoder
    // Unicode mapping (http://www.unicode.org/Public/MAPPINGS/OBSOLETE/EASTASIA/OTHER/BIG5.TXT) is said to be wrong.

    'windows950': 'cp950',
    'ms950': 'cp950',
    '950': 'cp950',
    'cp950': {
        type: '_dbcs',
        table: function() { return __webpack_require__(10989) },
    },

    // Big5 has many variations and is an extension of cp950. We use Encoding Standard's as a consensus.
    'big5': 'big5hkscs',
    'big5hkscs': {
        type: '_dbcs',
        table: function() { return (__webpack_require__(10989).concat)(__webpack_require__(5959)) },
        encodeSkipVals: [
            // Although Encoding Standard says we should avoid encoding to HKSCS area (See Step 1 of
            // https://encoding.spec.whatwg.org/#index-big5-pointer), we still do it to increase compatibility with ICU.
            // But if a single unicode point can be encoded both as HKSCS and regular Big5, we prefer the latter.
            0x8e69, 0x8e6f, 0x8e7e, 0x8eab, 0x8eb4, 0x8ecd, 0x8ed0, 0x8f57, 0x8f69, 0x8f6e, 0x8fcb, 0x8ffe,
            0x906d, 0x907a, 0x90c4, 0x90dc, 0x90f1, 0x91bf, 0x92af, 0x92b0, 0x92b1, 0x92b2, 0x92d1, 0x9447, 0x94ca,
            0x95d9, 0x96fc, 0x9975, 0x9b76, 0x9b78, 0x9b7b, 0x9bc6, 0x9bde, 0x9bec, 0x9bf6, 0x9c42, 0x9c53, 0x9c62,
            0x9c68, 0x9c6b, 0x9c77, 0x9cbc, 0x9cbd, 0x9cd0, 0x9d57, 0x9d5a, 0x9dc4, 0x9def, 0x9dfb, 0x9ea9, 0x9eef,
            0x9efd, 0x9f60, 0x9fcb, 0xa077, 0xa0dc, 0xa0df, 0x8fcc, 0x92c8, 0x9644, 0x96ed,

            // Step 2 of https://encoding.spec.whatwg.org/#index-big5-pointer: Use last pointer for U+2550, U+255E, U+2561, U+256A, U+5341, or U+5345
            0xa2a4, 0xa2a5, 0xa2a7, 0xa2a6, 0xa2cc, 0xa2ce,
        ],
    },

    'cnbig5': 'big5hkscs',
    'csbig5': 'big5hkscs',
    'xxbig5': 'big5hkscs',
};


/***/ }),

/***/ 74381:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


// Update this array if you add/rename/remove files in this directory.
// We support Browserify by skipping automatic module discovery and requiring modules directly.
var modules = [
    __webpack_require__(37122),
    __webpack_require__(32644),
    __webpack_require__(29593),
    __webpack_require__(82775),
    __webpack_require__(16443),
    __webpack_require__(33381),
    __webpack_require__(96881),
    __webpack_require__(77572),
    __webpack_require__(97160),
];

// Put all encoding/alias/codec definitions to single object and export it.
for (var i = 0; i < modules.length; i++) {
    var module = modules[i];
    for (var enc in module)
        if (Object.prototype.hasOwnProperty.call(module, enc))
            exports[enc] = module[enc];
}


/***/ }),

/***/ 37122:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var Buffer = (__webpack_require__(52931).Buffer);

// Export Node.js internal encodings.

module.exports = {
    // Encodings
    utf8:   { type: "_internal", bomAware: true},
    cesu8:  { type: "_internal", bomAware: true},
    unicode11utf8: "utf8",

    ucs2:   { type: "_internal", bomAware: true},
    utf16le: "ucs2",

    binary: { type: "_internal" },
    base64: { type: "_internal" },
    hex:    { type: "_internal" },

    // Codec.
    _internal: InternalCodec,
};

//------------------------------------------------------------------------------

function InternalCodec(codecOptions, iconv) {
    this.enc = codecOptions.encodingName;
    this.bomAware = codecOptions.bomAware;

    if (this.enc === "base64")
        this.encoder = InternalEncoderBase64;
    else if (this.enc === "cesu8") {
        this.enc = "utf8"; // Use utf8 for decoding.
        this.encoder = InternalEncoderCesu8;

        // Add decoder for versions of Node not supporting CESU-8
        if (Buffer.from('eda0bdedb2a9', 'hex').toString() !== '💩') {
            this.decoder = InternalDecoderCesu8;
            this.defaultCharUnicode = iconv.defaultCharUnicode;
        }
    }
}

InternalCodec.prototype.encoder = InternalEncoder;
InternalCodec.prototype.decoder = InternalDecoder;

//------------------------------------------------------------------------------

// We use node.js internal decoder. Its signature is the same as ours.
var StringDecoder = (__webpack_require__(71576).StringDecoder);

if (!StringDecoder.prototype.end) // Node v0.8 doesn't have this method.
    StringDecoder.prototype.end = function() {};


function InternalDecoder(options, codec) {
    this.decoder = new StringDecoder(codec.enc);
}

InternalDecoder.prototype.write = function(buf) {
    if (!Buffer.isBuffer(buf)) {
        buf = Buffer.from(buf);
    }

    return this.decoder.write(buf);
}

InternalDecoder.prototype.end = function() {
    return this.decoder.end();
}


//------------------------------------------------------------------------------
// Encoder is mostly trivial

function InternalEncoder(options, codec) {
    this.enc = codec.enc;
}

InternalEncoder.prototype.write = function(str) {
    return Buffer.from(str, this.enc);
}

InternalEncoder.prototype.end = function() {
}


//------------------------------------------------------------------------------
// Except base64 encoder, which must keep its state.

function InternalEncoderBase64(options, codec) {
    this.prevStr = '';
}

InternalEncoderBase64.prototype.write = function(str) {
    str = this.prevStr + str;
    var completeQuads = str.length - (str.length % 4);
    this.prevStr = str.slice(completeQuads);
    str = str.slice(0, completeQuads);

    return Buffer.from(str, "base64");
}

InternalEncoderBase64.prototype.end = function() {
    return Buffer.from(this.prevStr, "base64");
}


//------------------------------------------------------------------------------
// CESU-8 encoder is also special.

function InternalEncoderCesu8(options, codec) {
}

InternalEncoderCesu8.prototype.write = function(str) {
    var buf = Buffer.alloc(str.length * 3), bufIdx = 0;
    for (var i = 0; i < str.length; i++) {
        var charCode = str.charCodeAt(i);
        // Naive implementation, but it works because CESU-8 is especially easy
        // to convert from UTF-16 (which all JS strings are encoded in).
        if (charCode < 0x80)
            buf[bufIdx++] = charCode;
        else if (charCode < 0x800) {
            buf[bufIdx++] = 0xC0 + (charCode >>> 6);
            buf[bufIdx++] = 0x80 + (charCode & 0x3f);
        }
        else { // charCode will always be < 0x10000 in javascript.
            buf[bufIdx++] = 0xE0 + (charCode >>> 12);
            buf[bufIdx++] = 0x80 + ((charCode >>> 6) & 0x3f);
            buf[bufIdx++] = 0x80 + (charCode & 0x3f);
        }
    }
    return buf.slice(0, bufIdx);
}

InternalEncoderCesu8.prototype.end = function() {
}

//------------------------------------------------------------------------------
// CESU-8 decoder is not implemented in Node v4.0+

function InternalDecoderCesu8(options, codec) {
    this.acc = 0;
    this.contBytes = 0;
    this.accBytes = 0;
    this.defaultCharUnicode = codec.defaultCharUnicode;
}

InternalDecoderCesu8.prototype.write = function(buf) {
    var acc = this.acc, contBytes = this.contBytes, accBytes = this.accBytes, 
        res = '';
    for (var i = 0; i < buf.length; i++) {
        var curByte = buf[i];
        if ((curByte & 0xC0) !== 0x80) { // Leading byte
            if (contBytes > 0) { // Previous code is invalid
                res += this.defaultCharUnicode;
                contBytes = 0;
            }

            if (curByte < 0x80) { // Single-byte code
                res += String.fromCharCode(curByte);
            } else if (curByte < 0xE0) { // Two-byte code
                acc = curByte & 0x1F;
                contBytes = 1; accBytes = 1;
            } else if (curByte < 0xF0) { // Three-byte code
                acc = curByte & 0x0F;
                contBytes = 2; accBytes = 1;
            } else { // Four or more are not supported for CESU-8.
                res += this.defaultCharUnicode;
            }
        } else { // Continuation byte
            if (contBytes > 0) { // We're waiting for it.
                acc = (acc << 6) | (curByte & 0x3f);
                contBytes--; accBytes++;
                if (contBytes === 0) {
                    // Check for overlong encoding, but support Modified UTF-8 (encoding NULL as C0 80)
                    if (accBytes === 2 && acc < 0x80 && acc > 0)
                        res += this.defaultCharUnicode;
                    else if (accBytes === 3 && acc < 0x800)
                        res += this.defaultCharUnicode;
                    else
                        // Actually add character.
                        res += String.fromCharCode(acc);
                }
            } else { // Unexpected continuation byte
                res += this.defaultCharUnicode;
            }
        }
    }
    this.acc = acc; this.contBytes = contBytes; this.accBytes = accBytes;
    return res;
}

InternalDecoderCesu8.prototype.end = function() {
    var res = 0;
    if (this.contBytes > 0)
        res += this.defaultCharUnicode;
    return res;
}


/***/ }),

/***/ 16443:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

var Buffer = (__webpack_require__(52931).Buffer);

// Single-byte codec. Needs a 'chars' string parameter that contains 256 or 128 chars that
// correspond to encoded bytes (if 128 - then lower half is ASCII). 

exports._sbcs = SBCSCodec;
function SBCSCodec(codecOptions, iconv) {
    if (!codecOptions)
        throw new Error("SBCS codec is called without the data.")
    
    // Prepare char buffer for decoding.
    if (!codecOptions.chars || (codecOptions.chars.length !== 128 && codecOptions.chars.length !== 256))
        throw new Error("Encoding '"+codecOptions.type+"' has incorrect 'chars' (must be of len 128 or 256)");
    
    if (codecOptions.chars.length === 128) {
        var asciiString = "";
        for (var i = 0; i < 128; i++)
            asciiString += String.fromCharCode(i);
        codecOptions.chars = asciiString + codecOptions.chars;
    }

    this.decodeBuf = Buffer.from(codecOptions.chars, 'ucs2');
    
    // Encoding buffer.
    var encodeBuf = Buffer.alloc(65536, iconv.defaultCharSingleByte.charCodeAt(0));

    for (var i = 0; i < codecOptions.chars.length; i++)
        encodeBuf[codecOptions.chars.charCodeAt(i)] = i;

    this.encodeBuf = encodeBuf;
}

SBCSCodec.prototype.encoder = SBCSEncoder;
SBCSCodec.prototype.decoder = SBCSDecoder;


function SBCSEncoder(options, codec) {
    this.encodeBuf = codec.encodeBuf;
}

SBCSEncoder.prototype.write = function(str) {
    var buf = Buffer.alloc(str.length);
    for (var i = 0; i < str.length; i++)
        buf[i] = this.encodeBuf[str.charCodeAt(i)];
    
    return buf;
}

SBCSEncoder.prototype.end = function() {
}


function SBCSDecoder(options, codec) {
    this.decodeBuf = codec.decodeBuf;
}

SBCSDecoder.prototype.write = function(buf) {
    // Strings are immutable in JS -> we use ucs2 buffer to speed up computations.
    var decodeBuf = this.decodeBuf;
    var newBuf = Buffer.alloc(buf.length*2);
    var idx1 = 0, idx2 = 0;
    for (var i = 0; i < buf.length; i++) {
        idx1 = buf[i]*2; idx2 = i*2;
        newBuf[idx2] = decodeBuf[idx1];
        newBuf[idx2+1] = decodeBuf[idx1+1];
    }
    return newBuf.toString('ucs2');
}

SBCSDecoder.prototype.end = function() {
}


/***/ }),

/***/ 96881:
/***/ ((module) => {

"use strict";


// Generated data for sbcs codec. Don't edit manually. Regenerate using generation/gen-sbcs.js script.
module.exports = {
  "437": "cp437",
  "737": "cp737",
  "775": "cp775",
  "850": "cp850",
  "852": "cp852",
  "855": "cp855",
  "856": "cp856",
  "857": "cp857",
  "858": "cp858",
  "860": "cp860",
  "861": "cp861",
  "862": "cp862",
  "863": "cp863",
  "864": "cp864",
  "865": "cp865",
  "866": "cp866",
  "869": "cp869",
  "874": "windows874",
  "922": "cp922",
  "1046": "cp1046",
  "1124": "cp1124",
  "1125": "cp1125",
  "1129": "cp1129",
  "1133": "cp1133",
  "1161": "cp1161",
  "1162": "cp1162",
  "1163": "cp1163",
  "1250": "windows1250",
  "1251": "windows1251",
  "1252": "windows1252",
  "1253": "windows1253",
  "1254": "windows1254",
  "1255": "windows1255",
  "1256": "windows1256",
  "1257": "windows1257",
  "1258": "windows1258",
  "28591": "iso88591",
  "28592": "iso88592",
  "28593": "iso88593",
  "28594": "iso88594",
  "28595": "iso88595",
  "28596": "iso88596",
  "28597": "iso88597",
  "28598": "iso88598",
  "28599": "iso88599",
  "28600": "iso885910",
  "28601": "iso885911",
  "28603": "iso885913",
  "28604": "iso885914",
  "28605": "iso885915",
  "28606": "iso885916",
  "windows874": {
    "type": "_sbcs",
    "chars": "€����…�����������‘’“”•–—�������� กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู����฿เแโใไๅๆ็่้๊๋์ํ๎๏๐๑๒๓๔๕๖๗๘๙๚๛����"
  },
  "win874": "windows874",
  "cp874": "windows874",
  "windows1250": {
    "type": "_sbcs",
    "chars": "€�‚�„…†‡�‰Š‹ŚŤŽŹ�‘’“”•–—�™š›śťžź ˇ˘Ł¤Ą¦§¨©Ş«¬­®Ż°±˛ł´µ¶·¸ąş»Ľ˝ľżŔÁÂĂÄĹĆÇČÉĘËĚÍÎĎĐŃŇÓÔŐÖ×ŘŮÚŰÜÝŢßŕáâăäĺćçčéęëěíîďđńňóôőö÷řůúűüýţ˙"
  },
  "win1250": "windows1250",
  "cp1250": "windows1250",
  "windows1251": {
    "type": "_sbcs",
    "chars": "ЂЃ‚ѓ„…†‡€‰Љ‹ЊЌЋЏђ‘’“”•–—�™љ›њќћџ ЎўЈ¤Ґ¦§Ё©Є«¬­®Ї°±Ііґµ¶·ё№є»јЅѕїАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя"
  },
  "win1251": "windows1251",
  "cp1251": "windows1251",
  "windows1252": {
    "type": "_sbcs",
    "chars": "€�‚ƒ„…†‡ˆ‰Š‹Œ�Ž��‘’“”•–—˜™š›œ�žŸ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿ"
  },
  "win1252": "windows1252",
  "cp1252": "windows1252",
  "windows1253": {
    "type": "_sbcs",
    "chars": "€�‚ƒ„…†‡�‰�‹�����‘’“”•–—�™�›���� ΅Ά£¤¥¦§¨©�«¬­®―°±²³΄µ¶·ΈΉΊ»Ό½ΎΏΐΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡ�ΣΤΥΦΧΨΩΪΫάέήίΰαβγδεζηθικλμνξοπρςστυφχψωϊϋόύώ�"
  },
  "win1253": "windows1253",
  "cp1253": "windows1253",
  "windows1254": {
    "type": "_sbcs",
    "chars": "€�‚ƒ„…†‡ˆ‰Š‹Œ����‘’“”•–—˜™š›œ��Ÿ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏĞÑÒÓÔÕÖ×ØÙÚÛÜİŞßàáâãäåæçèéêëìíîïğñòóôõö÷øùúûüışÿ"
  },
  "win1254": "windows1254",
  "cp1254": "windows1254",
  "windows1255": {
    "type": "_sbcs",
    "chars": "€�‚ƒ„…†‡ˆ‰�‹�����‘’“”•–—˜™�›���� ¡¢£₪¥¦§¨©×«¬­®¯°±²³´µ¶·¸¹÷»¼½¾¿ְֱֲֳִֵֶַָֹֺֻּֽ־ֿ׀ׁׂ׃װױײ׳״�������אבגדהוזחטיךכלםמןנסעףפץצקרשת��‎‏�"
  },
  "win1255": "windows1255",
  "cp1255": "windows1255",
  "windows1256": {
    "type": "_sbcs",
    "chars": "€پ‚ƒ„…†‡ˆ‰ٹ‹Œچژڈگ‘’“”•–—ک™ڑ›œ‌‍ں ،¢£¤¥¦§¨©ھ«¬­®¯°±²³´µ¶·¸¹؛»¼½¾؟ہءآأؤإئابةتثجحخدذرزسشصض×طظعغـفقكàلâمنهوçèéêëىيîïًٌٍَôُِ÷ّùْûü‎‏ے"
  },
  "win1256": "windows1256",
  "cp1256": "windows1256",
  "windows1257": {
    "type": "_sbcs",
    "chars": "€�‚�„…†‡�‰�‹�¨ˇ¸�‘’“”•–—�™�›�¯˛� �¢£¤�¦§Ø©Ŗ«¬­®Æ°±²³´µ¶·ø¹ŗ»¼½¾æĄĮĀĆÄÅĘĒČÉŹĖĢĶĪĻŠŃŅÓŌÕÖ×ŲŁŚŪÜŻŽßąįāćäåęēčéźėģķīļšńņóōõö÷ųłśūüżž˙"
  },
  "win1257": "windows1257",
  "cp1257": "windows1257",
  "windows1258": {
    "type": "_sbcs",
    "chars": "€�‚ƒ„…†‡ˆ‰�‹Œ����‘’“”•–—˜™�›œ��Ÿ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂĂÄÅÆÇÈÉÊË̀ÍÎÏĐÑ̉ÓÔƠÖ×ØÙÚÛÜỮßàáâăäåæçèéêë́íîïđṇ̃óôơö÷øùúûüư₫ÿ"
  },
  "win1258": "windows1258",
  "cp1258": "windows1258",
  "iso88591": {
    "type": "_sbcs",
    "chars": " ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿ"
  },
  "cp28591": "iso88591",
  "iso88592": {
    "type": "_sbcs",
    "chars": " Ą˘Ł¤ĽŚ§¨ŠŞŤŹ­ŽŻ°ą˛ł´ľśˇ¸šşťź˝žżŔÁÂĂÄĹĆÇČÉĘËĚÍÎĎĐŃŇÓÔŐÖ×ŘŮÚŰÜÝŢßŕáâăäĺćçčéęëěíîďđńňóôőö÷řůúűüýţ˙"
  },
  "cp28592": "iso88592",
  "iso88593": {
    "type": "_sbcs",
    "chars": " Ħ˘£¤�Ĥ§¨İŞĞĴ­�Ż°ħ²³´µĥ·¸ışğĵ½�żÀÁÂ�ÄĊĈÇÈÉÊËÌÍÎÏ�ÑÒÓÔĠÖ×ĜÙÚÛÜŬŜßàáâ�äċĉçèéêëìíîï�ñòóôġö÷ĝùúûüŭŝ˙"
  },
  "cp28593": "iso88593",
  "iso88594": {
    "type": "_sbcs",
    "chars": " ĄĸŖ¤ĨĻ§¨ŠĒĢŦ­Ž¯°ą˛ŗ´ĩļˇ¸šēģŧŊžŋĀÁÂÃÄÅÆĮČÉĘËĖÍÎĪĐŅŌĶÔÕÖ×ØŲÚÛÜŨŪßāáâãäåæįčéęëėíîīđņōķôõö÷øųúûüũū˙"
  },
  "cp28594": "iso88594",
  "iso88595": {
    "type": "_sbcs",
    "chars": " ЁЂЃЄЅІЇЈЉЊЋЌ­ЎЏАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя№ёђѓєѕіїјљњћќ§ўџ"
  },
  "cp28595": "iso88595",
  "iso88596": {
    "type": "_sbcs",
    "chars": " ���¤�������،­�������������؛���؟�ءآأؤإئابةتثجحخدذرزسشصضطظعغ�����ـفقكلمنهوىيًٌٍَُِّْ�������������"
  },
  "cp28596": "iso88596",
  "iso88597": {
    "type": "_sbcs",
    "chars": " ‘’£€₯¦§¨©ͺ«¬­�―°±²³΄΅Ά·ΈΉΊ»Ό½ΎΏΐΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡ�ΣΤΥΦΧΨΩΪΫάέήίΰαβγδεζηθικλμνξοπρςστυφχψωϊϋόύώ�"
  },
  "cp28597": "iso88597",
  "iso88598": {
    "type": "_sbcs",
    "chars": " �¢£¤¥¦§¨©×«¬­®¯°±²³´µ¶·¸¹÷»¼½¾��������������������������������‗אבגדהוזחטיךכלםמןנסעףפץצקרשת��‎‏�"
  },
  "cp28598": "iso88598",
  "iso88599": {
    "type": "_sbcs",
    "chars": " ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏĞÑÒÓÔÕÖ×ØÙÚÛÜİŞßàáâãäåæçèéêëìíîïğñòóôõö÷øùúûüışÿ"
  },
  "cp28599": "iso88599",
  "iso885910": {
    "type": "_sbcs",
    "chars": " ĄĒĢĪĨĶ§ĻĐŠŦŽ­ŪŊ°ąēģīĩķ·ļđšŧž―ūŋĀÁÂÃÄÅÆĮČÉĘËĖÍÎÏÐŅŌÓÔÕÖŨØŲÚÛÜÝÞßāáâãäåæįčéęëėíîïðņōóôõöũøųúûüýþĸ"
  },
  "cp28600": "iso885910",
  "iso885911": {
    "type": "_sbcs",
    "chars": " กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู����฿เแโใไๅๆ็่้๊๋์ํ๎๏๐๑๒๓๔๕๖๗๘๙๚๛����"
  },
  "cp28601": "iso885911",
  "iso885913": {
    "type": "_sbcs",
    "chars": " ”¢£¤„¦§Ø©Ŗ«¬­®Æ°±²³“µ¶·ø¹ŗ»¼½¾æĄĮĀĆÄÅĘĒČÉŹĖĢĶĪĻŠŃŅÓŌÕÖ×ŲŁŚŪÜŻŽßąįāćäåęēčéźėģķīļšńņóōõö÷ųłśūüżž’"
  },
  "cp28603": "iso885913",
  "iso885914": {
    "type": "_sbcs",
    "chars": " Ḃḃ£ĊċḊ§Ẁ©ẂḋỲ­®ŸḞḟĠġṀṁ¶ṖẁṗẃṠỳẄẅṡÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏŴÑÒÓÔÕÖṪØÙÚÛÜÝŶßàáâãäåæçèéêëìíîïŵñòóôõöṫøùúûüýŷÿ"
  },
  "cp28604": "iso885914",
  "iso885915": {
    "type": "_sbcs",
    "chars": " ¡¢£€¥Š§š©ª«¬­®¯°±²³Žµ¶·ž¹º»ŒœŸ¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿ"
  },
  "cp28605": "iso885915",
  "iso885916": {
    "type": "_sbcs",
    "chars": " ĄąŁ€„Š§š©Ș«Ź­źŻ°±ČłŽ”¶·žčș»ŒœŸżÀÁÂĂÄĆÆÇÈÉÊËÌÍÎÏĐŃÒÓÔŐÖŚŰÙÚÛÜĘȚßàáâăäćæçèéêëìíîïđńòóôőöśűùúûüęțÿ"
  },
  "cp28606": "iso885916",
  "cp437": {
    "type": "_sbcs",
    "chars": "ÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜ¢£¥₧ƒáíóúñÑªº¿⌐¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ "
  },
  "ibm437": "cp437",
  "csibm437": "cp437",
  "cp737": {
    "type": "_sbcs",
    "chars": "ΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡΣΤΥΦΧΨΩαβγδεζηθικλμνξοπρσςτυφχψ░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀ωάέήϊίόύϋώΆΈΉΊΌΎΏ±≥≤ΪΫ÷≈°∙·√ⁿ²■ "
  },
  "ibm737": "cp737",
  "csibm737": "cp737",
  "cp775": {
    "type": "_sbcs",
    "chars": "ĆüéāäģåćłēŖŗīŹÄÅÉæÆōöĢ¢ŚśÖÜø£Ø×¤ĀĪóŻżź”¦©®¬½¼Ł«»░▒▓│┤ĄČĘĖ╣║╗╝ĮŠ┐└┴┬├─┼ŲŪ╚╔╩╦╠═╬Žąčęėįšųūž┘┌█▄▌▐▀ÓßŌŃõÕµńĶķĻļņĒŅ’­±“¾¶§÷„°∙·¹³²■ "
  },
  "ibm775": "cp775",
  "csibm775": "cp775",
  "cp850": {
    "type": "_sbcs",
    "chars": "ÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜø£Ø×ƒáíóúñÑªº¿®¬½¼¡«»░▒▓│┤ÁÂÀ©╣║╗╝¢¥┐└┴┬├─┼ãÃ╚╔╩╦╠═╬¤ðÐÊËÈıÍÎÏ┘┌█▄¦Ì▀ÓßÔÒõÕµþÞÚÛÙýÝ¯´­±‗¾¶§÷¸°¨·¹³²■ "
  },
  "ibm850": "cp850",
  "csibm850": "cp850",
  "cp852": {
    "type": "_sbcs",
    "chars": "ÇüéâäůćçłëŐőîŹÄĆÉĹĺôöĽľŚśÖÜŤťŁ×čáíóúĄąŽžĘę¬źČş«»░▒▓│┤ÁÂĚŞ╣║╗╝Żż┐└┴┬├─┼Ăă╚╔╩╦╠═╬¤đĐĎËďŇÍÎě┘┌█▄ŢŮ▀ÓßÔŃńňŠšŔÚŕŰýÝţ´­˝˛ˇ˘§÷¸°¨˙űŘř■ "
  },
  "ibm852": "cp852",
  "csibm852": "cp852",
  "cp855": {
    "type": "_sbcs",
    "chars": "ђЂѓЃёЁєЄѕЅіІїЇјЈљЉњЊћЋќЌўЎџЏюЮъЪаАбБцЦдДеЕфФгГ«»░▒▓│┤хХиИ╣║╗╝йЙ┐└┴┬├─┼кК╚╔╩╦╠═╬¤лЛмМнНоОп┘┌█▄Пя▀ЯрРсСтТуУжЖвВьЬ№­ыЫзЗшШэЭщЩчЧ§■ "
  },
  "ibm855": "cp855",
  "csibm855": "cp855",
  "cp856": {
    "type": "_sbcs",
    "chars": "אבגדהוזחטיךכלםמןנסעףפץצקרשת�£�×����������®¬½¼�«»░▒▓│┤���©╣║╗╝¢¥┐└┴┬├─┼��╚╔╩╦╠═╬¤���������┘┌█▄¦�▀������µ�������¯´­±‗¾¶§÷¸°¨·¹³²■ "
  },
  "ibm856": "cp856",
  "csibm856": "cp856",
  "cp857": {
    "type": "_sbcs",
    "chars": "ÇüéâäàåçêëèïîıÄÅÉæÆôöòûùİÖÜø£ØŞşáíóúñÑĞğ¿®¬½¼¡«»░▒▓│┤ÁÂÀ©╣║╗╝¢¥┐└┴┬├─┼ãÃ╚╔╩╦╠═╬¤ºªÊËÈ�ÍÎÏ┘┌█▄¦Ì▀ÓßÔÒõÕµ�×ÚÛÙìÿ¯´­±�¾¶§÷¸°¨·¹³²■ "
  },
  "ibm857": "cp857",
  "csibm857": "cp857",
  "cp858": {
    "type": "_sbcs",
    "chars": "ÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜø£Ø×ƒáíóúñÑªº¿®¬½¼¡«»░▒▓│┤ÁÂÀ©╣║╗╝¢¥┐└┴┬├─┼ãÃ╚╔╩╦╠═╬¤ðÐÊËÈ€ÍÎÏ┘┌█▄¦Ì▀ÓßÔÒõÕµþÞÚÛÙýÝ¯´­±‗¾¶§÷¸°¨·¹³²■ "
  },
  "ibm858": "cp858",
  "csibm858": "cp858",
  "cp860": {
    "type": "_sbcs",
    "chars": "ÇüéâãàÁçêÊèÍÔìÃÂÉÀÈôõòÚùÌÕÜ¢£Ù₧ÓáíóúñÑªº¿Ò¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ "
  },
  "ibm860": "cp860",
  "csibm860": "cp860",
  "cp861": {
    "type": "_sbcs",
    "chars": "ÇüéâäàåçêëèÐðÞÄÅÉæÆôöþûÝýÖÜø£Ø₧ƒáíóúÁÍÓÚ¿⌐¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ "
  },
  "ibm861": "cp861",
  "csibm861": "cp861",
  "cp862": {
    "type": "_sbcs",
    "chars": "אבגדהוזחטיךכלםמןנסעףפץצקרשת¢£¥₧ƒáíóúñÑªº¿⌐¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ "
  },
  "ibm862": "cp862",
  "csibm862": "cp862",
  "cp863": {
    "type": "_sbcs",
    "chars": "ÇüéâÂà¶çêëèïî‗À§ÉÈÊôËÏûù¤ÔÜ¢£ÙÛƒ¦´óú¨¸³¯Î⌐¬½¼¾«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ "
  },
  "ibm863": "cp863",
  "csibm863": "cp863",
  "cp864": {
    "type": "_sbcs",
    "chars": "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$٪&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~°·∙√▒─│┼┤┬├┴┐┌└┘β∞φ±½¼≈«»ﻷﻸ��ﻻﻼ� ­ﺂ£¤ﺄ��ﺎﺏﺕﺙ،ﺝﺡﺥ٠١٢٣٤٥٦٧٨٩ﻑ؛ﺱﺵﺹ؟¢ﺀﺁﺃﺅﻊﺋﺍﺑﺓﺗﺛﺟﺣﺧﺩﺫﺭﺯﺳﺷﺻﺿﻁﻅﻋﻏ¦¬÷×ﻉـﻓﻗﻛﻟﻣﻧﻫﻭﻯﻳﺽﻌﻎﻍﻡﹽّﻥﻩﻬﻰﻲﻐﻕﻵﻶﻝﻙﻱ■�"
  },
  "ibm864": "cp864",
  "csibm864": "cp864",
  "cp865": {
    "type": "_sbcs",
    "chars": "ÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜø£Ø₧ƒáíóúñÑªº¿⌐¬½¼¡«¤░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ "
  },
  "ibm865": "cp865",
  "csibm865": "cp865",
  "cp866": {
    "type": "_sbcs",
    "chars": "АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмноп░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀рстуфхцчшщъыьэюяЁёЄєЇїЎў°∙·√№¤■ "
  },
  "ibm866": "cp866",
  "csibm866": "cp866",
  "cp869": {
    "type": "_sbcs",
    "chars": "������Ά�·¬¦‘’Έ―ΉΊΪΌ��ΎΫ©Ώ²³ά£έήίϊΐόύΑΒΓΔΕΖΗ½ΘΙ«»░▒▓│┤ΚΛΜΝ╣║╗╝ΞΟ┐└┴┬├─┼ΠΡ╚╔╩╦╠═╬ΣΤΥΦΧΨΩαβγ┘┌█▄δε▀ζηθικλμνξοπρσςτ΄­±υφχ§ψ΅°¨ωϋΰώ■ "
  },
  "ibm869": "cp869",
  "csibm869": "cp869",
  "cp922": {
    "type": "_sbcs",
    "chars": " ¡¢£¤¥¦§¨©ª«¬­®‾°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏŠÑÒÓÔÕÖ×ØÙÚÛÜÝŽßàáâãäåæçèéêëìíîïšñòóôõö÷øùúûüýžÿ"
  },
  "ibm922": "cp922",
  "csibm922": "cp922",
  "cp1046": {
    "type": "_sbcs",
    "chars": "ﺈ×÷ﹱ■│─┐┌└┘ﹹﹻﹽﹿﹷﺊﻰﻳﻲﻎﻏﻐﻶﻸﻺﻼ ¤ﺋﺑﺗﺛﺟﺣ،­ﺧﺳ٠١٢٣٤٥٦٧٨٩ﺷ؛ﺻﺿﻊ؟ﻋءآأؤإئابةتثجحخدذرزسشصضطﻇعغﻌﺂﺄﺎﻓـفقكلمنهوىيًٌٍَُِّْﻗﻛﻟﻵﻷﻹﻻﻣﻧﻬﻩ�"
  },
  "ibm1046": "cp1046",
  "csibm1046": "cp1046",
  "cp1124": {
    "type": "_sbcs",
    "chars": " ЁЂҐЄЅІЇЈЉЊЋЌ­ЎЏАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя№ёђґєѕіїјљњћќ§ўџ"
  },
  "ibm1124": "cp1124",
  "csibm1124": "cp1124",
  "cp1125": {
    "type": "_sbcs",
    "chars": "АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмноп░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀рстуфхцчшщъыьэюяЁёҐґЄєІіЇї·√№¤■ "
  },
  "ibm1125": "cp1125",
  "csibm1125": "cp1125",
  "cp1129": {
    "type": "_sbcs",
    "chars": " ¡¢£¤¥¦§œ©ª«¬­®¯°±²³Ÿµ¶·Œ¹º»¼½¾¿ÀÁÂĂÄÅÆÇÈÉÊË̀ÍÎÏĐÑ̉ÓÔƠÖ×ØÙÚÛÜỮßàáâăäåæçèéêë́íîïđṇ̃óôơö÷øùúûüư₫ÿ"
  },
  "ibm1129": "cp1129",
  "csibm1129": "cp1129",
  "cp1133": {
    "type": "_sbcs",
    "chars": " ກຂຄງຈສຊຍດຕຖທນບປຜຝພຟມຢຣລວຫອຮ���ຯະາຳິີຶືຸູຼັົຽ���ເແໂໃໄ່້໊໋໌ໍໆ�ໜໝ₭����������������໐໑໒໓໔໕໖໗໘໙��¢¬¦�"
  },
  "ibm1133": "cp1133",
  "csibm1133": "cp1133",
  "cp1161": {
    "type": "_sbcs",
    "chars": "��������������������������������่กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู้๊๋€฿เแโใไๅๆ็่้๊๋์ํ๎๏๐๑๒๓๔๕๖๗๘๙๚๛¢¬¦ "
  },
  "ibm1161": "cp1161",
  "csibm1161": "cp1161",
  "cp1162": {
    "type": "_sbcs",
    "chars": "€…‘’“”•–— กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู����฿เแโใไๅๆ็่้๊๋์ํ๎๏๐๑๒๓๔๕๖๗๘๙๚๛����"
  },
  "ibm1162": "cp1162",
  "csibm1162": "cp1162",
  "cp1163": {
    "type": "_sbcs",
    "chars": " ¡¢£€¥¦§œ©ª«¬­®¯°±²³Ÿµ¶·Œ¹º»¼½¾¿ÀÁÂĂÄÅÆÇÈÉÊË̀ÍÎÏĐÑ̉ÓÔƠÖ×ØÙÚÛÜỮßàáâăäåæçèéêë́íîïđṇ̃óôơö÷øùúûüư₫ÿ"
  },
  "ibm1163": "cp1163",
  "csibm1163": "cp1163",
  "maccroatian": {
    "type": "_sbcs",
    "chars": "ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®Š™´¨≠ŽØ∞±≤≥∆µ∂∑∏š∫ªºΩžø¿¡¬√ƒ≈Ć«Č… ÀÃÕŒœĐ—“”‘’÷◊�©⁄¤‹›Æ»–·‚„‰ÂćÁčÈÍÎÏÌÓÔđÒÚÛÙıˆ˜¯πË˚¸Êæˇ"
  },
  "maccyrillic": {
    "type": "_sbcs",
    "chars": "АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ†°¢£§•¶І®©™Ђђ≠Ѓѓ∞±≤≥іµ∂ЈЄєЇїЉљЊњјЅ¬√ƒ≈∆«»… ЋћЌќѕ–—“”‘’÷„ЎўЏџ№Ёёяабвгдежзийклмнопрстуфхцчшщъыьэю¤"
  },
  "macgreek": {
    "type": "_sbcs",
    "chars": "Ä¹²É³ÖÜ΅àâä΄¨çéèêë£™îï•½‰ôö¦­ùûü†ΓΔΘΛΞΠß®©ΣΪ§≠°·Α±≤≥¥ΒΕΖΗΙΚΜΦΫΨΩάΝ¬ΟΡ≈Τ«»… ΥΧΆΈœ–―“”‘’÷ΉΊΌΎέήίόΏύαβψδεφγηιξκλμνοπώρστθωςχυζϊϋΐΰ�"
  },
  "maciceland": {
    "type": "_sbcs",
    "chars": "ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûüÝ°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄¤ÐðÞþý·‚„‰ÂÊÁËÈÍÎÏÌÓÔ�ÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ"
  },
  "macroman": {
    "type": "_sbcs",
    "chars": "ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄¤‹›ﬁﬂ‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔ�ÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ"
  },
  "macromania": {
    "type": "_sbcs",
    "chars": "ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ĂŞ∞±≤≥¥µ∂∑∏π∫ªºΩăş¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄¤‹›Ţţ‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔ�ÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ"
  },
  "macthai": {
    "type": "_sbcs",
    "chars": "«»…“”�•‘’� กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู﻿​–—฿เแโใไๅๆ็่้๊๋์ํ™๏๐๑๒๓๔๕๖๗๘๙®©����"
  },
  "macturkish": {
    "type": "_sbcs",
    "chars": "ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸĞğİıŞş‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔ�ÒÚÛÙ�ˆ˜¯˘˙˚¸˝˛ˇ"
  },
  "macukraine": {
    "type": "_sbcs",
    "chars": "АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ†°Ґ£§•¶І®©™Ђђ≠Ѓѓ∞±≤≥іµґЈЄєЇїЉљЊњјЅ¬√ƒ≈∆«»… ЋћЌќѕ–—“”‘’÷„ЎўЏџ№Ёёяабвгдежзийклмнопрстуфхцчшщъыьэю¤"
  },
  "koi8r": {
    "type": "_sbcs",
    "chars": "─│┌┐└┘├┤┬┴┼▀▄█▌▐░▒▓⌠■∙√≈≤≥ ⌡°²·÷═║╒ё╓╔╕╖╗╘╙╚╛╜╝╞╟╠╡Ё╢╣╤╥╦╧╨╩╪╫╬©юабцдефгхийклмнопярстужвьызшэщчъЮАБЦДЕФГХИЙКЛМНОПЯРСТУЖВЬЫЗШЭЩЧЪ"
  },
  "koi8u": {
    "type": "_sbcs",
    "chars": "─│┌┐└┘├┤┬┴┼▀▄█▌▐░▒▓⌠■∙√≈≤≥ ⌡°²·÷═║╒ёє╔ії╗╘╙╚╛ґ╝╞╟╠╡ЁЄ╣ІЇ╦╧╨╩╪Ґ╬©юабцдефгхийклмнопярстужвьызшэщчъЮАБЦДЕФГХИЙКЛМНОПЯРСТУЖВЬЫЗШЭЩЧЪ"
  },
  "koi8ru": {
    "type": "_sbcs",
    "chars": "─│┌┐└┘├┤┬┴┼▀▄█▌▐░▒▓⌠■∙√≈≤≥ ⌡°²·÷═║╒ёє╔ії╗╘╙╚╛ґў╞╟╠╡ЁЄ╣ІЇ╦╧╨╩╪ҐЎ©юабцдефгхийклмнопярстужвьызшэщчъЮАБЦДЕФГХИЙКЛМНОПЯРСТУЖВЬЫЗШЭЩЧЪ"
  },
  "koi8t": {
    "type": "_sbcs",
    "chars": "қғ‚Ғ„…†‡�‰ҳ‹ҲҷҶ�Қ‘’“”•–—�™�›�����ӯӮё¤ӣ¦§���«¬­®�°±²Ё�Ӣ¶·�№�»���©юабцдефгхийклмнопярстужвьызшэщчъЮАБЦДЕФГХИЙКЛМНОПЯРСТУЖВЬЫЗШЭЩЧЪ"
  },
  "armscii8": {
    "type": "_sbcs",
    "chars": " �և։)(»«—.՝,-֊…՜՛՞ԱաԲբԳգԴդԵեԶզԷէԸըԹթԺժԻիԼլԽխԾծԿկՀհՁձՂղՃճՄմՅյՆնՇշՈոՉչՊպՋջՌռՍսՎվՏտՐրՑցՒւՓփՔքՕօՖֆ՚�"
  },
  "rk1048": {
    "type": "_sbcs",
    "chars": "ЂЃ‚ѓ„…†‡€‰Љ‹ЊҚҺЏђ‘’“”•–—�™љ›њқһџ ҰұӘ¤Ө¦§Ё©Ғ«¬­®Ү°±Ііөµ¶·ё№ғ»әҢңүАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя"
  },
  "tcvn": {
    "type": "_sbcs",
    "chars": "\u0000ÚỤ\u0003ỪỬỮ\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010ỨỰỲỶỸÝỴ\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~ÀẢÃÁẠẶẬÈẺẼÉẸỆÌỈĨÍỊÒỎÕÓỌỘỜỞỠỚỢÙỦŨ ĂÂÊÔƠƯĐăâêôơưđẶ̀̀̉̃́àảãáạẲằẳẵắẴẮẦẨẪẤỀặầẩẫấậèỂẻẽéẹềểễếệìỉỄẾỒĩíịòỔỏõóọồổỗốộờởỡớợùỖủũúụừửữứựỳỷỹýỵỐ"
  },
  "georgianacademy": {
    "type": "_sbcs",
    "chars": "‚ƒ„…†‡ˆ‰Š‹Œ‘’“”•–—˜™š›œŸ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿აბგდევზთიკლმნოპჟრსტუფქღყშჩცძწჭხჯჰჱჲჳჴჵჶçèéêëìíîïðñòóôõö÷øùúûüýþÿ"
  },
  "georgianps": {
    "type": "_sbcs",
    "chars": "‚ƒ„…†‡ˆ‰Š‹Œ‘’“”•–—˜™š›œŸ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿აბგდევზჱთიკლმნჲოპჟრსტჳუფქღყშჩცძწჭხჴჯჰჵæçèéêëìíîïðñòóôõö÷øùúûüýþÿ"
  },
  "pt154": {
    "type": "_sbcs",
    "chars": "ҖҒӮғ„…ҶҮҲүҠӢҢҚҺҸҗ‘’“”•–—ҳҷҡӣңқһҹ ЎўЈӨҘҰ§Ё©Ә«¬ӯ®Ҝ°ұІіҙө¶·ё№ә»јҪҫҝАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя"
  },
  "viscii": {
    "type": "_sbcs",
    "chars": "\u0000\u0001Ẳ\u0003\u0004ẴẪ\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013Ỷ\u0015\u0016\u0017\u0018Ỹ\u001a\u001b\u001c\u001dỴ\u001f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~ẠẮẰẶẤẦẨẬẼẸẾỀỂỄỆỐỒỔỖỘỢỚỜỞỊỎỌỈỦŨỤỲÕắằặấầẩậẽẹếềểễệốồổỗỠƠộờởịỰỨỪỬơớƯÀÁÂÃẢĂẳẵÈÉÊẺÌÍĨỳĐứÒÓÔạỷừửÙÚỹỵÝỡưàáâãảăữẫèéêẻìíĩỉđựòóôõỏọụùúũủýợỮ"
  },
  "iso646cn": {
    "type": "_sbcs",
    "chars": "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#¥%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}‾��������������������������������������������������������������������������������������������������������������������������������"
  },
  "iso646jp": {
    "type": "_sbcs",
    "chars": "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[¥]^_`abcdefghijklmnopqrstuvwxyz{|}‾��������������������������������������������������������������������������������������������������������������������������������"
  },
  "hproman8": {
    "type": "_sbcs",
    "chars": " ÀÂÈÊËÎÏ´ˋˆ¨˜ÙÛ₤¯Ýý°ÇçÑñ¡¿¤£¥§ƒ¢âêôûáéóúàèòùäëöüÅîØÆåíøæÄìÖÜÉïßÔÁÃãÐðÍÌÓÒÕõŠšÚŸÿÞþ·µ¶¾—¼½ªº«■»±�"
  },
  "macintosh": {
    "type": "_sbcs",
    "chars": "ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄¤‹›ﬁﬂ‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔ�ÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ"
  },
  "ascii": {
    "type": "_sbcs",
    "chars": "��������������������������������������������������������������������������������������������������������������������������������"
  },
  "tis620": {
    "type": "_sbcs",
    "chars": "���������������������������������กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู����฿เแโใไๅๆ็่้๊๋์ํ๎๏๐๑๒๓๔๕๖๗๘๙๚๛����"
  }
}

/***/ }),

/***/ 33381:
/***/ ((module) => {

"use strict";


// Manually added data to be used by sbcs codec in addition to generated one.

module.exports = {
    // Not supported by iconv, not sure why.
    "10029": "maccenteuro",
    "maccenteuro": {
        "type": "_sbcs",
        "chars": "ÄĀāÉĄÖÜáąČäčĆćéŹźĎíďĒēĖóėôöõúĚěü†°Ę£§•¶ß®©™ę¨≠ģĮįĪ≤≥īĶ∂∑łĻļĽľĹĺŅņŃ¬√ńŇ∆«»… ňŐÕőŌ–—“”‘’÷◊ōŔŕŘ‹›řŖŗŠ‚„šŚśÁŤťÍŽžŪÓÔūŮÚůŰűŲųÝýķŻŁżĢˇ"
    },

    "808": "cp808",
    "ibm808": "cp808",
    "cp808": {
        "type": "_sbcs",
        "chars": "АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмноп░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀рстуфхцчшщъыьэюяЁёЄєЇїЎў°∙·√№€■ "
    },

    "mik": {
        "type": "_sbcs",
        "chars": "АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя└┴┬├─┼╣║╚╔╩╦╠═╬┐░▒▓│┤№§╗╝┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ "
    },

    "cp720": {
        "type": "_sbcs",
        "chars": "\x80\x81éâ\x84à\x86çêëèïî\x8d\x8e\x8f\x90\u0651\u0652ô¤ـûùءآأؤ£إئابةتثجحخدذرزسشص«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀ضطظعغفµقكلمنهوىي≡\u064b\u064c\u064d\u064e\u064f\u0650≈°∙·√ⁿ²■\u00a0"
    },

    // Aliases of generated encodings.
    "ascii8bit": "ascii",
    "usascii": "ascii",
    "ansix34": "ascii",
    "ansix341968": "ascii",
    "ansix341986": "ascii",
    "csascii": "ascii",
    "cp367": "ascii",
    "ibm367": "ascii",
    "isoir6": "ascii",
    "iso646us": "ascii",
    "iso646irv": "ascii",
    "us": "ascii",

    "latin1": "iso88591",
    "latin2": "iso88592",
    "latin3": "iso88593",
    "latin4": "iso88594",
    "latin5": "iso88599",
    "latin6": "iso885910",
    "latin7": "iso885913",
    "latin8": "iso885914",
    "latin9": "iso885915",
    "latin10": "iso885916",

    "csisolatin1": "iso88591",
    "csisolatin2": "iso88592",
    "csisolatin3": "iso88593",
    "csisolatin4": "iso88594",
    "csisolatincyrillic": "iso88595",
    "csisolatinarabic": "iso88596",
    "csisolatingreek" : "iso88597",
    "csisolatinhebrew": "iso88598",
    "csisolatin5": "iso88599",
    "csisolatin6": "iso885910",

    "l1": "iso88591",
    "l2": "iso88592",
    "l3": "iso88593",
    "l4": "iso88594",
    "l5": "iso88599",
    "l6": "iso885910",
    "l7": "iso885913",
    "l8": "iso885914",
    "l9": "iso885915",
    "l10": "iso885916",

    "isoir14": "iso646jp",
    "isoir57": "iso646cn",
    "isoir100": "iso88591",
    "isoir101": "iso88592",
    "isoir109": "iso88593",
    "isoir110": "iso88594",
    "isoir144": "iso88595",
    "isoir127": "iso88596",
    "isoir126": "iso88597",
    "isoir138": "iso88598",
    "isoir148": "iso88599",
    "isoir157": "iso885910",
    "isoir166": "tis620",
    "isoir179": "iso885913",
    "isoir199": "iso885914",
    "isoir203": "iso885915",
    "isoir226": "iso885916",

    "cp819": "iso88591",
    "ibm819": "iso88591",

    "cyrillic": "iso88595",

    "arabic": "iso88596",
    "arabic8": "iso88596",
    "ecma114": "iso88596",
    "asmo708": "iso88596",

    "greek" : "iso88597",
    "greek8" : "iso88597",
    "ecma118" : "iso88597",
    "elot928" : "iso88597",

    "hebrew": "iso88598",
    "hebrew8": "iso88598",

    "turkish": "iso88599",
    "turkish8": "iso88599",

    "thai": "iso885911",
    "thai8": "iso885911",

    "celtic": "iso885914",
    "celtic8": "iso885914",
    "isoceltic": "iso885914",

    "tis6200": "tis620",
    "tis62025291": "tis620",
    "tis62025330": "tis620",

    "10000": "macroman",
    "10006": "macgreek",
    "10007": "maccyrillic",
    "10079": "maciceland",
    "10081": "macturkish",

    "cspc8codepage437": "cp437",
    "cspc775baltic": "cp775",
    "cspc850multilingual": "cp850",
    "cspcp852": "cp852",
    "cspc862latinhebrew": "cp862",
    "cpgr": "cp869",

    "msee": "cp1250",
    "mscyrl": "cp1251",
    "msansi": "cp1252",
    "msgreek": "cp1253",
    "msturk": "cp1254",
    "mshebr": "cp1255",
    "msarab": "cp1256",
    "winbaltrim": "cp1257",

    "cp20866": "koi8r",
    "20866": "koi8r",
    "ibm878": "koi8r",
    "cskoi8r": "koi8r",

    "cp21866": "koi8u",
    "21866": "koi8u",
    "ibm1168": "koi8u",

    "strk10482002": "rk1048",

    "tcvn5712": "tcvn",
    "tcvn57121": "tcvn",

    "gb198880": "iso646cn",
    "cn": "iso646cn",

    "csiso14jisc6220ro": "iso646jp",
    "jisc62201969ro": "iso646jp",
    "jp": "iso646jp",

    "cshproman8": "hproman8",
    "r8": "hproman8",
    "roman8": "hproman8",
    "xroman8": "hproman8",
    "ibm1051": "hproman8",

    "mac": "macintosh",
    "csmacintosh": "macintosh",
};



/***/ }),

/***/ 29593:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

var Buffer = (__webpack_require__(52931).Buffer);

// Note: UTF16-LE (or UCS2) codec is Node.js native. See encodings/internal.js

// == UTF16-BE codec. ==========================================================

exports.utf16be = Utf16BECodec;
function Utf16BECodec() {
}

Utf16BECodec.prototype.encoder = Utf16BEEncoder;
Utf16BECodec.prototype.decoder = Utf16BEDecoder;
Utf16BECodec.prototype.bomAware = true;


// -- Encoding

function Utf16BEEncoder() {
}

Utf16BEEncoder.prototype.write = function(str) {
    var buf = Buffer.from(str, 'ucs2');
    for (var i = 0; i < buf.length; i += 2) {
        var tmp = buf[i]; buf[i] = buf[i+1]; buf[i+1] = tmp;
    }
    return buf;
}

Utf16BEEncoder.prototype.end = function() {
}


// -- Decoding

function Utf16BEDecoder() {
    this.overflowByte = -1;
}

Utf16BEDecoder.prototype.write = function(buf) {
    if (buf.length == 0)
        return '';

    var buf2 = Buffer.alloc(buf.length + 1),
        i = 0, j = 0;

    if (this.overflowByte !== -1) {
        buf2[0] = buf[0];
        buf2[1] = this.overflowByte;
        i = 1; j = 2;
    }

    for (; i < buf.length-1; i += 2, j+= 2) {
        buf2[j] = buf[i+1];
        buf2[j+1] = buf[i];
    }

    this.overflowByte = (i == buf.length-1) ? buf[buf.length-1] : -1;

    return buf2.slice(0, j).toString('ucs2');
}

Utf16BEDecoder.prototype.end = function() {
    this.overflowByte = -1;
}


// == UTF-16 codec =============================================================
// Decoder chooses automatically from UTF-16LE and UTF-16BE using BOM and space-based heuristic.
// Defaults to UTF-16LE, as it's prevalent and default in Node.
// http://en.wikipedia.org/wiki/UTF-16 and http://encoding.spec.whatwg.org/#utf-16le
// Decoder default can be changed: iconv.decode(buf, 'utf16', {defaultEncoding: 'utf-16be'});

// Encoder uses UTF-16LE and prepends BOM (which can be overridden with addBOM: false).

exports.utf16 = Utf16Codec;
function Utf16Codec(codecOptions, iconv) {
    this.iconv = iconv;
}

Utf16Codec.prototype.encoder = Utf16Encoder;
Utf16Codec.prototype.decoder = Utf16Decoder;


// -- Encoding (pass-through)

function Utf16Encoder(options, codec) {
    options = options || {};
    if (options.addBOM === undefined)
        options.addBOM = true;
    this.encoder = codec.iconv.getEncoder('utf-16le', options);
}

Utf16Encoder.prototype.write = function(str) {
    return this.encoder.write(str);
}

Utf16Encoder.prototype.end = function() {
    return this.encoder.end();
}


// -- Decoding

function Utf16Decoder(options, codec) {
    this.decoder = null;
    this.initialBufs = [];
    this.initialBufsLen = 0;

    this.options = options || {};
    this.iconv = codec.iconv;
}

Utf16Decoder.prototype.write = function(buf) {
    if (!this.decoder) {
        // Codec is not chosen yet. Accumulate initial bytes.
        this.initialBufs.push(buf);
        this.initialBufsLen += buf.length;
        
        if (this.initialBufsLen < 16) // We need more bytes to use space heuristic (see below)
            return '';

        // We have enough bytes -> detect endianness.
        var encoding = detectEncoding(this.initialBufs, this.options.defaultEncoding);
        this.decoder = this.iconv.getDecoder(encoding, this.options);

        var resStr = '';
        for (var i = 0; i < this.initialBufs.length; i++)
            resStr += this.decoder.write(this.initialBufs[i]);

        this.initialBufs.length = this.initialBufsLen = 0;
        return resStr;
    }

    return this.decoder.write(buf);
}

Utf16Decoder.prototype.end = function() {
    if (!this.decoder) {
        var encoding = detectEncoding(this.initialBufs, this.options.defaultEncoding);
        this.decoder = this.iconv.getDecoder(encoding, this.options);

        var resStr = '';
        for (var i = 0; i < this.initialBufs.length; i++)
            resStr += this.decoder.write(this.initialBufs[i]);

        var trail = this.decoder.end();
        if (trail)
            resStr += trail;

        this.initialBufs.length = this.initialBufsLen = 0;
        return resStr;
    }
    return this.decoder.end();
}

function detectEncoding(bufs, defaultEncoding) {
    var b = [];
    var charsProcessed = 0;
    var asciiCharsLE = 0, asciiCharsBE = 0; // Number of ASCII chars when decoded as LE or BE.

    outer_loop:
    for (var i = 0; i < bufs.length; i++) {
        var buf = bufs[i];
        for (var j = 0; j < buf.length; j++) {
            b.push(buf[j]);
            if (b.length === 2) {
                if (charsProcessed === 0) {
                    // Check BOM first.
                    if (b[0] === 0xFF && b[1] === 0xFE) return 'utf-16le';
                    if (b[0] === 0xFE && b[1] === 0xFF) return 'utf-16be';
                }

                if (b[0] === 0 && b[1] !== 0) asciiCharsBE++;
                if (b[0] !== 0 && b[1] === 0) asciiCharsLE++;

                b.length = 0;
                charsProcessed++;

                if (charsProcessed >= 100) {
                    break outer_loop;
                }
            }
        }
    }

    // Make decisions.
    // Most of the time, the content has ASCII chars (U+00**), but the opposite (U+**00) is uncommon.
    // So, we count ASCII as if it was LE or BE, and decide from that.
    if (asciiCharsBE > asciiCharsLE) return 'utf-16be';
    if (asciiCharsBE < asciiCharsLE) return 'utf-16le';

    // Couldn't decide (likely all zeros or not enough data).
    return defaultEncoding || 'utf-16le';
}




/***/ }),

/***/ 32644:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var Buffer = (__webpack_require__(52931).Buffer);

// == UTF32-LE/BE codec. ==========================================================

exports._utf32 = Utf32Codec;

function Utf32Codec(codecOptions, iconv) {
    this.iconv = iconv;
    this.bomAware = true;
    this.isLE = codecOptions.isLE;
}

exports.utf32le = { type: '_utf32', isLE: true };
exports.utf32be = { type: '_utf32', isLE: false };

// Aliases
exports.ucs4le = 'utf32le';
exports.ucs4be = 'utf32be';

Utf32Codec.prototype.encoder = Utf32Encoder;
Utf32Codec.prototype.decoder = Utf32Decoder;

// -- Encoding

function Utf32Encoder(options, codec) {
    this.isLE = codec.isLE;
    this.highSurrogate = 0;
}

Utf32Encoder.prototype.write = function(str) {
    var src = Buffer.from(str, 'ucs2');
    var dst = Buffer.alloc(src.length * 2);
    var write32 = this.isLE ? dst.writeUInt32LE : dst.writeUInt32BE;
    var offset = 0;

    for (var i = 0; i < src.length; i += 2) {
        var code = src.readUInt16LE(i);
        var isHighSurrogate = (0xD800 <= code && code < 0xDC00);
        var isLowSurrogate = (0xDC00 <= code && code < 0xE000);

        if (this.highSurrogate) {
            if (isHighSurrogate || !isLowSurrogate) {
                // There shouldn't be two high surrogates in a row, nor a high surrogate which isn't followed by a low
                // surrogate. If this happens, keep the pending high surrogate as a stand-alone semi-invalid character
                // (technically wrong, but expected by some applications, like Windows file names).
                write32.call(dst, this.highSurrogate, offset);
                offset += 4;
            }
            else {
                // Create 32-bit value from high and low surrogates;
                var codepoint = (((this.highSurrogate - 0xD800) << 10) | (code - 0xDC00)) + 0x10000;

                write32.call(dst, codepoint, offset);
                offset += 4;
                this.highSurrogate = 0;

                continue;
            }
        }

        if (isHighSurrogate)
            this.highSurrogate = code;
        else {
            // Even if the current character is a low surrogate, with no previous high surrogate, we'll
            // encode it as a semi-invalid stand-alone character for the same reasons expressed above for
            // unpaired high surrogates.
            write32.call(dst, code, offset);
            offset += 4;
            this.highSurrogate = 0;
        }
    }

    if (offset < dst.length)
        dst = dst.slice(0, offset);

    return dst;
};

Utf32Encoder.prototype.end = function() {
    // Treat any leftover high surrogate as a semi-valid independent character.
    if (!this.highSurrogate)
        return;

    var buf = Buffer.alloc(4);

    if (this.isLE)
        buf.writeUInt32LE(this.highSurrogate, 0);
    else
        buf.writeUInt32BE(this.highSurrogate, 0);

    this.highSurrogate = 0;

    return buf;
};

// -- Decoding

function Utf32Decoder(options, codec) {
    this.isLE = codec.isLE;
    this.badChar = codec.iconv.defaultCharUnicode.charCodeAt(0);
    this.overflow = [];
}

Utf32Decoder.prototype.write = function(src) {
    if (src.length === 0)
        return '';

    var i = 0;
    var codepoint = 0;
    var dst = Buffer.alloc(src.length + 4);
    var offset = 0;
    var isLE = this.isLE;
    var overflow = this.overflow;
    var badChar = this.badChar;

    if (overflow.length > 0) {
        for (; i < src.length && overflow.length < 4; i++)
            overflow.push(src[i]);
        
        if (overflow.length === 4) {
            // NOTE: codepoint is a signed int32 and can be negative.
            // NOTE: We copied this block from below to help V8 optimize it (it works with array, not buffer).
            if (isLE) {
                codepoint = overflow[i] | (overflow[i+1] << 8) | (overflow[i+2] << 16) | (overflow[i+3] << 24);
            } else {
                codepoint = overflow[i+3] | (overflow[i+2] << 8) | (overflow[i+1] << 16) | (overflow[i] << 24);
            }
            overflow.length = 0;

            offset = _writeCodepoint(dst, offset, codepoint, badChar);
        }
    }

    // Main loop. Should be as optimized as possible.
    for (; i < src.length - 3; i += 4) {
        // NOTE: codepoint is a signed int32 and can be negative.
        if (isLE) {
            codepoint = src[i] | (src[i+1] << 8) | (src[i+2] << 16) | (src[i+3] << 24);
        } else {
            codepoint = src[i+3] | (src[i+2] << 8) | (src[i+1] << 16) | (src[i] << 24);
        }
        offset = _writeCodepoint(dst, offset, codepoint, badChar);
    }

    // Keep overflowing bytes.
    for (; i < src.length; i++) {
        overflow.push(src[i]);
    }

    return dst.slice(0, offset).toString('ucs2');
};

function _writeCodepoint(dst, offset, codepoint, badChar) {
    // NOTE: codepoint is signed int32 and can be negative. We keep it that way to help V8 with optimizations.
    if (codepoint < 0 || codepoint > 0x10FFFF) {
        // Not a valid Unicode codepoint
        codepoint = badChar;
    } 

    // Ephemeral Planes: Write high surrogate.
    if (codepoint >= 0x10000) {
        codepoint -= 0x10000;

        var high = 0xD800 | (codepoint >> 10);
        dst[offset++] = high & 0xff;
        dst[offset++] = high >> 8;

        // Low surrogate is written below.
        var codepoint = 0xDC00 | (codepoint & 0x3FF);
    }

    // Write BMP char or low surrogate.
    dst[offset++] = codepoint & 0xff;
    dst[offset++] = codepoint >> 8;

    return offset;
};

Utf32Decoder.prototype.end = function() {
    this.overflow.length = 0;
};

// == UTF-32 Auto codec =============================================================
// Decoder chooses automatically from UTF-32LE and UTF-32BE using BOM and space-based heuristic.
// Defaults to UTF-32LE. http://en.wikipedia.org/wiki/UTF-32
// Encoder/decoder default can be changed: iconv.decode(buf, 'utf32', {defaultEncoding: 'utf-32be'});

// Encoder prepends BOM (which can be overridden with (addBOM: false}).

exports.utf32 = Utf32AutoCodec;
exports.ucs4 = 'utf32';

function Utf32AutoCodec(options, iconv) {
    this.iconv = iconv;
}

Utf32AutoCodec.prototype.encoder = Utf32AutoEncoder;
Utf32AutoCodec.prototype.decoder = Utf32AutoDecoder;

// -- Encoding

function Utf32AutoEncoder(options, codec) {
    options = options || {};

    if (options.addBOM === undefined)
        options.addBOM = true;

    this.encoder = codec.iconv.getEncoder(options.defaultEncoding || 'utf-32le', options);
}

Utf32AutoEncoder.prototype.write = function(str) {
    return this.encoder.write(str);
};

Utf32AutoEncoder.prototype.end = function() {
    return this.encoder.end();
};

// -- Decoding

function Utf32AutoDecoder(options, codec) {
    this.decoder = null;
    this.initialBufs = [];
    this.initialBufsLen = 0;
    this.options = options || {};
    this.iconv = codec.iconv;
}

Utf32AutoDecoder.prototype.write = function(buf) {
    if (!this.decoder) { 
        // Codec is not chosen yet. Accumulate initial bytes.
        this.initialBufs.push(buf);
        this.initialBufsLen += buf.length;

        if (this.initialBufsLen < 32) // We need more bytes to use space heuristic (see below)
            return '';

        // We have enough bytes -> detect endianness.
        var encoding = detectEncoding(this.initialBufs, this.options.defaultEncoding);
        this.decoder = this.iconv.getDecoder(encoding, this.options);

        var resStr = '';
        for (var i = 0; i < this.initialBufs.length; i++)
            resStr += this.decoder.write(this.initialBufs[i]);

        this.initialBufs.length = this.initialBufsLen = 0;
        return resStr;
    }

    return this.decoder.write(buf);
};

Utf32AutoDecoder.prototype.end = function() {
    if (!this.decoder) {
        var encoding = detectEncoding(this.initialBufs, this.options.defaultEncoding);
        this.decoder = this.iconv.getDecoder(encoding, this.options);

        var resStr = '';
        for (var i = 0; i < this.initialBufs.length; i++)
            resStr += this.decoder.write(this.initialBufs[i]);

        var trail = this.decoder.end();
        if (trail)
            resStr += trail;

        this.initialBufs.length = this.initialBufsLen = 0;
        return resStr;
    }

    return this.decoder.end();
};

function detectEncoding(bufs, defaultEncoding) {
    var b = [];
    var charsProcessed = 0;
    var invalidLE = 0, invalidBE = 0;   // Number of invalid chars when decoded as LE or BE.
    var bmpCharsLE = 0, bmpCharsBE = 0; // Number of BMP chars when decoded as LE or BE.

    outer_loop:
    for (var i = 0; i < bufs.length; i++) {
        var buf = bufs[i];
        for (var j = 0; j < buf.length; j++) {
            b.push(buf[j]);
            if (b.length === 4) {
                if (charsProcessed === 0) {
                    // Check BOM first.
                    if (b[0] === 0xFF && b[1] === 0xFE && b[2] === 0 && b[3] === 0) {
                        return 'utf-32le';
                    }
                    if (b[0] === 0 && b[1] === 0 && b[2] === 0xFE && b[3] === 0xFF) {
                        return 'utf-32be';
                    }
                }

                if (b[0] !== 0 || b[1] > 0x10) invalidBE++;
                if (b[3] !== 0 || b[2] > 0x10) invalidLE++;

                if (b[0] === 0 && b[1] === 0 && (b[2] !== 0 || b[3] !== 0)) bmpCharsBE++;
                if ((b[0] !== 0 || b[1] !== 0) && b[2] === 0 && b[3] === 0) bmpCharsLE++;

                b.length = 0;
                charsProcessed++;

                if (charsProcessed >= 100) {
                    break outer_loop;
                }
            }
        }
    }

    // Make decisions.
    if (bmpCharsBE - invalidBE > bmpCharsLE - invalidLE)  return 'utf-32be';
    if (bmpCharsBE - invalidBE < bmpCharsLE - invalidLE)  return 'utf-32le';

    // Couldn't decide (likely all zeros or not enough data).
    return defaultEncoding || 'utf-32le';
}


/***/ }),

/***/ 82775:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

var Buffer = (__webpack_require__(52931).Buffer);

// UTF-7 codec, according to https://tools.ietf.org/html/rfc2152
// See also below a UTF-7-IMAP codec, according to http://tools.ietf.org/html/rfc3501#section-5.1.3

exports.utf7 = Utf7Codec;
exports.unicode11utf7 = 'utf7'; // Alias UNICODE-1-1-UTF-7
function Utf7Codec(codecOptions, iconv) {
    this.iconv = iconv;
};

Utf7Codec.prototype.encoder = Utf7Encoder;
Utf7Codec.prototype.decoder = Utf7Decoder;
Utf7Codec.prototype.bomAware = true;


// -- Encoding

var nonDirectChars = /[^A-Za-z0-9'\(\),-\.\/:\? \n\r\t]+/g;

function Utf7Encoder(options, codec) {
    this.iconv = codec.iconv;
}

Utf7Encoder.prototype.write = function(str) {
    // Naive implementation.
    // Non-direct chars are encoded as "+<base64>-"; single "+" char is encoded as "+-".
    return Buffer.from(str.replace(nonDirectChars, function(chunk) {
        return "+" + (chunk === '+' ? '' : 
            this.iconv.encode(chunk, 'utf16-be').toString('base64').replace(/=+$/, '')) 
            + "-";
    }.bind(this)));
}

Utf7Encoder.prototype.end = function() {
}


// -- Decoding

function Utf7Decoder(options, codec) {
    this.iconv = codec.iconv;
    this.inBase64 = false;
    this.base64Accum = '';
}

var base64Regex = /[A-Za-z0-9\/+]/;
var base64Chars = [];
for (var i = 0; i < 256; i++)
    base64Chars[i] = base64Regex.test(String.fromCharCode(i));

var plusChar = '+'.charCodeAt(0), 
    minusChar = '-'.charCodeAt(0),
    andChar = '&'.charCodeAt(0);

Utf7Decoder.prototype.write = function(buf) {
    var res = "", lastI = 0,
        inBase64 = this.inBase64,
        base64Accum = this.base64Accum;

    // The decoder is more involved as we must handle chunks in stream.

    for (var i = 0; i < buf.length; i++) {
        if (!inBase64) { // We're in direct mode.
            // Write direct chars until '+'
            if (buf[i] == plusChar) {
                res += this.iconv.decode(buf.slice(lastI, i), "ascii"); // Write direct chars.
                lastI = i+1;
                inBase64 = true;
            }
        } else { // We decode base64.
            if (!base64Chars[buf[i]]) { // Base64 ended.
                if (i == lastI && buf[i] == minusChar) {// "+-" -> "+"
                    res += "+";
                } else {
                    var b64str = base64Accum + this.iconv.decode(buf.slice(lastI, i), "ascii");
                    res += this.iconv.decode(Buffer.from(b64str, 'base64'), "utf16-be");
                }

                if (buf[i] != minusChar) // Minus is absorbed after base64.
                    i--;

                lastI = i+1;
                inBase64 = false;
                base64Accum = '';
            }
        }
    }

    if (!inBase64) {
        res += this.iconv.decode(buf.slice(lastI), "ascii"); // Write direct chars.
    } else {
        var b64str = base64Accum + this.iconv.decode(buf.slice(lastI), "ascii");

        var canBeDecoded = b64str.length - (b64str.length % 8); // Minimal chunk: 2 quads -> 2x3 bytes -> 3 chars.
        base64Accum = b64str.slice(canBeDecoded); // The rest will be decoded in future.
        b64str = b64str.slice(0, canBeDecoded);

        res += this.iconv.decode(Buffer.from(b64str, 'base64'), "utf16-be");
    }

    this.inBase64 = inBase64;
    this.base64Accum = base64Accum;

    return res;
}

Utf7Decoder.prototype.end = function() {
    var res = "";
    if (this.inBase64 && this.base64Accum.length > 0)
        res = this.iconv.decode(Buffer.from(this.base64Accum, 'base64'), "utf16-be");

    this.inBase64 = false;
    this.base64Accum = '';
    return res;
}


// UTF-7-IMAP codec.
// RFC3501 Sec. 5.1.3 Modified UTF-7 (http://tools.ietf.org/html/rfc3501#section-5.1.3)
// Differences:
//  * Base64 part is started by "&" instead of "+"
//  * Direct characters are 0x20-0x7E, except "&" (0x26)
//  * In Base64, "," is used instead of "/"
//  * Base64 must not be used to represent direct characters.
//  * No implicit shift back from Base64 (should always end with '-')
//  * String must end in non-shifted position.
//  * "-&" while in base64 is not allowed.


exports.utf7imap = Utf7IMAPCodec;
function Utf7IMAPCodec(codecOptions, iconv) {
    this.iconv = iconv;
};

Utf7IMAPCodec.prototype.encoder = Utf7IMAPEncoder;
Utf7IMAPCodec.prototype.decoder = Utf7IMAPDecoder;
Utf7IMAPCodec.prototype.bomAware = true;


// -- Encoding

function Utf7IMAPEncoder(options, codec) {
    this.iconv = codec.iconv;
    this.inBase64 = false;
    this.base64Accum = Buffer.alloc(6);
    this.base64AccumIdx = 0;
}

Utf7IMAPEncoder.prototype.write = function(str) {
    var inBase64 = this.inBase64,
        base64Accum = this.base64Accum,
        base64AccumIdx = this.base64AccumIdx,
        buf = Buffer.alloc(str.length*5 + 10), bufIdx = 0;

    for (var i = 0; i < str.length; i++) {
        var uChar = str.charCodeAt(i);
        if (0x20 <= uChar && uChar <= 0x7E) { // Direct character or '&'.
            if (inBase64) {
                if (base64AccumIdx > 0) {
                    bufIdx += buf.write(base64Accum.slice(0, base64AccumIdx).toString('base64').replace(/\//g, ',').replace(/=+$/, ''), bufIdx);
                    base64AccumIdx = 0;
                }

                buf[bufIdx++] = minusChar; // Write '-', then go to direct mode.
                inBase64 = false;
            }

            if (!inBase64) {
                buf[bufIdx++] = uChar; // Write direct character

                if (uChar === andChar)  // Ampersand -> '&-'
                    buf[bufIdx++] = minusChar;
            }

        } else { // Non-direct character
            if (!inBase64) {
                buf[bufIdx++] = andChar; // Write '&', then go to base64 mode.
                inBase64 = true;
            }
            if (inBase64) {
                base64Accum[base64AccumIdx++] = uChar >> 8;
                base64Accum[base64AccumIdx++] = uChar & 0xFF;

                if (base64AccumIdx == base64Accum.length) {
                    bufIdx += buf.write(base64Accum.toString('base64').replace(/\//g, ','), bufIdx);
                    base64AccumIdx = 0;
                }
            }
        }
    }

    this.inBase64 = inBase64;
    this.base64AccumIdx = base64AccumIdx;

    return buf.slice(0, bufIdx);
}

Utf7IMAPEncoder.prototype.end = function() {
    var buf = Buffer.alloc(10), bufIdx = 0;
    if (this.inBase64) {
        if (this.base64AccumIdx > 0) {
            bufIdx += buf.write(this.base64Accum.slice(0, this.base64AccumIdx).toString('base64').replace(/\//g, ',').replace(/=+$/, ''), bufIdx);
            this.base64AccumIdx = 0;
        }

        buf[bufIdx++] = minusChar; // Write '-', then go to direct mode.
        this.inBase64 = false;
    }

    return buf.slice(0, bufIdx);
}


// -- Decoding

function Utf7IMAPDecoder(options, codec) {
    this.iconv = codec.iconv;
    this.inBase64 = false;
    this.base64Accum = '';
}

var base64IMAPChars = base64Chars.slice();
base64IMAPChars[','.charCodeAt(0)] = true;

Utf7IMAPDecoder.prototype.write = function(buf) {
    var res = "", lastI = 0,
        inBase64 = this.inBase64,
        base64Accum = this.base64Accum;

    // The decoder is more involved as we must handle chunks in stream.
    // It is forgiving, closer to standard UTF-7 (for example, '-' is optional at the end).

    for (var i = 0; i < buf.length; i++) {
        if (!inBase64) { // We're in direct mode.
            // Write direct chars until '&'
            if (buf[i] == andChar) {
                res += this.iconv.decode(buf.slice(lastI, i), "ascii"); // Write direct chars.
                lastI = i+1;
                inBase64 = true;
            }
        } else { // We decode base64.
            if (!base64IMAPChars[buf[i]]) { // Base64 ended.
                if (i == lastI && buf[i] == minusChar) { // "&-" -> "&"
                    res += "&";
                } else {
                    var b64str = base64Accum + this.iconv.decode(buf.slice(lastI, i), "ascii").replace(/,/g, '/');
                    res += this.iconv.decode(Buffer.from(b64str, 'base64'), "utf16-be");
                }

                if (buf[i] != minusChar) // Minus may be absorbed after base64.
                    i--;

                lastI = i+1;
                inBase64 = false;
                base64Accum = '';
            }
        }
    }

    if (!inBase64) {
        res += this.iconv.decode(buf.slice(lastI), "ascii"); // Write direct chars.
    } else {
        var b64str = base64Accum + this.iconv.decode(buf.slice(lastI), "ascii").replace(/,/g, '/');

        var canBeDecoded = b64str.length - (b64str.length % 8); // Minimal chunk: 2 quads -> 2x3 bytes -> 3 chars.
        base64Accum = b64str.slice(canBeDecoded); // The rest will be decoded in future.
        b64str = b64str.slice(0, canBeDecoded);

        res += this.iconv.decode(Buffer.from(b64str, 'base64'), "utf16-be");
    }

    this.inBase64 = inBase64;
    this.base64Accum = base64Accum;

    return res;
}

Utf7IMAPDecoder.prototype.end = function() {
    var res = "";
    if (this.inBase64 && this.base64Accum.length > 0)
        res = this.iconv.decode(Buffer.from(this.base64Accum, 'base64'), "utf16-be");

    this.inBase64 = false;
    this.base64Accum = '';
    return res;
}




/***/ }),

/***/ 71896:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


var BOMChar = '\uFEFF';

exports.PrependBOM = PrependBOMWrapper
function PrependBOMWrapper(encoder, options) {
    this.encoder = encoder;
    this.addBOM = true;
}

PrependBOMWrapper.prototype.write = function(str) {
    if (this.addBOM) {
        str = BOMChar + str;
        this.addBOM = false;
    }

    return this.encoder.write(str);
}

PrependBOMWrapper.prototype.end = function() {
    return this.encoder.end();
}


//------------------------------------------------------------------------------

exports.StripBOM = StripBOMWrapper;
function StripBOMWrapper(decoder, options) {
    this.decoder = decoder;
    this.pass = false;
    this.options = options || {};
}

StripBOMWrapper.prototype.write = function(buf) {
    var res = this.decoder.write(buf);
    if (this.pass || !res)
        return res;

    if (res[0] === BOMChar) {
        res = res.slice(1);
        if (typeof this.options.stripBOM === 'function')
            this.options.stripBOM();
    }

    this.pass = true;
    return res;
}

StripBOMWrapper.prototype.end = function() {
    return this.decoder.end();
}



/***/ }),

/***/ 75170:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var Buffer = (__webpack_require__(52931).Buffer);

var bomHandling = __webpack_require__(71896),
    iconv = module.exports;

// All codecs and aliases are kept here, keyed by encoding name/alias.
// They are lazy loaded in `iconv.getCodec` from `encodings/index.js`.
iconv.encodings = null;

// Characters emitted in case of error.
iconv.defaultCharUnicode = '�';
iconv.defaultCharSingleByte = '?';

// Public API.
iconv.encode = function encode(str, encoding, options) {
    str = "" + (str || ""); // Ensure string.

    var encoder = iconv.getEncoder(encoding, options);

    var res = encoder.write(str);
    var trail = encoder.end();
    
    return (trail && trail.length > 0) ? Buffer.concat([res, trail]) : res;
}

iconv.decode = function decode(buf, encoding, options) {
    if (typeof buf === 'string') {
        if (!iconv.skipDecodeWarning) {
            console.error('Iconv-lite warning: decode()-ing strings is deprecated. Refer to https://github.com/ashtuchkin/iconv-lite/wiki/Use-Buffers-when-decoding');
            iconv.skipDecodeWarning = true;
        }

        buf = Buffer.from("" + (buf || ""), "binary"); // Ensure buffer.
    }

    var decoder = iconv.getDecoder(encoding, options);

    var res = decoder.write(buf);
    var trail = decoder.end();

    return trail ? (res + trail) : res;
}

iconv.encodingExists = function encodingExists(enc) {
    try {
        iconv.getCodec(enc);
        return true;
    } catch (e) {
        return false;
    }
}

// Legacy aliases to convert functions
iconv.toEncoding = iconv.encode;
iconv.fromEncoding = iconv.decode;

// Search for a codec in iconv.encodings. Cache codec data in iconv._codecDataCache.
iconv._codecDataCache = {};
iconv.getCodec = function getCodec(encoding) {
    if (!iconv.encodings)
        iconv.encodings = __webpack_require__(74381); // Lazy load all encoding definitions.
    
    // Canonicalize encoding name: strip all non-alphanumeric chars and appended year.
    var enc = iconv._canonicalizeEncoding(encoding);

    // Traverse iconv.encodings to find actual codec.
    var codecOptions = {};
    while (true) {
        var codec = iconv._codecDataCache[enc];
        if (codec)
            return codec;

        var codecDef = iconv.encodings[enc];

        switch (typeof codecDef) {
            case "string": // Direct alias to other encoding.
                enc = codecDef;
                break;

            case "object": // Alias with options. Can be layered.
                for (var key in codecDef)
                    codecOptions[key] = codecDef[key];

                if (!codecOptions.encodingName)
                    codecOptions.encodingName = enc;
                
                enc = codecDef.type;
                break;

            case "function": // Codec itself.
                if (!codecOptions.encodingName)
                    codecOptions.encodingName = enc;

                // The codec function must load all tables and return object with .encoder and .decoder methods.
                // It'll be called only once (for each different options object).
                codec = new codecDef(codecOptions, iconv);

                iconv._codecDataCache[codecOptions.encodingName] = codec; // Save it to be reused later.
                return codec;

            default:
                throw new Error("Encoding not recognized: '" + encoding + "' (searched as: '"+enc+"')");
        }
    }
}

iconv._canonicalizeEncoding = function(encoding) {
    // Canonicalize encoding name: strip all non-alphanumeric chars and appended year.
    return (''+encoding).toLowerCase().replace(/:\d{4}$|[^0-9a-z]/g, "");
}

iconv.getEncoder = function getEncoder(encoding, options) {
    var codec = iconv.getCodec(encoding),
        encoder = new codec.encoder(options, codec);

    if (codec.bomAware && options && options.addBOM)
        encoder = new bomHandling.PrependBOM(encoder, options);

    return encoder;
}

iconv.getDecoder = function getDecoder(encoding, options) {
    var codec = iconv.getCodec(encoding),
        decoder = new codec.decoder(options, codec);

    if (codec.bomAware && !(options && options.stripBOM === false))
        decoder = new bomHandling.StripBOM(decoder, options);

    return decoder;
}

// Streaming API
// NOTE: Streaming API naturally depends on 'stream' module from Node.js. Unfortunately in browser environments this module can add
// up to 100Kb to the output bundle. To avoid unnecessary code bloat, we don't enable Streaming API in browser by default.
// If you would like to enable it explicitly, please add the following code to your app:
// > iconv.enableStreamingAPI(require('stream'));
iconv.enableStreamingAPI = function enableStreamingAPI(stream_module) {
    if (iconv.supportsStreams)
        return;

    // Dependency-inject stream module to create IconvLite stream classes.
    var streams = __webpack_require__(2229)(stream_module);

    // Not public API yet, but expose the stream classes.
    iconv.IconvLiteEncoderStream = streams.IconvLiteEncoderStream;
    iconv.IconvLiteDecoderStream = streams.IconvLiteDecoderStream;

    // Streaming API.
    iconv.encodeStream = function encodeStream(encoding, options) {
        return new iconv.IconvLiteEncoderStream(iconv.getEncoder(encoding, options), options);
    }

    iconv.decodeStream = function decodeStream(encoding, options) {
        return new iconv.IconvLiteDecoderStream(iconv.getDecoder(encoding, options), options);
    }

    iconv.supportsStreams = true;
}

// Enable Streaming API automatically if 'stream' module is available and non-empty (the majority of environments).
var stream_module;
try {
    stream_module = __webpack_require__(12781);
} catch (e) {}

if (stream_module && stream_module.Transform) {
    iconv.enableStreamingAPI(stream_module);

} else {
    // In rare cases where 'stream' module is not available by default, throw a helpful exception.
    iconv.encodeStream = iconv.decodeStream = function() {
        throw new Error("iconv-lite Streaming API is not enabled. Use iconv.enableStreamingAPI(require('stream')); to enable it.");
    };
}

if (false) {}


/***/ }),

/***/ 2229:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var Buffer = (__webpack_require__(52931).Buffer);

// NOTE: Due to 'stream' module being pretty large (~100Kb, significant in browser environments), 
// we opt to dependency-inject it instead of creating a hard dependency.
module.exports = function(stream_module) {
    var Transform = stream_module.Transform;

    // == Encoder stream =======================================================

    function IconvLiteEncoderStream(conv, options) {
        this.conv = conv;
        options = options || {};
        options.decodeStrings = false; // We accept only strings, so we don't need to decode them.
        Transform.call(this, options);
    }

    IconvLiteEncoderStream.prototype = Object.create(Transform.prototype, {
        constructor: { value: IconvLiteEncoderStream }
    });

    IconvLiteEncoderStream.prototype._transform = function(chunk, encoding, done) {
        if (typeof chunk != 'string')
            return done(new Error("Iconv encoding stream needs strings as its input."));
        try {
            var res = this.conv.write(chunk);
            if (res && res.length) this.push(res);
            done();
        }
        catch (e) {
            done(e);
        }
    }

    IconvLiteEncoderStream.prototype._flush = function(done) {
        try {
            var res = this.conv.end();
            if (res && res.length) this.push(res);
            done();
        }
        catch (e) {
            done(e);
        }
    }

    IconvLiteEncoderStream.prototype.collect = function(cb) {
        var chunks = [];
        this.on('error', cb);
        this.on('data', function(chunk) { chunks.push(chunk); });
        this.on('end', function() {
            cb(null, Buffer.concat(chunks));
        });
        return this;
    }


    // == Decoder stream =======================================================

    function IconvLiteDecoderStream(conv, options) {
        this.conv = conv;
        options = options || {};
        options.encoding = this.encoding = 'utf8'; // We output strings.
        Transform.call(this, options);
    }

    IconvLiteDecoderStream.prototype = Object.create(Transform.prototype, {
        constructor: { value: IconvLiteDecoderStream }
    });

    IconvLiteDecoderStream.prototype._transform = function(chunk, encoding, done) {
        if (!Buffer.isBuffer(chunk) && !(chunk instanceof Uint8Array))
            return done(new Error("Iconv decoding stream needs buffers as its input."));
        try {
            var res = this.conv.write(chunk);
            if (res && res.length) this.push(res, this.encoding);
            done();
        }
        catch (e) {
            done(e);
        }
    }

    IconvLiteDecoderStream.prototype._flush = function(done) {
        try {
            var res = this.conv.end();
            if (res && res.length) this.push(res, this.encoding);                
            done();
        }
        catch (e) {
            done(e);
        }
    }

    IconvLiteDecoderStream.prototype.collect = function(cb) {
        var res = '';
        this.on('error', cb);
        this.on('data', function(chunk) { res += chunk; });
        this.on('end', function() {
            cb(null, res);
        });
        return this;
    }

    return {
        IconvLiteEncoderStream: IconvLiteEncoderStream,
        IconvLiteDecoderStream: IconvLiteDecoderStream,
    };
};


/***/ }),

/***/ 48156:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var wrappy = __webpack_require__(37534)
var reqs = Object.create(null)
var once = __webpack_require__(58034)

module.exports = wrappy(inflight)

function inflight (key, cb) {
  if (reqs[key]) {
    reqs[key].push(cb)
    return null
  } else {
    reqs[key] = [cb]
    return makeres(key)
  }
}

function makeres (key) {
  return once(function RES () {
    var cbs = reqs[key]
    var len = cbs.length
    var args = slice(arguments)

    // XXX It's somewhat ambiguous whether a new callback added in this
    // pass should be queued for later execution if something in the
    // list of callbacks throws, or if it should just be discarded.
    // However, it's such an edge case that it hardly matters, and either
    // choice is likely as surprising as the other.
    // As it happens, we do go ahead and schedule it for later execution.
    try {
      for (var i = 0; i < len; i++) {
        cbs[i].apply(null, args)
      }
    } finally {
      if (cbs.length > len) {
        // added more in the interim.
        // de-zalgo, just in case, but don't call again.
        cbs.splice(0, len)
        process.nextTick(function () {
          RES.apply(null, args)
        })
      } else {
        delete reqs[key]
      }
    }
  })
}

function slice (args) {
  var length = args.length
  var array = []

  for (var i = 0; i < length; i++) array[i] = args[i]
  return array
}


/***/ }),

/***/ 71947:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

try {
  var util = __webpack_require__(73837);
  /* istanbul ignore next */
  if (typeof util.inherits !== 'function') throw '';
  module.exports = util.inherits;
} catch (e) {
  /* istanbul ignore next */
  module.exports = __webpack_require__(27442);
}


/***/ }),

/***/ 27442:
/***/ ((module) => {

if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
      ctor.super_ = superCtor
      ctor.prototype = Object.create(superCtor.prototype, {
        constructor: {
          value: ctor,
          enumerable: false,
          writable: true,
          configurable: true
        }
      })
    }
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
      ctor.super_ = superCtor
      var TempCtor = function () {}
      TempCtor.prototype = superCtor.prototype
      ctor.prototype = new TempCtor()
      ctor.prototype.constructor = ctor
    }
  }
}


/***/ }),

/***/ 83081:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var GetIntrinsic = __webpack_require__(41033);
var hasOwn = __webpack_require__(96186);
var channel = __webpack_require__(56758)();

var $TypeError = GetIntrinsic('%TypeError%');

var SLOT = {
	assert: function (O, slot) {
		if (!O || (typeof O !== 'object' && typeof O !== 'function')) {
			throw new $TypeError('`O` is not an object');
		}
		if (typeof slot !== 'string') {
			throw new $TypeError('`slot` must be a string');
		}
		channel.assert(O);
		if (!SLOT.has(O, slot)) {
			throw new $TypeError('`' + slot + '` is not present on `O`');
		}
	},
	get: function (O, slot) {
		if (!O || (typeof O !== 'object' && typeof O !== 'function')) {
			throw new $TypeError('`O` is not an object');
		}
		if (typeof slot !== 'string') {
			throw new $TypeError('`slot` must be a string');
		}
		var slots = channel.get(O);
		return slots && slots['$' + slot];
	},
	has: function (O, slot) {
		if (!O || (typeof O !== 'object' && typeof O !== 'function')) {
			throw new $TypeError('`O` is not an object');
		}
		if (typeof slot !== 'string') {
			throw new $TypeError('`slot` must be a string');
		}
		var slots = channel.get(O);
		return !!slots && hasOwn(slots, '$' + slot);
	},
	set: function (O, slot, V) {
		if (!O || (typeof O !== 'object' && typeof O !== 'function')) {
			throw new $TypeError('`O` is not an object');
		}
		if (typeof slot !== 'string') {
			throw new $TypeError('`slot` must be a string');
		}
		var slots = channel.get(O);
		if (!slots) {
			slots = {};
			channel.set(O, slots);
		}
		slots['$' + slot] = V;
	}
};

if (Object.freeze) {
	Object.freeze(SLOT);
}

module.exports = SLOT;


/***/ }),

/***/ 5948:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

const path = __webpack_require__(71017);
const binaryExtensions = __webpack_require__(80187);

const extensions = new Set(binaryExtensions);

module.exports = filePath => extensions.has(path.extname(filePath).slice(1).toLowerCase());


/***/ }),

/***/ 15850:
/***/ ((module) => {

"use strict";


var fnToStr = Function.prototype.toString;
var reflectApply = typeof Reflect === 'object' && Reflect !== null && Reflect.apply;
var badArrayLike;
var isCallableMarker;
if (typeof reflectApply === 'function' && typeof Object.defineProperty === 'function') {
	try {
		badArrayLike = Object.defineProperty({}, 'length', {
			get: function () {
				throw isCallableMarker;
			}
		});
		isCallableMarker = {};
		// eslint-disable-next-line no-throw-literal
		reflectApply(function () { throw 42; }, null, badArrayLike);
	} catch (_) {
		if (_ !== isCallableMarker) {
			reflectApply = null;
		}
	}
} else {
	reflectApply = null;
}

var constructorRegex = /^\s*class\b/;
var isES6ClassFn = function isES6ClassFunction(value) {
	try {
		var fnStr = fnToStr.call(value);
		return constructorRegex.test(fnStr);
	} catch (e) {
		return false; // not a function
	}
};

var tryFunctionObject = function tryFunctionToStr(value) {
	try {
		if (isES6ClassFn(value)) { return false; }
		fnToStr.call(value);
		return true;
	} catch (e) {
		return false;
	}
};
var toStr = Object.prototype.toString;
var fnClass = '[object Function]';
var genClass = '[object GeneratorFunction]';
var hasToStringTag = typeof Symbol === 'function' && !!Symbol.toStringTag; // better: use `has-tostringtag`
/* globals document: false */
var documentDotAll = typeof document === 'object' && typeof document.all === 'undefined' && document.all !== undefined ? document.all : {};

module.exports = reflectApply
	? function isCallable(value) {
		if (value === documentDotAll) { return true; }
		if (!value) { return false; }
		if (typeof value !== 'function' && typeof value !== 'object') { return false; }
		if (typeof value === 'function' && !value.prototype) { return true; }
		try {
			reflectApply(value, null, badArrayLike);
		} catch (e) {
			if (e !== isCallableMarker) { return false; }
		}
		return !isES6ClassFn(value);
	}
	: function isCallable(value) {
		if (value === documentDotAll) { return true; }
		if (!value) { return false; }
		if (typeof value !== 'function' && typeof value !== 'object') { return false; }
		if (typeof value === 'function' && !value.prototype) { return true; }
		if (hasToStringTag) { return tryFunctionObject(value); }
		if (isES6ClassFn(value)) { return false; }
		var strClass = toStr.call(value);
		return strClass === fnClass || strClass === genClass;
	};


/***/ }),

/***/ 59244:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var getDay = Date.prototype.getDay;
var tryDateObject = function tryDateGetDayCall(value) {
	try {
		getDay.call(value);
		return true;
	} catch (e) {
		return false;
	}
};

var toStr = Object.prototype.toString;
var dateClass = '[object Date]';
var hasToStringTag = __webpack_require__(24611)();

module.exports = function isDateObject(value) {
	if (typeof value !== 'object' || value === null) {
		return false;
	}
	return hasToStringTag ? tryDateObject(value) : toStr.call(value) === dateClass;
};


/***/ }),

/***/ 64548:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

const fs = __webpack_require__(57147);

let isDocker;

function hasDockerEnv() {
	try {
		fs.statSync('/.dockerenv');
		return true;
	} catch (_) {
		return false;
	}
}

function hasDockerCGroup() {
	try {
		return fs.readFileSync('/proc/self/cgroup', 'utf8').includes('docker');
	} catch (_) {
		return false;
	}
}

module.exports = () => {
	if (isDocker === undefined) {
		isDocker = hasDockerEnv() || hasDockerCGroup();
	}

	return isDocker;
};


/***/ }),

/***/ 8584:
/***/ ((module) => {

/*!
 * is-extglob <https://github.com/jonschlinkert/is-extglob>
 *
 * Copyright (c) 2014-2016, Jon Schlinkert.
 * Licensed under the MIT License.
 */

module.exports = function isExtglob(str) {
  if (typeof str !== 'string' || str === '') {
    return false;
  }

  var match;
  while ((match = /(\\).|([@?!+*]\(.*\))/g.exec(str))) {
    if (match[2]) return true;
    str = str.slice(match.index + match[0].length);
  }

  return false;
};


/***/ }),

/***/ 22767:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/*!
 * is-glob <https://github.com/jonschlinkert/is-glob>
 *
 * Copyright (c) 2014-2017, Jon Schlinkert.
 * Released under the MIT License.
 */

var isExtglob = __webpack_require__(8584);
var chars = { '{': '}', '(': ')', '[': ']'};
var strictCheck = function(str) {
  if (str[0] === '!') {
    return true;
  }
  var index = 0;
  var pipeIndex = -2;
  var closeSquareIndex = -2;
  var closeCurlyIndex = -2;
  var closeParenIndex = -2;
  var backSlashIndex = -2;
  while (index < str.length) {
    if (str[index] === '*') {
      return true;
    }

    if (str[index + 1] === '?' && /[\].+)]/.test(str[index])) {
      return true;
    }

    if (closeSquareIndex !== -1 && str[index] === '[' && str[index + 1] !== ']') {
      if (closeSquareIndex < index) {
        closeSquareIndex = str.indexOf(']', index);
      }
      if (closeSquareIndex > index) {
        if (backSlashIndex === -1 || backSlashIndex > closeSquareIndex) {
          return true;
        }
        backSlashIndex = str.indexOf('\\', index);
        if (backSlashIndex === -1 || backSlashIndex > closeSquareIndex) {
          return true;
        }
      }
    }

    if (closeCurlyIndex !== -1 && str[index] === '{' && str[index + 1] !== '}') {
      closeCurlyIndex = str.indexOf('}', index);
      if (closeCurlyIndex > index) {
        backSlashIndex = str.indexOf('\\', index);
        if (backSlashIndex === -1 || backSlashIndex > closeCurlyIndex) {
          return true;
        }
      }
    }

    if (closeParenIndex !== -1 && str[index] === '(' && str[index + 1] === '?' && /[:!=]/.test(str[index + 2]) && str[index + 3] !== ')') {
      closeParenIndex = str.indexOf(')', index);
      if (closeParenIndex > index) {
        backSlashIndex = str.indexOf('\\', index);
        if (backSlashIndex === -1 || backSlashIndex > closeParenIndex) {
          return true;
        }
      }
    }

    if (pipeIndex !== -1 && str[index] === '(' && str[index + 1] !== '|') {
      if (pipeIndex < index) {
        pipeIndex = str.indexOf('|', index);
      }
      if (pipeIndex !== -1 && str[pipeIndex + 1] !== ')') {
        closeParenIndex = str.indexOf(')', pipeIndex);
        if (closeParenIndex > pipeIndex) {
          backSlashIndex = str.indexOf('\\', pipeIndex);
          if (backSlashIndex === -1 || backSlashIndex > closeParenIndex) {
            return true;
          }
        }
      }
    }

    if (str[index] === '\\') {
      var open = str[index + 1];
      index += 2;
      var close = chars[open];

      if (close) {
        var n = str.indexOf(close, index);
        if (n !== -1) {
          index = n + 1;
        }
      }

      if (str[index] === '!') {
        return true;
      }
    } else {
      index++;
    }
  }
  return false;
};

var relaxedCheck = function(str) {
  if (str[0] === '!') {
    return true;
  }
  var index = 0;
  while (index < str.length) {
    if (/[*?{}()[\]]/.test(str[index])) {
      return true;
    }

    if (str[index] === '\\') {
      var open = str[index + 1];
      index += 2;
      var close = chars[open];

      if (close) {
        var n = str.indexOf(close, index);
        if (n !== -1) {
          index = n + 1;
        }
      }

      if (str[index] === '!') {
        return true;
      }
    } else {
      index++;
    }
  }
  return false;
};

module.exports = function isGlob(str, options) {
  if (typeof str !== 'string' || str === '') {
    return false;
  }

  if (isExtglob(str)) {
    return true;
  }

  var check = strictCheck;

  // optionally relax check
  if (options && options.strict === false) {
    check = relaxedCheck;
  }

  return check(str);
};


/***/ }),

/***/ 84812:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var callBound = __webpack_require__(32622);
var hasToStringTag = __webpack_require__(24611)();
var has;
var $exec;
var isRegexMarker;
var badStringifier;

if (hasToStringTag) {
	has = callBound('Object.prototype.hasOwnProperty');
	$exec = callBound('RegExp.prototype.exec');
	isRegexMarker = {};

	var throwRegexMarker = function () {
		throw isRegexMarker;
	};
	badStringifier = {
		toString: throwRegexMarker,
		valueOf: throwRegexMarker
	};

	if (typeof Symbol.toPrimitive === 'symbol') {
		badStringifier[Symbol.toPrimitive] = throwRegexMarker;
	}
}

var $toString = callBound('Object.prototype.toString');
var gOPD = Object.getOwnPropertyDescriptor;
var regexClass = '[object RegExp]';

module.exports = hasToStringTag
	// eslint-disable-next-line consistent-return
	? function isRegex(value) {
		if (!value || typeof value !== 'object') {
			return false;
		}

		var descriptor = gOPD(value, 'lastIndex');
		var hasLastIndexDataProperty = descriptor && has(descriptor, 'value');
		if (!hasLastIndexDataProperty) {
			return false;
		}

		try {
			$exec(value, badStringifier);
		} catch (e) {
			return e === isRegexMarker;
		}
	}
	: function isRegex(value) {
		// In older browsers, typeof regex incorrectly returns 'function'
		if (!value || (typeof value !== 'object' && typeof value !== 'function')) {
			return false;
		}

		return $toString(value) === regexClass;
	};


/***/ }),

/***/ 58000:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var toStr = Object.prototype.toString;
var hasSymbols = __webpack_require__(66478)();

if (hasSymbols) {
	var symToStr = Symbol.prototype.toString;
	var symStringRegex = /^Symbol\(.*\)$/;
	var isSymbolObject = function isRealSymbolObject(value) {
		if (typeof value.valueOf() !== 'symbol') {
			return false;
		}
		return symStringRegex.test(symToStr.call(value));
	};

	module.exports = function isSymbol(value) {
		if (typeof value === 'symbol') {
			return true;
		}
		if (toStr.call(value) !== '[object Symbol]') {
			return false;
		}
		try {
			return isSymbolObject(value);
		} catch (e) {
			return false;
		}
	};
} else {

	module.exports = function isSymbol(value) {
		// this environment does not support Symbols.
		return  false && 0;
	};
}


/***/ }),

/***/ 4570:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

const os = __webpack_require__(22037);
const fs = __webpack_require__(57147);
const isDocker = __webpack_require__(64548);

const isWsl = () => {
	if (process.platform !== 'linux') {
		return false;
	}

	if (os.release().toLowerCase().includes('microsoft')) {
		if (isDocker()) {
			return false;
		}

		return true;
	}

	try {
		return fs.readFileSync('/proc/version', 'utf8').toLowerCase().includes('microsoft') ?
			!isDocker() : false;
	} catch (_) {
		return false;
	}
};

if (process.env.__IS_WSL_TEST__) {
	module.exports = isWsl;
} else {
	module.exports = isWsl();
}


/***/ }),

/***/ 64219:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var fs = __webpack_require__(57147)
var core
if (process.platform === 'win32' || global.TESTING_WINDOWS) {
  core = __webpack_require__(92514)
} else {
  core = __webpack_require__(67305)
}

module.exports = isexe
isexe.sync = sync

function isexe (path, options, cb) {
  if (typeof options === 'function') {
    cb = options
    options = {}
  }

  if (!cb) {
    if (typeof Promise !== 'function') {
      throw new TypeError('callback not provided')
    }

    return new Promise(function (resolve, reject) {
      isexe(path, options || {}, function (er, is) {
        if (er) {
          reject(er)
        } else {
          resolve(is)
        }
      })
    })
  }

  core(path, options || {}, function (er, is) {
    // ignore EACCES because that just means we aren't allowed to run it
    if (er) {
      if (er.code === 'EACCES' || options && options.ignoreErrors) {
        er = null
        is = false
      }
    }
    cb(er, is)
  })
}

function sync (path, options) {
  // my kingdom for a filtered catch
  try {
    return core.sync(path, options || {})
  } catch (er) {
    if (options && options.ignoreErrors || er.code === 'EACCES') {
      return false
    } else {
      throw er
    }
  }
}


/***/ }),

/***/ 67305:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = isexe
isexe.sync = sync

var fs = __webpack_require__(57147)

function isexe (path, options, cb) {
  fs.stat(path, function (er, stat) {
    cb(er, er ? false : checkStat(stat, options))
  })
}

function sync (path, options) {
  return checkStat(fs.statSync(path), options)
}

function checkStat (stat, options) {
  return stat.isFile() && checkMode(stat, options)
}

function checkMode (stat, options) {
  var mod = stat.mode
  var uid = stat.uid
  var gid = stat.gid

  var myUid = options.uid !== undefined ?
    options.uid : process.getuid && process.getuid()
  var myGid = options.gid !== undefined ?
    options.gid : process.getgid && process.getgid()

  var u = parseInt('100', 8)
  var g = parseInt('010', 8)
  var o = parseInt('001', 8)
  var ug = u | g

  var ret = (mod & o) ||
    (mod & g) && gid === myGid ||
    (mod & u) && uid === myUid ||
    (mod & ug) && myUid === 0

  return ret
}


/***/ }),

/***/ 92514:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = isexe
isexe.sync = sync

var fs = __webpack_require__(57147)

function checkPathExt (path, options) {
  var pathext = options.pathExt !== undefined ?
    options.pathExt : process.env.PATHEXT

  if (!pathext) {
    return true
  }

  pathext = pathext.split(';')
  if (pathext.indexOf('') !== -1) {
    return true
  }
  for (var i = 0; i < pathext.length; i++) {
    var p = pathext[i].toLowerCase()
    if (p && path.substr(-p.length).toLowerCase() === p) {
      return true
    }
  }
  return false
}

function checkStat (stat, path, options) {
  if (!stat.isSymbolicLink() && !stat.isFile()) {
    return false
  }
  return checkPathExt(path, options)
}

function isexe (path, options, cb) {
  fs.stat(path, function (er, stat) {
    cb(er, er ? false : checkStat(stat, path, options))
  })
}

function sync (path, options) {
  return checkStat(fs.statSync(path), path, options)
}


/***/ }),

/***/ 1935:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";



var loader = __webpack_require__(10789);
var dumper = __webpack_require__(89159);


function renamed(from, to) {
  return function () {
    throw new Error('Function yaml.' + from + ' is removed in js-yaml 4. ' +
      'Use yaml.' + to + ' instead, which is now safe by default.');
  };
}


module.exports.Type = __webpack_require__(57354);
module.exports.Schema = __webpack_require__(55112);
module.exports.FAILSAFE_SCHEMA = __webpack_require__(52625);
module.exports.JSON_SCHEMA = __webpack_require__(27280);
module.exports.CORE_SCHEMA = __webpack_require__(9664);
module.exports.DEFAULT_SCHEMA = __webpack_require__(90722);
module.exports.load                = loader.load;
module.exports.loadAll             = loader.loadAll;
module.exports.dump                = dumper.dump;
module.exports.YAMLException = __webpack_require__(74737);

// Re-export all types in case user wants to create custom schema
module.exports.types = {
  binary:    __webpack_require__(56627),
  float:     __webpack_require__(21468),
  map:       __webpack_require__(84775),
  null:      __webpack_require__(61539),
  pairs:     __webpack_require__(35091),
  set:       __webpack_require__(47049),
  timestamp: __webpack_require__(82411),
  bool:      __webpack_require__(37138),
  int:       __webpack_require__(34115),
  merge:     __webpack_require__(2017),
  omap:      __webpack_require__(43279),
  seq:       __webpack_require__(8585),
  str:       __webpack_require__(59520)
};

// Removed functions from JS-YAML 3.0.x
module.exports.safeLoad            = renamed('safeLoad', 'load');
module.exports.safeLoadAll         = renamed('safeLoadAll', 'loadAll');
module.exports.safeDump            = renamed('safeDump', 'dump');


/***/ }),

/***/ 22381:
/***/ ((module) => {

"use strict";



function isNothing(subject) {
  return (typeof subject === 'undefined') || (subject === null);
}


function isObject(subject) {
  return (typeof subject === 'object') && (subject !== null);
}


function toArray(sequence) {
  if (Array.isArray(sequence)) return sequence;
  else if (isNothing(sequence)) return [];

  return [ sequence ];
}


function extend(target, source) {
  var index, length, key, sourceKeys;

  if (source) {
    sourceKeys = Object.keys(source);

    for (index = 0, length = sourceKeys.length; index < length; index += 1) {
      key = sourceKeys[index];
      target[key] = source[key];
    }
  }

  return target;
}


function repeat(string, count) {
  var result = '', cycle;

  for (cycle = 0; cycle < count; cycle += 1) {
    result += string;
  }

  return result;
}


function isNegativeZero(number) {
  return (number === 0) && (Number.NEGATIVE_INFINITY === 1 / number);
}


module.exports.isNothing      = isNothing;
module.exports.isObject       = isObject;
module.exports.toArray        = toArray;
module.exports.repeat         = repeat;
module.exports.isNegativeZero = isNegativeZero;
module.exports.extend         = extend;


/***/ }),

/***/ 89159:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


/*eslint-disable no-use-before-define*/

var common              = __webpack_require__(22381);
var YAMLException       = __webpack_require__(74737);
var DEFAULT_SCHEMA      = __webpack_require__(90722);

var _toString       = Object.prototype.toString;
var _hasOwnProperty = Object.prototype.hasOwnProperty;

var CHAR_BOM                  = 0xFEFF;
var CHAR_TAB                  = 0x09; /* Tab */
var CHAR_LINE_FEED            = 0x0A; /* LF */
var CHAR_CARRIAGE_RETURN      = 0x0D; /* CR */
var CHAR_SPACE                = 0x20; /* Space */
var CHAR_EXCLAMATION          = 0x21; /* ! */
var CHAR_DOUBLE_QUOTE         = 0x22; /* " */
var CHAR_SHARP                = 0x23; /* # */
var CHAR_PERCENT              = 0x25; /* % */
var CHAR_AMPERSAND            = 0x26; /* & */
var CHAR_SINGLE_QUOTE         = 0x27; /* ' */
var CHAR_ASTERISK             = 0x2A; /* * */
var CHAR_COMMA                = 0x2C; /* , */
var CHAR_MINUS                = 0x2D; /* - */
var CHAR_COLON                = 0x3A; /* : */
var CHAR_EQUALS               = 0x3D; /* = */
var CHAR_GREATER_THAN         = 0x3E; /* > */
var CHAR_QUESTION             = 0x3F; /* ? */
var CHAR_COMMERCIAL_AT        = 0x40; /* @ */
var CHAR_LEFT_SQUARE_BRACKET  = 0x5B; /* [ */
var CHAR_RIGHT_SQUARE_BRACKET = 0x5D; /* ] */
var CHAR_GRAVE_ACCENT         = 0x60; /* ` */
var CHAR_LEFT_CURLY_BRACKET   = 0x7B; /* { */
var CHAR_VERTICAL_LINE        = 0x7C; /* | */
var CHAR_RIGHT_CURLY_BRACKET  = 0x7D; /* } */

var ESCAPE_SEQUENCES = {};

ESCAPE_SEQUENCES[0x00]   = '\\0';
ESCAPE_SEQUENCES[0x07]   = '\\a';
ESCAPE_SEQUENCES[0x08]   = '\\b';
ESCAPE_SEQUENCES[0x09]   = '\\t';
ESCAPE_SEQUENCES[0x0A]   = '\\n';
ESCAPE_SEQUENCES[0x0B]   = '\\v';
ESCAPE_SEQUENCES[0x0C]   = '\\f';
ESCAPE_SEQUENCES[0x0D]   = '\\r';
ESCAPE_SEQUENCES[0x1B]   = '\\e';
ESCAPE_SEQUENCES[0x22]   = '\\"';
ESCAPE_SEQUENCES[0x5C]   = '\\\\';
ESCAPE_SEQUENCES[0x85]   = '\\N';
ESCAPE_SEQUENCES[0xA0]   = '\\_';
ESCAPE_SEQUENCES[0x2028] = '\\L';
ESCAPE_SEQUENCES[0x2029] = '\\P';

var DEPRECATED_BOOLEANS_SYNTAX = [
  'y', 'Y', 'yes', 'Yes', 'YES', 'on', 'On', 'ON',
  'n', 'N', 'no', 'No', 'NO', 'off', 'Off', 'OFF'
];

var DEPRECATED_BASE60_SYNTAX = /^[-+]?[0-9_]+(?::[0-9_]+)+(?:\.[0-9_]*)?$/;

function compileStyleMap(schema, map) {
  var result, keys, index, length, tag, style, type;

  if (map === null) return {};

  result = {};
  keys = Object.keys(map);

  for (index = 0, length = keys.length; index < length; index += 1) {
    tag = keys[index];
    style = String(map[tag]);

    if (tag.slice(0, 2) === '!!') {
      tag = 'tag:yaml.org,2002:' + tag.slice(2);
    }
    type = schema.compiledTypeMap['fallback'][tag];

    if (type && _hasOwnProperty.call(type.styleAliases, style)) {
      style = type.styleAliases[style];
    }

    result[tag] = style;
  }

  return result;
}

function encodeHex(character) {
  var string, handle, length;

  string = character.toString(16).toUpperCase();

  if (character <= 0xFF) {
    handle = 'x';
    length = 2;
  } else if (character <= 0xFFFF) {
    handle = 'u';
    length = 4;
  } else if (character <= 0xFFFFFFFF) {
    handle = 'U';
    length = 8;
  } else {
    throw new YAMLException('code point within a string may not be greater than 0xFFFFFFFF');
  }

  return '\\' + handle + common.repeat('0', length - string.length) + string;
}


var QUOTING_TYPE_SINGLE = 1,
    QUOTING_TYPE_DOUBLE = 2;

function State(options) {
  this.schema        = options['schema'] || DEFAULT_SCHEMA;
  this.indent        = Math.max(1, (options['indent'] || 2));
  this.noArrayIndent = options['noArrayIndent'] || false;
  this.skipInvalid   = options['skipInvalid'] || false;
  this.flowLevel     = (common.isNothing(options['flowLevel']) ? -1 : options['flowLevel']);
  this.styleMap      = compileStyleMap(this.schema, options['styles'] || null);
  this.sortKeys      = options['sortKeys'] || false;
  this.lineWidth     = options['lineWidth'] || 80;
  this.noRefs        = options['noRefs'] || false;
  this.noCompatMode  = options['noCompatMode'] || false;
  this.condenseFlow  = options['condenseFlow'] || false;
  this.quotingType   = options['quotingType'] === '"' ? QUOTING_TYPE_DOUBLE : QUOTING_TYPE_SINGLE;
  this.forceQuotes   = options['forceQuotes'] || false;
  this.replacer      = typeof options['replacer'] === 'function' ? options['replacer'] : null;

  this.implicitTypes = this.schema.compiledImplicit;
  this.explicitTypes = this.schema.compiledExplicit;

  this.tag = null;
  this.result = '';

  this.duplicates = [];
  this.usedDuplicates = null;
}

// Indents every line in a string. Empty lines (\n only) are not indented.
function indentString(string, spaces) {
  var ind = common.repeat(' ', spaces),
      position = 0,
      next = -1,
      result = '',
      line,
      length = string.length;

  while (position < length) {
    next = string.indexOf('\n', position);
    if (next === -1) {
      line = string.slice(position);
      position = length;
    } else {
      line = string.slice(position, next + 1);
      position = next + 1;
    }

    if (line.length && line !== '\n') result += ind;

    result += line;
  }

  return result;
}

function generateNextLine(state, level) {
  return '\n' + common.repeat(' ', state.indent * level);
}

function testImplicitResolving(state, str) {
  var index, length, type;

  for (index = 0, length = state.implicitTypes.length; index < length; index += 1) {
    type = state.implicitTypes[index];

    if (type.resolve(str)) {
      return true;
    }
  }

  return false;
}

// [33] s-white ::= s-space | s-tab
function isWhitespace(c) {
  return c === CHAR_SPACE || c === CHAR_TAB;
}

// Returns true if the character can be printed without escaping.
// From YAML 1.2: "any allowed characters known to be non-printable
// should also be escaped. [However,] This isn’t mandatory"
// Derived from nb-char - \t - #x85 - #xA0 - #x2028 - #x2029.
function isPrintable(c) {
  return  (0x00020 <= c && c <= 0x00007E)
      || ((0x000A1 <= c && c <= 0x00D7FF) && c !== 0x2028 && c !== 0x2029)
      || ((0x0E000 <= c && c <= 0x00FFFD) && c !== CHAR_BOM)
      ||  (0x10000 <= c && c <= 0x10FFFF);
}

// [34] ns-char ::= nb-char - s-white
// [27] nb-char ::= c-printable - b-char - c-byte-order-mark
// [26] b-char  ::= b-line-feed | b-carriage-return
// Including s-white (for some reason, examples doesn't match specs in this aspect)
// ns-char ::= c-printable - b-line-feed - b-carriage-return - c-byte-order-mark
function isNsCharOrWhitespace(c) {
  return isPrintable(c)
    && c !== CHAR_BOM
    // - b-char
    && c !== CHAR_CARRIAGE_RETURN
    && c !== CHAR_LINE_FEED;
}

// [127]  ns-plain-safe(c) ::= c = flow-out  ⇒ ns-plain-safe-out
//                             c = flow-in   ⇒ ns-plain-safe-in
//                             c = block-key ⇒ ns-plain-safe-out
//                             c = flow-key  ⇒ ns-plain-safe-in
// [128] ns-plain-safe-out ::= ns-char
// [129]  ns-plain-safe-in ::= ns-char - c-flow-indicator
// [130]  ns-plain-char(c) ::=  ( ns-plain-safe(c) - “:” - “#” )
//                            | ( /* An ns-char preceding */ “#” )
//                            | ( “:” /* Followed by an ns-plain-safe(c) */ )
function isPlainSafe(c, prev, inblock) {
  var cIsNsCharOrWhitespace = isNsCharOrWhitespace(c);
  var cIsNsChar = cIsNsCharOrWhitespace && !isWhitespace(c);
  return (
    // ns-plain-safe
    inblock ? // c = flow-in
      cIsNsCharOrWhitespace
      : cIsNsCharOrWhitespace
        // - c-flow-indicator
        && c !== CHAR_COMMA
        && c !== CHAR_LEFT_SQUARE_BRACKET
        && c !== CHAR_RIGHT_SQUARE_BRACKET
        && c !== CHAR_LEFT_CURLY_BRACKET
        && c !== CHAR_RIGHT_CURLY_BRACKET
  )
    // ns-plain-char
    && c !== CHAR_SHARP // false on '#'
    && !(prev === CHAR_COLON && !cIsNsChar) // false on ': '
    || (isNsCharOrWhitespace(prev) && !isWhitespace(prev) && c === CHAR_SHARP) // change to true on '[^ ]#'
    || (prev === CHAR_COLON && cIsNsChar); // change to true on ':[^ ]'
}

// Simplified test for values allowed as the first character in plain style.
function isPlainSafeFirst(c) {
  // Uses a subset of ns-char - c-indicator
  // where ns-char = nb-char - s-white.
  // No support of ( ( “?” | “:” | “-” ) /* Followed by an ns-plain-safe(c)) */ ) part
  return isPrintable(c) && c !== CHAR_BOM
    && !isWhitespace(c) // - s-white
    // - (c-indicator ::=
    // “-” | “?” | “:” | “,” | “[” | “]” | “{” | “}”
    && c !== CHAR_MINUS
    && c !== CHAR_QUESTION
    && c !== CHAR_COLON
    && c !== CHAR_COMMA
    && c !== CHAR_LEFT_SQUARE_BRACKET
    && c !== CHAR_RIGHT_SQUARE_BRACKET
    && c !== CHAR_LEFT_CURLY_BRACKET
    && c !== CHAR_RIGHT_CURLY_BRACKET
    // | “#” | “&” | “*” | “!” | “|” | “=” | “>” | “'” | “"”
    && c !== CHAR_SHARP
    && c !== CHAR_AMPERSAND
    && c !== CHAR_ASTERISK
    && c !== CHAR_EXCLAMATION
    && c !== CHAR_VERTICAL_LINE
    && c !== CHAR_EQUALS
    && c !== CHAR_GREATER_THAN
    && c !== CHAR_SINGLE_QUOTE
    && c !== CHAR_DOUBLE_QUOTE
    // | “%” | “@” | “`”)
    && c !== CHAR_PERCENT
    && c !== CHAR_COMMERCIAL_AT
    && c !== CHAR_GRAVE_ACCENT;
}

// Simplified test for values allowed as the last character in plain style.
function isPlainSafeLast(c) {
  // just not whitespace or colon, it will be checked to be plain character later
  return !isWhitespace(c) && c !== CHAR_COLON;
}

// Same as 'string'.codePointAt(pos), but works in older browsers.
function codePointAt(string, pos) {
  var first = string.charCodeAt(pos), second;
  if (first >= 0xD800 && first <= 0xDBFF && pos + 1 < string.length) {
    second = string.charCodeAt(pos + 1);
    if (second >= 0xDC00 && second <= 0xDFFF) {
      // https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
      return (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;
    }
  }
  return first;
}

// Determines whether block indentation indicator is required.
function needIndentIndicator(string) {
  var leadingSpaceRe = /^\n* /;
  return leadingSpaceRe.test(string);
}

var STYLE_PLAIN   = 1,
    STYLE_SINGLE  = 2,
    STYLE_LITERAL = 3,
    STYLE_FOLDED  = 4,
    STYLE_DOUBLE  = 5;

// Determines which scalar styles are possible and returns the preferred style.
// lineWidth = -1 => no limit.
// Pre-conditions: str.length > 0.
// Post-conditions:
//    STYLE_PLAIN or STYLE_SINGLE => no \n are in the string.
//    STYLE_LITERAL => no lines are suitable for folding (or lineWidth is -1).
//    STYLE_FOLDED => a line > lineWidth and can be folded (and lineWidth != -1).
function chooseScalarStyle(string, singleLineOnly, indentPerLevel, lineWidth,
  testAmbiguousType, quotingType, forceQuotes, inblock) {

  var i;
  var char = 0;
  var prevChar = null;
  var hasLineBreak = false;
  var hasFoldableLine = false; // only checked if shouldTrackWidth
  var shouldTrackWidth = lineWidth !== -1;
  var previousLineBreak = -1; // count the first line correctly
  var plain = isPlainSafeFirst(codePointAt(string, 0))
          && isPlainSafeLast(codePointAt(string, string.length - 1));

  if (singleLineOnly || forceQuotes) {
    // Case: no block styles.
    // Check for disallowed characters to rule out plain and single.
    for (i = 0; i < string.length; char >= 0x10000 ? i += 2 : i++) {
      char = codePointAt(string, i);
      if (!isPrintable(char)) {
        return STYLE_DOUBLE;
      }
      plain = plain && isPlainSafe(char, prevChar, inblock);
      prevChar = char;
    }
  } else {
    // Case: block styles permitted.
    for (i = 0; i < string.length; char >= 0x10000 ? i += 2 : i++) {
      char = codePointAt(string, i);
      if (char === CHAR_LINE_FEED) {
        hasLineBreak = true;
        // Check if any line can be folded.
        if (shouldTrackWidth) {
          hasFoldableLine = hasFoldableLine ||
            // Foldable line = too long, and not more-indented.
            (i - previousLineBreak - 1 > lineWidth &&
             string[previousLineBreak + 1] !== ' ');
          previousLineBreak = i;
        }
      } else if (!isPrintable(char)) {
        return STYLE_DOUBLE;
      }
      plain = plain && isPlainSafe(char, prevChar, inblock);
      prevChar = char;
    }
    // in case the end is missing a \n
    hasFoldableLine = hasFoldableLine || (shouldTrackWidth &&
      (i - previousLineBreak - 1 > lineWidth &&
       string[previousLineBreak + 1] !== ' '));
  }
  // Although every style can represent \n without escaping, prefer block styles
  // for multiline, since they're more readable and they don't add empty lines.
  // Also prefer folding a super-long line.
  if (!hasLineBreak && !hasFoldableLine) {
    // Strings interpretable as another type have to be quoted;
    // e.g. the string 'true' vs. the boolean true.
    if (plain && !forceQuotes && !testAmbiguousType(string)) {
      return STYLE_PLAIN;
    }
    return quotingType === QUOTING_TYPE_DOUBLE ? STYLE_DOUBLE : STYLE_SINGLE;
  }
  // Edge case: block indentation indicator can only have one digit.
  if (indentPerLevel > 9 && needIndentIndicator(string)) {
    return STYLE_DOUBLE;
  }
  // At this point we know block styles are valid.
  // Prefer literal style unless we want to fold.
  if (!forceQuotes) {
    return hasFoldableLine ? STYLE_FOLDED : STYLE_LITERAL;
  }
  return quotingType === QUOTING_TYPE_DOUBLE ? STYLE_DOUBLE : STYLE_SINGLE;
}

// Note: line breaking/folding is implemented for only the folded style.
// NB. We drop the last trailing newline (if any) of a returned block scalar
//  since the dumper adds its own newline. This always works:
//    • No ending newline => unaffected; already using strip "-" chomping.
//    • Ending newline    => removed then restored.
//  Importantly, this keeps the "+" chomp indicator from gaining an extra line.
function writeScalar(state, string, level, iskey, inblock) {
  state.dump = (function () {
    if (string.length === 0) {
      return state.quotingType === QUOTING_TYPE_DOUBLE ? '""' : "''";
    }
    if (!state.noCompatMode) {
      if (DEPRECATED_BOOLEANS_SYNTAX.indexOf(string) !== -1 || DEPRECATED_BASE60_SYNTAX.test(string)) {
        return state.quotingType === QUOTING_TYPE_DOUBLE ? ('"' + string + '"') : ("'" + string + "'");
      }
    }

    var indent = state.indent * Math.max(1, level); // no 0-indent scalars
    // As indentation gets deeper, let the width decrease monotonically
    // to the lower bound min(state.lineWidth, 40).
    // Note that this implies
    //  state.lineWidth ≤ 40 + state.indent: width is fixed at the lower bound.
    //  state.lineWidth > 40 + state.indent: width decreases until the lower bound.
    // This behaves better than a constant minimum width which disallows narrower options,
    // or an indent threshold which causes the width to suddenly increase.
    var lineWidth = state.lineWidth === -1
      ? -1 : Math.max(Math.min(state.lineWidth, 40), state.lineWidth - indent);

    // Without knowing if keys are implicit/explicit, assume implicit for safety.
    var singleLineOnly = iskey
      // No block styles in flow mode.
      || (state.flowLevel > -1 && level >= state.flowLevel);
    function testAmbiguity(string) {
      return testImplicitResolving(state, string);
    }

    switch (chooseScalarStyle(string, singleLineOnly, state.indent, lineWidth,
      testAmbiguity, state.quotingType, state.forceQuotes && !iskey, inblock)) {

      case STYLE_PLAIN:
        return string;
      case STYLE_SINGLE:
        return "'" + string.replace(/'/g, "''") + "'";
      case STYLE_LITERAL:
        return '|' + blockHeader(string, state.indent)
          + dropEndingNewline(indentString(string, indent));
      case STYLE_FOLDED:
        return '>' + blockHeader(string, state.indent)
          + dropEndingNewline(indentString(foldString(string, lineWidth), indent));
      case STYLE_DOUBLE:
        return '"' + escapeString(string, lineWidth) + '"';
      default:
        throw new YAMLException('impossible error: invalid scalar style');
    }
  }());
}

// Pre-conditions: string is valid for a block scalar, 1 <= indentPerLevel <= 9.
function blockHeader(string, indentPerLevel) {
  var indentIndicator = needIndentIndicator(string) ? String(indentPerLevel) : '';

  // note the special case: the string '\n' counts as a "trailing" empty line.
  var clip =          string[string.length - 1] === '\n';
  var keep = clip && (string[string.length - 2] === '\n' || string === '\n');
  var chomp = keep ? '+' : (clip ? '' : '-');

  return indentIndicator + chomp + '\n';
}

// (See the note for writeScalar.)
function dropEndingNewline(string) {
  return string[string.length - 1] === '\n' ? string.slice(0, -1) : string;
}

// Note: a long line without a suitable break point will exceed the width limit.
// Pre-conditions: every char in str isPrintable, str.length > 0, width > 0.
function foldString(string, width) {
  // In folded style, $k$ consecutive newlines output as $k+1$ newlines—
  // unless they're before or after a more-indented line, or at the very
  // beginning or end, in which case $k$ maps to $k$.
  // Therefore, parse each chunk as newline(s) followed by a content line.
  var lineRe = /(\n+)([^\n]*)/g;

  // first line (possibly an empty line)
  var result = (function () {
    var nextLF = string.indexOf('\n');
    nextLF = nextLF !== -1 ? nextLF : string.length;
    lineRe.lastIndex = nextLF;
    return foldLine(string.slice(0, nextLF), width);
  }());
  // If we haven't reached the first content line yet, don't add an extra \n.
  var prevMoreIndented = string[0] === '\n' || string[0] === ' ';
  var moreIndented;

  // rest of the lines
  var match;
  while ((match = lineRe.exec(string))) {
    var prefix = match[1], line = match[2];
    moreIndented = (line[0] === ' ');
    result += prefix
      + (!prevMoreIndented && !moreIndented && line !== ''
        ? '\n' : '')
      + foldLine(line, width);
    prevMoreIndented = moreIndented;
  }

  return result;
}

// Greedy line breaking.
// Picks the longest line under the limit each time,
// otherwise settles for the shortest line over the limit.
// NB. More-indented lines *cannot* be folded, as that would add an extra \n.
function foldLine(line, width) {
  if (line === '' || line[0] === ' ') return line;

  // Since a more-indented line adds a \n, breaks can't be followed by a space.
  var breakRe = / [^ ]/g; // note: the match index will always be <= length-2.
  var match;
  // start is an inclusive index. end, curr, and next are exclusive.
  var start = 0, end, curr = 0, next = 0;
  var result = '';

  // Invariants: 0 <= start <= length-1.
  //   0 <= curr <= next <= max(0, length-2). curr - start <= width.
  // Inside the loop:
  //   A match implies length >= 2, so curr and next are <= length-2.
  while ((match = breakRe.exec(line))) {
    next = match.index;
    // maintain invariant: curr - start <= width
    if (next - start > width) {
      end = (curr > start) ? curr : next; // derive end <= length-2
      result += '\n' + line.slice(start, end);
      // skip the space that was output as \n
      start = end + 1;                    // derive start <= length-1
    }
    curr = next;
  }

  // By the invariants, start <= length-1, so there is something left over.
  // It is either the whole string or a part starting from non-whitespace.
  result += '\n';
  // Insert a break if the remainder is too long and there is a break available.
  if (line.length - start > width && curr > start) {
    result += line.slice(start, curr) + '\n' + line.slice(curr + 1);
  } else {
    result += line.slice(start);
  }

  return result.slice(1); // drop extra \n joiner
}

// Escapes a double-quoted string.
function escapeString(string) {
  var result = '';
  var char = 0;
  var escapeSeq;

  for (var i = 0; i < string.length; char >= 0x10000 ? i += 2 : i++) {
    char = codePointAt(string, i);
    escapeSeq = ESCAPE_SEQUENCES[char];

    if (!escapeSeq && isPrintable(char)) {
      result += string[i];
      if (char >= 0x10000) result += string[i + 1];
    } else {
      result += escapeSeq || encodeHex(char);
    }
  }

  return result;
}

function writeFlowSequence(state, level, object) {
  var _result = '',
      _tag    = state.tag,
      index,
      length,
      value;

  for (index = 0, length = object.length; index < length; index += 1) {
    value = object[index];

    if (state.replacer) {
      value = state.replacer.call(object, String(index), value);
    }

    // Write only valid elements, put null instead of invalid elements.
    if (writeNode(state, level, value, false, false) ||
        (typeof value === 'undefined' &&
         writeNode(state, level, null, false, false))) {

      if (_result !== '') _result += ',' + (!state.condenseFlow ? ' ' : '');
      _result += state.dump;
    }
  }

  state.tag = _tag;
  state.dump = '[' + _result + ']';
}

function writeBlockSequence(state, level, object, compact) {
  var _result = '',
      _tag    = state.tag,
      index,
      length,
      value;

  for (index = 0, length = object.length; index < length; index += 1) {
    value = object[index];

    if (state.replacer) {
      value = state.replacer.call(object, String(index), value);
    }

    // Write only valid elements, put null instead of invalid elements.
    if (writeNode(state, level + 1, value, true, true, false, true) ||
        (typeof value === 'undefined' &&
         writeNode(state, level + 1, null, true, true, false, true))) {

      if (!compact || _result !== '') {
        _result += generateNextLine(state, level);
      }

      if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {
        _result += '-';
      } else {
        _result += '- ';
      }

      _result += state.dump;
    }
  }

  state.tag = _tag;
  state.dump = _result || '[]'; // Empty sequence if no valid values.
}

function writeFlowMapping(state, level, object) {
  var _result       = '',
      _tag          = state.tag,
      objectKeyList = Object.keys(object),
      index,
      length,
      objectKey,
      objectValue,
      pairBuffer;

  for (index = 0, length = objectKeyList.length; index < length; index += 1) {

    pairBuffer = '';
    if (_result !== '') pairBuffer += ', ';

    if (state.condenseFlow) pairBuffer += '"';

    objectKey = objectKeyList[index];
    objectValue = object[objectKey];

    if (state.replacer) {
      objectValue = state.replacer.call(object, objectKey, objectValue);
    }

    if (!writeNode(state, level, objectKey, false, false)) {
      continue; // Skip this pair because of invalid key;
    }

    if (state.dump.length > 1024) pairBuffer += '? ';

    pairBuffer += state.dump + (state.condenseFlow ? '"' : '') + ':' + (state.condenseFlow ? '' : ' ');

    if (!writeNode(state, level, objectValue, false, false)) {
      continue; // Skip this pair because of invalid value.
    }

    pairBuffer += state.dump;

    // Both key and value are valid.
    _result += pairBuffer;
  }

  state.tag = _tag;
  state.dump = '{' + _result + '}';
}

function writeBlockMapping(state, level, object, compact) {
  var _result       = '',
      _tag          = state.tag,
      objectKeyList = Object.keys(object),
      index,
      length,
      objectKey,
      objectValue,
      explicitPair,
      pairBuffer;

  // Allow sorting keys so that the output file is deterministic
  if (state.sortKeys === true) {
    // Default sorting
    objectKeyList.sort();
  } else if (typeof state.sortKeys === 'function') {
    // Custom sort function
    objectKeyList.sort(state.sortKeys);
  } else if (state.sortKeys) {
    // Something is wrong
    throw new YAMLException('sortKeys must be a boolean or a function');
  }

  for (index = 0, length = objectKeyList.length; index < length; index += 1) {
    pairBuffer = '';

    if (!compact || _result !== '') {
      pairBuffer += generateNextLine(state, level);
    }

    objectKey = objectKeyList[index];
    objectValue = object[objectKey];

    if (state.replacer) {
      objectValue = state.replacer.call(object, objectKey, objectValue);
    }

    if (!writeNode(state, level + 1, objectKey, true, true, true)) {
      continue; // Skip this pair because of invalid key.
    }

    explicitPair = (state.tag !== null && state.tag !== '?') ||
                   (state.dump && state.dump.length > 1024);

    if (explicitPair) {
      if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {
        pairBuffer += '?';
      } else {
        pairBuffer += '? ';
      }
    }

    pairBuffer += state.dump;

    if (explicitPair) {
      pairBuffer += generateNextLine(state, level);
    }

    if (!writeNode(state, level + 1, objectValue, true, explicitPair)) {
      continue; // Skip this pair because of invalid value.
    }

    if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {
      pairBuffer += ':';
    } else {
      pairBuffer += ': ';
    }

    pairBuffer += state.dump;

    // Both key and value are valid.
    _result += pairBuffer;
  }

  state.tag = _tag;
  state.dump = _result || '{}'; // Empty mapping if no valid pairs.
}

function detectType(state, object, explicit) {
  var _result, typeList, index, length, type, style;

  typeList = explicit ? state.explicitTypes : state.implicitTypes;

  for (index = 0, length = typeList.length; index < length; index += 1) {
    type = typeList[index];

    if ((type.instanceOf  || type.predicate) &&
        (!type.instanceOf || ((typeof object === 'object') && (object instanceof type.instanceOf))) &&
        (!type.predicate  || type.predicate(object))) {

      if (explicit) {
        if (type.multi && type.representName) {
          state.tag = type.representName(object);
        } else {
          state.tag = type.tag;
        }
      } else {
        state.tag = '?';
      }

      if (type.represent) {
        style = state.styleMap[type.tag] || type.defaultStyle;

        if (_toString.call(type.represent) === '[object Function]') {
          _result = type.represent(object, style);
        } else if (_hasOwnProperty.call(type.represent, style)) {
          _result = type.represent[style](object, style);
        } else {
          throw new YAMLException('!<' + type.tag + '> tag resolver accepts not "' + style + '" style');
        }

        state.dump = _result;
      }

      return true;
    }
  }

  return false;
}

// Serializes `object` and writes it to global `result`.
// Returns true on success, or false on invalid object.
//
function writeNode(state, level, object, block, compact, iskey, isblockseq) {
  state.tag = null;
  state.dump = object;

  if (!detectType(state, object, false)) {
    detectType(state, object, true);
  }

  var type = _toString.call(state.dump);
  var inblock = block;
  var tagStr;

  if (block) {
    block = (state.flowLevel < 0 || state.flowLevel > level);
  }

  var objectOrArray = type === '[object Object]' || type === '[object Array]',
      duplicateIndex,
      duplicate;

  if (objectOrArray) {
    duplicateIndex = state.duplicates.indexOf(object);
    duplicate = duplicateIndex !== -1;
  }

  if ((state.tag !== null && state.tag !== '?') || duplicate || (state.indent !== 2 && level > 0)) {
    compact = false;
  }

  if (duplicate && state.usedDuplicates[duplicateIndex]) {
    state.dump = '*ref_' + duplicateIndex;
  } else {
    if (objectOrArray && duplicate && !state.usedDuplicates[duplicateIndex]) {
      state.usedDuplicates[duplicateIndex] = true;
    }
    if (type === '[object Object]') {
      if (block && (Object.keys(state.dump).length !== 0)) {
        writeBlockMapping(state, level, state.dump, compact);
        if (duplicate) {
          state.dump = '&ref_' + duplicateIndex + state.dump;
        }
      } else {
        writeFlowMapping(state, level, state.dump);
        if (duplicate) {
          state.dump = '&ref_' + duplicateIndex + ' ' + state.dump;
        }
      }
    } else if (type === '[object Array]') {
      if (block && (state.dump.length !== 0)) {
        if (state.noArrayIndent && !isblockseq && level > 0) {
          writeBlockSequence(state, level - 1, state.dump, compact);
        } else {
          writeBlockSequence(state, level, state.dump, compact);
        }
        if (duplicate) {
          state.dump = '&ref_' + duplicateIndex + state.dump;
        }
      } else {
        writeFlowSequence(state, level, state.dump);
        if (duplicate) {
          state.dump = '&ref_' + duplicateIndex + ' ' + state.dump;
        }
      }
    } else if (type === '[object String]') {
      if (state.tag !== '?') {
        writeScalar(state, state.dump, level, iskey, inblock);
      }
    } else if (type === '[object Undefined]') {
      return false;
    } else {
      if (state.skipInvalid) return false;
      throw new YAMLException('unacceptable kind of an object to dump ' + type);
    }

    if (state.tag !== null && state.tag !== '?') {
      // Need to encode all characters except those allowed by the spec:
      //
      // [35] ns-dec-digit    ::=  [#x30-#x39] /* 0-9 */
      // [36] ns-hex-digit    ::=  ns-dec-digit
      //                         | [#x41-#x46] /* A-F */ | [#x61-#x66] /* a-f */
      // [37] ns-ascii-letter ::=  [#x41-#x5A] /* A-Z */ | [#x61-#x7A] /* a-z */
      // [38] ns-word-char    ::=  ns-dec-digit | ns-ascii-letter | “-”
      // [39] ns-uri-char     ::=  “%” ns-hex-digit ns-hex-digit | ns-word-char | “#”
      //                         | “;” | “/” | “?” | “:” | “@” | “&” | “=” | “+” | “$” | “,”
      //                         | “_” | “.” | “!” | “~” | “*” | “'” | “(” | “)” | “[” | “]”
      //
      // Also need to encode '!' because it has special meaning (end of tag prefix).
      //
      tagStr = encodeURI(
        state.tag[0] === '!' ? state.tag.slice(1) : state.tag
      ).replace(/!/g, '%21');

      if (state.tag[0] === '!') {
        tagStr = '!' + tagStr;
      } else if (tagStr.slice(0, 18) === 'tag:yaml.org,2002:') {
        tagStr = '!!' + tagStr.slice(18);
      } else {
        tagStr = '!<' + tagStr + '>';
      }

      state.dump = tagStr + ' ' + state.dump;
    }
  }

  return true;
}

function getDuplicateReferences(object, state) {
  var objects = [],
      duplicatesIndexes = [],
      index,
      length;

  inspectNode(object, objects, duplicatesIndexes);

  for (index = 0, length = duplicatesIndexes.length; index < length; index += 1) {
    state.duplicates.push(objects[duplicatesIndexes[index]]);
  }
  state.usedDuplicates = new Array(length);
}

function inspectNode(object, objects, duplicatesIndexes) {
  var objectKeyList,
      index,
      length;

  if (object !== null && typeof object === 'object') {
    index = objects.indexOf(object);
    if (index !== -1) {
      if (duplicatesIndexes.indexOf(index) === -1) {
        duplicatesIndexes.push(index);
      }
    } else {
      objects.push(object);

      if (Array.isArray(object)) {
        for (index = 0, length = object.length; index < length; index += 1) {
          inspectNode(object[index], objects, duplicatesIndexes);
        }
      } else {
        objectKeyList = Object.keys(object);

        for (index = 0, length = objectKeyList.length; index < length; index += 1) {
          inspectNode(object[objectKeyList[index]], objects, duplicatesIndexes);
        }
      }
    }
  }
}

function dump(input, options) {
  options = options || {};

  var state = new State(options);

  if (!state.noRefs) getDuplicateReferences(input, state);

  var value = input;

  if (state.replacer) {
    value = state.replacer.call({ '': value }, '', value);
  }

  if (writeNode(state, 0, value, true, true)) return state.dump + '\n';

  return '';
}

module.exports.dump = dump;


/***/ }),

/***/ 74737:
/***/ ((module) => {

"use strict";
// YAML error class. http://stackoverflow.com/questions/8458984
//



function formatError(exception, compact) {
  var where = '', message = exception.reason || '(unknown reason)';

  if (!exception.mark) return message;

  if (exception.mark.name) {
    where += 'in "' + exception.mark.name + '" ';
  }

  where += '(' + (exception.mark.line + 1) + ':' + (exception.mark.column + 1) + ')';

  if (!compact && exception.mark.snippet) {
    where += '\n\n' + exception.mark.snippet;
  }

  return message + ' ' + where;
}


function YAMLException(reason, mark) {
  // Super constructor
  Error.call(this);

  this.name = 'YAMLException';
  this.reason = reason;
  this.mark = mark;
  this.message = formatError(this, false);

  // Include stack trace in error object
  if (Error.captureStackTrace) {
    // Chrome and NodeJS
    Error.captureStackTrace(this, this.constructor);
  } else {
    // FF, IE 10+ and Safari 6+. Fallback for others
    this.stack = (new Error()).stack || '';
  }
}


// Inherit from Error
YAMLException.prototype = Object.create(Error.prototype);
YAMLException.prototype.constructor = YAMLException;


YAMLException.prototype.toString = function toString(compact) {
  return this.name + ': ' + formatError(this, compact);
};


module.exports = YAMLException;


/***/ }),

/***/ 10789:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


/*eslint-disable max-len,no-use-before-define*/

var common              = __webpack_require__(22381);
var YAMLException       = __webpack_require__(74737);
var makeSnippet         = __webpack_require__(69360);
var DEFAULT_SCHEMA      = __webpack_require__(90722);


var _hasOwnProperty = Object.prototype.hasOwnProperty;


var CONTEXT_FLOW_IN   = 1;
var CONTEXT_FLOW_OUT  = 2;
var CONTEXT_BLOCK_IN  = 3;
var CONTEXT_BLOCK_OUT = 4;


var CHOMPING_CLIP  = 1;
var CHOMPING_STRIP = 2;
var CHOMPING_KEEP  = 3;


var PATTERN_NON_PRINTABLE         = /[\x00-\x08\x0B\x0C\x0E-\x1F\x7F-\x84\x86-\x9F\uFFFE\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/;
var PATTERN_NON_ASCII_LINE_BREAKS = /[\x85\u2028\u2029]/;
var PATTERN_FLOW_INDICATORS       = /[,\[\]\{\}]/;
var PATTERN_TAG_HANDLE            = /^(?:!|!!|![a-z\-]+!)$/i;
var PATTERN_TAG_URI               = /^(?:!|[^,\[\]\{\}])(?:%[0-9a-f]{2}|[0-9a-z\-#;\/\?:@&=\+\$,_\.!~\*'\(\)\[\]])*$/i;


function _class(obj) { return Object.prototype.toString.call(obj); }

function is_EOL(c) {
  return (c === 0x0A/* LF */) || (c === 0x0D/* CR */);
}

function is_WHITE_SPACE(c) {
  return (c === 0x09/* Tab */) || (c === 0x20/* Space */);
}

function is_WS_OR_EOL(c) {
  return (c === 0x09/* Tab */) ||
         (c === 0x20/* Space */) ||
         (c === 0x0A/* LF */) ||
         (c === 0x0D/* CR */);
}

function is_FLOW_INDICATOR(c) {
  return c === 0x2C/* , */ ||
         c === 0x5B/* [ */ ||
         c === 0x5D/* ] */ ||
         c === 0x7B/* { */ ||
         c === 0x7D/* } */;
}

function fromHexCode(c) {
  var lc;

  if ((0x30/* 0 */ <= c) && (c <= 0x39/* 9 */)) {
    return c - 0x30;
  }

  /*eslint-disable no-bitwise*/
  lc = c | 0x20;

  if ((0x61/* a */ <= lc) && (lc <= 0x66/* f */)) {
    return lc - 0x61 + 10;
  }

  return -1;
}

function escapedHexLen(c) {
  if (c === 0x78/* x */) { return 2; }
  if (c === 0x75/* u */) { return 4; }
  if (c === 0x55/* U */) { return 8; }
  return 0;
}

function fromDecimalCode(c) {
  if ((0x30/* 0 */ <= c) && (c <= 0x39/* 9 */)) {
    return c - 0x30;
  }

  return -1;
}

function simpleEscapeSequence(c) {
  /* eslint-disable indent */
  return (c === 0x30/* 0 */) ? '\x00' :
        (c === 0x61/* a */) ? '\x07' :
        (c === 0x62/* b */) ? '\x08' :
        (c === 0x74/* t */) ? '\x09' :
        (c === 0x09/* Tab */) ? '\x09' :
        (c === 0x6E/* n */) ? '\x0A' :
        (c === 0x76/* v */) ? '\x0B' :
        (c === 0x66/* f */) ? '\x0C' :
        (c === 0x72/* r */) ? '\x0D' :
        (c === 0x65/* e */) ? '\x1B' :
        (c === 0x20/* Space */) ? ' ' :
        (c === 0x22/* " */) ? '\x22' :
        (c === 0x2F/* / */) ? '/' :
        (c === 0x5C/* \ */) ? '\x5C' :
        (c === 0x4E/* N */) ? '\x85' :
        (c === 0x5F/* _ */) ? '\xA0' :
        (c === 0x4C/* L */) ? '\u2028' :
        (c === 0x50/* P */) ? '\u2029' : '';
}

function charFromCodepoint(c) {
  if (c <= 0xFFFF) {
    return String.fromCharCode(c);
  }
  // Encode UTF-16 surrogate pair
  // https://en.wikipedia.org/wiki/UTF-16#Code_points_U.2B010000_to_U.2B10FFFF
  return String.fromCharCode(
    ((c - 0x010000) >> 10) + 0xD800,
    ((c - 0x010000) & 0x03FF) + 0xDC00
  );
}

var simpleEscapeCheck = new Array(256); // integer, for fast access
var simpleEscapeMap = new Array(256);
for (var i = 0; i < 256; i++) {
  simpleEscapeCheck[i] = simpleEscapeSequence(i) ? 1 : 0;
  simpleEscapeMap[i] = simpleEscapeSequence(i);
}


function State(input, options) {
  this.input = input;

  this.filename  = options['filename']  || null;
  this.schema    = options['schema']    || DEFAULT_SCHEMA;
  this.onWarning = options['onWarning'] || null;
  // (Hidden) Remove? makes the loader to expect YAML 1.1 documents
  // if such documents have no explicit %YAML directive
  this.legacy    = options['legacy']    || false;

  this.json      = options['json']      || false;
  this.listener  = options['listener']  || null;

  this.implicitTypes = this.schema.compiledImplicit;
  this.typeMap       = this.schema.compiledTypeMap;

  this.length     = input.length;
  this.position   = 0;
  this.line       = 0;
  this.lineStart  = 0;
  this.lineIndent = 0;

  // position of first leading tab in the current line,
  // used to make sure there are no tabs in the indentation
  this.firstTabInLine = -1;

  this.documents = [];

  /*
  this.version;
  this.checkLineBreaks;
  this.tagMap;
  this.anchorMap;
  this.tag;
  this.anchor;
  this.kind;
  this.result;*/

}


function generateError(state, message) {
  var mark = {
    name:     state.filename,
    buffer:   state.input.slice(0, -1), // omit trailing \0
    position: state.position,
    line:     state.line,
    column:   state.position - state.lineStart
  };

  mark.snippet = makeSnippet(mark);

  return new YAMLException(message, mark);
}

function throwError(state, message) {
  throw generateError(state, message);
}

function throwWarning(state, message) {
  if (state.onWarning) {
    state.onWarning.call(null, generateError(state, message));
  }
}


var directiveHandlers = {

  YAML: function handleYamlDirective(state, name, args) {

    var match, major, minor;

    if (state.version !== null) {
      throwError(state, 'duplication of %YAML directive');
    }

    if (args.length !== 1) {
      throwError(state, 'YAML directive accepts exactly one argument');
    }

    match = /^([0-9]+)\.([0-9]+)$/.exec(args[0]);

    if (match === null) {
      throwError(state, 'ill-formed argument of the YAML directive');
    }

    major = parseInt(match[1], 10);
    minor = parseInt(match[2], 10);

    if (major !== 1) {
      throwError(state, 'unacceptable YAML version of the document');
    }

    state.version = args[0];
    state.checkLineBreaks = (minor < 2);

    if (minor !== 1 && minor !== 2) {
      throwWarning(state, 'unsupported YAML version of the document');
    }
  },

  TAG: function handleTagDirective(state, name, args) {

    var handle, prefix;

    if (args.length !== 2) {
      throwError(state, 'TAG directive accepts exactly two arguments');
    }

    handle = args[0];
    prefix = args[1];

    if (!PATTERN_TAG_HANDLE.test(handle)) {
      throwError(state, 'ill-formed tag handle (first argument) of the TAG directive');
    }

    if (_hasOwnProperty.call(state.tagMap, handle)) {
      throwError(state, 'there is a previously declared suffix for "' + handle + '" tag handle');
    }

    if (!PATTERN_TAG_URI.test(prefix)) {
      throwError(state, 'ill-formed tag prefix (second argument) of the TAG directive');
    }

    try {
      prefix = decodeURIComponent(prefix);
    } catch (err) {
      throwError(state, 'tag prefix is malformed: ' + prefix);
    }

    state.tagMap[handle] = prefix;
  }
};


function captureSegment(state, start, end, checkJson) {
  var _position, _length, _character, _result;

  if (start < end) {
    _result = state.input.slice(start, end);

    if (checkJson) {
      for (_position = 0, _length = _result.length; _position < _length; _position += 1) {
        _character = _result.charCodeAt(_position);
        if (!(_character === 0x09 ||
              (0x20 <= _character && _character <= 0x10FFFF))) {
          throwError(state, 'expected valid JSON character');
        }
      }
    } else if (PATTERN_NON_PRINTABLE.test(_result)) {
      throwError(state, 'the stream contains non-printable characters');
    }

    state.result += _result;
  }
}

function mergeMappings(state, destination, source, overridableKeys) {
  var sourceKeys, key, index, quantity;

  if (!common.isObject(source)) {
    throwError(state, 'cannot merge mappings; the provided source object is unacceptable');
  }

  sourceKeys = Object.keys(source);

  for (index = 0, quantity = sourceKeys.length; index < quantity; index += 1) {
    key = sourceKeys[index];

    if (!_hasOwnProperty.call(destination, key)) {
      destination[key] = source[key];
      overridableKeys[key] = true;
    }
  }
}

function storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode,
  startLine, startLineStart, startPos) {

  var index, quantity;

  // The output is a plain object here, so keys can only be strings.
  // We need to convert keyNode to a string, but doing so can hang the process
  // (deeply nested arrays that explode exponentially using aliases).
  if (Array.isArray(keyNode)) {
    keyNode = Array.prototype.slice.call(keyNode);

    for (index = 0, quantity = keyNode.length; index < quantity; index += 1) {
      if (Array.isArray(keyNode[index])) {
        throwError(state, 'nested arrays are not supported inside keys');
      }

      if (typeof keyNode === 'object' && _class(keyNode[index]) === '[object Object]') {
        keyNode[index] = '[object Object]';
      }
    }
  }

  // Avoid code execution in load() via toString property
  // (still use its own toString for arrays, timestamps,
  // and whatever user schema extensions happen to have @@toStringTag)
  if (typeof keyNode === 'object' && _class(keyNode) === '[object Object]') {
    keyNode = '[object Object]';
  }


  keyNode = String(keyNode);

  if (_result === null) {
    _result = {};
  }

  if (keyTag === 'tag:yaml.org,2002:merge') {
    if (Array.isArray(valueNode)) {
      for (index = 0, quantity = valueNode.length; index < quantity; index += 1) {
        mergeMappings(state, _result, valueNode[index], overridableKeys);
      }
    } else {
      mergeMappings(state, _result, valueNode, overridableKeys);
    }
  } else {
    if (!state.json &&
        !_hasOwnProperty.call(overridableKeys, keyNode) &&
        _hasOwnProperty.call(_result, keyNode)) {
      state.line = startLine || state.line;
      state.lineStart = startLineStart || state.lineStart;
      state.position = startPos || state.position;
      throwError(state, 'duplicated mapping key');
    }

    // used for this specific key only because Object.defineProperty is slow
    if (keyNode === '__proto__') {
      Object.defineProperty(_result, keyNode, {
        configurable: true,
        enumerable: true,
        writable: true,
        value: valueNode
      });
    } else {
      _result[keyNode] = valueNode;
    }
    delete overridableKeys[keyNode];
  }

  return _result;
}

function readLineBreak(state) {
  var ch;

  ch = state.input.charCodeAt(state.position);

  if (ch === 0x0A/* LF */) {
    state.position++;
  } else if (ch === 0x0D/* CR */) {
    state.position++;
    if (state.input.charCodeAt(state.position) === 0x0A/* LF */) {
      state.position++;
    }
  } else {
    throwError(state, 'a line break is expected');
  }

  state.line += 1;
  state.lineStart = state.position;
  state.firstTabInLine = -1;
}

function skipSeparationSpace(state, allowComments, checkIndent) {
  var lineBreaks = 0,
      ch = state.input.charCodeAt(state.position);

  while (ch !== 0) {
    while (is_WHITE_SPACE(ch)) {
      if (ch === 0x09/* Tab */ && state.firstTabInLine === -1) {
        state.firstTabInLine = state.position;
      }
      ch = state.input.charCodeAt(++state.position);
    }

    if (allowComments && ch === 0x23/* # */) {
      do {
        ch = state.input.charCodeAt(++state.position);
      } while (ch !== 0x0A/* LF */ && ch !== 0x0D/* CR */ && ch !== 0);
    }

    if (is_EOL(ch)) {
      readLineBreak(state);

      ch = state.input.charCodeAt(state.position);
      lineBreaks++;
      state.lineIndent = 0;

      while (ch === 0x20/* Space */) {
        state.lineIndent++;
        ch = state.input.charCodeAt(++state.position);
      }
    } else {
      break;
    }
  }

  if (checkIndent !== -1 && lineBreaks !== 0 && state.lineIndent < checkIndent) {
    throwWarning(state, 'deficient indentation');
  }

  return lineBreaks;
}

function testDocumentSeparator(state) {
  var _position = state.position,
      ch;

  ch = state.input.charCodeAt(_position);

  // Condition state.position === state.lineStart is tested
  // in parent on each call, for efficiency. No needs to test here again.
  if ((ch === 0x2D/* - */ || ch === 0x2E/* . */) &&
      ch === state.input.charCodeAt(_position + 1) &&
      ch === state.input.charCodeAt(_position + 2)) {

    _position += 3;

    ch = state.input.charCodeAt(_position);

    if (ch === 0 || is_WS_OR_EOL(ch)) {
      return true;
    }
  }

  return false;
}

function writeFoldedLines(state, count) {
  if (count === 1) {
    state.result += ' ';
  } else if (count > 1) {
    state.result += common.repeat('\n', count - 1);
  }
}


function readPlainScalar(state, nodeIndent, withinFlowCollection) {
  var preceding,
      following,
      captureStart,
      captureEnd,
      hasPendingContent,
      _line,
      _lineStart,
      _lineIndent,
      _kind = state.kind,
      _result = state.result,
      ch;

  ch = state.input.charCodeAt(state.position);

  if (is_WS_OR_EOL(ch)      ||
      is_FLOW_INDICATOR(ch) ||
      ch === 0x23/* # */    ||
      ch === 0x26/* & */    ||
      ch === 0x2A/* * */    ||
      ch === 0x21/* ! */    ||
      ch === 0x7C/* | */    ||
      ch === 0x3E/* > */    ||
      ch === 0x27/* ' */    ||
      ch === 0x22/* " */    ||
      ch === 0x25/* % */    ||
      ch === 0x40/* @ */    ||
      ch === 0x60/* ` */) {
    return false;
  }

  if (ch === 0x3F/* ? */ || ch === 0x2D/* - */) {
    following = state.input.charCodeAt(state.position + 1);

    if (is_WS_OR_EOL(following) ||
        withinFlowCollection && is_FLOW_INDICATOR(following)) {
      return false;
    }
  }

  state.kind = 'scalar';
  state.result = '';
  captureStart = captureEnd = state.position;
  hasPendingContent = false;

  while (ch !== 0) {
    if (ch === 0x3A/* : */) {
      following = state.input.charCodeAt(state.position + 1);

      if (is_WS_OR_EOL(following) ||
          withinFlowCollection && is_FLOW_INDICATOR(following)) {
        break;
      }

    } else if (ch === 0x23/* # */) {
      preceding = state.input.charCodeAt(state.position - 1);

      if (is_WS_OR_EOL(preceding)) {
        break;
      }

    } else if ((state.position === state.lineStart && testDocumentSeparator(state)) ||
               withinFlowCollection && is_FLOW_INDICATOR(ch)) {
      break;

    } else if (is_EOL(ch)) {
      _line = state.line;
      _lineStart = state.lineStart;
      _lineIndent = state.lineIndent;
      skipSeparationSpace(state, false, -1);

      if (state.lineIndent >= nodeIndent) {
        hasPendingContent = true;
        ch = state.input.charCodeAt(state.position);
        continue;
      } else {
        state.position = captureEnd;
        state.line = _line;
        state.lineStart = _lineStart;
        state.lineIndent = _lineIndent;
        break;
      }
    }

    if (hasPendingContent) {
      captureSegment(state, captureStart, captureEnd, false);
      writeFoldedLines(state, state.line - _line);
      captureStart = captureEnd = state.position;
      hasPendingContent = false;
    }

    if (!is_WHITE_SPACE(ch)) {
      captureEnd = state.position + 1;
    }

    ch = state.input.charCodeAt(++state.position);
  }

  captureSegment(state, captureStart, captureEnd, false);

  if (state.result) {
    return true;
  }

  state.kind = _kind;
  state.result = _result;
  return false;
}

function readSingleQuotedScalar(state, nodeIndent) {
  var ch,
      captureStart, captureEnd;

  ch = state.input.charCodeAt(state.position);

  if (ch !== 0x27/* ' */) {
    return false;
  }

  state.kind = 'scalar';
  state.result = '';
  state.position++;
  captureStart = captureEnd = state.position;

  while ((ch = state.input.charCodeAt(state.position)) !== 0) {
    if (ch === 0x27/* ' */) {
      captureSegment(state, captureStart, state.position, true);
      ch = state.input.charCodeAt(++state.position);

      if (ch === 0x27/* ' */) {
        captureStart = state.position;
        state.position++;
        captureEnd = state.position;
      } else {
        return true;
      }

    } else if (is_EOL(ch)) {
      captureSegment(state, captureStart, captureEnd, true);
      writeFoldedLines(state, skipSeparationSpace(state, false, nodeIndent));
      captureStart = captureEnd = state.position;

    } else if (state.position === state.lineStart && testDocumentSeparator(state)) {
      throwError(state, 'unexpected end of the document within a single quoted scalar');

    } else {
      state.position++;
      captureEnd = state.position;
    }
  }

  throwError(state, 'unexpected end of the stream within a single quoted scalar');
}

function readDoubleQuotedScalar(state, nodeIndent) {
  var captureStart,
      captureEnd,
      hexLength,
      hexResult,
      tmp,
      ch;

  ch = state.input.charCodeAt(state.position);

  if (ch !== 0x22/* " */) {
    return false;
  }

  state.kind = 'scalar';
  state.result = '';
  state.position++;
  captureStart = captureEnd = state.position;

  while ((ch = state.input.charCodeAt(state.position)) !== 0) {
    if (ch === 0x22/* " */) {
      captureSegment(state, captureStart, state.position, true);
      state.position++;
      return true;

    } else if (ch === 0x5C/* \ */) {
      captureSegment(state, captureStart, state.position, true);
      ch = state.input.charCodeAt(++state.position);

      if (is_EOL(ch)) {
        skipSeparationSpace(state, false, nodeIndent);

        // TODO: rework to inline fn with no type cast?
      } else if (ch < 256 && simpleEscapeCheck[ch]) {
        state.result += simpleEscapeMap[ch];
        state.position++;

      } else if ((tmp = escapedHexLen(ch)) > 0) {
        hexLength = tmp;
        hexResult = 0;

        for (; hexLength > 0; hexLength--) {
          ch = state.input.charCodeAt(++state.position);

          if ((tmp = fromHexCode(ch)) >= 0) {
            hexResult = (hexResult << 4) + tmp;

          } else {
            throwError(state, 'expected hexadecimal character');
          }
        }

        state.result += charFromCodepoint(hexResult);

        state.position++;

      } else {
        throwError(state, 'unknown escape sequence');
      }

      captureStart = captureEnd = state.position;

    } else if (is_EOL(ch)) {
      captureSegment(state, captureStart, captureEnd, true);
      writeFoldedLines(state, skipSeparationSpace(state, false, nodeIndent));
      captureStart = captureEnd = state.position;

    } else if (state.position === state.lineStart && testDocumentSeparator(state)) {
      throwError(state, 'unexpected end of the document within a double quoted scalar');

    } else {
      state.position++;
      captureEnd = state.position;
    }
  }

  throwError(state, 'unexpected end of the stream within a double quoted scalar');
}

function readFlowCollection(state, nodeIndent) {
  var readNext = true,
      _line,
      _lineStart,
      _pos,
      _tag     = state.tag,
      _result,
      _anchor  = state.anchor,
      following,
      terminator,
      isPair,
      isExplicitPair,
      isMapping,
      overridableKeys = Object.create(null),
      keyNode,
      keyTag,
      valueNode,
      ch;

  ch = state.input.charCodeAt(state.position);

  if (ch === 0x5B/* [ */) {
    terminator = 0x5D;/* ] */
    isMapping = false;
    _result = [];
  } else if (ch === 0x7B/* { */) {
    terminator = 0x7D;/* } */
    isMapping = true;
    _result = {};
  } else {
    return false;
  }

  if (state.anchor !== null) {
    state.anchorMap[state.anchor] = _result;
  }

  ch = state.input.charCodeAt(++state.position);

  while (ch !== 0) {
    skipSeparationSpace(state, true, nodeIndent);

    ch = state.input.charCodeAt(state.position);

    if (ch === terminator) {
      state.position++;
      state.tag = _tag;
      state.anchor = _anchor;
      state.kind = isMapping ? 'mapping' : 'sequence';
      state.result = _result;
      return true;
    } else if (!readNext) {
      throwError(state, 'missed comma between flow collection entries');
    } else if (ch === 0x2C/* , */) {
      // "flow collection entries can never be completely empty", as per YAML 1.2, section 7.4
      throwError(state, "expected the node content, but found ','");
    }

    keyTag = keyNode = valueNode = null;
    isPair = isExplicitPair = false;

    if (ch === 0x3F/* ? */) {
      following = state.input.charCodeAt(state.position + 1);

      if (is_WS_OR_EOL(following)) {
        isPair = isExplicitPair = true;
        state.position++;
        skipSeparationSpace(state, true, nodeIndent);
      }
    }

    _line = state.line; // Save the current line.
    _lineStart = state.lineStart;
    _pos = state.position;
    composeNode(state, nodeIndent, CONTEXT_FLOW_IN, false, true);
    keyTag = state.tag;
    keyNode = state.result;
    skipSeparationSpace(state, true, nodeIndent);

    ch = state.input.charCodeAt(state.position);

    if ((isExplicitPair || state.line === _line) && ch === 0x3A/* : */) {
      isPair = true;
      ch = state.input.charCodeAt(++state.position);
      skipSeparationSpace(state, true, nodeIndent);
      composeNode(state, nodeIndent, CONTEXT_FLOW_IN, false, true);
      valueNode = state.result;
    }

    if (isMapping) {
      storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode, _line, _lineStart, _pos);
    } else if (isPair) {
      _result.push(storeMappingPair(state, null, overridableKeys, keyTag, keyNode, valueNode, _line, _lineStart, _pos));
    } else {
      _result.push(keyNode);
    }

    skipSeparationSpace(state, true, nodeIndent);

    ch = state.input.charCodeAt(state.position);

    if (ch === 0x2C/* , */) {
      readNext = true;
      ch = state.input.charCodeAt(++state.position);
    } else {
      readNext = false;
    }
  }

  throwError(state, 'unexpected end of the stream within a flow collection');
}

function readBlockScalar(state, nodeIndent) {
  var captureStart,
      folding,
      chomping       = CHOMPING_CLIP,
      didReadContent = false,
      detectedIndent = false,
      textIndent     = nodeIndent,
      emptyLines     = 0,
      atMoreIndented = false,
      tmp,
      ch;

  ch = state.input.charCodeAt(state.position);

  if (ch === 0x7C/* | */) {
    folding = false;
  } else if (ch === 0x3E/* > */) {
    folding = true;
  } else {
    return false;
  }

  state.kind = 'scalar';
  state.result = '';

  while (ch !== 0) {
    ch = state.input.charCodeAt(++state.position);

    if (ch === 0x2B/* + */ || ch === 0x2D/* - */) {
      if (CHOMPING_CLIP === chomping) {
        chomping = (ch === 0x2B/* + */) ? CHOMPING_KEEP : CHOMPING_STRIP;
      } else {
        throwError(state, 'repeat of a chomping mode identifier');
      }

    } else if ((tmp = fromDecimalCode(ch)) >= 0) {
      if (tmp === 0) {
        throwError(state, 'bad explicit indentation width of a block scalar; it cannot be less than one');
      } else if (!detectedIndent) {
        textIndent = nodeIndent + tmp - 1;
        detectedIndent = true;
      } else {
        throwError(state, 'repeat of an indentation width identifier');
      }

    } else {
      break;
    }
  }

  if (is_WHITE_SPACE(ch)) {
    do { ch = state.input.charCodeAt(++state.position); }
    while (is_WHITE_SPACE(ch));

    if (ch === 0x23/* # */) {
      do { ch = state.input.charCodeAt(++state.position); }
      while (!is_EOL(ch) && (ch !== 0));
    }
  }

  while (ch !== 0) {
    readLineBreak(state);
    state.lineIndent = 0;

    ch = state.input.charCodeAt(state.position);

    while ((!detectedIndent || state.lineIndent < textIndent) &&
           (ch === 0x20/* Space */)) {
      state.lineIndent++;
      ch = state.input.charCodeAt(++state.position);
    }

    if (!detectedIndent && state.lineIndent > textIndent) {
      textIndent = state.lineIndent;
    }

    if (is_EOL(ch)) {
      emptyLines++;
      continue;
    }

    // End of the scalar.
    if (state.lineIndent < textIndent) {

      // Perform the chomping.
      if (chomping === CHOMPING_KEEP) {
        state.result += common.repeat('\n', didReadContent ? 1 + emptyLines : emptyLines);
      } else if (chomping === CHOMPING_CLIP) {
        if (didReadContent) { // i.e. only if the scalar is not empty.
          state.result += '\n';
        }
      }

      // Break this `while` cycle and go to the funciton's epilogue.
      break;
    }

    // Folded style: use fancy rules to handle line breaks.
    if (folding) {

      // Lines starting with white space characters (more-indented lines) are not folded.
      if (is_WHITE_SPACE(ch)) {
        atMoreIndented = true;
        // except for the first content line (cf. Example 8.1)
        state.result += common.repeat('\n', didReadContent ? 1 + emptyLines : emptyLines);

      // End of more-indented block.
      } else if (atMoreIndented) {
        atMoreIndented = false;
        state.result += common.repeat('\n', emptyLines + 1);

      // Just one line break - perceive as the same line.
      } else if (emptyLines === 0) {
        if (didReadContent) { // i.e. only if we have already read some scalar content.
          state.result += ' ';
        }

      // Several line breaks - perceive as different lines.
      } else {
        state.result += common.repeat('\n', emptyLines);
      }

    // Literal style: just add exact number of line breaks between content lines.
    } else {
      // Keep all line breaks except the header line break.
      state.result += common.repeat('\n', didReadContent ? 1 + emptyLines : emptyLines);
    }

    didReadContent = true;
    detectedIndent = true;
    emptyLines = 0;
    captureStart = state.position;

    while (!is_EOL(ch) && (ch !== 0)) {
      ch = state.input.charCodeAt(++state.position);
    }

    captureSegment(state, captureStart, state.position, false);
  }

  return true;
}

function readBlockSequence(state, nodeIndent) {
  var _line,
      _tag      = state.tag,
      _anchor   = state.anchor,
      _result   = [],
      following,
      detected  = false,
      ch;

  // there is a leading tab before this token, so it can't be a block sequence/mapping;
  // it can still be flow sequence/mapping or a scalar
  if (state.firstTabInLine !== -1) return false;

  if (state.anchor !== null) {
    state.anchorMap[state.anchor] = _result;
  }

  ch = state.input.charCodeAt(state.position);

  while (ch !== 0) {
    if (state.firstTabInLine !== -1) {
      state.position = state.firstTabInLine;
      throwError(state, 'tab characters must not be used in indentation');
    }

    if (ch !== 0x2D/* - */) {
      break;
    }

    following = state.input.charCodeAt(state.position + 1);

    if (!is_WS_OR_EOL(following)) {
      break;
    }

    detected = true;
    state.position++;

    if (skipSeparationSpace(state, true, -1)) {
      if (state.lineIndent <= nodeIndent) {
        _result.push(null);
        ch = state.input.charCodeAt(state.position);
        continue;
      }
    }

    _line = state.line;
    composeNode(state, nodeIndent, CONTEXT_BLOCK_IN, false, true);
    _result.push(state.result);
    skipSeparationSpace(state, true, -1);

    ch = state.input.charCodeAt(state.position);

    if ((state.line === _line || state.lineIndent > nodeIndent) && (ch !== 0)) {
      throwError(state, 'bad indentation of a sequence entry');
    } else if (state.lineIndent < nodeIndent) {
      break;
    }
  }

  if (detected) {
    state.tag = _tag;
    state.anchor = _anchor;
    state.kind = 'sequence';
    state.result = _result;
    return true;
  }
  return false;
}

function readBlockMapping(state, nodeIndent, flowIndent) {
  var following,
      allowCompact,
      _line,
      _keyLine,
      _keyLineStart,
      _keyPos,
      _tag          = state.tag,
      _anchor       = state.anchor,
      _result       = {},
      overridableKeys = Object.create(null),
      keyTag        = null,
      keyNode       = null,
      valueNode     = null,
      atExplicitKey = false,
      detected      = false,
      ch;

  // there is a leading tab before this token, so it can't be a block sequence/mapping;
  // it can still be flow sequence/mapping or a scalar
  if (state.firstTabInLine !== -1) return false;

  if (state.anchor !== null) {
    state.anchorMap[state.anchor] = _result;
  }

  ch = state.input.charCodeAt(state.position);

  while (ch !== 0) {
    if (!atExplicitKey && state.firstTabInLine !== -1) {
      state.position = state.firstTabInLine;
      throwError(state, 'tab characters must not be used in indentation');
    }

    following = state.input.charCodeAt(state.position + 1);
    _line = state.line; // Save the current line.

    //
    // Explicit notation case. There are two separate blocks:
    // first for the key (denoted by "?") and second for the value (denoted by ":")
    //
    if ((ch === 0x3F/* ? */ || ch === 0x3A/* : */) && is_WS_OR_EOL(following)) {

      if (ch === 0x3F/* ? */) {
        if (atExplicitKey) {
          storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null, _keyLine, _keyLineStart, _keyPos);
          keyTag = keyNode = valueNode = null;
        }

        detected = true;
        atExplicitKey = true;
        allowCompact = true;

      } else if (atExplicitKey) {
        // i.e. 0x3A/* : */ === character after the explicit key.
        atExplicitKey = false;
        allowCompact = true;

      } else {
        throwError(state, 'incomplete explicit mapping pair; a key node is missed; or followed by a non-tabulated empty line');
      }

      state.position += 1;
      ch = following;

    //
    // Implicit notation case. Flow-style node as the key first, then ":", and the value.
    //
    } else {
      _keyLine = state.line;
      _keyLineStart = state.lineStart;
      _keyPos = state.position;

      if (!composeNode(state, flowIndent, CONTEXT_FLOW_OUT, false, true)) {
        // Neither implicit nor explicit notation.
        // Reading is done. Go to the epilogue.
        break;
      }

      if (state.line === _line) {
        ch = state.input.charCodeAt(state.position);

        while (is_WHITE_SPACE(ch)) {
          ch = state.input.charCodeAt(++state.position);
        }

        if (ch === 0x3A/* : */) {
          ch = state.input.charCodeAt(++state.position);

          if (!is_WS_OR_EOL(ch)) {
            throwError(state, 'a whitespace character is expected after the key-value separator within a block mapping');
          }

          if (atExplicitKey) {
            storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null, _keyLine, _keyLineStart, _keyPos);
            keyTag = keyNode = valueNode = null;
          }

          detected = true;
          atExplicitKey = false;
          allowCompact = false;
          keyTag = state.tag;
          keyNode = state.result;

        } else if (detected) {
          throwError(state, 'can not read an implicit mapping pair; a colon is missed');

        } else {
          state.tag = _tag;
          state.anchor = _anchor;
          return true; // Keep the result of `composeNode`.
        }

      } else if (detected) {
        throwError(state, 'can not read a block mapping entry; a multiline key may not be an implicit key');

      } else {
        state.tag = _tag;
        state.anchor = _anchor;
        return true; // Keep the result of `composeNode`.
      }
    }

    //
    // Common reading code for both explicit and implicit notations.
    //
    if (state.line === _line || state.lineIndent > nodeIndent) {
      if (atExplicitKey) {
        _keyLine = state.line;
        _keyLineStart = state.lineStart;
        _keyPos = state.position;
      }

      if (composeNode(state, nodeIndent, CONTEXT_BLOCK_OUT, true, allowCompact)) {
        if (atExplicitKey) {
          keyNode = state.result;
        } else {
          valueNode = state.result;
        }
      }

      if (!atExplicitKey) {
        storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode, _keyLine, _keyLineStart, _keyPos);
        keyTag = keyNode = valueNode = null;
      }

      skipSeparationSpace(state, true, -1);
      ch = state.input.charCodeAt(state.position);
    }

    if ((state.line === _line || state.lineIndent > nodeIndent) && (ch !== 0)) {
      throwError(state, 'bad indentation of a mapping entry');
    } else if (state.lineIndent < nodeIndent) {
      break;
    }
  }

  //
  // Epilogue.
  //

  // Special case: last mapping's node contains only the key in explicit notation.
  if (atExplicitKey) {
    storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null, _keyLine, _keyLineStart, _keyPos);
  }

  // Expose the resulting mapping.
  if (detected) {
    state.tag = _tag;
    state.anchor = _anchor;
    state.kind = 'mapping';
    state.result = _result;
  }

  return detected;
}

function readTagProperty(state) {
  var _position,
      isVerbatim = false,
      isNamed    = false,
      tagHandle,
      tagName,
      ch;

  ch = state.input.charCodeAt(state.position);

  if (ch !== 0x21/* ! */) return false;

  if (state.tag !== null) {
    throwError(state, 'duplication of a tag property');
  }

  ch = state.input.charCodeAt(++state.position);

  if (ch === 0x3C/* < */) {
    isVerbatim = true;
    ch = state.input.charCodeAt(++state.position);

  } else if (ch === 0x21/* ! */) {
    isNamed = true;
    tagHandle = '!!';
    ch = state.input.charCodeAt(++state.position);

  } else {
    tagHandle = '!';
  }

  _position = state.position;

  if (isVerbatim) {
    do { ch = state.input.charCodeAt(++state.position); }
    while (ch !== 0 && ch !== 0x3E/* > */);

    if (state.position < state.length) {
      tagName = state.input.slice(_position, state.position);
      ch = state.input.charCodeAt(++state.position);
    } else {
      throwError(state, 'unexpected end of the stream within a verbatim tag');
    }
  } else {
    while (ch !== 0 && !is_WS_OR_EOL(ch)) {

      if (ch === 0x21/* ! */) {
        if (!isNamed) {
          tagHandle = state.input.slice(_position - 1, state.position + 1);

          if (!PATTERN_TAG_HANDLE.test(tagHandle)) {
            throwError(state, 'named tag handle cannot contain such characters');
          }

          isNamed = true;
          _position = state.position + 1;
        } else {
          throwError(state, 'tag suffix cannot contain exclamation marks');
        }
      }

      ch = state.input.charCodeAt(++state.position);
    }

    tagName = state.input.slice(_position, state.position);

    if (PATTERN_FLOW_INDICATORS.test(tagName)) {
      throwError(state, 'tag suffix cannot contain flow indicator characters');
    }
  }

  if (tagName && !PATTERN_TAG_URI.test(tagName)) {
    throwError(state, 'tag name cannot contain such characters: ' + tagName);
  }

  try {
    tagName = decodeURIComponent(tagName);
  } catch (err) {
    throwError(state, 'tag name is malformed: ' + tagName);
  }

  if (isVerbatim) {
    state.tag = tagName;

  } else if (_hasOwnProperty.call(state.tagMap, tagHandle)) {
    state.tag = state.tagMap[tagHandle] + tagName;

  } else if (tagHandle === '!') {
    state.tag = '!' + tagName;

  } else if (tagHandle === '!!') {
    state.tag = 'tag:yaml.org,2002:' + tagName;

  } else {
    throwError(state, 'undeclared tag handle "' + tagHandle + '"');
  }

  return true;
}

function readAnchorProperty(state) {
  var _position,
      ch;

  ch = state.input.charCodeAt(state.position);

  if (ch !== 0x26/* & */) return false;

  if (state.anchor !== null) {
    throwError(state, 'duplication of an anchor property');
  }

  ch = state.input.charCodeAt(++state.position);
  _position = state.position;

  while (ch !== 0 && !is_WS_OR_EOL(ch) && !is_FLOW_INDICATOR(ch)) {
    ch = state.input.charCodeAt(++state.position);
  }

  if (state.position === _position) {
    throwError(state, 'name of an anchor node must contain at least one character');
  }

  state.anchor = state.input.slice(_position, state.position);
  return true;
}

function readAlias(state) {
  var _position, alias,
      ch;

  ch = state.input.charCodeAt(state.position);

  if (ch !== 0x2A/* * */) return false;

  ch = state.input.charCodeAt(++state.position);
  _position = state.position;

  while (ch !== 0 && !is_WS_OR_EOL(ch) && !is_FLOW_INDICATOR(ch)) {
    ch = state.input.charCodeAt(++state.position);
  }

  if (state.position === _position) {
    throwError(state, 'name of an alias node must contain at least one character');
  }

  alias = state.input.slice(_position, state.position);

  if (!_hasOwnProperty.call(state.anchorMap, alias)) {
    throwError(state, 'unidentified alias "' + alias + '"');
  }

  state.result = state.anchorMap[alias];
  skipSeparationSpace(state, true, -1);
  return true;
}

function composeNode(state, parentIndent, nodeContext, allowToSeek, allowCompact) {
  var allowBlockStyles,
      allowBlockScalars,
      allowBlockCollections,
      indentStatus = 1, // 1: this>parent, 0: this=parent, -1: this<parent
      atNewLine  = false,
      hasContent = false,
      typeIndex,
      typeQuantity,
      typeList,
      type,
      flowIndent,
      blockIndent;

  if (state.listener !== null) {
    state.listener('open', state);
  }

  state.tag    = null;
  state.anchor = null;
  state.kind   = null;
  state.result = null;

  allowBlockStyles = allowBlockScalars = allowBlockCollections =
    CONTEXT_BLOCK_OUT === nodeContext ||
    CONTEXT_BLOCK_IN  === nodeContext;

  if (allowToSeek) {
    if (skipSeparationSpace(state, true, -1)) {
      atNewLine = true;

      if (state.lineIndent > parentIndent) {
        indentStatus = 1;
      } else if (state.lineIndent === parentIndent) {
        indentStatus = 0;
      } else if (state.lineIndent < parentIndent) {
        indentStatus = -1;
      }
    }
  }

  if (indentStatus === 1) {
    while (readTagProperty(state) || readAnchorProperty(state)) {
      if (skipSeparationSpace(state, true, -1)) {
        atNewLine = true;
        allowBlockCollections = allowBlockStyles;

        if (state.lineIndent > parentIndent) {
          indentStatus = 1;
        } else if (state.lineIndent === parentIndent) {
          indentStatus = 0;
        } else if (state.lineIndent < parentIndent) {
          indentStatus = -1;
        }
      } else {
        allowBlockCollections = false;
      }
    }
  }

  if (allowBlockCollections) {
    allowBlockCollections = atNewLine || allowCompact;
  }

  if (indentStatus === 1 || CONTEXT_BLOCK_OUT === nodeContext) {
    if (CONTEXT_FLOW_IN === nodeContext || CONTEXT_FLOW_OUT === nodeContext) {
      flowIndent = parentIndent;
    } else {
      flowIndent = parentIndent + 1;
    }

    blockIndent = state.position - state.lineStart;

    if (indentStatus === 1) {
      if (allowBlockCollections &&
          (readBlockSequence(state, blockIndent) ||
           readBlockMapping(state, blockIndent, flowIndent)) ||
          readFlowCollection(state, flowIndent)) {
        hasContent = true;
      } else {
        if ((allowBlockScalars && readBlockScalar(state, flowIndent)) ||
            readSingleQuotedScalar(state, flowIndent) ||
            readDoubleQuotedScalar(state, flowIndent)) {
          hasContent = true;

        } else if (readAlias(state)) {
          hasContent = true;

          if (state.tag !== null || state.anchor !== null) {
            throwError(state, 'alias node should not have any properties');
          }

        } else if (readPlainScalar(state, flowIndent, CONTEXT_FLOW_IN === nodeContext)) {
          hasContent = true;

          if (state.tag === null) {
            state.tag = '?';
          }
        }

        if (state.anchor !== null) {
          state.anchorMap[state.anchor] = state.result;
        }
      }
    } else if (indentStatus === 0) {
      // Special case: block sequences are allowed to have same indentation level as the parent.
      // http://www.yaml.org/spec/1.2/spec.html#id2799784
      hasContent = allowBlockCollections && readBlockSequence(state, blockIndent);
    }
  }

  if (state.tag === null) {
    if (state.anchor !== null) {
      state.anchorMap[state.anchor] = state.result;
    }

  } else if (state.tag === '?') {
    // Implicit resolving is not allowed for non-scalar types, and '?'
    // non-specific tag is only automatically assigned to plain scalars.
    //
    // We only need to check kind conformity in case user explicitly assigns '?'
    // tag, for example like this: "!<?> [0]"
    //
    if (state.result !== null && state.kind !== 'scalar') {
      throwError(state, 'unacceptable node kind for !<?> tag; it should be "scalar", not "' + state.kind + '"');
    }

    for (typeIndex = 0, typeQuantity = state.implicitTypes.length; typeIndex < typeQuantity; typeIndex += 1) {
      type = state.implicitTypes[typeIndex];

      if (type.resolve(state.result)) { // `state.result` updated in resolver if matched
        state.result = type.construct(state.result);
        state.tag = type.tag;
        if (state.anchor !== null) {
          state.anchorMap[state.anchor] = state.result;
        }
        break;
      }
    }
  } else if (state.tag !== '!') {
    if (_hasOwnProperty.call(state.typeMap[state.kind || 'fallback'], state.tag)) {
      type = state.typeMap[state.kind || 'fallback'][state.tag];
    } else {
      // looking for multi type
      type = null;
      typeList = state.typeMap.multi[state.kind || 'fallback'];

      for (typeIndex = 0, typeQuantity = typeList.length; typeIndex < typeQuantity; typeIndex += 1) {
        if (state.tag.slice(0, typeList[typeIndex].tag.length) === typeList[typeIndex].tag) {
          type = typeList[typeIndex];
          break;
        }
      }
    }

    if (!type) {
      throwError(state, 'unknown tag !<' + state.tag + '>');
    }

    if (state.result !== null && type.kind !== state.kind) {
      throwError(state, 'unacceptable node kind for !<' + state.tag + '> tag; it should be "' + type.kind + '", not "' + state.kind + '"');
    }

    if (!type.resolve(state.result, state.tag)) { // `state.result` updated in resolver if matched
      throwError(state, 'cannot resolve a node with !<' + state.tag + '> explicit tag');
    } else {
      state.result = type.construct(state.result, state.tag);
      if (state.anchor !== null) {
        state.anchorMap[state.anchor] = state.result;
      }
    }
  }

  if (state.listener !== null) {
    state.listener('close', state);
  }
  return state.tag !== null ||  state.anchor !== null || hasContent;
}

function readDocument(state) {
  var documentStart = state.position,
      _position,
      directiveName,
      directiveArgs,
      hasDirectives = false,
      ch;

  state.version = null;
  state.checkLineBreaks = state.legacy;
  state.tagMap = Object.create(null);
  state.anchorMap = Object.create(null);

  while ((ch = state.input.charCodeAt(state.position)) !== 0) {
    skipSeparationSpace(state, true, -1);

    ch = state.input.charCodeAt(state.position);

    if (state.lineIndent > 0 || ch !== 0x25/* % */) {
      break;
    }

    hasDirectives = true;
    ch = state.input.charCodeAt(++state.position);
    _position = state.position;

    while (ch !== 0 && !is_WS_OR_EOL(ch)) {
      ch = state.input.charCodeAt(++state.position);
    }

    directiveName = state.input.slice(_position, state.position);
    directiveArgs = [];

    if (directiveName.length < 1) {
      throwError(state, 'directive name must not be less than one character in length');
    }

    while (ch !== 0) {
      while (is_WHITE_SPACE(ch)) {
        ch = state.input.charCodeAt(++state.position);
      }

      if (ch === 0x23/* # */) {
        do { ch = state.input.charCodeAt(++state.position); }
        while (ch !== 0 && !is_EOL(ch));
        break;
      }

      if (is_EOL(ch)) break;

      _position = state.position;

      while (ch !== 0 && !is_WS_OR_EOL(ch)) {
        ch = state.input.charCodeAt(++state.position);
      }

      directiveArgs.push(state.input.slice(_position, state.position));
    }

    if (ch !== 0) readLineBreak(state);

    if (_hasOwnProperty.call(directiveHandlers, directiveName)) {
      directiveHandlers[directiveName](state, directiveName, directiveArgs);
    } else {
      throwWarning(state, 'unknown document directive "' + directiveName + '"');
    }
  }

  skipSeparationSpace(state, true, -1);

  if (state.lineIndent === 0 &&
      state.input.charCodeAt(state.position)     === 0x2D/* - */ &&
      state.input.charCodeAt(state.position + 1) === 0x2D/* - */ &&
      state.input.charCodeAt(state.position + 2) === 0x2D/* - */) {
    state.position += 3;
    skipSeparationSpace(state, true, -1);

  } else if (hasDirectives) {
    throwError(state, 'directives end mark is expected');
  }

  composeNode(state, state.lineIndent - 1, CONTEXT_BLOCK_OUT, false, true);
  skipSeparationSpace(state, true, -1);

  if (state.checkLineBreaks &&
      PATTERN_NON_ASCII_LINE_BREAKS.test(state.input.slice(documentStart, state.position))) {
    throwWarning(state, 'non-ASCII line breaks are interpreted as content');
  }

  state.documents.push(state.result);

  if (state.position === state.lineStart && testDocumentSeparator(state)) {

    if (state.input.charCodeAt(state.position) === 0x2E/* . */) {
      state.position += 3;
      skipSeparationSpace(state, true, -1);
    }
    return;
  }

  if (state.position < (state.length - 1)) {
    throwError(state, 'end of the stream or a document separator is expected');
  } else {
    return;
  }
}


function loadDocuments(input, options) {
  input = String(input);
  options = options || {};

  if (input.length !== 0) {

    // Add tailing `\n` if not exists
    if (input.charCodeAt(input.length - 1) !== 0x0A/* LF */ &&
        input.charCodeAt(input.length - 1) !== 0x0D/* CR */) {
      input += '\n';
    }

    // Strip BOM
    if (input.charCodeAt(0) === 0xFEFF) {
      input = input.slice(1);
    }
  }

  var state = new State(input, options);

  var nullpos = input.indexOf('\0');

  if (nullpos !== -1) {
    state.position = nullpos;
    throwError(state, 'null byte is not allowed in input');
  }

  // Use 0 as string terminator. That significantly simplifies bounds check.
  state.input += '\0';

  while (state.input.charCodeAt(state.position) === 0x20/* Space */) {
    state.lineIndent += 1;
    state.position += 1;
  }

  while (state.position < (state.length - 1)) {
    readDocument(state);
  }

  return state.documents;
}


function loadAll(input, iterator, options) {
  if (iterator !== null && typeof iterator === 'object' && typeof options === 'undefined') {
    options = iterator;
    iterator = null;
  }

  var documents = loadDocuments(input, options);

  if (typeof iterator !== 'function') {
    return documents;
  }

  for (var index = 0, length = documents.length; index < length; index += 1) {
    iterator(documents[index]);
  }
}


function load(input, options) {
  var documents = loadDocuments(input, options);

  if (documents.length === 0) {
    /*eslint-disable no-undefined*/
    return undefined;
  } else if (documents.length === 1) {
    return documents[0];
  }
  throw new YAMLException('expected a single document in the stream, but found more');
}


module.exports.loadAll = loadAll;
module.exports.load    = load;


/***/ }),

/***/ 55112:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


/*eslint-disable max-len*/

var YAMLException = __webpack_require__(74737);
var Type          = __webpack_require__(57354);


function compileList(schema, name) {
  var result = [];

  schema[name].forEach(function (currentType) {
    var newIndex = result.length;

    result.forEach(function (previousType, previousIndex) {
      if (previousType.tag === currentType.tag &&
          previousType.kind === currentType.kind &&
          previousType.multi === currentType.multi) {

        newIndex = previousIndex;
      }
    });

    result[newIndex] = currentType;
  });

  return result;
}


function compileMap(/* lists... */) {
  var result = {
        scalar: {},
        sequence: {},
        mapping: {},
        fallback: {},
        multi: {
          scalar: [],
          sequence: [],
          mapping: [],
          fallback: []
        }
      }, index, length;

  function collectType(type) {
    if (type.multi) {
      result.multi[type.kind].push(type);
      result.multi['fallback'].push(type);
    } else {
      result[type.kind][type.tag] = result['fallback'][type.tag] = type;
    }
  }

  for (index = 0, length = arguments.length; index < length; index += 1) {
    arguments[index].forEach(collectType);
  }
  return result;
}


function Schema(definition) {
  return this.extend(definition);
}


Schema.prototype.extend = function extend(definition) {
  var implicit = [];
  var explicit = [];

  if (definition instanceof Type) {
    // Schema.extend(type)
    explicit.push(definition);

  } else if (Array.isArray(definition)) {
    // Schema.extend([ type1, type2, ... ])
    explicit = explicit.concat(definition);

  } else if (definition && (Array.isArray(definition.implicit) || Array.isArray(definition.explicit))) {
    // Schema.extend({ explicit: [ type1, type2, ... ], implicit: [ type1, type2, ... ] })
    if (definition.implicit) implicit = implicit.concat(definition.implicit);
    if (definition.explicit) explicit = explicit.concat(definition.explicit);

  } else {
    throw new YAMLException('Schema.extend argument should be a Type, [ Type ], ' +
      'or a schema definition ({ implicit: [...], explicit: [...] })');
  }

  implicit.forEach(function (type) {
    if (!(type instanceof Type)) {
      throw new YAMLException('Specified list of YAML types (or a single Type object) contains a non-Type object.');
    }

    if (type.loadKind && type.loadKind !== 'scalar') {
      throw new YAMLException('There is a non-scalar type in the implicit list of a schema. Implicit resolving of such types is not supported.');
    }

    if (type.multi) {
      throw new YAMLException('There is a multi type in the implicit list of a schema. Multi tags can only be listed as explicit.');
    }
  });

  explicit.forEach(function (type) {
    if (!(type instanceof Type)) {
      throw new YAMLException('Specified list of YAML types (or a single Type object) contains a non-Type object.');
    }
  });

  var result = Object.create(Schema.prototype);

  result.implicit = (this.implicit || []).concat(implicit);
  result.explicit = (this.explicit || []).concat(explicit);

  result.compiledImplicit = compileList(result, 'implicit');
  result.compiledExplicit = compileList(result, 'explicit');
  result.compiledTypeMap  = compileMap(result.compiledImplicit, result.compiledExplicit);

  return result;
};


module.exports = Schema;


/***/ }),

/***/ 9664:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
// Standard YAML's Core schema.
// http://www.yaml.org/spec/1.2/spec.html#id2804923
//
// NOTE: JS-YAML does not support schema-specific tag resolution restrictions.
// So, Core schema has no distinctions from JSON schema is JS-YAML.





module.exports = __webpack_require__(27280);


/***/ }),

/***/ 90722:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
// JS-YAML's default schema for `safeLoad` function.
// It is not described in the YAML specification.
//
// This schema is based on standard YAML's Core schema and includes most of
// extra types described at YAML tag repository. (http://yaml.org/type/)





module.exports = (__webpack_require__(9664).extend)({
  implicit: [
    __webpack_require__(82411),
    __webpack_require__(2017)
  ],
  explicit: [
    __webpack_require__(56627),
    __webpack_require__(43279),
    __webpack_require__(35091),
    __webpack_require__(47049)
  ]
});


/***/ }),

/***/ 52625:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
// Standard YAML's Failsafe schema.
// http://www.yaml.org/spec/1.2/spec.html#id2802346





var Schema = __webpack_require__(55112);


module.exports = new Schema({
  explicit: [
    __webpack_require__(59520),
    __webpack_require__(8585),
    __webpack_require__(84775)
  ]
});


/***/ }),

/***/ 27280:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
// Standard YAML's JSON schema.
// http://www.yaml.org/spec/1.2/spec.html#id2803231
//
// NOTE: JS-YAML does not support schema-specific tag resolution restrictions.
// So, this schema is not such strict as defined in the YAML specification.
// It allows numbers in binary notaion, use `Null` and `NULL` as `null`, etc.





module.exports = (__webpack_require__(52625).extend)({
  implicit: [
    __webpack_require__(61539),
    __webpack_require__(37138),
    __webpack_require__(34115),
    __webpack_require__(21468)
  ]
});


/***/ }),

/***/ 69360:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";



var common = __webpack_require__(22381);


// get snippet for a single line, respecting maxLength
function getLine(buffer, lineStart, lineEnd, position, maxLineLength) {
  var head = '';
  var tail = '';
  var maxHalfLength = Math.floor(maxLineLength / 2) - 1;

  if (position - lineStart > maxHalfLength) {
    head = ' ... ';
    lineStart = position - maxHalfLength + head.length;
  }

  if (lineEnd - position > maxHalfLength) {
    tail = ' ...';
    lineEnd = position + maxHalfLength - tail.length;
  }

  return {
    str: head + buffer.slice(lineStart, lineEnd).replace(/\t/g, '→') + tail,
    pos: position - lineStart + head.length // relative position
  };
}


function padStart(string, max) {
  return common.repeat(' ', max - string.length) + string;
}


function makeSnippet(mark, options) {
  options = Object.create(options || null);

  if (!mark.buffer) return null;

  if (!options.maxLength) options.maxLength = 79;
  if (typeof options.indent      !== 'number') options.indent      = 1;
  if (typeof options.linesBefore !== 'number') options.linesBefore = 3;
  if (typeof options.linesAfter  !== 'number') options.linesAfter  = 2;

  var re = /\r?\n|\r|\0/g;
  var lineStarts = [ 0 ];
  var lineEnds = [];
  var match;
  var foundLineNo = -1;

  while ((match = re.exec(mark.buffer))) {
    lineEnds.push(match.index);
    lineStarts.push(match.index + match[0].length);

    if (mark.position <= match.index && foundLineNo < 0) {
      foundLineNo = lineStarts.length - 2;
    }
  }

  if (foundLineNo < 0) foundLineNo = lineStarts.length - 1;

  var result = '', i, line;
  var lineNoLength = Math.min(mark.line + options.linesAfter, lineEnds.length).toString().length;
  var maxLineLength = options.maxLength - (options.indent + lineNoLength + 3);

  for (i = 1; i <= options.linesBefore; i++) {
    if (foundLineNo - i < 0) break;
    line = getLine(
      mark.buffer,
      lineStarts[foundLineNo - i],
      lineEnds[foundLineNo - i],
      mark.position - (lineStarts[foundLineNo] - lineStarts[foundLineNo - i]),
      maxLineLength
    );
    result = common.repeat(' ', options.indent) + padStart((mark.line - i + 1).toString(), lineNoLength) +
      ' | ' + line.str + '\n' + result;
  }

  line = getLine(mark.buffer, lineStarts[foundLineNo], lineEnds[foundLineNo], mark.position, maxLineLength);
  result += common.repeat(' ', options.indent) + padStart((mark.line + 1).toString(), lineNoLength) +
    ' | ' + line.str + '\n';
  result += common.repeat('-', options.indent + lineNoLength + 3 + line.pos) + '^' + '\n';

  for (i = 1; i <= options.linesAfter; i++) {
    if (foundLineNo + i >= lineEnds.length) break;
    line = getLine(
      mark.buffer,
      lineStarts[foundLineNo + i],
      lineEnds[foundLineNo + i],
      mark.position - (lineStarts[foundLineNo] - lineStarts[foundLineNo + i]),
      maxLineLength
    );
    result += common.repeat(' ', options.indent) + padStart((mark.line + i + 1).toString(), lineNoLength) +
      ' | ' + line.str + '\n';
  }

  return result.replace(/\n$/, '');
}


module.exports = makeSnippet;


/***/ }),

/***/ 57354:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var YAMLException = __webpack_require__(74737);

var TYPE_CONSTRUCTOR_OPTIONS = [
  'kind',
  'multi',
  'resolve',
  'construct',
  'instanceOf',
  'predicate',
  'represent',
  'representName',
  'defaultStyle',
  'styleAliases'
];

var YAML_NODE_KINDS = [
  'scalar',
  'sequence',
  'mapping'
];

function compileStyleAliases(map) {
  var result = {};

  if (map !== null) {
    Object.keys(map).forEach(function (style) {
      map[style].forEach(function (alias) {
        result[String(alias)] = style;
      });
    });
  }

  return result;
}

function Type(tag, options) {
  options = options || {};

  Object.keys(options).forEach(function (name) {
    if (TYPE_CONSTRUCTOR_OPTIONS.indexOf(name) === -1) {
      throw new YAMLException('Unknown option "' + name + '" is met in definition of "' + tag + '" YAML type.');
    }
  });

  // TODO: Add tag format check.
  this.options       = options; // keep original options in case user wants to extend this type later
  this.tag           = tag;
  this.kind          = options['kind']          || null;
  this.resolve       = options['resolve']       || function () { return true; };
  this.construct     = options['construct']     || function (data) { return data; };
  this.instanceOf    = options['instanceOf']    || null;
  this.predicate     = options['predicate']     || null;
  this.represent     = options['represent']     || null;
  this.representName = options['representName'] || null;
  this.defaultStyle  = options['defaultStyle']  || null;
  this.multi         = options['multi']         || false;
  this.styleAliases  = compileStyleAliases(options['styleAliases'] || null);

  if (YAML_NODE_KINDS.indexOf(this.kind) === -1) {
    throw new YAMLException('Unknown kind "' + this.kind + '" is specified for "' + tag + '" YAML type.');
  }
}

module.exports = Type;


/***/ }),

/***/ 56627:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


/*eslint-disable no-bitwise*/


var Type = __webpack_require__(57354);


// [ 64, 65, 66 ] -> [ padding, CR, LF ]
var BASE64_MAP = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\n\r';


function resolveYamlBinary(data) {
  if (data === null) return false;

  var code, idx, bitlen = 0, max = data.length, map = BASE64_MAP;

  // Convert one by one.
  for (idx = 0; idx < max; idx++) {
    code = map.indexOf(data.charAt(idx));

    // Skip CR/LF
    if (code > 64) continue;

    // Fail on illegal characters
    if (code < 0) return false;

    bitlen += 6;
  }

  // If there are any bits left, source was corrupted
  return (bitlen % 8) === 0;
}

function constructYamlBinary(data) {
  var idx, tailbits,
      input = data.replace(/[\r\n=]/g, ''), // remove CR/LF & padding to simplify scan
      max = input.length,
      map = BASE64_MAP,
      bits = 0,
      result = [];

  // Collect by 6*4 bits (3 bytes)

  for (idx = 0; idx < max; idx++) {
    if ((idx % 4 === 0) && idx) {
      result.push((bits >> 16) & 0xFF);
      result.push((bits >> 8) & 0xFF);
      result.push(bits & 0xFF);
    }

    bits = (bits << 6) | map.indexOf(input.charAt(idx));
  }

  // Dump tail

  tailbits = (max % 4) * 6;

  if (tailbits === 0) {
    result.push((bits >> 16) & 0xFF);
    result.push((bits >> 8) & 0xFF);
    result.push(bits & 0xFF);
  } else if (tailbits === 18) {
    result.push((bits >> 10) & 0xFF);
    result.push((bits >> 2) & 0xFF);
  } else if (tailbits === 12) {
    result.push((bits >> 4) & 0xFF);
  }

  return new Uint8Array(result);
}

function representYamlBinary(object /*, style*/) {
  var result = '', bits = 0, idx, tail,
      max = object.length,
      map = BASE64_MAP;

  // Convert every three bytes to 4 ASCII characters.

  for (idx = 0; idx < max; idx++) {
    if ((idx % 3 === 0) && idx) {
      result += map[(bits >> 18) & 0x3F];
      result += map[(bits >> 12) & 0x3F];
      result += map[(bits >> 6) & 0x3F];
      result += map[bits & 0x3F];
    }

    bits = (bits << 8) + object[idx];
  }

  // Dump tail

  tail = max % 3;

  if (tail === 0) {
    result += map[(bits >> 18) & 0x3F];
    result += map[(bits >> 12) & 0x3F];
    result += map[(bits >> 6) & 0x3F];
    result += map[bits & 0x3F];
  } else if (tail === 2) {
    result += map[(bits >> 10) & 0x3F];
    result += map[(bits >> 4) & 0x3F];
    result += map[(bits << 2) & 0x3F];
    result += map[64];
  } else if (tail === 1) {
    result += map[(bits >> 2) & 0x3F];
    result += map[(bits << 4) & 0x3F];
    result += map[64];
    result += map[64];
  }

  return result;
}

function isBinary(obj) {
  return Object.prototype.toString.call(obj) ===  '[object Uint8Array]';
}

module.exports = new Type('tag:yaml.org,2002:binary', {
  kind: 'scalar',
  resolve: resolveYamlBinary,
  construct: constructYamlBinary,
  predicate: isBinary,
  represent: representYamlBinary
});


/***/ }),

/***/ 37138:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var Type = __webpack_require__(57354);

function resolveYamlBoolean(data) {
  if (data === null) return false;

  var max = data.length;

  return (max === 4 && (data === 'true' || data === 'True' || data === 'TRUE')) ||
         (max === 5 && (data === 'false' || data === 'False' || data === 'FALSE'));
}

function constructYamlBoolean(data) {
  return data === 'true' ||
         data === 'True' ||
         data === 'TRUE';
}

function isBoolean(object) {
  return Object.prototype.toString.call(object) === '[object Boolean]';
}

module.exports = new Type('tag:yaml.org,2002:bool', {
  kind: 'scalar',
  resolve: resolveYamlBoolean,
  construct: constructYamlBoolean,
  predicate: isBoolean,
  represent: {
    lowercase: function (object) { return object ? 'true' : 'false'; },
    uppercase: function (object) { return object ? 'TRUE' : 'FALSE'; },
    camelcase: function (object) { return object ? 'True' : 'False'; }
  },
  defaultStyle: 'lowercase'
});


/***/ }),

/***/ 21468:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var common = __webpack_require__(22381);
var Type   = __webpack_require__(57354);

var YAML_FLOAT_PATTERN = new RegExp(
  // 2.5e4, 2.5 and integers
  '^(?:[-+]?(?:[0-9][0-9_]*)(?:\\.[0-9_]*)?(?:[eE][-+]?[0-9]+)?' +
  // .2e4, .2
  // special case, seems not from spec
  '|\\.[0-9_]+(?:[eE][-+]?[0-9]+)?' +
  // .inf
  '|[-+]?\\.(?:inf|Inf|INF)' +
  // .nan
  '|\\.(?:nan|NaN|NAN))$');

function resolveYamlFloat(data) {
  if (data === null) return false;

  if (!YAML_FLOAT_PATTERN.test(data) ||
      // Quick hack to not allow integers end with `_`
      // Probably should update regexp & check speed
      data[data.length - 1] === '_') {
    return false;
  }

  return true;
}

function constructYamlFloat(data) {
  var value, sign;

  value  = data.replace(/_/g, '').toLowerCase();
  sign   = value[0] === '-' ? -1 : 1;

  if ('+-'.indexOf(value[0]) >= 0) {
    value = value.slice(1);
  }

  if (value === '.inf') {
    return (sign === 1) ? Number.POSITIVE_INFINITY : Number.NEGATIVE_INFINITY;

  } else if (value === '.nan') {
    return NaN;
  }
  return sign * parseFloat(value, 10);
}


var SCIENTIFIC_WITHOUT_DOT = /^[-+]?[0-9]+e/;

function representYamlFloat(object, style) {
  var res;

  if (isNaN(object)) {
    switch (style) {
      case 'lowercase': return '.nan';
      case 'uppercase': return '.NAN';
      case 'camelcase': return '.NaN';
    }
  } else if (Number.POSITIVE_INFINITY === object) {
    switch (style) {
      case 'lowercase': return '.inf';
      case 'uppercase': return '.INF';
      case 'camelcase': return '.Inf';
    }
  } else if (Number.NEGATIVE_INFINITY === object) {
    switch (style) {
      case 'lowercase': return '-.inf';
      case 'uppercase': return '-.INF';
      case 'camelcase': return '-.Inf';
    }
  } else if (common.isNegativeZero(object)) {
    return '-0.0';
  }

  res = object.toString(10);

  // JS stringifier can build scientific format without dots: 5e-100,
  // while YAML requres dot: 5.e-100. Fix it with simple hack

  return SCIENTIFIC_WITHOUT_DOT.test(res) ? res.replace('e', '.e') : res;
}

function isFloat(object) {
  return (Object.prototype.toString.call(object) === '[object Number]') &&
         (object % 1 !== 0 || common.isNegativeZero(object));
}

module.exports = new Type('tag:yaml.org,2002:float', {
  kind: 'scalar',
  resolve: resolveYamlFloat,
  construct: constructYamlFloat,
  predicate: isFloat,
  represent: representYamlFloat,
  defaultStyle: 'lowercase'
});


/***/ }),

/***/ 34115:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var common = __webpack_require__(22381);
var Type   = __webpack_require__(57354);

function isHexCode(c) {
  return ((0x30/* 0 */ <= c) && (c <= 0x39/* 9 */)) ||
         ((0x41/* A */ <= c) && (c <= 0x46/* F */)) ||
         ((0x61/* a */ <= c) && (c <= 0x66/* f */));
}

function isOctCode(c) {
  return ((0x30/* 0 */ <= c) && (c <= 0x37/* 7 */));
}

function isDecCode(c) {
  return ((0x30/* 0 */ <= c) && (c <= 0x39/* 9 */));
}

function resolveYamlInteger(data) {
  if (data === null) return false;

  var max = data.length,
      index = 0,
      hasDigits = false,
      ch;

  if (!max) return false;

  ch = data[index];

  // sign
  if (ch === '-' || ch === '+') {
    ch = data[++index];
  }

  if (ch === '0') {
    // 0
    if (index + 1 === max) return true;
    ch = data[++index];

    // base 2, base 8, base 16

    if (ch === 'b') {
      // base 2
      index++;

      for (; index < max; index++) {
        ch = data[index];
        if (ch === '_') continue;
        if (ch !== '0' && ch !== '1') return false;
        hasDigits = true;
      }
      return hasDigits && ch !== '_';
    }


    if (ch === 'x') {
      // base 16
      index++;

      for (; index < max; index++) {
        ch = data[index];
        if (ch === '_') continue;
        if (!isHexCode(data.charCodeAt(index))) return false;
        hasDigits = true;
      }
      return hasDigits && ch !== '_';
    }


    if (ch === 'o') {
      // base 8
      index++;

      for (; index < max; index++) {
        ch = data[index];
        if (ch === '_') continue;
        if (!isOctCode(data.charCodeAt(index))) return false;
        hasDigits = true;
      }
      return hasDigits && ch !== '_';
    }
  }

  // base 10 (except 0)

  // value should not start with `_`;
  if (ch === '_') return false;

  for (; index < max; index++) {
    ch = data[index];
    if (ch === '_') continue;
    if (!isDecCode(data.charCodeAt(index))) {
      return false;
    }
    hasDigits = true;
  }

  // Should have digits and should not end with `_`
  if (!hasDigits || ch === '_') return false;

  return true;
}

function constructYamlInteger(data) {
  var value = data, sign = 1, ch;

  if (value.indexOf('_') !== -1) {
    value = value.replace(/_/g, '');
  }

  ch = value[0];

  if (ch === '-' || ch === '+') {
    if (ch === '-') sign = -1;
    value = value.slice(1);
    ch = value[0];
  }

  if (value === '0') return 0;

  if (ch === '0') {
    if (value[1] === 'b') return sign * parseInt(value.slice(2), 2);
    if (value[1] === 'x') return sign * parseInt(value.slice(2), 16);
    if (value[1] === 'o') return sign * parseInt(value.slice(2), 8);
  }

  return sign * parseInt(value, 10);
}

function isInteger(object) {
  return (Object.prototype.toString.call(object)) === '[object Number]' &&
         (object % 1 === 0 && !common.isNegativeZero(object));
}

module.exports = new Type('tag:yaml.org,2002:int', {
  kind: 'scalar',
  resolve: resolveYamlInteger,
  construct: constructYamlInteger,
  predicate: isInteger,
  represent: {
    binary:      function (obj) { return obj >= 0 ? '0b' + obj.toString(2) : '-0b' + obj.toString(2).slice(1); },
    octal:       function (obj) { return obj >= 0 ? '0o'  + obj.toString(8) : '-0o'  + obj.toString(8).slice(1); },
    decimal:     function (obj) { return obj.toString(10); },
    /* eslint-disable max-len */
    hexadecimal: function (obj) { return obj >= 0 ? '0x' + obj.toString(16).toUpperCase() :  '-0x' + obj.toString(16).toUpperCase().slice(1); }
  },
  defaultStyle: 'decimal',
  styleAliases: {
    binary:      [ 2,  'bin' ],
    octal:       [ 8,  'oct' ],
    decimal:     [ 10, 'dec' ],
    hexadecimal: [ 16, 'hex' ]
  }
});


/***/ }),

/***/ 84775:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var Type = __webpack_require__(57354);

module.exports = new Type('tag:yaml.org,2002:map', {
  kind: 'mapping',
  construct: function (data) { return data !== null ? data : {}; }
});


/***/ }),

/***/ 2017:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var Type = __webpack_require__(57354);

function resolveYamlMerge(data) {
  return data === '<<' || data === null;
}

module.exports = new Type('tag:yaml.org,2002:merge', {
  kind: 'scalar',
  resolve: resolveYamlMerge
});


/***/ }),

/***/ 61539:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var Type = __webpack_require__(57354);

function resolveYamlNull(data) {
  if (data === null) return true;

  var max = data.length;

  return (max === 1 && data === '~') ||
         (max === 4 && (data === 'null' || data === 'Null' || data === 'NULL'));
}

function constructYamlNull() {
  return null;
}

function isNull(object) {
  return object === null;
}

module.exports = new Type('tag:yaml.org,2002:null', {
  kind: 'scalar',
  resolve: resolveYamlNull,
  construct: constructYamlNull,
  predicate: isNull,
  represent: {
    canonical: function () { return '~';    },
    lowercase: function () { return 'null'; },
    uppercase: function () { return 'NULL'; },
    camelcase: function () { return 'Null'; },
    empty:     function () { return '';     }
  },
  defaultStyle: 'lowercase'
});


/***/ }),

/***/ 43279:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var Type = __webpack_require__(57354);

var _hasOwnProperty = Object.prototype.hasOwnProperty;
var _toString       = Object.prototype.toString;

function resolveYamlOmap(data) {
  if (data === null) return true;

  var objectKeys = [], index, length, pair, pairKey, pairHasKey,
      object = data;

  for (index = 0, length = object.length; index < length; index += 1) {
    pair = object[index];
    pairHasKey = false;

    if (_toString.call(pair) !== '[object Object]') return false;

    for (pairKey in pair) {
      if (_hasOwnProperty.call(pair, pairKey)) {
        if (!pairHasKey) pairHasKey = true;
        else return false;
      }
    }

    if (!pairHasKey) return false;

    if (objectKeys.indexOf(pairKey) === -1) objectKeys.push(pairKey);
    else return false;
  }

  return true;
}

function constructYamlOmap(data) {
  return data !== null ? data : [];
}

module.exports = new Type('tag:yaml.org,2002:omap', {
  kind: 'sequence',
  resolve: resolveYamlOmap,
  construct: constructYamlOmap
});


/***/ }),

/***/ 35091:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var Type = __webpack_require__(57354);

var _toString = Object.prototype.toString;

function resolveYamlPairs(data) {
  if (data === null) return true;

  var index, length, pair, keys, result,
      object = data;

  result = new Array(object.length);

  for (index = 0, length = object.length; index < length; index += 1) {
    pair = object[index];

    if (_toString.call(pair) !== '[object Object]') return false;

    keys = Object.keys(pair);

    if (keys.length !== 1) return false;

    result[index] = [ keys[0], pair[keys[0]] ];
  }

  return true;
}

function constructYamlPairs(data) {
  if (data === null) return [];

  var index, length, pair, keys, result,
      object = data;

  result = new Array(object.length);

  for (index = 0, length = object.length; index < length; index += 1) {
    pair = object[index];

    keys = Object.keys(pair);

    result[index] = [ keys[0], pair[keys[0]] ];
  }

  return result;
}

module.exports = new Type('tag:yaml.org,2002:pairs', {
  kind: 'sequence',
  resolve: resolveYamlPairs,
  construct: constructYamlPairs
});


/***/ }),

/***/ 8585:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var Type = __webpack_require__(57354);

module.exports = new Type('tag:yaml.org,2002:seq', {
  kind: 'sequence',
  construct: function (data) { return data !== null ? data : []; }
});


/***/ }),

/***/ 47049:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var Type = __webpack_require__(57354);

var _hasOwnProperty = Object.prototype.hasOwnProperty;

function resolveYamlSet(data) {
  if (data === null) return true;

  var key, object = data;

  for (key in object) {
    if (_hasOwnProperty.call(object, key)) {
      if (object[key] !== null) return false;
    }
  }

  return true;
}

function constructYamlSet(data) {
  return data !== null ? data : {};
}

module.exports = new Type('tag:yaml.org,2002:set', {
  kind: 'mapping',
  resolve: resolveYamlSet,
  construct: constructYamlSet
});


/***/ }),

/***/ 59520:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var Type = __webpack_require__(57354);

module.exports = new Type('tag:yaml.org,2002:str', {
  kind: 'scalar',
  construct: function (data) { return data !== null ? data : ''; }
});


/***/ }),

/***/ 82411:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var Type = __webpack_require__(57354);

var YAML_DATE_REGEXP = new RegExp(
  '^([0-9][0-9][0-9][0-9])'          + // [1] year
  '-([0-9][0-9])'                    + // [2] month
  '-([0-9][0-9])$');                   // [3] day

var YAML_TIMESTAMP_REGEXP = new RegExp(
  '^([0-9][0-9][0-9][0-9])'          + // [1] year
  '-([0-9][0-9]?)'                   + // [2] month
  '-([0-9][0-9]?)'                   + // [3] day
  '(?:[Tt]|[ \\t]+)'                 + // ...
  '([0-9][0-9]?)'                    + // [4] hour
  ':([0-9][0-9])'                    + // [5] minute
  ':([0-9][0-9])'                    + // [6] second
  '(?:\\.([0-9]*))?'                 + // [7] fraction
  '(?:[ \\t]*(Z|([-+])([0-9][0-9]?)' + // [8] tz [9] tz_sign [10] tz_hour
  '(?::([0-9][0-9]))?))?$');           // [11] tz_minute

function resolveYamlTimestamp(data) {
  if (data === null) return false;
  if (YAML_DATE_REGEXP.exec(data) !== null) return true;
  if (YAML_TIMESTAMP_REGEXP.exec(data) !== null) return true;
  return false;
}

function constructYamlTimestamp(data) {
  var match, year, month, day, hour, minute, second, fraction = 0,
      delta = null, tz_hour, tz_minute, date;

  match = YAML_DATE_REGEXP.exec(data);
  if (match === null) match = YAML_TIMESTAMP_REGEXP.exec(data);

  if (match === null) throw new Error('Date resolve error');

  // match: [1] year [2] month [3] day

  year = +(match[1]);
  month = +(match[2]) - 1; // JS month starts with 0
  day = +(match[3]);

  if (!match[4]) { // no hour
    return new Date(Date.UTC(year, month, day));
  }

  // match: [4] hour [5] minute [6] second [7] fraction

  hour = +(match[4]);
  minute = +(match[5]);
  second = +(match[6]);

  if (match[7]) {
    fraction = match[7].slice(0, 3);
    while (fraction.length < 3) { // milli-seconds
      fraction += '0';
    }
    fraction = +fraction;
  }

  // match: [8] tz [9] tz_sign [10] tz_hour [11] tz_minute

  if (match[9]) {
    tz_hour = +(match[10]);
    tz_minute = +(match[11] || 0);
    delta = (tz_hour * 60 + tz_minute) * 60000; // delta in mili-seconds
    if (match[9] === '-') delta = -delta;
  }

  date = new Date(Date.UTC(year, month, day, hour, minute, second, fraction));

  if (delta) date.setTime(date.getTime() - delta);

  return date;
}

function representYamlTimestamp(object /*, style*/) {
  return object.toISOString();
}

module.exports = new Type('tag:yaml.org,2002:timestamp', {
  kind: 'scalar',
  resolve: resolveYamlTimestamp,
  construct: constructYamlTimestamp,
  instanceOf: Date,
  represent: representYamlTimestamp
});


/***/ }),

/***/ 20283:
/***/ ((module) => {

"use strict";


var traverse = module.exports = function (schema, opts, cb) {
  // Legacy support for v0.3.1 and earlier.
  if (typeof opts == 'function') {
    cb = opts;
    opts = {};
  }

  cb = opts.cb || cb;
  var pre = (typeof cb == 'function') ? cb : cb.pre || function() {};
  var post = cb.post || function() {};

  _traverse(opts, pre, post, schema, '', schema);
};


traverse.keywords = {
  additionalItems: true,
  items: true,
  contains: true,
  additionalProperties: true,
  propertyNames: true,
  not: true,
  if: true,
  then: true,
  else: true
};

traverse.arrayKeywords = {
  items: true,
  allOf: true,
  anyOf: true,
  oneOf: true
};

traverse.propsKeywords = {
  $defs: true,
  definitions: true,
  properties: true,
  patternProperties: true,
  dependencies: true
};

traverse.skipKeywords = {
  default: true,
  enum: true,
  const: true,
  required: true,
  maximum: true,
  minimum: true,
  exclusiveMaximum: true,
  exclusiveMinimum: true,
  multipleOf: true,
  maxLength: true,
  minLength: true,
  pattern: true,
  format: true,
  maxItems: true,
  minItems: true,
  uniqueItems: true,
  maxProperties: true,
  minProperties: true
};


function _traverse(opts, pre, post, schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex) {
  if (schema && typeof schema == 'object' && !Array.isArray(schema)) {
    pre(schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex);
    for (var key in schema) {
      var sch = schema[key];
      if (Array.isArray(sch)) {
        if (key in traverse.arrayKeywords) {
          for (var i=0; i<sch.length; i++)
            _traverse(opts, pre, post, sch[i], jsonPtr + '/' + key + '/' + i, rootSchema, jsonPtr, key, schema, i);
        }
      } else if (key in traverse.propsKeywords) {
        if (sch && typeof sch == 'object') {
          for (var prop in sch)
            _traverse(opts, pre, post, sch[prop], jsonPtr + '/' + key + '/' + escapeJsonPtr(prop), rootSchema, jsonPtr, key, schema, prop);
        }
      } else if (key in traverse.keywords || (opts.allKeys && !(key in traverse.skipKeywords))) {
        _traverse(opts, pre, post, sch, jsonPtr + '/' + key, rootSchema, jsonPtr, key, schema);
      }
    }
    post(schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex);
  }
}


function escapeJsonPtr(str) {
  return str.replace(/~/g, '~0').replace(/\//g, '~1');
}


/***/ }),

/***/ 12311:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const parse = __webpack_require__(55491)
const stringify = __webpack_require__(4197)

const JSON5 = {
    parse,
    stringify,
}

module.exports = JSON5


/***/ }),

/***/ 55491:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const util = __webpack_require__(6626)

let source
let parseState
let stack
let pos
let line
let column
let token
let key
let root

module.exports = function parse (text, reviver) {
    source = String(text)
    parseState = 'start'
    stack = []
    pos = 0
    line = 1
    column = 0
    token = undefined
    key = undefined
    root = undefined

    do {
        token = lex()

        // This code is unreachable.
        // if (!parseStates[parseState]) {
        //     throw invalidParseState()
        // }

        parseStates[parseState]()
    } while (token.type !== 'eof')

    if (typeof reviver === 'function') {
        return internalize({'': root}, '', reviver)
    }

    return root
}

function internalize (holder, name, reviver) {
    const value = holder[name]
    if (value != null && typeof value === 'object') {
        if (Array.isArray(value)) {
            for (let i = 0; i < value.length; i++) {
                const key = String(i)
                const replacement = internalize(value, key, reviver)
                if (replacement === undefined) {
                    delete value[key]
                } else {
                    Object.defineProperty(value, key, {
                        value: replacement,
                        writable: true,
                        enumerable: true,
                        configurable: true,
                    })
                }
            }
        } else {
            for (const key in value) {
                const replacement = internalize(value, key, reviver)
                if (replacement === undefined) {
                    delete value[key]
                } else {
                    Object.defineProperty(value, key, {
                        value: replacement,
                        writable: true,
                        enumerable: true,
                        configurable: true,
                    })
                }
            }
        }
    }

    return reviver.call(holder, name, value)
}

let lexState
let buffer
let doubleQuote
let sign
let c

function lex () {
    lexState = 'default'
    buffer = ''
    doubleQuote = false
    sign = 1

    for (;;) {
        c = peek()

        // This code is unreachable.
        // if (!lexStates[lexState]) {
        //     throw invalidLexState(lexState)
        // }

        const token = lexStates[lexState]()
        if (token) {
            return token
        }
    }
}

function peek () {
    if (source[pos]) {
        return String.fromCodePoint(source.codePointAt(pos))
    }
}

function read () {
    const c = peek()

    if (c === '\n') {
        line++
        column = 0
    } else if (c) {
        column += c.length
    } else {
        column++
    }

    if (c) {
        pos += c.length
    }

    return c
}

const lexStates = {
    default () {
        switch (c) {
        case '\t':
        case '\v':
        case '\f':
        case ' ':
        case '\u00A0':
        case '\uFEFF':
        case '\n':
        case '\r':
        case '\u2028':
        case '\u2029':
            read()
            return

        case '/':
            read()
            lexState = 'comment'
            return

        case undefined:
            read()
            return newToken('eof')
        }

        if (util.isSpaceSeparator(c)) {
            read()
            return
        }

        // This code is unreachable.
        // if (!lexStates[parseState]) {
        //     throw invalidLexState(parseState)
        // }

        return lexStates[parseState]()
    },

    comment () {
        switch (c) {
        case '*':
            read()
            lexState = 'multiLineComment'
            return

        case '/':
            read()
            lexState = 'singleLineComment'
            return
        }

        throw invalidChar(read())
    },

    multiLineComment () {
        switch (c) {
        case '*':
            read()
            lexState = 'multiLineCommentAsterisk'
            return

        case undefined:
            throw invalidChar(read())
        }

        read()
    },

    multiLineCommentAsterisk () {
        switch (c) {
        case '*':
            read()
            return

        case '/':
            read()
            lexState = 'default'
            return

        case undefined:
            throw invalidChar(read())
        }

        read()
        lexState = 'multiLineComment'
    },

    singleLineComment () {
        switch (c) {
        case '\n':
        case '\r':
        case '\u2028':
        case '\u2029':
            read()
            lexState = 'default'
            return

        case undefined:
            read()
            return newToken('eof')
        }

        read()
    },

    value () {
        switch (c) {
        case '{':
        case '[':
            return newToken('punctuator', read())

        case 'n':
            read()
            literal('ull')
            return newToken('null', null)

        case 't':
            read()
            literal('rue')
            return newToken('boolean', true)

        case 'f':
            read()
            literal('alse')
            return newToken('boolean', false)

        case '-':
        case '+':
            if (read() === '-') {
                sign = -1
            }

            lexState = 'sign'
            return

        case '.':
            buffer = read()
            lexState = 'decimalPointLeading'
            return

        case '0':
            buffer = read()
            lexState = 'zero'
            return

        case '1':
        case '2':
        case '3':
        case '4':
        case '5':
        case '6':
        case '7':
        case '8':
        case '9':
            buffer = read()
            lexState = 'decimalInteger'
            return

        case 'I':
            read()
            literal('nfinity')
            return newToken('numeric', Infinity)

        case 'N':
            read()
            literal('aN')
            return newToken('numeric', NaN)

        case '"':
        case "'":
            doubleQuote = (read() === '"')
            buffer = ''
            lexState = 'string'
            return
        }

        throw invalidChar(read())
    },

    identifierNameStartEscape () {
        if (c !== 'u') {
            throw invalidChar(read())
        }

        read()
        const u = unicodeEscape()
        switch (u) {
        case '$':
        case '_':
            break

        default:
            if (!util.isIdStartChar(u)) {
                throw invalidIdentifier()
            }

            break
        }

        buffer += u
        lexState = 'identifierName'
    },

    identifierName () {
        switch (c) {
        case '$':
        case '_':
        case '\u200C':
        case '\u200D':
            buffer += read()
            return

        case '\\':
            read()
            lexState = 'identifierNameEscape'
            return
        }

        if (util.isIdContinueChar(c)) {
            buffer += read()
            return
        }

        return newToken('identifier', buffer)
    },

    identifierNameEscape () {
        if (c !== 'u') {
            throw invalidChar(read())
        }

        read()
        const u = unicodeEscape()
        switch (u) {
        case '$':
        case '_':
        case '\u200C':
        case '\u200D':
            break

        default:
            if (!util.isIdContinueChar(u)) {
                throw invalidIdentifier()
            }

            break
        }

        buffer += u
        lexState = 'identifierName'
    },

    sign () {
        switch (c) {
        case '.':
            buffer = read()
            lexState = 'decimalPointLeading'
            return

        case '0':
            buffer = read()
            lexState = 'zero'
            return

        case '1':
        case '2':
        case '3':
        case '4':
        case '5':
        case '6':
        case '7':
        case '8':
        case '9':
            buffer = read()
            lexState = 'decimalInteger'
            return

        case 'I':
            read()
            literal('nfinity')
            return newToken('numeric', sign * Infinity)

        case 'N':
            read()
            literal('aN')
            return newToken('numeric', NaN)
        }

        throw invalidChar(read())
    },

    zero () {
        switch (c) {
        case '.':
            buffer += read()
            lexState = 'decimalPoint'
            return

        case 'e':
        case 'E':
            buffer += read()
            lexState = 'decimalExponent'
            return

        case 'x':
        case 'X':
            buffer += read()
            lexState = 'hexadecimal'
            return
        }

        return newToken('numeric', sign * 0)
    },

    decimalInteger () {
        switch (c) {
        case '.':
            buffer += read()
            lexState = 'decimalPoint'
            return

        case 'e':
        case 'E':
            buffer += read()
            lexState = 'decimalExponent'
            return
        }

        if (util.isDigit(c)) {
            buffer += read()
            return
        }

        return newToken('numeric', sign * Number(buffer))
    },

    decimalPointLeading () {
        if (util.isDigit(c)) {
            buffer += read()
            lexState = 'decimalFraction'
            return
        }

        throw invalidChar(read())
    },

    decimalPoint () {
        switch (c) {
        case 'e':
        case 'E':
            buffer += read()
            lexState = 'decimalExponent'
            return
        }

        if (util.isDigit(c)) {
            buffer += read()
            lexState = 'decimalFraction'
            return
        }

        return newToken('numeric', sign * Number(buffer))
    },

    decimalFraction () {
        switch (c) {
        case 'e':
        case 'E':
            buffer += read()
            lexState = 'decimalExponent'
            return
        }

        if (util.isDigit(c)) {
            buffer += read()
            return
        }

        return newToken('numeric', sign * Number(buffer))
    },

    decimalExponent () {
        switch (c) {
        case '+':
        case '-':
            buffer += read()
            lexState = 'decimalExponentSign'
            return
        }

        if (util.isDigit(c)) {
            buffer += read()
            lexState = 'decimalExponentInteger'
            return
        }

        throw invalidChar(read())
    },

    decimalExponentSign () {
        if (util.isDigit(c)) {
            buffer += read()
            lexState = 'decimalExponentInteger'
            return
        }

        throw invalidChar(read())
    },

    decimalExponentInteger () {
        if (util.isDigit(c)) {
            buffer += read()
            return
        }

        return newToken('numeric', sign * Number(buffer))
    },

    hexadecimal () {
        if (util.isHexDigit(c)) {
            buffer += read()
            lexState = 'hexadecimalInteger'
            return
        }

        throw invalidChar(read())
    },

    hexadecimalInteger () {
        if (util.isHexDigit(c)) {
            buffer += read()
            return
        }

        return newToken('numeric', sign * Number(buffer))
    },

    string () {
        switch (c) {
        case '\\':
            read()
            buffer += escape()
            return

        case '"':
            if (doubleQuote) {
                read()
                return newToken('string', buffer)
            }

            buffer += read()
            return

        case "'":
            if (!doubleQuote) {
                read()
                return newToken('string', buffer)
            }

            buffer += read()
            return

        case '\n':
        case '\r':
            throw invalidChar(read())

        case '\u2028':
        case '\u2029':
            separatorChar(c)
            break

        case undefined:
            throw invalidChar(read())
        }

        buffer += read()
    },

    start () {
        switch (c) {
        case '{':
        case '[':
            return newToken('punctuator', read())

        // This code is unreachable since the default lexState handles eof.
        // case undefined:
        //     return newToken('eof')
        }

        lexState = 'value'
    },

    beforePropertyName () {
        switch (c) {
        case '$':
        case '_':
            buffer = read()
            lexState = 'identifierName'
            return

        case '\\':
            read()
            lexState = 'identifierNameStartEscape'
            return

        case '}':
            return newToken('punctuator', read())

        case '"':
        case "'":
            doubleQuote = (read() === '"')
            lexState = 'string'
            return
        }

        if (util.isIdStartChar(c)) {
            buffer += read()
            lexState = 'identifierName'
            return
        }

        throw invalidChar(read())
    },

    afterPropertyName () {
        if (c === ':') {
            return newToken('punctuator', read())
        }

        throw invalidChar(read())
    },

    beforePropertyValue () {
        lexState = 'value'
    },

    afterPropertyValue () {
        switch (c) {
        case ',':
        case '}':
            return newToken('punctuator', read())
        }

        throw invalidChar(read())
    },

    beforeArrayValue () {
        if (c === ']') {
            return newToken('punctuator', read())
        }

        lexState = 'value'
    },

    afterArrayValue () {
        switch (c) {
        case ',':
        case ']':
            return newToken('punctuator', read())
        }

        throw invalidChar(read())
    },

    end () {
        // This code is unreachable since it's handled by the default lexState.
        // if (c === undefined) {
        //     read()
        //     return newToken('eof')
        // }

        throw invalidChar(read())
    },
}

function newToken (type, value) {
    return {
        type,
        value,
        line,
        column,
    }
}

function literal (s) {
    for (const c of s) {
        const p = peek()

        if (p !== c) {
            throw invalidChar(read())
        }

        read()
    }
}

function escape () {
    const c = peek()
    switch (c) {
    case 'b':
        read()
        return '\b'

    case 'f':
        read()
        return '\f'

    case 'n':
        read()
        return '\n'

    case 'r':
        read()
        return '\r'

    case 't':
        read()
        return '\t'

    case 'v':
        read()
        return '\v'

    case '0':
        read()
        if (util.isDigit(peek())) {
            throw invalidChar(read())
        }

        return '\0'

    case 'x':
        read()
        return hexEscape()

    case 'u':
        read()
        return unicodeEscape()

    case '\n':
    case '\u2028':
    case '\u2029':
        read()
        return ''

    case '\r':
        read()
        if (peek() === '\n') {
            read()
        }

        return ''

    case '1':
    case '2':
    case '3':
    case '4':
    case '5':
    case '6':
    case '7':
    case '8':
    case '9':
        throw invalidChar(read())

    case undefined:
        throw invalidChar(read())
    }

    return read()
}

function hexEscape () {
    let buffer = ''
    let c = peek()

    if (!util.isHexDigit(c)) {
        throw invalidChar(read())
    }

    buffer += read()

    c = peek()
    if (!util.isHexDigit(c)) {
        throw invalidChar(read())
    }

    buffer += read()

    return String.fromCodePoint(parseInt(buffer, 16))
}

function unicodeEscape () {
    let buffer = ''
    let count = 4

    while (count-- > 0) {
        const c = peek()
        if (!util.isHexDigit(c)) {
            throw invalidChar(read())
        }

        buffer += read()
    }

    return String.fromCodePoint(parseInt(buffer, 16))
}

const parseStates = {
    start () {
        if (token.type === 'eof') {
            throw invalidEOF()
        }

        push()
    },

    beforePropertyName () {
        switch (token.type) {
        case 'identifier':
        case 'string':
            key = token.value
            parseState = 'afterPropertyName'
            return

        case 'punctuator':
            // This code is unreachable since it's handled by the lexState.
            // if (token.value !== '}') {
            //     throw invalidToken()
            // }

            pop()
            return

        case 'eof':
            throw invalidEOF()
        }

        // This code is unreachable since it's handled by the lexState.
        // throw invalidToken()
    },

    afterPropertyName () {
        // This code is unreachable since it's handled by the lexState.
        // if (token.type !== 'punctuator' || token.value !== ':') {
        //     throw invalidToken()
        // }

        if (token.type === 'eof') {
            throw invalidEOF()
        }

        parseState = 'beforePropertyValue'
    },

    beforePropertyValue () {
        if (token.type === 'eof') {
            throw invalidEOF()
        }

        push()
    },

    beforeArrayValue () {
        if (token.type === 'eof') {
            throw invalidEOF()
        }

        if (token.type === 'punctuator' && token.value === ']') {
            pop()
            return
        }

        push()
    },

    afterPropertyValue () {
        // This code is unreachable since it's handled by the lexState.
        // if (token.type !== 'punctuator') {
        //     throw invalidToken()
        // }

        if (token.type === 'eof') {
            throw invalidEOF()
        }

        switch (token.value) {
        case ',':
            parseState = 'beforePropertyName'
            return

        case '}':
            pop()
        }

        // This code is unreachable since it's handled by the lexState.
        // throw invalidToken()
    },

    afterArrayValue () {
        // This code is unreachable since it's handled by the lexState.
        // if (token.type !== 'punctuator') {
        //     throw invalidToken()
        // }

        if (token.type === 'eof') {
            throw invalidEOF()
        }

        switch (token.value) {
        case ',':
            parseState = 'beforeArrayValue'
            return

        case ']':
            pop()
        }

        // This code is unreachable since it's handled by the lexState.
        // throw invalidToken()
    },

    end () {
        // This code is unreachable since it's handled by the lexState.
        // if (token.type !== 'eof') {
        //     throw invalidToken()
        // }
    },
}

function push () {
    let value

    switch (token.type) {
    case 'punctuator':
        switch (token.value) {
        case '{':
            value = {}
            break

        case '[':
            value = []
            break
        }

        break

    case 'null':
    case 'boolean':
    case 'numeric':
    case 'string':
        value = token.value
        break

    // This code is unreachable.
    // default:
    //     throw invalidToken()
    }

    if (root === undefined) {
        root = value
    } else {
        const parent = stack[stack.length - 1]
        if (Array.isArray(parent)) {
            parent.push(value)
        } else {
            Object.defineProperty(parent, key, {
                value,
                writable: true,
                enumerable: true,
                configurable: true,
            })
        }
    }

    if (value !== null && typeof value === 'object') {
        stack.push(value)

        if (Array.isArray(value)) {
            parseState = 'beforeArrayValue'
        } else {
            parseState = 'beforePropertyName'
        }
    } else {
        const current = stack[stack.length - 1]
        if (current == null) {
            parseState = 'end'
        } else if (Array.isArray(current)) {
            parseState = 'afterArrayValue'
        } else {
            parseState = 'afterPropertyValue'
        }
    }
}

function pop () {
    stack.pop()

    const current = stack[stack.length - 1]
    if (current == null) {
        parseState = 'end'
    } else if (Array.isArray(current)) {
        parseState = 'afterArrayValue'
    } else {
        parseState = 'afterPropertyValue'
    }
}

// This code is unreachable.
// function invalidParseState () {
//     return new Error(`JSON5: invalid parse state '${parseState}'`)
// }

// This code is unreachable.
// function invalidLexState (state) {
//     return new Error(`JSON5: invalid lex state '${state}'`)
// }

function invalidChar (c) {
    if (c === undefined) {
        return syntaxError(`JSON5: invalid end of input at ${line}:${column}`)
    }

    return syntaxError(`JSON5: invalid character '${formatChar(c)}' at ${line}:${column}`)
}

function invalidEOF () {
    return syntaxError(`JSON5: invalid end of input at ${line}:${column}`)
}

// This code is unreachable.
// function invalidToken () {
//     if (token.type === 'eof') {
//         return syntaxError(`JSON5: invalid end of input at ${line}:${column}`)
//     }

//     const c = String.fromCodePoint(token.value.codePointAt(0))
//     return syntaxError(`JSON5: invalid character '${formatChar(c)}' at ${line}:${column}`)
// }

function invalidIdentifier () {
    column -= 5
    return syntaxError(`JSON5: invalid identifier character at ${line}:${column}`)
}

function separatorChar (c) {
    console.warn(`JSON5: '${formatChar(c)}' in strings is not valid ECMAScript; consider escaping`)
}

function formatChar (c) {
    const replacements = {
        "'": "\\'",
        '"': '\\"',
        '\\': '\\\\',
        '\b': '\\b',
        '\f': '\\f',
        '\n': '\\n',
        '\r': '\\r',
        '\t': '\\t',
        '\v': '\\v',
        '\0': '\\0',
        '\u2028': '\\u2028',
        '\u2029': '\\u2029',
    }

    if (replacements[c]) {
        return replacements[c]
    }

    if (c < ' ') {
        const hexString = c.charCodeAt(0).toString(16)
        return '\\x' + ('00' + hexString).substring(hexString.length)
    }

    return c
}

function syntaxError (message) {
    const err = new SyntaxError(message)
    err.lineNumber = line
    err.columnNumber = column
    return err
}


/***/ }),

/***/ 4197:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const util = __webpack_require__(6626)

module.exports = function stringify (value, replacer, space) {
    const stack = []
    let indent = ''
    let propertyList
    let replacerFunc
    let gap = ''
    let quote

    if (
        replacer != null &&
        typeof replacer === 'object' &&
        !Array.isArray(replacer)
    ) {
        space = replacer.space
        quote = replacer.quote
        replacer = replacer.replacer
    }

    if (typeof replacer === 'function') {
        replacerFunc = replacer
    } else if (Array.isArray(replacer)) {
        propertyList = []
        for (const v of replacer) {
            let item

            if (typeof v === 'string') {
                item = v
            } else if (
                typeof v === 'number' ||
                v instanceof String ||
                v instanceof Number
            ) {
                item = String(v)
            }

            if (item !== undefined && propertyList.indexOf(item) < 0) {
                propertyList.push(item)
            }
        }
    }

    if (space instanceof Number) {
        space = Number(space)
    } else if (space instanceof String) {
        space = String(space)
    }

    if (typeof space === 'number') {
        if (space > 0) {
            space = Math.min(10, Math.floor(space))
            gap = '          '.substr(0, space)
        }
    } else if (typeof space === 'string') {
        gap = space.substr(0, 10)
    }

    return serializeProperty('', {'': value})

    function serializeProperty (key, holder) {
        let value = holder[key]
        if (value != null) {
            if (typeof value.toJSON5 === 'function') {
                value = value.toJSON5(key)
            } else if (typeof value.toJSON === 'function') {
                value = value.toJSON(key)
            }
        }

        if (replacerFunc) {
            value = replacerFunc.call(holder, key, value)
        }

        if (value instanceof Number) {
            value = Number(value)
        } else if (value instanceof String) {
            value = String(value)
        } else if (value instanceof Boolean) {
            value = value.valueOf()
        }

        switch (value) {
        case null: return 'null'
        case true: return 'true'
        case false: return 'false'
        }

        if (typeof value === 'string') {
            return quoteString(value, false)
        }

        if (typeof value === 'number') {
            return String(value)
        }

        if (typeof value === 'object') {
            return Array.isArray(value) ? serializeArray(value) : serializeObject(value)
        }

        return undefined
    }

    function quoteString (value) {
        const quotes = {
            "'": 0.1,
            '"': 0.2,
        }

        const replacements = {
            "'": "\\'",
            '"': '\\"',
            '\\': '\\\\',
            '\b': '\\b',
            '\f': '\\f',
            '\n': '\\n',
            '\r': '\\r',
            '\t': '\\t',
            '\v': '\\v',
            '\0': '\\0',
            '\u2028': '\\u2028',
            '\u2029': '\\u2029',
        }

        let product = ''

        for (let i = 0; i < value.length; i++) {
            const c = value[i]
            switch (c) {
            case "'":
            case '"':
                quotes[c]++
                product += c
                continue

            case '\0':
                if (util.isDigit(value[i + 1])) {
                    product += '\\x00'
                    continue
                }
            }

            if (replacements[c]) {
                product += replacements[c]
                continue
            }

            if (c < ' ') {
                let hexString = c.charCodeAt(0).toString(16)
                product += '\\x' + ('00' + hexString).substring(hexString.length)
                continue
            }

            product += c
        }

        const quoteChar = quote || Object.keys(quotes).reduce((a, b) => (quotes[a] < quotes[b]) ? a : b)

        product = product.replace(new RegExp(quoteChar, 'g'), replacements[quoteChar])

        return quoteChar + product + quoteChar
    }

    function serializeObject (value) {
        if (stack.indexOf(value) >= 0) {
            throw TypeError('Converting circular structure to JSON5')
        }

        stack.push(value)

        let stepback = indent
        indent = indent + gap

        let keys = propertyList || Object.keys(value)
        let partial = []
        for (const key of keys) {
            const propertyString = serializeProperty(key, value)
            if (propertyString !== undefined) {
                let member = serializeKey(key) + ':'
                if (gap !== '') {
                    member += ' '
                }
                member += propertyString
                partial.push(member)
            }
        }

        let final
        if (partial.length === 0) {
            final = '{}'
        } else {
            let properties
            if (gap === '') {
                properties = partial.join(',')
                final = '{' + properties + '}'
            } else {
                let separator = ',\n' + indent
                properties = partial.join(separator)
                final = '{\n' + indent + properties + ',\n' + stepback + '}'
            }
        }

        stack.pop()
        indent = stepback
        return final
    }

    function serializeKey (key) {
        if (key.length === 0) {
            return quoteString(key, true)
        }

        const firstChar = String.fromCodePoint(key.codePointAt(0))
        if (!util.isIdStartChar(firstChar)) {
            return quoteString(key, true)
        }

        for (let i = firstChar.length; i < key.length; i++) {
            if (!util.isIdContinueChar(String.fromCodePoint(key.codePointAt(i)))) {
                return quoteString(key, true)
            }
        }

        return key
    }

    function serializeArray (value) {
        if (stack.indexOf(value) >= 0) {
            throw TypeError('Converting circular structure to JSON5')
        }

        stack.push(value)

        let stepback = indent
        indent = indent + gap

        let partial = []
        for (let i = 0; i < value.length; i++) {
            const propertyString = serializeProperty(String(i), value)
            partial.push((propertyString !== undefined) ? propertyString : 'null')
        }

        let final
        if (partial.length === 0) {
            final = '[]'
        } else {
            if (gap === '') {
                let properties = partial.join(',')
                final = '[' + properties + ']'
            } else {
                let separator = ',\n' + indent
                let properties = partial.join(separator)
                final = '[\n' + indent + properties + ',\n' + stepback + ']'
            }
        }

        stack.pop()
        indent = stepback
        return final
    }
}


/***/ }),

/***/ 79763:
/***/ ((module) => {

// This is a generated file. Do not edit.
module.exports.Space_Separator = /[\u1680\u2000-\u200A\u202F\u205F\u3000]/
module.exports.ID_Start = /[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u08A0-\u08B4\u08B6-\u08BD\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u1884\u1887-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312E\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FEA\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AE\uA7B0-\uA7B7\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF2D-\uDF4A\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC03-\uDC37\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC00-\uDC34\uDC47-\uDC4A\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDF00-\uDF19]|\uD806[\uDCA0-\uDCDF\uDCFF\uDE00\uDE0B-\uDE32\uDE3A\uDE50\uDE5C-\uDE83\uDE86-\uDE89\uDEC0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC2E\uDC40\uDC72-\uDC8F\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD30\uDD46]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD81C-\uD820\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50\uDF93-\uDF9F\uDFE0\uDFE1]|\uD821[\uDC00-\uDFEC]|\uD822[\uDC00-\uDEF2]|\uD82C[\uDC00-\uDD1E\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD83A[\uDC00-\uDCC4\uDD00-\uDD43]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0]|\uD87E[\uDC00-\uDE1D]/
module.exports.ID_Continue = /[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u0487\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05F0-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u0800-\u082D\u0840-\u085B\u0860-\u086A\u08A0-\u08B4\u08B6-\u08BD\u08D4-\u08E1\u08E3-\u0963\u0966-\u096F\u0971-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u09FC\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0AF9-\u0AFF\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BEF\u0C00-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58-\u0C5A\u0C60-\u0C63\u0C66-\u0C6F\u0C80-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D00-\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D54-\u0D57\u0D5F-\u0D63\u0D66-\u0D6F\u0D7A-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u1820-\u1877\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19D9\u1A00-\u1A1B\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1AB0-\u1ABD\u1B00-\u1B4B\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1C80-\u1C88\u1CD0-\u1CD2\u1CD4-\u1CF9\u1D00-\u1DF9\u1DFB-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u203F\u2040\u2054\u2071\u207F\u2090-\u209C\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u2E2F\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099\u309A\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312E\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FEA\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66F\uA674-\uA67D\uA67F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AE\uA7B0-\uA7B7\uA7F7-\uA827\uA840-\uA873\uA880-\uA8C5\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA8FD\uA900-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-\uA9D9\uA9E0-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A-\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABEA\uABEC\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF3F\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDDFD\uDE80-\uDE9C\uDEA0-\uDED0\uDEE0\uDF00-\uDF1F\uDF2D-\uDF4A\uDF50-\uDF7A\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCA0-\uDCA9\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00-\uDE03\uDE05\uDE06\uDE0C-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE38-\uDE3A\uDE3F\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE6\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC00-\uDC46\uDC66-\uDC6F\uDC7F-\uDCBA\uDCD0-\uDCE8\uDCF0-\uDCF9\uDD00-\uDD34\uDD36-\uDD3F\uDD50-\uDD73\uDD76\uDD80-\uDDC4\uDDCA-\uDDCC\uDDD0-\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE37\uDE3E\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEEA\uDEF0-\uDEF9\uDF00-\uDF03\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3C-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF50\uDF57\uDF5D-\uDF63\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDC00-\uDC4A\uDC50-\uDC59\uDC80-\uDCC5\uDCC7\uDCD0-\uDCD9\uDD80-\uDDB5\uDDB8-\uDDC0\uDDD8-\uDDDD\uDE00-\uDE40\uDE44\uDE50-\uDE59\uDE80-\uDEB7\uDEC0-\uDEC9\uDF00-\uDF19\uDF1D-\uDF2B\uDF30-\uDF39]|\uD806[\uDCA0-\uDCE9\uDCFF\uDE00-\uDE3E\uDE47\uDE50-\uDE83\uDE86-\uDE99\uDEC0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC36\uDC38-\uDC40\uDC50-\uDC59\uDC72-\uDC8F\uDC92-\uDCA7\uDCA9-\uDCB6\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD36\uDD3A\uDD3C\uDD3D\uDD3F-\uDD47\uDD50-\uDD59]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD81C-\uD820\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE60-\uDE69\uDED0-\uDEED\uDEF0-\uDEF4\uDF00-\uDF36\uDF40-\uDF43\uDF50-\uDF59\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50-\uDF7E\uDF8F-\uDF9F\uDFE0\uDFE1]|\uD821[\uDC00-\uDFEC]|\uD822[\uDC00-\uDEF2]|\uD82C[\uDC00-\uDD1E\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99\uDC9D\uDC9E]|\uD834[\uDD65-\uDD69\uDD6D-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB\uDFCE-\uDFFF]|\uD836[\uDE00-\uDE36\uDE3B-\uDE6C\uDE75\uDE84\uDE9B-\uDE9F\uDEA1-\uDEAF]|\uD838[\uDC00-\uDC06\uDC08-\uDC18\uDC1B-\uDC21\uDC23\uDC24\uDC26-\uDC2A]|\uD83A[\uDC00-\uDCC4\uDCD0-\uDCD6\uDD00-\uDD4A\uDD50-\uDD59]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0]|\uD87E[\uDC00-\uDE1D]|\uDB40[\uDD00-\uDDEF]/


/***/ }),

/***/ 6626:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const unicode = __webpack_require__(79763)

module.exports = {
    isSpaceSeparator (c) {
        return typeof c === 'string' && unicode.Space_Separator.test(c)
    },

    isIdStartChar (c) {
        return typeof c === 'string' && (
            (c >= 'a' && c <= 'z') ||
        (c >= 'A' && c <= 'Z') ||
        (c === '$') || (c === '_') ||
        unicode.ID_Start.test(c)
        )
    },

    isIdContinueChar (c) {
        return typeof c === 'string' && (
            (c >= 'a' && c <= 'z') ||
        (c >= 'A' && c <= 'Z') ||
        (c >= '0' && c <= '9') ||
        (c === '$') || (c === '_') ||
        (c === '\u200C') || (c === '\u200D') ||
        unicode.ID_Continue.test(c)
        )
    },

    isDigit (c) {
        return typeof c === 'string' && /[0-9]/.test(c)
    },

    isHexDigit (c) {
        return typeof c === 'string' && /[0-9A-Fa-f]/.test(c)
    },
}


/***/ }),

/***/ 44382:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/*!
 * mime-db
 * Copyright(c) 2014 Jonathan Ong
 * Copyright(c) 2015-2022 Douglas Christopher Wilson
 * MIT Licensed
 */

/**
 * Module exports.
 */

module.exports = __webpack_require__(45518)


/***/ }),

/***/ 49348:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
/*!
 * mime-types
 * Copyright(c) 2014 Jonathan Ong
 * Copyright(c) 2015 Douglas Christopher Wilson
 * MIT Licensed
 */



/**
 * Module dependencies.
 * @private
 */

var db = __webpack_require__(44382)
var extname = (__webpack_require__(71017).extname)

/**
 * Module variables.
 * @private
 */

var EXTRACT_TYPE_REGEXP = /^\s*([^;\s]*)(?:;|\s|$)/
var TEXT_TYPE_REGEXP = /^text\//i

/**
 * Module exports.
 * @public
 */

exports.charset = charset
exports.charsets = { lookup: charset }
exports.contentType = contentType
exports.extension = extension
exports.extensions = Object.create(null)
exports.lookup = lookup
exports.types = Object.create(null)

// Populate the extensions/types maps
populateMaps(exports.extensions, exports.types)

/**
 * Get the default charset for a MIME type.
 *
 * @param {string} type
 * @return {boolean|string}
 */

function charset (type) {
  if (!type || typeof type !== 'string') {
    return false
  }

  // TODO: use media-typer
  var match = EXTRACT_TYPE_REGEXP.exec(type)
  var mime = match && db[match[1].toLowerCase()]

  if (mime && mime.charset) {
    return mime.charset
  }

  // default text/* to utf-8
  if (match && TEXT_TYPE_REGEXP.test(match[1])) {
    return 'UTF-8'
  }

  return false
}

/**
 * Create a full Content-Type header given a MIME type or extension.
 *
 * @param {string} str
 * @return {boolean|string}
 */

function contentType (str) {
  // TODO: should this even be in this module?
  if (!str || typeof str !== 'string') {
    return false
  }

  var mime = str.indexOf('/') === -1
    ? exports.lookup(str)
    : str

  if (!mime) {
    return false
  }

  // TODO: use content-type or other module
  if (mime.indexOf('charset') === -1) {
    var charset = exports.charset(mime)
    if (charset) mime += '; charset=' + charset.toLowerCase()
  }

  return mime
}

/**
 * Get the default extension for a MIME type.
 *
 * @param {string} type
 * @return {boolean|string}
 */

function extension (type) {
  if (!type || typeof type !== 'string') {
    return false
  }

  // TODO: use media-typer
  var match = EXTRACT_TYPE_REGEXP.exec(type)

  // get extensions
  var exts = match && exports.extensions[match[1].toLowerCase()]

  if (!exts || !exts.length) {
    return false
  }

  return exts[0]
}

/**
 * Lookup the MIME type for a file path/extension.
 *
 * @param {string} path
 * @return {boolean|string}
 */

function lookup (path) {
  if (!path || typeof path !== 'string') {
    return false
  }

  // get the extension ("ext" or ".ext" or full path)
  var extension = extname('x.' + path)
    .toLowerCase()
    .substr(1)

  if (!extension) {
    return false
  }

  return exports.types[extension] || false
}

/**
 * Populate the extensions and types maps.
 * @private
 */

function populateMaps (extensions, types) {
  // source preference (least -> most)
  var preference = ['nginx', 'apache', undefined, 'iana']

  Object.keys(db).forEach(function forEachMimeType (type) {
    var mime = db[type]
    var exts = mime.extensions

    if (!exts || !exts.length) {
      return
    }

    // mime -> extensions
    extensions[type] = exts

    // extension -> mime
    for (var i = 0; i < exts.length; i++) {
      var extension = exts[i]

      if (types[extension]) {
        var from = preference.indexOf(db[types[extension]].source)
        var to = preference.indexOf(mime.source)

        if (types[extension] !== 'application/octet-stream' &&
          (from > to || (from === to && types[extension].substr(0, 12) === 'application/'))) {
          // skip the remapping
          continue
        }
      }

      // set the extension -> mime
      types[extension] = type
    }
  })
}


/***/ }),

/***/ 45076:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = minimatch
minimatch.Minimatch = Minimatch

var path = (function () { try { return __webpack_require__(71017) } catch (e) {}}()) || {
  sep: '/'
}
minimatch.sep = path.sep

var GLOBSTAR = minimatch.GLOBSTAR = Minimatch.GLOBSTAR = {}
var expand = __webpack_require__(19158)

var plTypes = {
  '!': { open: '(?:(?!(?:', close: '))[^/]*?)'},
  '?': { open: '(?:', close: ')?' },
  '+': { open: '(?:', close: ')+' },
  '*': { open: '(?:', close: ')*' },
  '@': { open: '(?:', close: ')' }
}

// any single thing other than /
// don't need to escape / when using new RegExp()
var qmark = '[^/]'

// * => any number of characters
var star = qmark + '*?'

// ** when dots are allowed.  Anything goes, except .. and .
// not (^ or / followed by one or two dots followed by $ or /),
// followed by anything, any number of times.
var twoStarDot = '(?:(?!(?:\\\/|^)(?:\\.{1,2})($|\\\/)).)*?'

// not a ^ or / followed by a dot,
// followed by anything, any number of times.
var twoStarNoDot = '(?:(?!(?:\\\/|^)\\.).)*?'

// characters that need to be escaped in RegExp.
var reSpecials = charSet('().*{}+?[]^$\\!')

// "abc" -> { a:true, b:true, c:true }
function charSet (s) {
  return s.split('').reduce(function (set, c) {
    set[c] = true
    return set
  }, {})
}

// normalizes slashes.
var slashSplit = /\/+/

minimatch.filter = filter
function filter (pattern, options) {
  options = options || {}
  return function (p, i, list) {
    return minimatch(p, pattern, options)
  }
}

function ext (a, b) {
  b = b || {}
  var t = {}
  Object.keys(a).forEach(function (k) {
    t[k] = a[k]
  })
  Object.keys(b).forEach(function (k) {
    t[k] = b[k]
  })
  return t
}

minimatch.defaults = function (def) {
  if (!def || typeof def !== 'object' || !Object.keys(def).length) {
    return minimatch
  }

  var orig = minimatch

  var m = function minimatch (p, pattern, options) {
    return orig(p, pattern, ext(def, options))
  }

  m.Minimatch = function Minimatch (pattern, options) {
    return new orig.Minimatch(pattern, ext(def, options))
  }
  m.Minimatch.defaults = function defaults (options) {
    return orig.defaults(ext(def, options)).Minimatch
  }

  m.filter = function filter (pattern, options) {
    return orig.filter(pattern, ext(def, options))
  }

  m.defaults = function defaults (options) {
    return orig.defaults(ext(def, options))
  }

  m.makeRe = function makeRe (pattern, options) {
    return orig.makeRe(pattern, ext(def, options))
  }

  m.braceExpand = function braceExpand (pattern, options) {
    return orig.braceExpand(pattern, ext(def, options))
  }

  m.match = function (list, pattern, options) {
    return orig.match(list, pattern, ext(def, options))
  }

  return m
}

Minimatch.defaults = function (def) {
  return minimatch.defaults(def).Minimatch
}

function minimatch (p, pattern, options) {
  assertValidPattern(pattern)

  if (!options) options = {}

  // shortcut: comments match nothing.
  if (!options.nocomment && pattern.charAt(0) === '#') {
    return false
  }

  return new Minimatch(pattern, options).match(p)
}

function Minimatch (pattern, options) {
  if (!(this instanceof Minimatch)) {
    return new Minimatch(pattern, options)
  }

  assertValidPattern(pattern)

  if (!options) options = {}

  pattern = pattern.trim()

  // windows support: need to use /, not \
  if (!options.allowWindowsEscape && path.sep !== '/') {
    pattern = pattern.split(path.sep).join('/')
  }

  this.options = options
  this.set = []
  this.pattern = pattern
  this.regexp = null
  this.negate = false
  this.comment = false
  this.empty = false
  this.partial = !!options.partial

  // make the set of regexps etc.
  this.make()
}

Minimatch.prototype.debug = function () {}

Minimatch.prototype.make = make
function make () {
  var pattern = this.pattern
  var options = this.options

  // empty patterns and comments match nothing.
  if (!options.nocomment && pattern.charAt(0) === '#') {
    this.comment = true
    return
  }
  if (!pattern) {
    this.empty = true
    return
  }

  // step 1: figure out negation, etc.
  this.parseNegate()

  // step 2: expand braces
  var set = this.globSet = this.braceExpand()

  if (options.debug) this.debug = function debug() { console.error.apply(console, arguments) }

  this.debug(this.pattern, set)

  // step 3: now we have a set, so turn each one into a series of path-portion
  // matching patterns.
  // These will be regexps, except in the case of "**", which is
  // set to the GLOBSTAR object for globstar behavior,
  // and will not contain any / characters
  set = this.globParts = set.map(function (s) {
    return s.split(slashSplit)
  })

  this.debug(this.pattern, set)

  // glob --> regexps
  set = set.map(function (s, si, set) {
    return s.map(this.parse, this)
  }, this)

  this.debug(this.pattern, set)

  // filter out everything that didn't compile properly.
  set = set.filter(function (s) {
    return s.indexOf(false) === -1
  })

  this.debug(this.pattern, set)

  this.set = set
}

Minimatch.prototype.parseNegate = parseNegate
function parseNegate () {
  var pattern = this.pattern
  var negate = false
  var options = this.options
  var negateOffset = 0

  if (options.nonegate) return

  for (var i = 0, l = pattern.length
    ; i < l && pattern.charAt(i) === '!'
    ; i++) {
    negate = !negate
    negateOffset++
  }

  if (negateOffset) this.pattern = pattern.substr(negateOffset)
  this.negate = negate
}

// Brace expansion:
// a{b,c}d -> abd acd
// a{b,}c -> abc ac
// a{0..3}d -> a0d a1d a2d a3d
// a{b,c{d,e}f}g -> abg acdfg acefg
// a{b,c}d{e,f}g -> abdeg acdeg abdeg abdfg
//
// Invalid sets are not expanded.
// a{2..}b -> a{2..}b
// a{b}c -> a{b}c
minimatch.braceExpand = function (pattern, options) {
  return braceExpand(pattern, options)
}

Minimatch.prototype.braceExpand = braceExpand

function braceExpand (pattern, options) {
  if (!options) {
    if (this instanceof Minimatch) {
      options = this.options
    } else {
      options = {}
    }
  }

  pattern = typeof pattern === 'undefined'
    ? this.pattern : pattern

  assertValidPattern(pattern)

  // Thanks to Yeting Li <https://github.com/yetingli> for
  // improving this regexp to avoid a ReDOS vulnerability.
  if (options.nobrace || !/\{(?:(?!\{).)*\}/.test(pattern)) {
    // shortcut. no need to expand.
    return [pattern]
  }

  return expand(pattern)
}

var MAX_PATTERN_LENGTH = 1024 * 64
var assertValidPattern = function (pattern) {
  if (typeof pattern !== 'string') {
    throw new TypeError('invalid pattern')
  }

  if (pattern.length > MAX_PATTERN_LENGTH) {
    throw new TypeError('pattern is too long')
  }
}

// parse a component of the expanded set.
// At this point, no pattern may contain "/" in it
// so we're going to return a 2d array, where each entry is the full
// pattern, split on '/', and then turned into a regular expression.
// A regexp is made at the end which joins each array with an
// escaped /, and another full one which joins each regexp with |.
//
// Following the lead of Bash 4.1, note that "**" only has special meaning
// when it is the *only* thing in a path portion.  Otherwise, any series
// of * is equivalent to a single *.  Globstar behavior is enabled by
// default, and can be disabled by setting options.noglobstar.
Minimatch.prototype.parse = parse
var SUBPARSE = {}
function parse (pattern, isSub) {
  assertValidPattern(pattern)

  var options = this.options

  // shortcuts
  if (pattern === '**') {
    if (!options.noglobstar)
      return GLOBSTAR
    else
      pattern = '*'
  }
  if (pattern === '') return ''

  var re = ''
  var hasMagic = !!options.nocase
  var escaping = false
  // ? => one single character
  var patternListStack = []
  var negativeLists = []
  var stateChar
  var inClass = false
  var reClassStart = -1
  var classStart = -1
  // . and .. never match anything that doesn't start with .,
  // even when options.dot is set.
  var patternStart = pattern.charAt(0) === '.' ? '' // anything
  // not (start or / followed by . or .. followed by / or end)
  : options.dot ? '(?!(?:^|\\\/)\\.{1,2}(?:$|\\\/))'
  : '(?!\\.)'
  var self = this

  function clearStateChar () {
    if (stateChar) {
      // we had some state-tracking character
      // that wasn't consumed by this pass.
      switch (stateChar) {
        case '*':
          re += star
          hasMagic = true
        break
        case '?':
          re += qmark
          hasMagic = true
        break
        default:
          re += '\\' + stateChar
        break
      }
      self.debug('clearStateChar %j %j', stateChar, re)
      stateChar = false
    }
  }

  for (var i = 0, len = pattern.length, c
    ; (i < len) && (c = pattern.charAt(i))
    ; i++) {
    this.debug('%s\t%s %s %j', pattern, i, re, c)

    // skip over any that are escaped.
    if (escaping && reSpecials[c]) {
      re += '\\' + c
      escaping = false
      continue
    }

    switch (c) {
      /* istanbul ignore next */
      case '/': {
        // completely not allowed, even escaped.
        // Should already be path-split by now.
        return false
      }

      case '\\':
        clearStateChar()
        escaping = true
      continue

      // the various stateChar values
      // for the "extglob" stuff.
      case '?':
      case '*':
      case '+':
      case '@':
      case '!':
        this.debug('%s\t%s %s %j <-- stateChar', pattern, i, re, c)

        // all of those are literals inside a class, except that
        // the glob [!a] means [^a] in regexp
        if (inClass) {
          this.debug('  in class')
          if (c === '!' && i === classStart + 1) c = '^'
          re += c
          continue
        }

        // if we already have a stateChar, then it means
        // that there was something like ** or +? in there.
        // Handle the stateChar, then proceed with this one.
        self.debug('call clearStateChar %j', stateChar)
        clearStateChar()
        stateChar = c
        // if extglob is disabled, then +(asdf|foo) isn't a thing.
        // just clear the statechar *now*, rather than even diving into
        // the patternList stuff.
        if (options.noext) clearStateChar()
      continue

      case '(':
        if (inClass) {
          re += '('
          continue
        }

        if (!stateChar) {
          re += '\\('
          continue
        }

        patternListStack.push({
          type: stateChar,
          start: i - 1,
          reStart: re.length,
          open: plTypes[stateChar].open,
          close: plTypes[stateChar].close
        })
        // negation is (?:(?!js)[^/]*)
        re += stateChar === '!' ? '(?:(?!(?:' : '(?:'
        this.debug('plType %j %j', stateChar, re)
        stateChar = false
      continue

      case ')':
        if (inClass || !patternListStack.length) {
          re += '\\)'
          continue
        }

        clearStateChar()
        hasMagic = true
        var pl = patternListStack.pop()
        // negation is (?:(?!js)[^/]*)
        // The others are (?:<pattern>)<type>
        re += pl.close
        if (pl.type === '!') {
          negativeLists.push(pl)
        }
        pl.reEnd = re.length
      continue

      case '|':
        if (inClass || !patternListStack.length || escaping) {
          re += '\\|'
          escaping = false
          continue
        }

        clearStateChar()
        re += '|'
      continue

      // these are mostly the same in regexp and glob
      case '[':
        // swallow any state-tracking char before the [
        clearStateChar()

        if (inClass) {
          re += '\\' + c
          continue
        }

        inClass = true
        classStart = i
        reClassStart = re.length
        re += c
      continue

      case ']':
        //  a right bracket shall lose its special
        //  meaning and represent itself in
        //  a bracket expression if it occurs
        //  first in the list.  -- POSIX.2 2.8.3.2
        if (i === classStart + 1 || !inClass) {
          re += '\\' + c
          escaping = false
          continue
        }

        // handle the case where we left a class open.
        // "[z-a]" is valid, equivalent to "\[z-a\]"
        // split where the last [ was, make sure we don't have
        // an invalid re. if so, re-walk the contents of the
        // would-be class to re-translate any characters that
        // were passed through as-is
        // TODO: It would probably be faster to determine this
        // without a try/catch and a new RegExp, but it's tricky
        // to do safely.  For now, this is safe and works.
        var cs = pattern.substring(classStart + 1, i)
        try {
          RegExp('[' + cs + ']')
        } catch (er) {
          // not a valid class!
          var sp = this.parse(cs, SUBPARSE)
          re = re.substr(0, reClassStart) + '\\[' + sp[0] + '\\]'
          hasMagic = hasMagic || sp[1]
          inClass = false
          continue
        }

        // finish up the class.
        hasMagic = true
        inClass = false
        re += c
      continue

      default:
        // swallow any state char that wasn't consumed
        clearStateChar()

        if (escaping) {
          // no need
          escaping = false
        } else if (reSpecials[c]
          && !(c === '^' && inClass)) {
          re += '\\'
        }

        re += c

    } // switch
  } // for

  // handle the case where we left a class open.
  // "[abc" is valid, equivalent to "\[abc"
  if (inClass) {
    // split where the last [ was, and escape it
    // this is a huge pita.  We now have to re-walk
    // the contents of the would-be class to re-translate
    // any characters that were passed through as-is
    cs = pattern.substr(classStart + 1)
    sp = this.parse(cs, SUBPARSE)
    re = re.substr(0, reClassStart) + '\\[' + sp[0]
    hasMagic = hasMagic || sp[1]
  }

  // handle the case where we had a +( thing at the *end*
  // of the pattern.
  // each pattern list stack adds 3 chars, and we need to go through
  // and escape any | chars that were passed through as-is for the regexp.
  // Go through and escape them, taking care not to double-escape any
  // | chars that were already escaped.
  for (pl = patternListStack.pop(); pl; pl = patternListStack.pop()) {
    var tail = re.slice(pl.reStart + pl.open.length)
    this.debug('setting tail', re, pl)
    // maybe some even number of \, then maybe 1 \, followed by a |
    tail = tail.replace(/((?:\\{2}){0,64})(\\?)\|/g, function (_, $1, $2) {
      if (!$2) {
        // the | isn't already escaped, so escape it.
        $2 = '\\'
      }

      // need to escape all those slashes *again*, without escaping the
      // one that we need for escaping the | character.  As it works out,
      // escaping an even number of slashes can be done by simply repeating
      // it exactly after itself.  That's why this trick works.
      //
      // I am sorry that you have to see this.
      return $1 + $1 + $2 + '|'
    })

    this.debug('tail=%j\n   %s', tail, tail, pl, re)
    var t = pl.type === '*' ? star
      : pl.type === '?' ? qmark
      : '\\' + pl.type

    hasMagic = true
    re = re.slice(0, pl.reStart) + t + '\\(' + tail
  }

  // handle trailing things that only matter at the very end.
  clearStateChar()
  if (escaping) {
    // trailing \\
    re += '\\\\'
  }

  // only need to apply the nodot start if the re starts with
  // something that could conceivably capture a dot
  var addPatternStart = false
  switch (re.charAt(0)) {
    case '[': case '.': case '(': addPatternStart = true
  }

  // Hack to work around lack of negative lookbehind in JS
  // A pattern like: *.!(x).!(y|z) needs to ensure that a name
  // like 'a.xyz.yz' doesn't match.  So, the first negative
  // lookahead, has to look ALL the way ahead, to the end of
  // the pattern.
  for (var n = negativeLists.length - 1; n > -1; n--) {
    var nl = negativeLists[n]

    var nlBefore = re.slice(0, nl.reStart)
    var nlFirst = re.slice(nl.reStart, nl.reEnd - 8)
    var nlLast = re.slice(nl.reEnd - 8, nl.reEnd)
    var nlAfter = re.slice(nl.reEnd)

    nlLast += nlAfter

    // Handle nested stuff like *(*.js|!(*.json)), where open parens
    // mean that we should *not* include the ) in the bit that is considered
    // "after" the negated section.
    var openParensBefore = nlBefore.split('(').length - 1
    var cleanAfter = nlAfter
    for (i = 0; i < openParensBefore; i++) {
      cleanAfter = cleanAfter.replace(/\)[+*?]?/, '')
    }
    nlAfter = cleanAfter

    var dollar = ''
    if (nlAfter === '' && isSub !== SUBPARSE) {
      dollar = '$'
    }
    var newRe = nlBefore + nlFirst + nlAfter + dollar + nlLast
    re = newRe
  }

  // if the re is not "" at this point, then we need to make sure
  // it doesn't match against an empty path part.
  // Otherwise a/* will match a/, which it should not.
  if (re !== '' && hasMagic) {
    re = '(?=.)' + re
  }

  if (addPatternStart) {
    re = patternStart + re
  }

  // parsing just a piece of a larger pattern.
  if (isSub === SUBPARSE) {
    return [re, hasMagic]
  }

  // skip the regexp for non-magical patterns
  // unescape anything in it, though, so that it'll be
  // an exact match against a file etc.
  if (!hasMagic) {
    return globUnescape(pattern)
  }

  var flags = options.nocase ? 'i' : ''
  try {
    var regExp = new RegExp('^' + re + '$', flags)
  } catch (er) /* istanbul ignore next - should be impossible */ {
    // If it was an invalid regular expression, then it can't match
    // anything.  This trick looks for a character after the end of
    // the string, which is of course impossible, except in multi-line
    // mode, but it's not a /m regex.
    return new RegExp('$.')
  }

  regExp._glob = pattern
  regExp._src = re

  return regExp
}

minimatch.makeRe = function (pattern, options) {
  return new Minimatch(pattern, options || {}).makeRe()
}

Minimatch.prototype.makeRe = makeRe
function makeRe () {
  if (this.regexp || this.regexp === false) return this.regexp

  // at this point, this.set is a 2d array of partial
  // pattern strings, or "**".
  //
  // It's better to use .match().  This function shouldn't
  // be used, really, but it's pretty convenient sometimes,
  // when you just want to work with a regex.
  var set = this.set

  if (!set.length) {
    this.regexp = false
    return this.regexp
  }
  var options = this.options

  var twoStar = options.noglobstar ? star
    : options.dot ? twoStarDot
    : twoStarNoDot
  var flags = options.nocase ? 'i' : ''

  var re = set.map(function (pattern) {
    return pattern.map(function (p) {
      return (p === GLOBSTAR) ? twoStar
      : (typeof p === 'string') ? regExpEscape(p)
      : p._src
    }).join('\\\/')
  }).join('|')

  // must match entire pattern
  // ending in a * or ** will make it less strict.
  re = '^(?:' + re + ')$'

  // can match anything, as long as it's not this.
  if (this.negate) re = '^(?!' + re + ').*$'

  try {
    this.regexp = new RegExp(re, flags)
  } catch (ex) /* istanbul ignore next - should be impossible */ {
    this.regexp = false
  }
  return this.regexp
}

minimatch.match = function (list, pattern, options) {
  options = options || {}
  var mm = new Minimatch(pattern, options)
  list = list.filter(function (f) {
    return mm.match(f)
  })
  if (mm.options.nonull && !list.length) {
    list.push(pattern)
  }
  return list
}

Minimatch.prototype.match = function match (f, partial) {
  if (typeof partial === 'undefined') partial = this.partial
  this.debug('match', f, this.pattern)
  // short-circuit in the case of busted things.
  // comments, etc.
  if (this.comment) return false
  if (this.empty) return f === ''

  if (f === '/' && partial) return true

  var options = this.options

  // windows: need to use /, not \
  if (path.sep !== '/') {
    f = f.split(path.sep).join('/')
  }

  // treat the test path as a set of pathparts.
  f = f.split(slashSplit)
  this.debug(this.pattern, 'split', f)

  // just ONE of the pattern sets in this.set needs to match
  // in order for it to be valid.  If negating, then just one
  // match means that we have failed.
  // Either way, return on the first hit.

  var set = this.set
  this.debug(this.pattern, 'set', set)

  // Find the basename of the path by looking for the last non-empty segment
  var filename
  var i
  for (i = f.length - 1; i >= 0; i--) {
    filename = f[i]
    if (filename) break
  }

  for (i = 0; i < set.length; i++) {
    var pattern = set[i]
    var file = f
    if (options.matchBase && pattern.length === 1) {
      file = [filename]
    }
    var hit = this.matchOne(file, pattern, partial)
    if (hit) {
      if (options.flipNegate) return true
      return !this.negate
    }
  }

  // didn't get any hits.  this is success if it's a negative
  // pattern, failure otherwise.
  if (options.flipNegate) return false
  return this.negate
}

// set partial to true to test if, for example,
// "/a/b" matches the start of "/*/b/*/d"
// Partial means, if you run out of file before you run
// out of pattern, then that's fine, as long as all
// the parts match.
Minimatch.prototype.matchOne = function (file, pattern, partial) {
  var options = this.options

  this.debug('matchOne',
    { 'this': this, file: file, pattern: pattern })

  this.debug('matchOne', file.length, pattern.length)

  for (var fi = 0,
      pi = 0,
      fl = file.length,
      pl = pattern.length
      ; (fi < fl) && (pi < pl)
      ; fi++, pi++) {
    this.debug('matchOne loop')
    var p = pattern[pi]
    var f = file[fi]

    this.debug(pattern, p, f)

    // should be impossible.
    // some invalid regexp stuff in the set.
    /* istanbul ignore if */
    if (p === false) return false

    if (p === GLOBSTAR) {
      this.debug('GLOBSTAR', [pattern, p, f])

      // "**"
      // a/**/b/**/c would match the following:
      // a/b/x/y/z/c
      // a/x/y/z/b/c
      // a/b/x/b/x/c
      // a/b/c
      // To do this, take the rest of the pattern after
      // the **, and see if it would match the file remainder.
      // If so, return success.
      // If not, the ** "swallows" a segment, and try again.
      // This is recursively awful.
      //
      // a/**/b/**/c matching a/b/x/y/z/c
      // - a matches a
      // - doublestar
      //   - matchOne(b/x/y/z/c, b/**/c)
      //     - b matches b
      //     - doublestar
      //       - matchOne(x/y/z/c, c) -> no
      //       - matchOne(y/z/c, c) -> no
      //       - matchOne(z/c, c) -> no
      //       - matchOne(c, c) yes, hit
      var fr = fi
      var pr = pi + 1
      if (pr === pl) {
        this.debug('** at the end')
        // a ** at the end will just swallow the rest.
        // We have found a match.
        // however, it will not swallow /.x, unless
        // options.dot is set.
        // . and .. are *never* matched by **, for explosively
        // exponential reasons.
        for (; fi < fl; fi++) {
          if (file[fi] === '.' || file[fi] === '..' ||
            (!options.dot && file[fi].charAt(0) === '.')) return false
        }
        return true
      }

      // ok, let's see if we can swallow whatever we can.
      while (fr < fl) {
        var swallowee = file[fr]

        this.debug('\nglobstar while', file, fr, pattern, pr, swallowee)

        // XXX remove this slice.  Just pass the start index.
        if (this.matchOne(file.slice(fr), pattern.slice(pr), partial)) {
          this.debug('globstar found match!', fr, fl, swallowee)
          // found a match.
          return true
        } else {
          // can't swallow "." or ".." ever.
          // can only swallow ".foo" when explicitly asked.
          if (swallowee === '.' || swallowee === '..' ||
            (!options.dot && swallowee.charAt(0) === '.')) {
            this.debug('dot detected!', file, fr, pattern, pr)
            break
          }

          // ** swallows a segment, and continue.
          this.debug('globstar swallow a segment, and continue')
          fr++
        }
      }

      // no match was found.
      // However, in partial mode, we can't say this is necessarily over.
      // If there's more *pattern* left, then
      /* istanbul ignore if */
      if (partial) {
        // ran out of file
        this.debug('\n>>> no match, partial?', file, fr, pattern, pr)
        if (fr === fl) return true
      }
      return false
    }

    // something other than **
    // non-magic patterns just have to match exactly
    // patterns with magic have been turned into regexps.
    var hit
    if (typeof p === 'string') {
      hit = f === p
      this.debug('string match', p, f, hit)
    } else {
      hit = f.match(p)
      this.debug('pattern match', p, f, hit)
    }

    if (!hit) return false
  }

  // Note: ending in / means that we'll get a final ""
  // at the end of the pattern.  This can only match a
  // corresponding "" at the end of the file.
  // If the file ends in /, then it can only match a
  // a pattern that ends in /, unless the pattern just
  // doesn't have any more for it. But, a/b/ should *not*
  // match "a/b/*", even though "" matches against the
  // [^/]*? pattern, except in partial mode, where it might
  // simply not be reached yet.
  // However, a/b/ should still satisfy a/*

  // now either we fell off the end of the pattern, or we're done.
  if (fi === fl && pi === pl) {
    // ran out of pattern and filename at the same time.
    // an exact hit!
    return true
  } else if (fi === fl) {
    // ran out of file, but still had pattern left.
    // this is ok if we're doing the match as part of
    // a glob fs traversal.
    return partial
  } else /* istanbul ignore else */ if (pi === pl) {
    // ran out of pattern, still have file left.
    // this is only acceptable if we're on the very last
    // empty segment of a file with a trailing slash.
    // a/* should match a/b/
    return (fi === fl - 1) && (file[fi] === '')
  }

  // should be unreachable.
  /* istanbul ignore next */
  throw new Error('wtf?')
}

// replace stuff like \* with *
function globUnescape (s) {
  return s.replace(/\\(.)/g, '$1')
}

function regExpEscape (s) {
  return s.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, '\\$&')
}


/***/ }),

/***/ 48632:
/***/ ((module) => {

/**
 * Helpers.
 */

var s = 1000;
var m = s * 60;
var h = m * 60;
var d = h * 24;
var w = d * 7;
var y = d * 365.25;

/**
 * Parse or format the given `val`.
 *
 * Options:
 *
 *  - `long` verbose formatting [false]
 *
 * @param {String|Number} val
 * @param {Object} [options]
 * @throws {Error} throw an error if val is not a non-empty string or a number
 * @return {String|Number}
 * @api public
 */

module.exports = function(val, options) {
  options = options || {};
  var type = typeof val;
  if (type === 'string' && val.length > 0) {
    return parse(val);
  } else if (type === 'number' && isFinite(val)) {
    return options.long ? fmtLong(val) : fmtShort(val);
  }
  throw new Error(
    'val is not a non-empty string or a valid number. val=' +
      JSON.stringify(val)
  );
};

/**
 * Parse the given `str` and return milliseconds.
 *
 * @param {String} str
 * @return {Number}
 * @api private
 */

function parse(str) {
  str = String(str);
  if (str.length > 100) {
    return;
  }
  var match = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(
    str
  );
  if (!match) {
    return;
  }
  var n = parseFloat(match[1]);
  var type = (match[2] || 'ms').toLowerCase();
  switch (type) {
    case 'years':
    case 'year':
    case 'yrs':
    case 'yr':
    case 'y':
      return n * y;
    case 'weeks':
    case 'week':
    case 'w':
      return n * w;
    case 'days':
    case 'day':
    case 'd':
      return n * d;
    case 'hours':
    case 'hour':
    case 'hrs':
    case 'hr':
    case 'h':
      return n * h;
    case 'minutes':
    case 'minute':
    case 'mins':
    case 'min':
    case 'm':
      return n * m;
    case 'seconds':
    case 'second':
    case 'secs':
    case 'sec':
    case 's':
      return n * s;
    case 'milliseconds':
    case 'millisecond':
    case 'msecs':
    case 'msec':
    case 'ms':
      return n;
    default:
      return undefined;
  }
}

/**
 * Short format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function fmtShort(ms) {
  var msAbs = Math.abs(ms);
  if (msAbs >= d) {
    return Math.round(ms / d) + 'd';
  }
  if (msAbs >= h) {
    return Math.round(ms / h) + 'h';
  }
  if (msAbs >= m) {
    return Math.round(ms / m) + 'm';
  }
  if (msAbs >= s) {
    return Math.round(ms / s) + 's';
  }
  return ms + 'ms';
}

/**
 * Long format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function fmtLong(ms) {
  var msAbs = Math.abs(ms);
  if (msAbs >= d) {
    return plural(ms, msAbs, d, 'day');
  }
  if (msAbs >= h) {
    return plural(ms, msAbs, h, 'hour');
  }
  if (msAbs >= m) {
    return plural(ms, msAbs, m, 'minute');
  }
  if (msAbs >= s) {
    return plural(ms, msAbs, s, 'second');
  }
  return ms + ' ms';
}

/**
 * Pluralization helper.
 */

function plural(ms, msAbs, n, name) {
  var isPlural = msAbs >= n * 1.5;
  return Math.round(ms / n) + ' ' + name + (isPlural ? 's' : '');
}


/***/ }),

/***/ 87744:
/***/ ((module) => {

/*!
 * normalize-path <https://github.com/jonschlinkert/normalize-path>
 *
 * Copyright (c) 2014-2018, Jon Schlinkert.
 * Released under the MIT License.
 */

module.exports = function(path, stripTrailing) {
  if (typeof path !== 'string') {
    throw new TypeError('expected path to be a string');
  }

  if (path === '\\' || path === '/') return '/';

  var len = path.length;
  if (len <= 1) return path;

  // ensure that win32 namespaces has two leading slashes, so that the path is
  // handled properly by the win32 version of path.parse() after being normalized
  // https://msdn.microsoft.com/library/windows/desktop/aa365247(v=vs.85).aspx#namespaces
  var prefix = '';
  if (len > 4 && path[3] === '\\') {
    var ch = path[2];
    if ((ch === '?' || ch === '.') && path.slice(0, 2) === '\\\\') {
      path = path.slice(2);
      prefix = '//';
    }
  }

  var segs = path.split(/[/\\]+/);
  if (stripTrailing !== false && segs[segs.length - 1] === '') {
    segs.pop();
  }
  return prefix + segs.join('/');
};


/***/ }),

/***/ 13690:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var hasMap = typeof Map === 'function' && Map.prototype;
var mapSizeDescriptor = Object.getOwnPropertyDescriptor && hasMap ? Object.getOwnPropertyDescriptor(Map.prototype, 'size') : null;
var mapSize = hasMap && mapSizeDescriptor && typeof mapSizeDescriptor.get === 'function' ? mapSizeDescriptor.get : null;
var mapForEach = hasMap && Map.prototype.forEach;
var hasSet = typeof Set === 'function' && Set.prototype;
var setSizeDescriptor = Object.getOwnPropertyDescriptor && hasSet ? Object.getOwnPropertyDescriptor(Set.prototype, 'size') : null;
var setSize = hasSet && setSizeDescriptor && typeof setSizeDescriptor.get === 'function' ? setSizeDescriptor.get : null;
var setForEach = hasSet && Set.prototype.forEach;
var hasWeakMap = typeof WeakMap === 'function' && WeakMap.prototype;
var weakMapHas = hasWeakMap ? WeakMap.prototype.has : null;
var hasWeakSet = typeof WeakSet === 'function' && WeakSet.prototype;
var weakSetHas = hasWeakSet ? WeakSet.prototype.has : null;
var hasWeakRef = typeof WeakRef === 'function' && WeakRef.prototype;
var weakRefDeref = hasWeakRef ? WeakRef.prototype.deref : null;
var booleanValueOf = Boolean.prototype.valueOf;
var objectToString = Object.prototype.toString;
var functionToString = Function.prototype.toString;
var $match = String.prototype.match;
var $slice = String.prototype.slice;
var $replace = String.prototype.replace;
var $toUpperCase = String.prototype.toUpperCase;
var $toLowerCase = String.prototype.toLowerCase;
var $test = RegExp.prototype.test;
var $concat = Array.prototype.concat;
var $join = Array.prototype.join;
var $arrSlice = Array.prototype.slice;
var $floor = Math.floor;
var bigIntValueOf = typeof BigInt === 'function' ? BigInt.prototype.valueOf : null;
var gOPS = Object.getOwnPropertySymbols;
var symToString = typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol' ? Symbol.prototype.toString : null;
var hasShammedSymbols = typeof Symbol === 'function' && typeof Symbol.iterator === 'object';
// ie, `has-tostringtag/shams
var toStringTag = typeof Symbol === 'function' && Symbol.toStringTag && (typeof Symbol.toStringTag === hasShammedSymbols ? 'object' : 'symbol')
    ? Symbol.toStringTag
    : null;
var isEnumerable = Object.prototype.propertyIsEnumerable;

var gPO = (typeof Reflect === 'function' ? Reflect.getPrototypeOf : Object.getPrototypeOf) || (
    [].__proto__ === Array.prototype // eslint-disable-line no-proto
        ? function (O) {
            return O.__proto__; // eslint-disable-line no-proto
        }
        : null
);

function addNumericSeparator(num, str) {
    if (
        num === Infinity
        || num === -Infinity
        || num !== num
        || (num && num > -1000 && num < 1000)
        || $test.call(/e/, str)
    ) {
        return str;
    }
    var sepRegex = /[0-9](?=(?:[0-9]{3})+(?![0-9]))/g;
    if (typeof num === 'number') {
        var int = num < 0 ? -$floor(-num) : $floor(num); // trunc(num)
        if (int !== num) {
            var intStr = String(int);
            var dec = $slice.call(str, intStr.length + 1);
            return $replace.call(intStr, sepRegex, '$&_') + '.' + $replace.call($replace.call(dec, /([0-9]{3})/g, '$&_'), /_$/, '');
        }
    }
    return $replace.call(str, sepRegex, '$&_');
}

var inspectCustom = (__webpack_require__(58391).custom);
var inspectSymbol = inspectCustom && isSymbol(inspectCustom) ? inspectCustom : null;

module.exports = function inspect_(obj, options, depth, seen) {
    var opts = options || {};

    if (has(opts, 'quoteStyle') && (opts.quoteStyle !== 'single' && opts.quoteStyle !== 'double')) {
        throw new TypeError('option "quoteStyle" must be "single" or "double"');
    }
    if (
        has(opts, 'maxStringLength') && (typeof opts.maxStringLength === 'number'
            ? opts.maxStringLength < 0 && opts.maxStringLength !== Infinity
            : opts.maxStringLength !== null
        )
    ) {
        throw new TypeError('option "maxStringLength", if provided, must be a positive integer, Infinity, or `null`');
    }
    var customInspect = has(opts, 'customInspect') ? opts.customInspect : true;
    if (typeof customInspect !== 'boolean' && customInspect !== 'symbol') {
        throw new TypeError('option "customInspect", if provided, must be `true`, `false`, or `\'symbol\'`');
    }

    if (
        has(opts, 'indent')
        && opts.indent !== null
        && opts.indent !== '\t'
        && !(parseInt(opts.indent, 10) === opts.indent && opts.indent > 0)
    ) {
        throw new TypeError('option "indent" must be "\\t", an integer > 0, or `null`');
    }
    if (has(opts, 'numericSeparator') && typeof opts.numericSeparator !== 'boolean') {
        throw new TypeError('option "numericSeparator", if provided, must be `true` or `false`');
    }
    var numericSeparator = opts.numericSeparator;

    if (typeof obj === 'undefined') {
        return 'undefined';
    }
    if (obj === null) {
        return 'null';
    }
    if (typeof obj === 'boolean') {
        return obj ? 'true' : 'false';
    }

    if (typeof obj === 'string') {
        return inspectString(obj, opts);
    }
    if (typeof obj === 'number') {
        if (obj === 0) {
            return Infinity / obj > 0 ? '0' : '-0';
        }
        var str = String(obj);
        return numericSeparator ? addNumericSeparator(obj, str) : str;
    }
    if (typeof obj === 'bigint') {
        var bigIntStr = String(obj) + 'n';
        return numericSeparator ? addNumericSeparator(obj, bigIntStr) : bigIntStr;
    }

    var maxDepth = typeof opts.depth === 'undefined' ? 5 : opts.depth;
    if (typeof depth === 'undefined') { depth = 0; }
    if (depth >= maxDepth && maxDepth > 0 && typeof obj === 'object') {
        return isArray(obj) ? '[Array]' : '[Object]';
    }

    var indent = getIndent(opts, depth);

    if (typeof seen === 'undefined') {
        seen = [];
    } else if (indexOf(seen, obj) >= 0) {
        return '[Circular]';
    }

    function inspect(value, from, noIndent) {
        if (from) {
            seen = $arrSlice.call(seen);
            seen.push(from);
        }
        if (noIndent) {
            var newOpts = {
                depth: opts.depth
            };
            if (has(opts, 'quoteStyle')) {
                newOpts.quoteStyle = opts.quoteStyle;
            }
            return inspect_(value, newOpts, depth + 1, seen);
        }
        return inspect_(value, opts, depth + 1, seen);
    }

    if (typeof obj === 'function') {
        var name = nameOf(obj);
        var keys = arrObjKeys(obj, inspect);
        return '[Function' + (name ? ': ' + name : ' (anonymous)') + ']' + (keys.length > 0 ? ' { ' + $join.call(keys, ', ') + ' }' : '');
    }
    if (isSymbol(obj)) {
        var symString = hasShammedSymbols ? $replace.call(String(obj), /^(Symbol\(.*\))_[^)]*$/, '$1') : symToString.call(obj);
        return typeof obj === 'object' && !hasShammedSymbols ? markBoxed(symString) : symString;
    }
    if (isElement(obj)) {
        var s = '<' + $toLowerCase.call(String(obj.nodeName));
        var attrs = obj.attributes || [];
        for (var i = 0; i < attrs.length; i++) {
            s += ' ' + attrs[i].name + '=' + wrapQuotes(quote(attrs[i].value), 'double', opts);
        }
        s += '>';
        if (obj.childNodes && obj.childNodes.length) { s += '...'; }
        s += '</' + $toLowerCase.call(String(obj.nodeName)) + '>';
        return s;
    }
    if (isArray(obj)) {
        if (obj.length === 0) { return '[]'; }
        var xs = arrObjKeys(obj, inspect);
        if (indent && !singleLineValues(xs)) {
            return '[' + indentedJoin(xs, indent) + ']';
        }
        return '[ ' + $join.call(xs, ', ') + ' ]';
    }
    if (isError(obj)) {
        var parts = arrObjKeys(obj, inspect);
        if ('cause' in obj && !isEnumerable.call(obj, 'cause')) {
            return '{ [' + String(obj) + '] ' + $join.call($concat.call('[cause]: ' + inspect(obj.cause), parts), ', ') + ' }';
        }
        if (parts.length === 0) { return '[' + String(obj) + ']'; }
        return '{ [' + String(obj) + '] ' + $join.call(parts, ', ') + ' }';
    }
    if (typeof obj === 'object' && customInspect) {
        if (inspectSymbol && typeof obj[inspectSymbol] === 'function') {
            return obj[inspectSymbol]();
        } else if (customInspect !== 'symbol' && typeof obj.inspect === 'function') {
            return obj.inspect();
        }
    }
    if (isMap(obj)) {
        var mapParts = [];
        mapForEach.call(obj, function (value, key) {
            mapParts.push(inspect(key, obj, true) + ' => ' + inspect(value, obj));
        });
        return collectionOf('Map', mapSize.call(obj), mapParts, indent);
    }
    if (isSet(obj)) {
        var setParts = [];
        setForEach.call(obj, function (value) {
            setParts.push(inspect(value, obj));
        });
        return collectionOf('Set', setSize.call(obj), setParts, indent);
    }
    if (isWeakMap(obj)) {
        return weakCollectionOf('WeakMap');
    }
    if (isWeakSet(obj)) {
        return weakCollectionOf('WeakSet');
    }
    if (isWeakRef(obj)) {
        return weakCollectionOf('WeakRef');
    }
    if (isNumber(obj)) {
        return markBoxed(inspect(Number(obj)));
    }
    if (isBigInt(obj)) {
        return markBoxed(inspect(bigIntValueOf.call(obj)));
    }
    if (isBoolean(obj)) {
        return markBoxed(booleanValueOf.call(obj));
    }
    if (isString(obj)) {
        return markBoxed(inspect(String(obj)));
    }
    if (!isDate(obj) && !isRegExp(obj)) {
        var ys = arrObjKeys(obj, inspect);
        var isPlainObject = gPO ? gPO(obj) === Object.prototype : obj instanceof Object || obj.constructor === Object;
        var protoTag = obj instanceof Object ? '' : 'null prototype';
        var stringTag = !isPlainObject && toStringTag && Object(obj) === obj && toStringTag in obj ? $slice.call(toStr(obj), 8, -1) : protoTag ? 'Object' : '';
        var constructorTag = isPlainObject || typeof obj.constructor !== 'function' ? '' : obj.constructor.name ? obj.constructor.name + ' ' : '';
        var tag = constructorTag + (stringTag || protoTag ? '[' + $join.call($concat.call([], stringTag || [], protoTag || []), ': ') + '] ' : '');
        if (ys.length === 0) { return tag + '{}'; }
        if (indent) {
            return tag + '{' + indentedJoin(ys, indent) + '}';
        }
        return tag + '{ ' + $join.call(ys, ', ') + ' }';
    }
    return String(obj);
};

function wrapQuotes(s, defaultStyle, opts) {
    var quoteChar = (opts.quoteStyle || defaultStyle) === 'double' ? '"' : "'";
    return quoteChar + s + quoteChar;
}

function quote(s) {
    return $replace.call(String(s), /"/g, '&quot;');
}

function isArray(obj) { return toStr(obj) === '[object Array]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }
function isDate(obj) { return toStr(obj) === '[object Date]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }
function isRegExp(obj) { return toStr(obj) === '[object RegExp]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }
function isError(obj) { return toStr(obj) === '[object Error]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }
function isString(obj) { return toStr(obj) === '[object String]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }
function isNumber(obj) { return toStr(obj) === '[object Number]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }
function isBoolean(obj) { return toStr(obj) === '[object Boolean]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }

// Symbol and BigInt do have Symbol.toStringTag by spec, so that can't be used to eliminate false positives
function isSymbol(obj) {
    if (hasShammedSymbols) {
        return obj && typeof obj === 'object' && obj instanceof Symbol;
    }
    if (typeof obj === 'symbol') {
        return true;
    }
    if (!obj || typeof obj !== 'object' || !symToString) {
        return false;
    }
    try {
        symToString.call(obj);
        return true;
    } catch (e) {}
    return false;
}

function isBigInt(obj) {
    if (!obj || typeof obj !== 'object' || !bigIntValueOf) {
        return false;
    }
    try {
        bigIntValueOf.call(obj);
        return true;
    } catch (e) {}
    return false;
}

var hasOwn = Object.prototype.hasOwnProperty || function (key) { return key in this; };
function has(obj, key) {
    return hasOwn.call(obj, key);
}

function toStr(obj) {
    return objectToString.call(obj);
}

function nameOf(f) {
    if (f.name) { return f.name; }
    var m = $match.call(functionToString.call(f), /^function\s*([\w$]+)/);
    if (m) { return m[1]; }
    return null;
}

function indexOf(xs, x) {
    if (xs.indexOf) { return xs.indexOf(x); }
    for (var i = 0, l = xs.length; i < l; i++) {
        if (xs[i] === x) { return i; }
    }
    return -1;
}

function isMap(x) {
    if (!mapSize || !x || typeof x !== 'object') {
        return false;
    }
    try {
        mapSize.call(x);
        try {
            setSize.call(x);
        } catch (s) {
            return true;
        }
        return x instanceof Map; // core-js workaround, pre-v2.5.0
    } catch (e) {}
    return false;
}

function isWeakMap(x) {
    if (!weakMapHas || !x || typeof x !== 'object') {
        return false;
    }
    try {
        weakMapHas.call(x, weakMapHas);
        try {
            weakSetHas.call(x, weakSetHas);
        } catch (s) {
            return true;
        }
        return x instanceof WeakMap; // core-js workaround, pre-v2.5.0
    } catch (e) {}
    return false;
}

function isWeakRef(x) {
    if (!weakRefDeref || !x || typeof x !== 'object') {
        return false;
    }
    try {
        weakRefDeref.call(x);
        return true;
    } catch (e) {}
    return false;
}

function isSet(x) {
    if (!setSize || !x || typeof x !== 'object') {
        return false;
    }
    try {
        setSize.call(x);
        try {
            mapSize.call(x);
        } catch (m) {
            return true;
        }
        return x instanceof Set; // core-js workaround, pre-v2.5.0
    } catch (e) {}
    return false;
}

function isWeakSet(x) {
    if (!weakSetHas || !x || typeof x !== 'object') {
        return false;
    }
    try {
        weakSetHas.call(x, weakSetHas);
        try {
            weakMapHas.call(x, weakMapHas);
        } catch (s) {
            return true;
        }
        return x instanceof WeakSet; // core-js workaround, pre-v2.5.0
    } catch (e) {}
    return false;
}

function isElement(x) {
    if (!x || typeof x !== 'object') { return false; }
    if (typeof HTMLElement !== 'undefined' && x instanceof HTMLElement) {
        return true;
    }
    return typeof x.nodeName === 'string' && typeof x.getAttribute === 'function';
}

function inspectString(str, opts) {
    if (str.length > opts.maxStringLength) {
        var remaining = str.length - opts.maxStringLength;
        var trailer = '... ' + remaining + ' more character' + (remaining > 1 ? 's' : '');
        return inspectString($slice.call(str, 0, opts.maxStringLength), opts) + trailer;
    }
    // eslint-disable-next-line no-control-regex
    var s = $replace.call($replace.call(str, /(['\\])/g, '\\$1'), /[\x00-\x1f]/g, lowbyte);
    return wrapQuotes(s, 'single', opts);
}

function lowbyte(c) {
    var n = c.charCodeAt(0);
    var x = {
        8: 'b',
        9: 't',
        10: 'n',
        12: 'f',
        13: 'r'
    }[n];
    if (x) { return '\\' + x; }
    return '\\x' + (n < 0x10 ? '0' : '') + $toUpperCase.call(n.toString(16));
}

function markBoxed(str) {
    return 'Object(' + str + ')';
}

function weakCollectionOf(type) {
    return type + ' { ? }';
}

function collectionOf(type, size, entries, indent) {
    var joinedEntries = indent ? indentedJoin(entries, indent) : $join.call(entries, ', ');
    return type + ' (' + size + ') {' + joinedEntries + '}';
}

function singleLineValues(xs) {
    for (var i = 0; i < xs.length; i++) {
        if (indexOf(xs[i], '\n') >= 0) {
            return false;
        }
    }
    return true;
}

function getIndent(opts, depth) {
    var baseIndent;
    if (opts.indent === '\t') {
        baseIndent = '\t';
    } else if (typeof opts.indent === 'number' && opts.indent > 0) {
        baseIndent = $join.call(Array(opts.indent + 1), ' ');
    } else {
        return null;
    }
    return {
        base: baseIndent,
        prev: $join.call(Array(depth + 1), baseIndent)
    };
}

function indentedJoin(xs, indent) {
    if (xs.length === 0) { return ''; }
    var lineJoiner = '\n' + indent.prev + indent.base;
    return lineJoiner + $join.call(xs, ',' + lineJoiner) + '\n' + indent.prev;
}

function arrObjKeys(obj, inspect) {
    var isArr = isArray(obj);
    var xs = [];
    if (isArr) {
        xs.length = obj.length;
        for (var i = 0; i < obj.length; i++) {
            xs[i] = has(obj, i) ? inspect(obj[i], obj) : '';
        }
    }
    var syms = typeof gOPS === 'function' ? gOPS(obj) : [];
    var symMap;
    if (hasShammedSymbols) {
        symMap = {};
        for (var k = 0; k < syms.length; k++) {
            symMap['$' + syms[k]] = syms[k];
        }
    }

    for (var key in obj) { // eslint-disable-line no-restricted-syntax
        if (!has(obj, key)) { continue; } // eslint-disable-line no-restricted-syntax, no-continue
        if (isArr && String(Number(key)) === key && key < obj.length) { continue; } // eslint-disable-line no-restricted-syntax, no-continue
        if (hasShammedSymbols && symMap['$' + key] instanceof Symbol) {
            // this is to prevent shammed Symbols, which are stored as strings, from being included in the string key section
            continue; // eslint-disable-line no-restricted-syntax, no-continue
        } else if ($test.call(/[^\w$]/, key)) {
            xs.push(inspect(key, obj) + ': ' + inspect(obj[key], obj));
        } else {
            xs.push(key + ': ' + inspect(obj[key], obj));
        }
    }
    if (typeof gOPS === 'function') {
        for (var j = 0; j < syms.length; j++) {
            if (isEnumerable.call(obj, syms[j])) {
                xs.push('[' + inspect(syms[j]) + ']: ' + inspect(obj[syms[j]], obj));
            }
        }
    }
    return xs;
}


/***/ }),

/***/ 58391:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__(73837).inspect;


/***/ }),

/***/ 85340:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var keysShim;
if (!Object.keys) {
	// modified from https://github.com/es-shims/es5-shim
	var has = Object.prototype.hasOwnProperty;
	var toStr = Object.prototype.toString;
	var isArgs = __webpack_require__(8118); // eslint-disable-line global-require
	var isEnumerable = Object.prototype.propertyIsEnumerable;
	var hasDontEnumBug = !isEnumerable.call({ toString: null }, 'toString');
	var hasProtoEnumBug = isEnumerable.call(function () {}, 'prototype');
	var dontEnums = [
		'toString',
		'toLocaleString',
		'valueOf',
		'hasOwnProperty',
		'isPrototypeOf',
		'propertyIsEnumerable',
		'constructor'
	];
	var equalsConstructorPrototype = function (o) {
		var ctor = o.constructor;
		return ctor && ctor.prototype === o;
	};
	var excludedKeys = {
		$applicationCache: true,
		$console: true,
		$external: true,
		$frame: true,
		$frameElement: true,
		$frames: true,
		$innerHeight: true,
		$innerWidth: true,
		$onmozfullscreenchange: true,
		$onmozfullscreenerror: true,
		$outerHeight: true,
		$outerWidth: true,
		$pageXOffset: true,
		$pageYOffset: true,
		$parent: true,
		$scrollLeft: true,
		$scrollTop: true,
		$scrollX: true,
		$scrollY: true,
		$self: true,
		$webkitIndexedDB: true,
		$webkitStorageInfo: true,
		$window: true
	};
	var hasAutomationEqualityBug = (function () {
		/* global window */
		if (typeof window === 'undefined') { return false; }
		for (var k in window) {
			try {
				if (!excludedKeys['$' + k] && has.call(window, k) && window[k] !== null && typeof window[k] === 'object') {
					try {
						equalsConstructorPrototype(window[k]);
					} catch (e) {
						return true;
					}
				}
			} catch (e) {
				return true;
			}
		}
		return false;
	}());
	var equalsConstructorPrototypeIfNotBuggy = function (o) {
		/* global window */
		if (typeof window === 'undefined' || !hasAutomationEqualityBug) {
			return equalsConstructorPrototype(o);
		}
		try {
			return equalsConstructorPrototype(o);
		} catch (e) {
			return false;
		}
	};

	keysShim = function keys(object) {
		var isObject = object !== null && typeof object === 'object';
		var isFunction = toStr.call(object) === '[object Function]';
		var isArguments = isArgs(object);
		var isString = isObject && toStr.call(object) === '[object String]';
		var theKeys = [];

		if (!isObject && !isFunction && !isArguments) {
			throw new TypeError('Object.keys called on a non-object');
		}

		var skipProto = hasProtoEnumBug && isFunction;
		if (isString && object.length > 0 && !has.call(object, 0)) {
			for (var i = 0; i < object.length; ++i) {
				theKeys.push(String(i));
			}
		}

		if (isArguments && object.length > 0) {
			for (var j = 0; j < object.length; ++j) {
				theKeys.push(String(j));
			}
		} else {
			for (var name in object) {
				if (!(skipProto && name === 'prototype') && has.call(object, name)) {
					theKeys.push(String(name));
				}
			}
		}

		if (hasDontEnumBug) {
			var skipConstructor = equalsConstructorPrototypeIfNotBuggy(object);

			for (var k = 0; k < dontEnums.length; ++k) {
				if (!(skipConstructor && dontEnums[k] === 'constructor') && has.call(object, dontEnums[k])) {
					theKeys.push(dontEnums[k]);
				}
			}
		}
		return theKeys;
	};
}
module.exports = keysShim;


/***/ }),

/***/ 75514:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var slice = Array.prototype.slice;
var isArgs = __webpack_require__(8118);

var origKeys = Object.keys;
var keysShim = origKeys ? function keys(o) { return origKeys(o); } : __webpack_require__(85340);

var originalKeys = Object.keys;

keysShim.shim = function shimObjectKeys() {
	if (Object.keys) {
		var keysWorksWithArguments = (function () {
			// Safari 5.0 bug
			var args = Object.keys(arguments);
			return args && args.length === arguments.length;
		}(1, 2));
		if (!keysWorksWithArguments) {
			Object.keys = function keys(object) { // eslint-disable-line func-name-matching
				if (isArgs(object)) {
					return originalKeys(slice.call(object));
				}
				return originalKeys(object);
			};
		}
	} else {
		Object.keys = keysShim;
	}
	return Object.keys || keysShim;
};

module.exports = keysShim;


/***/ }),

/***/ 8118:
/***/ ((module) => {

"use strict";


var toStr = Object.prototype.toString;

module.exports = function isArguments(value) {
	var str = toStr.call(value);
	var isArgs = str === '[object Arguments]';
	if (!isArgs) {
		isArgs = str !== '[object Array]' &&
			value !== null &&
			typeof value === 'object' &&
			typeof value.length === 'number' &&
			value.length >= 0 &&
			toStr.call(value.callee) === '[object Function]';
	}
	return isArgs;
};


/***/ }),

/***/ 58034:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var wrappy = __webpack_require__(37534)
module.exports = wrappy(once)
module.exports.strict = wrappy(onceStrict)

once.proto = once(function () {
  Object.defineProperty(Function.prototype, 'once', {
    value: function () {
      return once(this)
    },
    configurable: true
  })

  Object.defineProperty(Function.prototype, 'onceStrict', {
    value: function () {
      return onceStrict(this)
    },
    configurable: true
  })
})

function once (fn) {
  var f = function () {
    if (f.called) return f.value
    f.called = true
    return f.value = fn.apply(this, arguments)
  }
  f.called = false
  return f
}

function onceStrict (fn) {
  var f = function () {
    if (f.called)
      throw new Error(f.onceError)
    f.called = true
    return f.value = fn.apply(this, arguments)
  }
  var name = fn.name || 'Function wrapped with `once`'
  f.onceError = name + " shouldn't be called more than once"
  f.called = false
  return f
}


/***/ }),

/***/ 37433:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

const {promisify} = __webpack_require__(73837);
const path = __webpack_require__(71017);
const childProcess = __webpack_require__(32081);
const fs = __webpack_require__(57147);
const isWsl = __webpack_require__(4570);
const isDocker = __webpack_require__(64548);

const pAccess = promisify(fs.access);
const pReadFile = promisify(fs.readFile);

// Path to included `xdg-open`.
const localXdgOpenPath = path.join(__dirname, 'xdg-open');

/**
Get the mount point for fixed drives in WSL.

@inner
@returns {string} The mount point.
*/
const getWslDrivesMountPoint = (() => {
	// Default value for "root" param
	// according to https://docs.microsoft.com/en-us/windows/wsl/wsl-config
	const defaultMountPoint = '/mnt/';

	let mountPoint;

	return async function () {
		if (mountPoint) {
			// Return memoized mount point value
			return mountPoint;
		}

		const configFilePath = '/etc/wsl.conf';

		let isConfigFileExists = false;
		try {
			await pAccess(configFilePath, fs.constants.F_OK);
			isConfigFileExists = true;
		} catch (_) {}

		if (!isConfigFileExists) {
			return defaultMountPoint;
		}

		const configContent = await pReadFile(configFilePath, {encoding: 'utf8'});
		const configMountPoint = /root\s*=\s*(.*)/g.exec(configContent);

		if (!configMountPoint) {
			return defaultMountPoint;
		}

		mountPoint = configMountPoint[1].trim();
		mountPoint = mountPoint.endsWith('/') ? mountPoint : mountPoint + '/';

		return mountPoint;
	};
})();

module.exports = async (target, options) => {
	if (typeof target !== 'string') {
		throw new TypeError('Expected a `target`');
	}

	options = {
		wait: false,
		background: false,
		allowNonzeroExitCode: false,
		...options
	};

	let command;
	let {app} = options;
	let appArguments = [];
	const cliArguments = [];
	const childProcessOptions = {};

	if (Array.isArray(app)) {
		appArguments = app.slice(1);
		app = app[0];
	}

	if (process.platform === 'darwin') {
		command = 'open';

		if (options.wait) {
			cliArguments.push('--wait-apps');
		}

		if (options.background) {
			cliArguments.push('--background');
		}

		if (app) {
			cliArguments.push('-a', app);
		}
	} else if (process.platform === 'win32' || (isWsl && !isDocker())) {
		const mountPoint = await getWslDrivesMountPoint();

		command = isWsl ?
			`${mountPoint}c/Windows/System32/WindowsPowerShell/v1.0/powershell.exe` :
			`${process.env.SYSTEMROOT}\\System32\\WindowsPowerShell\\v1.0\\powershell`;

		cliArguments.push(
			'-NoProfile',
			'-NonInteractive',
			'–ExecutionPolicy',
			'Bypass',
			'-EncodedCommand'
		);

		if (!isWsl) {
			childProcessOptions.windowsVerbatimArguments = true;
		}

		const encodedArguments = ['Start'];

		if (options.wait) {
			encodedArguments.push('-Wait');
		}

		if (app) {
			// Double quote with double quotes to ensure the inner quotes are passed through.
			// Inner quotes are delimited for PowerShell interpretation with backticks.
			encodedArguments.push(`"\`"${app}\`""`, '-ArgumentList');
			appArguments.unshift(target);
		} else {
			encodedArguments.push(`"${target}"`);
		}

		if (appArguments.length > 0) {
			appArguments = appArguments.map(arg => `"\`"${arg}\`""`);
			encodedArguments.push(appArguments.join(','));
		}

		// Using Base64-encoded command, accepted by PowerShell, to allow special characters.
		target = Buffer.from(encodedArguments.join(' '), 'utf16le').toString('base64');
	} else {
		if (app) {
			command = app;
		} else {
			// When bundled by Webpack, there's no actual package file path and no local `xdg-open`.
			const isBundled = !__dirname || __dirname === '/';

			// Check if local `xdg-open` exists and is executable.
			let exeLocalXdgOpen = false;
			try {
				await pAccess(localXdgOpenPath, fs.constants.X_OK);
				exeLocalXdgOpen = true;
			} catch (_) {}

			const useSystemXdgOpen = process.versions.electron ||
				process.platform === 'android' || isBundled || !exeLocalXdgOpen;
			command = useSystemXdgOpen ? 'xdg-open' : localXdgOpenPath;
		}

		if (appArguments.length > 0) {
			cliArguments.push(...appArguments);
		}

		if (!options.wait) {
			// `xdg-open` will block the process unless stdio is ignored
			// and it's detached from the parent even if it's unref'd.
			childProcessOptions.stdio = 'ignore';
			childProcessOptions.detached = true;
		}
	}

	cliArguments.push(target);

	if (process.platform === 'darwin' && appArguments.length > 0) {
		cliArguments.push('--args', ...appArguments);
	}

	const subprocess = childProcess.spawn(command, cliArguments, childProcessOptions);

	if (options.wait) {
		return new Promise((resolve, reject) => {
			subprocess.once('error', reject);

			subprocess.once('close', exitCode => {
				if (options.allowNonzeroExitCode && exitCode > 0) {
					reject(new Error(`Exited with code ${exitCode}`));
					return;
				}

				resolve(subprocess);
			});
		});
	}

	subprocess.unref();

	return subprocess;
};


/***/ }),

/***/ 97312:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

const Queue = __webpack_require__(24127);

const pLimit = concurrency => {
	if (!((Number.isInteger(concurrency) || concurrency === Infinity) && concurrency > 0)) {
		throw new TypeError('Expected `concurrency` to be a number from 1 and up');
	}

	const queue = new Queue();
	let activeCount = 0;

	const next = () => {
		activeCount--;

		if (queue.size > 0) {
			queue.dequeue()();
		}
	};

	const run = async (fn, resolve, ...args) => {
		activeCount++;

		const result = (async () => fn(...args))();

		resolve(result);

		try {
			await result;
		} catch {}

		next();
	};

	const enqueue = (fn, resolve, ...args) => {
		queue.enqueue(run.bind(null, fn, resolve, ...args));

		(async () => {
			// This function needs to wait until the next microtask before comparing
			// `activeCount` to `concurrency`, because `activeCount` is updated asynchronously
			// when the run function is dequeued and called. The comparison in the if-statement
			// needs to happen asynchronously as well to get an up-to-date value for `activeCount`.
			await Promise.resolve();

			if (activeCount < concurrency && queue.size > 0) {
				queue.dequeue()();
			}
		})();
	};

	const generator = (fn, ...args) => new Promise(resolve => {
		enqueue(fn, resolve, ...args);
	});

	Object.defineProperties(generator, {
		activeCount: {
			get: () => activeCount
		},
		pendingCount: {
			get: () => queue.size
		},
		clearQueue: {
			value: () => {
				queue.clear();
			}
		}
	});

	return generator;
};

module.exports = pLimit;


/***/ }),

/***/ 89991:
/***/ ((module) => {

"use strict";


function posix(path) {
	return path.charAt(0) === '/';
}

function win32(path) {
	// https://github.com/nodejs/node/blob/b3fcc245fb25539909ef1d5eaa01dbf92e168633/lib/path.js#L56
	var splitDeviceRe = /^([a-zA-Z]:|[\\\/]{2}[^\\\/]+[\\\/]+[^\\\/]+)?([\\\/])?([\s\S]*?)$/;
	var result = splitDeviceRe.exec(path);
	var device = result[1] || '';
	var isUnc = Boolean(device && device.charAt(1) !== ':');

	// UNC paths are always absolute
	return Boolean(result[2] || isUnc);
}

module.exports = process.platform === 'win32' ? win32 : posix;
module.exports.posix = posix;
module.exports.win32 = win32;


/***/ }),

/***/ 57514:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


module.exports = __webpack_require__(53442);


/***/ }),

/***/ 87654:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


const path = __webpack_require__(71017);
const WIN_SLASH = '\\\\/';
const WIN_NO_SLASH = `[^${WIN_SLASH}]`;

/**
 * Posix glob regex
 */

const DOT_LITERAL = '\\.';
const PLUS_LITERAL = '\\+';
const QMARK_LITERAL = '\\?';
const SLASH_LITERAL = '\\/';
const ONE_CHAR = '(?=.)';
const QMARK = '[^/]';
const END_ANCHOR = `(?:${SLASH_LITERAL}|$)`;
const START_ANCHOR = `(?:^|${SLASH_LITERAL})`;
const DOTS_SLASH = `${DOT_LITERAL}{1,2}${END_ANCHOR}`;
const NO_DOT = `(?!${DOT_LITERAL})`;
const NO_DOTS = `(?!${START_ANCHOR}${DOTS_SLASH})`;
const NO_DOT_SLASH = `(?!${DOT_LITERAL}{0,1}${END_ANCHOR})`;
const NO_DOTS_SLASH = `(?!${DOTS_SLASH})`;
const QMARK_NO_DOT = `[^.${SLASH_LITERAL}]`;
const STAR = `${QMARK}*?`;

const POSIX_CHARS = {
  DOT_LITERAL,
  PLUS_LITERAL,
  QMARK_LITERAL,
  SLASH_LITERAL,
  ONE_CHAR,
  QMARK,
  END_ANCHOR,
  DOTS_SLASH,
  NO_DOT,
  NO_DOTS,
  NO_DOT_SLASH,
  NO_DOTS_SLASH,
  QMARK_NO_DOT,
  STAR,
  START_ANCHOR
};

/**
 * Windows glob regex
 */

const WINDOWS_CHARS = {
  ...POSIX_CHARS,

  SLASH_LITERAL: `[${WIN_SLASH}]`,
  QMARK: WIN_NO_SLASH,
  STAR: `${WIN_NO_SLASH}*?`,
  DOTS_SLASH: `${DOT_LITERAL}{1,2}(?:[${WIN_SLASH}]|$)`,
  NO_DOT: `(?!${DOT_LITERAL})`,
  NO_DOTS: `(?!(?:^|[${WIN_SLASH}])${DOT_LITERAL}{1,2}(?:[${WIN_SLASH}]|$))`,
  NO_DOT_SLASH: `(?!${DOT_LITERAL}{0,1}(?:[${WIN_SLASH}]|$))`,
  NO_DOTS_SLASH: `(?!${DOT_LITERAL}{1,2}(?:[${WIN_SLASH}]|$))`,
  QMARK_NO_DOT: `[^.${WIN_SLASH}]`,
  START_ANCHOR: `(?:^|[${WIN_SLASH}])`,
  END_ANCHOR: `(?:[${WIN_SLASH}]|$)`
};

/**
 * POSIX Bracket Regex
 */

const POSIX_REGEX_SOURCE = {
  alnum: 'a-zA-Z0-9',
  alpha: 'a-zA-Z',
  ascii: '\\x00-\\x7F',
  blank: ' \\t',
  cntrl: '\\x00-\\x1F\\x7F',
  digit: '0-9',
  graph: '\\x21-\\x7E',
  lower: 'a-z',
  print: '\\x20-\\x7E ',
  punct: '\\-!"#$%&\'()\\*+,./:;<=>?@[\\]^_`{|}~',
  space: ' \\t\\r\\n\\v\\f',
  upper: 'A-Z',
  word: 'A-Za-z0-9_',
  xdigit: 'A-Fa-f0-9'
};

module.exports = {
  MAX_LENGTH: 1024 * 64,
  POSIX_REGEX_SOURCE,

  // regular expressions
  REGEX_BACKSLASH: /\\(?![*+?^${}(|)[\]])/g,
  REGEX_NON_SPECIAL_CHARS: /^[^@![\].,$*+?^{}()|\\/]+/,
  REGEX_SPECIAL_CHARS: /[-*+?.^${}(|)[\]]/,
  REGEX_SPECIAL_CHARS_BACKREF: /(\\?)((\W)(\3*))/g,
  REGEX_SPECIAL_CHARS_GLOBAL: /([-*+?.^${}(|)[\]])/g,
  REGEX_REMOVE_BACKSLASH: /(?:\[.*?[^\\]\]|\\(?=.))/g,

  // Replace globs with equivalent patterns to reduce parsing time.
  REPLACEMENTS: {
    '***': '*',
    '**/**': '**',
    '**/**/**': '**'
  },

  // Digits
  CHAR_0: 48, /* 0 */
  CHAR_9: 57, /* 9 */

  // Alphabet chars.
  CHAR_UPPERCASE_A: 65, /* A */
  CHAR_LOWERCASE_A: 97, /* a */
  CHAR_UPPERCASE_Z: 90, /* Z */
  CHAR_LOWERCASE_Z: 122, /* z */

  CHAR_LEFT_PARENTHESES: 40, /* ( */
  CHAR_RIGHT_PARENTHESES: 41, /* ) */

  CHAR_ASTERISK: 42, /* * */

  // Non-alphabetic chars.
  CHAR_AMPERSAND: 38, /* & */
  CHAR_AT: 64, /* @ */
  CHAR_BACKWARD_SLASH: 92, /* \ */
  CHAR_CARRIAGE_RETURN: 13, /* \r */
  CHAR_CIRCUMFLEX_ACCENT: 94, /* ^ */
  CHAR_COLON: 58, /* : */
  CHAR_COMMA: 44, /* , */
  CHAR_DOT: 46, /* . */
  CHAR_DOUBLE_QUOTE: 34, /* " */
  CHAR_EQUAL: 61, /* = */
  CHAR_EXCLAMATION_MARK: 33, /* ! */
  CHAR_FORM_FEED: 12, /* \f */
  CHAR_FORWARD_SLASH: 47, /* / */
  CHAR_GRAVE_ACCENT: 96, /* ` */
  CHAR_HASH: 35, /* # */
  CHAR_HYPHEN_MINUS: 45, /* - */
  CHAR_LEFT_ANGLE_BRACKET: 60, /* < */
  CHAR_LEFT_CURLY_BRACE: 123, /* { */
  CHAR_LEFT_SQUARE_BRACKET: 91, /* [ */
  CHAR_LINE_FEED: 10, /* \n */
  CHAR_NO_BREAK_SPACE: 160, /* \u00A0 */
  CHAR_PERCENT: 37, /* % */
  CHAR_PLUS: 43, /* + */
  CHAR_QUESTION_MARK: 63, /* ? */
  CHAR_RIGHT_ANGLE_BRACKET: 62, /* > */
  CHAR_RIGHT_CURLY_BRACE: 125, /* } */
  CHAR_RIGHT_SQUARE_BRACKET: 93, /* ] */
  CHAR_SEMICOLON: 59, /* ; */
  CHAR_SINGLE_QUOTE: 39, /* ' */
  CHAR_SPACE: 32, /*   */
  CHAR_TAB: 9, /* \t */
  CHAR_UNDERSCORE: 95, /* _ */
  CHAR_VERTICAL_LINE: 124, /* | */
  CHAR_ZERO_WIDTH_NOBREAK_SPACE: 65279, /* \uFEFF */

  SEP: path.sep,

  /**
   * Create EXTGLOB_CHARS
   */

  extglobChars(chars) {
    return {
      '!': { type: 'negate', open: '(?:(?!(?:', close: `))${chars.STAR})` },
      '?': { type: 'qmark', open: '(?:', close: ')?' },
      '+': { type: 'plus', open: '(?:', close: ')+' },
      '*': { type: 'star', open: '(?:', close: ')*' },
      '@': { type: 'at', open: '(?:', close: ')' }
    };
  },

  /**
   * Create GLOB_CHARS
   */

  globChars(win32) {
    return win32 === true ? WINDOWS_CHARS : POSIX_CHARS;
  }
};


/***/ }),

/***/ 61159:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


const constants = __webpack_require__(87654);
const utils = __webpack_require__(95266);

/**
 * Constants
 */

const {
  MAX_LENGTH,
  POSIX_REGEX_SOURCE,
  REGEX_NON_SPECIAL_CHARS,
  REGEX_SPECIAL_CHARS_BACKREF,
  REPLACEMENTS
} = constants;

/**
 * Helpers
 */

const expandRange = (args, options) => {
  if (typeof options.expandRange === 'function') {
    return options.expandRange(...args, options);
  }

  args.sort();
  const value = `[${args.join('-')}]`;

  try {
    /* eslint-disable-next-line no-new */
    new RegExp(value);
  } catch (ex) {
    return args.map(v => utils.escapeRegex(v)).join('..');
  }

  return value;
};

/**
 * Create the message for a syntax error
 */

const syntaxError = (type, char) => {
  return `Missing ${type}: "${char}" - use "\\\\${char}" to match literal characters`;
};

/**
 * Parse the given input string.
 * @param {String} input
 * @param {Object} options
 * @return {Object}
 */

const parse = (input, options) => {
  if (typeof input !== 'string') {
    throw new TypeError('Expected a string');
  }

  input = REPLACEMENTS[input] || input;

  const opts = { ...options };
  const max = typeof opts.maxLength === 'number' ? Math.min(MAX_LENGTH, opts.maxLength) : MAX_LENGTH;

  let len = input.length;
  if (len > max) {
    throw new SyntaxError(`Input length: ${len}, exceeds maximum allowed length: ${max}`);
  }

  const bos = { type: 'bos', value: '', output: opts.prepend || '' };
  const tokens = [bos];

  const capture = opts.capture ? '' : '?:';
  const win32 = utils.isWindows(options);

  // create constants based on platform, for windows or posix
  const PLATFORM_CHARS = constants.globChars(win32);
  const EXTGLOB_CHARS = constants.extglobChars(PLATFORM_CHARS);

  const {
    DOT_LITERAL,
    PLUS_LITERAL,
    SLASH_LITERAL,
    ONE_CHAR,
    DOTS_SLASH,
    NO_DOT,
    NO_DOT_SLASH,
    NO_DOTS_SLASH,
    QMARK,
    QMARK_NO_DOT,
    STAR,
    START_ANCHOR
  } = PLATFORM_CHARS;

  const globstar = opts => {
    return `(${capture}(?:(?!${START_ANCHOR}${opts.dot ? DOTS_SLASH : DOT_LITERAL}).)*?)`;
  };

  const nodot = opts.dot ? '' : NO_DOT;
  const qmarkNoDot = opts.dot ? QMARK : QMARK_NO_DOT;
  let star = opts.bash === true ? globstar(opts) : STAR;

  if (opts.capture) {
    star = `(${star})`;
  }

  // minimatch options support
  if (typeof opts.noext === 'boolean') {
    opts.noextglob = opts.noext;
  }

  const state = {
    input,
    index: -1,
    start: 0,
    dot: opts.dot === true,
    consumed: '',
    output: '',
    prefix: '',
    backtrack: false,
    negated: false,
    brackets: 0,
    braces: 0,
    parens: 0,
    quotes: 0,
    globstar: false,
    tokens
  };

  input = utils.removePrefix(input, state);
  len = input.length;

  const extglobs = [];
  const braces = [];
  const stack = [];
  let prev = bos;
  let value;

  /**
   * Tokenizing helpers
   */

  const eos = () => state.index === len - 1;
  const peek = state.peek = (n = 1) => input[state.index + n];
  const advance = state.advance = () => input[++state.index] || '';
  const remaining = () => input.slice(state.index + 1);
  const consume = (value = '', num = 0) => {
    state.consumed += value;
    state.index += num;
  };

  const append = token => {
    state.output += token.output != null ? token.output : token.value;
    consume(token.value);
  };

  const negate = () => {
    let count = 1;

    while (peek() === '!' && (peek(2) !== '(' || peek(3) === '?')) {
      advance();
      state.start++;
      count++;
    }

    if (count % 2 === 0) {
      return false;
    }

    state.negated = true;
    state.start++;
    return true;
  };

  const increment = type => {
    state[type]++;
    stack.push(type);
  };

  const decrement = type => {
    state[type]--;
    stack.pop();
  };

  /**
   * Push tokens onto the tokens array. This helper speeds up
   * tokenizing by 1) helping us avoid backtracking as much as possible,
   * and 2) helping us avoid creating extra tokens when consecutive
   * characters are plain text. This improves performance and simplifies
   * lookbehinds.
   */

  const push = tok => {
    if (prev.type === 'globstar') {
      const isBrace = state.braces > 0 && (tok.type === 'comma' || tok.type === 'brace');
      const isExtglob = tok.extglob === true || (extglobs.length && (tok.type === 'pipe' || tok.type === 'paren'));

      if (tok.type !== 'slash' && tok.type !== 'paren' && !isBrace && !isExtglob) {
        state.output = state.output.slice(0, -prev.output.length);
        prev.type = 'star';
        prev.value = '*';
        prev.output = star;
        state.output += prev.output;
      }
    }

    if (extglobs.length && tok.type !== 'paren') {
      extglobs[extglobs.length - 1].inner += tok.value;
    }

    if (tok.value || tok.output) append(tok);
    if (prev && prev.type === 'text' && tok.type === 'text') {
      prev.value += tok.value;
      prev.output = (prev.output || '') + tok.value;
      return;
    }

    tok.prev = prev;
    tokens.push(tok);
    prev = tok;
  };

  const extglobOpen = (type, value) => {
    const token = { ...EXTGLOB_CHARS[value], conditions: 1, inner: '' };

    token.prev = prev;
    token.parens = state.parens;
    token.output = state.output;
    const output = (opts.capture ? '(' : '') + token.open;

    increment('parens');
    push({ type, value, output: state.output ? '' : ONE_CHAR });
    push({ type: 'paren', extglob: true, value: advance(), output });
    extglobs.push(token);
  };

  const extglobClose = token => {
    let output = token.close + (opts.capture ? ')' : '');
    let rest;

    if (token.type === 'negate') {
      let extglobStar = star;

      if (token.inner && token.inner.length > 1 && token.inner.includes('/')) {
        extglobStar = globstar(opts);
      }

      if (extglobStar !== star || eos() || /^\)+$/.test(remaining())) {
        output = token.close = `)$))${extglobStar}`;
      }

      if (token.inner.includes('*') && (rest = remaining()) && /^\.[^\\/.]+$/.test(rest)) {
        // Any non-magical string (`.ts`) or even nested expression (`.{ts,tsx}`) can follow after the closing parenthesis.
        // In this case, we need to parse the string and use it in the output of the original pattern.
        // Suitable patterns: `/!(*.d).ts`, `/!(*.d).{ts,tsx}`, `**/!(*-dbg).@(js)`.
        //
        // Disabling the `fastpaths` option due to a problem with parsing strings as `.ts` in the pattern like `**/!(*.d).ts`.
        const expression = parse(rest, { ...options, fastpaths: false }).output;

        output = token.close = `)${expression})${extglobStar})`;
      }

      if (token.prev.type === 'bos') {
        state.negatedExtglob = true;
      }
    }

    push({ type: 'paren', extglob: true, value, output });
    decrement('parens');
  };

  /**
   * Fast paths
   */

  if (opts.fastpaths !== false && !/(^[*!]|[/()[\]{}"])/.test(input)) {
    let backslashes = false;

    let output = input.replace(REGEX_SPECIAL_CHARS_BACKREF, (m, esc, chars, first, rest, index) => {
      if (first === '\\') {
        backslashes = true;
        return m;
      }

      if (first === '?') {
        if (esc) {
          return esc + first + (rest ? QMARK.repeat(rest.length) : '');
        }
        if (index === 0) {
          return qmarkNoDot + (rest ? QMARK.repeat(rest.length) : '');
        }
        return QMARK.repeat(chars.length);
      }

      if (first === '.') {
        return DOT_LITERAL.repeat(chars.length);
      }

      if (first === '*') {
        if (esc) {
          return esc + first + (rest ? star : '');
        }
        return star;
      }
      return esc ? m : `\\${m}`;
    });

    if (backslashes === true) {
      if (opts.unescape === true) {
        output = output.replace(/\\/g, '');
      } else {
        output = output.replace(/\\+/g, m => {
          return m.length % 2 === 0 ? '\\\\' : (m ? '\\' : '');
        });
      }
    }

    if (output === input && opts.contains === true) {
      state.output = input;
      return state;
    }

    state.output = utils.wrapOutput(output, state, options);
    return state;
  }

  /**
   * Tokenize input until we reach end-of-string
   */

  while (!eos()) {
    value = advance();

    if (value === '\u0000') {
      continue;
    }

    /**
     * Escaped characters
     */

    if (value === '\\') {
      const next = peek();

      if (next === '/' && opts.bash !== true) {
        continue;
      }

      if (next === '.' || next === ';') {
        continue;
      }

      if (!next) {
        value += '\\';
        push({ type: 'text', value });
        continue;
      }

      // collapse slashes to reduce potential for exploits
      const match = /^\\+/.exec(remaining());
      let slashes = 0;

      if (match && match[0].length > 2) {
        slashes = match[0].length;
        state.index += slashes;
        if (slashes % 2 !== 0) {
          value += '\\';
        }
      }

      if (opts.unescape === true) {
        value = advance();
      } else {
        value += advance();
      }

      if (state.brackets === 0) {
        push({ type: 'text', value });
        continue;
      }
    }

    /**
     * If we're inside a regex character class, continue
     * until we reach the closing bracket.
     */

    if (state.brackets > 0 && (value !== ']' || prev.value === '[' || prev.value === '[^')) {
      if (opts.posix !== false && value === ':') {
        const inner = prev.value.slice(1);
        if (inner.includes('[')) {
          prev.posix = true;

          if (inner.includes(':')) {
            const idx = prev.value.lastIndexOf('[');
            const pre = prev.value.slice(0, idx);
            const rest = prev.value.slice(idx + 2);
            const posix = POSIX_REGEX_SOURCE[rest];
            if (posix) {
              prev.value = pre + posix;
              state.backtrack = true;
              advance();

              if (!bos.output && tokens.indexOf(prev) === 1) {
                bos.output = ONE_CHAR;
              }
              continue;
            }
          }
        }
      }

      if ((value === '[' && peek() !== ':') || (value === '-' && peek() === ']')) {
        value = `\\${value}`;
      }

      if (value === ']' && (prev.value === '[' || prev.value === '[^')) {
        value = `\\${value}`;
      }

      if (opts.posix === true && value === '!' && prev.value === '[') {
        value = '^';
      }

      prev.value += value;
      append({ value });
      continue;
    }

    /**
     * If we're inside a quoted string, continue
     * until we reach the closing double quote.
     */

    if (state.quotes === 1 && value !== '"') {
      value = utils.escapeRegex(value);
      prev.value += value;
      append({ value });
      continue;
    }

    /**
     * Double quotes
     */

    if (value === '"') {
      state.quotes = state.quotes === 1 ? 0 : 1;
      if (opts.keepQuotes === true) {
        push({ type: 'text', value });
      }
      continue;
    }

    /**
     * Parentheses
     */

    if (value === '(') {
      increment('parens');
      push({ type: 'paren', value });
      continue;
    }

    if (value === ')') {
      if (state.parens === 0 && opts.strictBrackets === true) {
        throw new SyntaxError(syntaxError('opening', '('));
      }

      const extglob = extglobs[extglobs.length - 1];
      if (extglob && state.parens === extglob.parens + 1) {
        extglobClose(extglobs.pop());
        continue;
      }

      push({ type: 'paren', value, output: state.parens ? ')' : '\\)' });
      decrement('parens');
      continue;
    }

    /**
     * Square brackets
     */

    if (value === '[') {
      if (opts.nobracket === true || !remaining().includes(']')) {
        if (opts.nobracket !== true && opts.strictBrackets === true) {
          throw new SyntaxError(syntaxError('closing', ']'));
        }

        value = `\\${value}`;
      } else {
        increment('brackets');
      }

      push({ type: 'bracket', value });
      continue;
    }

    if (value === ']') {
      if (opts.nobracket === true || (prev && prev.type === 'bracket' && prev.value.length === 1)) {
        push({ type: 'text', value, output: `\\${value}` });
        continue;
      }

      if (state.brackets === 0) {
        if (opts.strictBrackets === true) {
          throw new SyntaxError(syntaxError('opening', '['));
        }

        push({ type: 'text', value, output: `\\${value}` });
        continue;
      }

      decrement('brackets');

      const prevValue = prev.value.slice(1);
      if (prev.posix !== true && prevValue[0] === '^' && !prevValue.includes('/')) {
        value = `/${value}`;
      }

      prev.value += value;
      append({ value });

      // when literal brackets are explicitly disabled
      // assume we should match with a regex character class
      if (opts.literalBrackets === false || utils.hasRegexChars(prevValue)) {
        continue;
      }

      const escaped = utils.escapeRegex(prev.value);
      state.output = state.output.slice(0, -prev.value.length);

      // when literal brackets are explicitly enabled
      // assume we should escape the brackets to match literal characters
      if (opts.literalBrackets === true) {
        state.output += escaped;
        prev.value = escaped;
        continue;
      }

      // when the user specifies nothing, try to match both
      prev.value = `(${capture}${escaped}|${prev.value})`;
      state.output += prev.value;
      continue;
    }

    /**
     * Braces
     */

    if (value === '{' && opts.nobrace !== true) {
      increment('braces');

      const open = {
        type: 'brace',
        value,
        output: '(',
        outputIndex: state.output.length,
        tokensIndex: state.tokens.length
      };

      braces.push(open);
      push(open);
      continue;
    }

    if (value === '}') {
      const brace = braces[braces.length - 1];

      if (opts.nobrace === true || !brace) {
        push({ type: 'text', value, output: value });
        continue;
      }

      let output = ')';

      if (brace.dots === true) {
        const arr = tokens.slice();
        const range = [];

        for (let i = arr.length - 1; i >= 0; i--) {
          tokens.pop();
          if (arr[i].type === 'brace') {
            break;
          }
          if (arr[i].type !== 'dots') {
            range.unshift(arr[i].value);
          }
        }

        output = expandRange(range, opts);
        state.backtrack = true;
      }

      if (brace.comma !== true && brace.dots !== true) {
        const out = state.output.slice(0, brace.outputIndex);
        const toks = state.tokens.slice(brace.tokensIndex);
        brace.value = brace.output = '\\{';
        value = output = '\\}';
        state.output = out;
        for (const t of toks) {
          state.output += (t.output || t.value);
        }
      }

      push({ type: 'brace', value, output });
      decrement('braces');
      braces.pop();
      continue;
    }

    /**
     * Pipes
     */

    if (value === '|') {
      if (extglobs.length > 0) {
        extglobs[extglobs.length - 1].conditions++;
      }
      push({ type: 'text', value });
      continue;
    }

    /**
     * Commas
     */

    if (value === ',') {
      let output = value;

      const brace = braces[braces.length - 1];
      if (brace && stack[stack.length - 1] === 'braces') {
        brace.comma = true;
        output = '|';
      }

      push({ type: 'comma', value, output });
      continue;
    }

    /**
     * Slashes
     */

    if (value === '/') {
      // if the beginning of the glob is "./", advance the start
      // to the current index, and don't add the "./" characters
      // to the state. This greatly simplifies lookbehinds when
      // checking for BOS characters like "!" and "." (not "./")
      if (prev.type === 'dot' && state.index === state.start + 1) {
        state.start = state.index + 1;
        state.consumed = '';
        state.output = '';
        tokens.pop();
        prev = bos; // reset "prev" to the first token
        continue;
      }

      push({ type: 'slash', value, output: SLASH_LITERAL });
      continue;
    }

    /**
     * Dots
     */

    if (value === '.') {
      if (state.braces > 0 && prev.type === 'dot') {
        if (prev.value === '.') prev.output = DOT_LITERAL;
        const brace = braces[braces.length - 1];
        prev.type = 'dots';
        prev.output += value;
        prev.value += value;
        brace.dots = true;
        continue;
      }

      if ((state.braces + state.parens) === 0 && prev.type !== 'bos' && prev.type !== 'slash') {
        push({ type: 'text', value, output: DOT_LITERAL });
        continue;
      }

      push({ type: 'dot', value, output: DOT_LITERAL });
      continue;
    }

    /**
     * Question marks
     */

    if (value === '?') {
      const isGroup = prev && prev.value === '(';
      if (!isGroup && opts.noextglob !== true && peek() === '(' && peek(2) !== '?') {
        extglobOpen('qmark', value);
        continue;
      }

      if (prev && prev.type === 'paren') {
        const next = peek();
        let output = value;

        if (next === '<' && !utils.supportsLookbehinds()) {
          throw new Error('Node.js v10 or higher is required for regex lookbehinds');
        }

        if ((prev.value === '(' && !/[!=<:]/.test(next)) || (next === '<' && !/<([!=]|\w+>)/.test(remaining()))) {
          output = `\\${value}`;
        }

        push({ type: 'text', value, output });
        continue;
      }

      if (opts.dot !== true && (prev.type === 'slash' || prev.type === 'bos')) {
        push({ type: 'qmark', value, output: QMARK_NO_DOT });
        continue;
      }

      push({ type: 'qmark', value, output: QMARK });
      continue;
    }

    /**
     * Exclamation
     */

    if (value === '!') {
      if (opts.noextglob !== true && peek() === '(') {
        if (peek(2) !== '?' || !/[!=<:]/.test(peek(3))) {
          extglobOpen('negate', value);
          continue;
        }
      }

      if (opts.nonegate !== true && state.index === 0) {
        negate();
        continue;
      }
    }

    /**
     * Plus
     */

    if (value === '+') {
      if (opts.noextglob !== true && peek() === '(' && peek(2) !== '?') {
        extglobOpen('plus', value);
        continue;
      }

      if ((prev && prev.value === '(') || opts.regex === false) {
        push({ type: 'plus', value, output: PLUS_LITERAL });
        continue;
      }

      if ((prev && (prev.type === 'bracket' || prev.type === 'paren' || prev.type === 'brace')) || state.parens > 0) {
        push({ type: 'plus', value });
        continue;
      }

      push({ type: 'plus', value: PLUS_LITERAL });
      continue;
    }

    /**
     * Plain text
     */

    if (value === '@') {
      if (opts.noextglob !== true && peek() === '(' && peek(2) !== '?') {
        push({ type: 'at', extglob: true, value, output: '' });
        continue;
      }

      push({ type: 'text', value });
      continue;
    }

    /**
     * Plain text
     */

    if (value !== '*') {
      if (value === '$' || value === '^') {
        value = `\\${value}`;
      }

      const match = REGEX_NON_SPECIAL_CHARS.exec(remaining());
      if (match) {
        value += match[0];
        state.index += match[0].length;
      }

      push({ type: 'text', value });
      continue;
    }

    /**
     * Stars
     */

    if (prev && (prev.type === 'globstar' || prev.star === true)) {
      prev.type = 'star';
      prev.star = true;
      prev.value += value;
      prev.output = star;
      state.backtrack = true;
      state.globstar = true;
      consume(value);
      continue;
    }

    let rest = remaining();
    if (opts.noextglob !== true && /^\([^?]/.test(rest)) {
      extglobOpen('star', value);
      continue;
    }

    if (prev.type === 'star') {
      if (opts.noglobstar === true) {
        consume(value);
        continue;
      }

      const prior = prev.prev;
      const before = prior.prev;
      const isStart = prior.type === 'slash' || prior.type === 'bos';
      const afterStar = before && (before.type === 'star' || before.type === 'globstar');

      if (opts.bash === true && (!isStart || (rest[0] && rest[0] !== '/'))) {
        push({ type: 'star', value, output: '' });
        continue;
      }

      const isBrace = state.braces > 0 && (prior.type === 'comma' || prior.type === 'brace');
      const isExtglob = extglobs.length && (prior.type === 'pipe' || prior.type === 'paren');
      if (!isStart && prior.type !== 'paren' && !isBrace && !isExtglob) {
        push({ type: 'star', value, output: '' });
        continue;
      }

      // strip consecutive `/**/`
      while (rest.slice(0, 3) === '/**') {
        const after = input[state.index + 4];
        if (after && after !== '/') {
          break;
        }
        rest = rest.slice(3);
        consume('/**', 3);
      }

      if (prior.type === 'bos' && eos()) {
        prev.type = 'globstar';
        prev.value += value;
        prev.output = globstar(opts);
        state.output = prev.output;
        state.globstar = true;
        consume(value);
        continue;
      }

      if (prior.type === 'slash' && prior.prev.type !== 'bos' && !afterStar && eos()) {
        state.output = state.output.slice(0, -(prior.output + prev.output).length);
        prior.output = `(?:${prior.output}`;

        prev.type = 'globstar';
        prev.output = globstar(opts) + (opts.strictSlashes ? ')' : '|$)');
        prev.value += value;
        state.globstar = true;
        state.output += prior.output + prev.output;
        consume(value);
        continue;
      }

      if (prior.type === 'slash' && prior.prev.type !== 'bos' && rest[0] === '/') {
        const end = rest[1] !== void 0 ? '|$' : '';

        state.output = state.output.slice(0, -(prior.output + prev.output).length);
        prior.output = `(?:${prior.output}`;

        prev.type = 'globstar';
        prev.output = `${globstar(opts)}${SLASH_LITERAL}|${SLASH_LITERAL}${end})`;
        prev.value += value;

        state.output += prior.output + prev.output;
        state.globstar = true;

        consume(value + advance());

        push({ type: 'slash', value: '/', output: '' });
        continue;
      }

      if (prior.type === 'bos' && rest[0] === '/') {
        prev.type = 'globstar';
        prev.value += value;
        prev.output = `(?:^|${SLASH_LITERAL}|${globstar(opts)}${SLASH_LITERAL})`;
        state.output = prev.output;
        state.globstar = true;
        consume(value + advance());
        push({ type: 'slash', value: '/', output: '' });
        continue;
      }

      // remove single star from output
      state.output = state.output.slice(0, -prev.output.length);

      // reset previous token to globstar
      prev.type = 'globstar';
      prev.output = globstar(opts);
      prev.value += value;

      // reset output with globstar
      state.output += prev.output;
      state.globstar = true;
      consume(value);
      continue;
    }

    const token = { type: 'star', value, output: star };

    if (opts.bash === true) {
      token.output = '.*?';
      if (prev.type === 'bos' || prev.type === 'slash') {
        token.output = nodot + token.output;
      }
      push(token);
      continue;
    }

    if (prev && (prev.type === 'bracket' || prev.type === 'paren') && opts.regex === true) {
      token.output = value;
      push(token);
      continue;
    }

    if (state.index === state.start || prev.type === 'slash' || prev.type === 'dot') {
      if (prev.type === 'dot') {
        state.output += NO_DOT_SLASH;
        prev.output += NO_DOT_SLASH;

      } else if (opts.dot === true) {
        state.output += NO_DOTS_SLASH;
        prev.output += NO_DOTS_SLASH;

      } else {
        state.output += nodot;
        prev.output += nodot;
      }

      if (peek() !== '*') {
        state.output += ONE_CHAR;
        prev.output += ONE_CHAR;
      }
    }

    push(token);
  }

  while (state.brackets > 0) {
    if (opts.strictBrackets === true) throw new SyntaxError(syntaxError('closing', ']'));
    state.output = utils.escapeLast(state.output, '[');
    decrement('brackets');
  }

  while (state.parens > 0) {
    if (opts.strictBrackets === true) throw new SyntaxError(syntaxError('closing', ')'));
    state.output = utils.escapeLast(state.output, '(');
    decrement('parens');
  }

  while (state.braces > 0) {
    if (opts.strictBrackets === true) throw new SyntaxError(syntaxError('closing', '}'));
    state.output = utils.escapeLast(state.output, '{');
    decrement('braces');
  }

  if (opts.strictSlashes !== true && (prev.type === 'star' || prev.type === 'bracket')) {
    push({ type: 'maybe_slash', value: '', output: `${SLASH_LITERAL}?` });
  }

  // rebuild the output if we had to backtrack at any point
  if (state.backtrack === true) {
    state.output = '';

    for (const token of state.tokens) {
      state.output += token.output != null ? token.output : token.value;

      if (token.suffix) {
        state.output += token.suffix;
      }
    }
  }

  return state;
};

/**
 * Fast paths for creating regular expressions for common glob patterns.
 * This can significantly speed up processing and has very little downside
 * impact when none of the fast paths match.
 */

parse.fastpaths = (input, options) => {
  const opts = { ...options };
  const max = typeof opts.maxLength === 'number' ? Math.min(MAX_LENGTH, opts.maxLength) : MAX_LENGTH;
  const len = input.length;
  if (len > max) {
    throw new SyntaxError(`Input length: ${len}, exceeds maximum allowed length: ${max}`);
  }

  input = REPLACEMENTS[input] || input;
  const win32 = utils.isWindows(options);

  // create constants based on platform, for windows or posix
  const {
    DOT_LITERAL,
    SLASH_LITERAL,
    ONE_CHAR,
    DOTS_SLASH,
    NO_DOT,
    NO_DOTS,
    NO_DOTS_SLASH,
    STAR,
    START_ANCHOR
  } = constants.globChars(win32);

  const nodot = opts.dot ? NO_DOTS : NO_DOT;
  const slashDot = opts.dot ? NO_DOTS_SLASH : NO_DOT;
  const capture = opts.capture ? '' : '?:';
  const state = { negated: false, prefix: '' };
  let star = opts.bash === true ? '.*?' : STAR;

  if (opts.capture) {
    star = `(${star})`;
  }

  const globstar = opts => {
    if (opts.noglobstar === true) return star;
    return `(${capture}(?:(?!${START_ANCHOR}${opts.dot ? DOTS_SLASH : DOT_LITERAL}).)*?)`;
  };

  const create = str => {
    switch (str) {
      case '*':
        return `${nodot}${ONE_CHAR}${star}`;

      case '.*':
        return `${DOT_LITERAL}${ONE_CHAR}${star}`;

      case '*.*':
        return `${nodot}${star}${DOT_LITERAL}${ONE_CHAR}${star}`;

      case '*/*':
        return `${nodot}${star}${SLASH_LITERAL}${ONE_CHAR}${slashDot}${star}`;

      case '**':
        return nodot + globstar(opts);

      case '**/*':
        return `(?:${nodot}${globstar(opts)}${SLASH_LITERAL})?${slashDot}${ONE_CHAR}${star}`;

      case '**/*.*':
        return `(?:${nodot}${globstar(opts)}${SLASH_LITERAL})?${slashDot}${star}${DOT_LITERAL}${ONE_CHAR}${star}`;

      case '**/.*':
        return `(?:${nodot}${globstar(opts)}${SLASH_LITERAL})?${DOT_LITERAL}${ONE_CHAR}${star}`;

      default: {
        const match = /^(.*?)\.(\w+)$/.exec(str);
        if (!match) return;

        const source = create(match[1]);
        if (!source) return;

        return source + DOT_LITERAL + match[2];
      }
    }
  };

  const output = utils.removePrefix(input, state);
  let source = create(output);

  if (source && opts.strictSlashes !== true) {
    source += `${SLASH_LITERAL}?`;
  }

  return source;
};

module.exports = parse;


/***/ }),

/***/ 53442:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


const path = __webpack_require__(71017);
const scan = __webpack_require__(97965);
const parse = __webpack_require__(61159);
const utils = __webpack_require__(95266);
const constants = __webpack_require__(87654);
const isObject = val => val && typeof val === 'object' && !Array.isArray(val);

/**
 * Creates a matcher function from one or more glob patterns. The
 * returned function takes a string to match as its first argument,
 * and returns true if the string is a match. The returned matcher
 * function also takes a boolean as the second argument that, when true,
 * returns an object with additional information.
 *
 * ```js
 * const picomatch = require('picomatch');
 * // picomatch(glob[, options]);
 *
 * const isMatch = picomatch('*.!(*a)');
 * console.log(isMatch('a.a')); //=> false
 * console.log(isMatch('a.b')); //=> true
 * ```
 * @name picomatch
 * @param {String|Array} `globs` One or more glob patterns.
 * @param {Object=} `options`
 * @return {Function=} Returns a matcher function.
 * @api public
 */

const picomatch = (glob, options, returnState = false) => {
  if (Array.isArray(glob)) {
    const fns = glob.map(input => picomatch(input, options, returnState));
    const arrayMatcher = str => {
      for (const isMatch of fns) {
        const state = isMatch(str);
        if (state) return state;
      }
      return false;
    };
    return arrayMatcher;
  }

  const isState = isObject(glob) && glob.tokens && glob.input;

  if (glob === '' || (typeof glob !== 'string' && !isState)) {
    throw new TypeError('Expected pattern to be a non-empty string');
  }

  const opts = options || {};
  const posix = utils.isWindows(options);
  const regex = isState
    ? picomatch.compileRe(glob, options)
    : picomatch.makeRe(glob, options, false, true);

  const state = regex.state;
  delete regex.state;

  let isIgnored = () => false;
  if (opts.ignore) {
    const ignoreOpts = { ...options, ignore: null, onMatch: null, onResult: null };
    isIgnored = picomatch(opts.ignore, ignoreOpts, returnState);
  }

  const matcher = (input, returnObject = false) => {
    const { isMatch, match, output } = picomatch.test(input, regex, options, { glob, posix });
    const result = { glob, state, regex, posix, input, output, match, isMatch };

    if (typeof opts.onResult === 'function') {
      opts.onResult(result);
    }

    if (isMatch === false) {
      result.isMatch = false;
      return returnObject ? result : false;
    }

    if (isIgnored(input)) {
      if (typeof opts.onIgnore === 'function') {
        opts.onIgnore(result);
      }
      result.isMatch = false;
      return returnObject ? result : false;
    }

    if (typeof opts.onMatch === 'function') {
      opts.onMatch(result);
    }
    return returnObject ? result : true;
  };

  if (returnState) {
    matcher.state = state;
  }

  return matcher;
};

/**
 * Test `input` with the given `regex`. This is used by the main
 * `picomatch()` function to test the input string.
 *
 * ```js
 * const picomatch = require('picomatch');
 * // picomatch.test(input, regex[, options]);
 *
 * console.log(picomatch.test('foo/bar', /^(?:([^/]*?)\/([^/]*?))$/));
 * // { isMatch: true, match: [ 'foo/', 'foo', 'bar' ], output: 'foo/bar' }
 * ```
 * @param {String} `input` String to test.
 * @param {RegExp} `regex`
 * @return {Object} Returns an object with matching info.
 * @api public
 */

picomatch.test = (input, regex, options, { glob, posix } = {}) => {
  if (typeof input !== 'string') {
    throw new TypeError('Expected input to be a string');
  }

  if (input === '') {
    return { isMatch: false, output: '' };
  }

  const opts = options || {};
  const format = opts.format || (posix ? utils.toPosixSlashes : null);
  let match = input === glob;
  let output = (match && format) ? format(input) : input;

  if (match === false) {
    output = format ? format(input) : input;
    match = output === glob;
  }

  if (match === false || opts.capture === true) {
    if (opts.matchBase === true || opts.basename === true) {
      match = picomatch.matchBase(input, regex, options, posix);
    } else {
      match = regex.exec(output);
    }
  }

  return { isMatch: Boolean(match), match, output };
};

/**
 * Match the basename of a filepath.
 *
 * ```js
 * const picomatch = require('picomatch');
 * // picomatch.matchBase(input, glob[, options]);
 * console.log(picomatch.matchBase('foo/bar.js', '*.js'); // true
 * ```
 * @param {String} `input` String to test.
 * @param {RegExp|String} `glob` Glob pattern or regex created by [.makeRe](#makeRe).
 * @return {Boolean}
 * @api public
 */

picomatch.matchBase = (input, glob, options, posix = utils.isWindows(options)) => {
  const regex = glob instanceof RegExp ? glob : picomatch.makeRe(glob, options);
  return regex.test(path.basename(input));
};

/**
 * Returns true if **any** of the given glob `patterns` match the specified `string`.
 *
 * ```js
 * const picomatch = require('picomatch');
 * // picomatch.isMatch(string, patterns[, options]);
 *
 * console.log(picomatch.isMatch('a.a', ['b.*', '*.a'])); //=> true
 * console.log(picomatch.isMatch('a.a', 'b.*')); //=> false
 * ```
 * @param {String|Array} str The string to test.
 * @param {String|Array} patterns One or more glob patterns to use for matching.
 * @param {Object} [options] See available [options](#options).
 * @return {Boolean} Returns true if any patterns match `str`
 * @api public
 */

picomatch.isMatch = (str, patterns, options) => picomatch(patterns, options)(str);

/**
 * Parse a glob pattern to create the source string for a regular
 * expression.
 *
 * ```js
 * const picomatch = require('picomatch');
 * const result = picomatch.parse(pattern[, options]);
 * ```
 * @param {String} `pattern`
 * @param {Object} `options`
 * @return {Object} Returns an object with useful properties and output to be used as a regex source string.
 * @api public
 */

picomatch.parse = (pattern, options) => {
  if (Array.isArray(pattern)) return pattern.map(p => picomatch.parse(p, options));
  return parse(pattern, { ...options, fastpaths: false });
};

/**
 * Scan a glob pattern to separate the pattern into segments.
 *
 * ```js
 * const picomatch = require('picomatch');
 * // picomatch.scan(input[, options]);
 *
 * const result = picomatch.scan('!./foo/*.js');
 * console.log(result);
 * { prefix: '!./',
 *   input: '!./foo/*.js',
 *   start: 3,
 *   base: 'foo',
 *   glob: '*.js',
 *   isBrace: false,
 *   isBracket: false,
 *   isGlob: true,
 *   isExtglob: false,
 *   isGlobstar: false,
 *   negated: true }
 * ```
 * @param {String} `input` Glob pattern to scan.
 * @param {Object} `options`
 * @return {Object} Returns an object with
 * @api public
 */

picomatch.scan = (input, options) => scan(input, options);

/**
 * Compile a regular expression from the `state` object returned by the
 * [parse()](#parse) method.
 *
 * @param {Object} `state`
 * @param {Object} `options`
 * @param {Boolean} `returnOutput` Intended for implementors, this argument allows you to return the raw output from the parser.
 * @param {Boolean} `returnState` Adds the state to a `state` property on the returned regex. Useful for implementors and debugging.
 * @return {RegExp}
 * @api public
 */

picomatch.compileRe = (state, options, returnOutput = false, returnState = false) => {
  if (returnOutput === true) {
    return state.output;
  }

  const opts = options || {};
  const prepend = opts.contains ? '' : '^';
  const append = opts.contains ? '' : '$';

  let source = `${prepend}(?:${state.output})${append}`;
  if (state && state.negated === true) {
    source = `^(?!${source}).*$`;
  }

  const regex = picomatch.toRegex(source, options);
  if (returnState === true) {
    regex.state = state;
  }

  return regex;
};

/**
 * Create a regular expression from a parsed glob pattern.
 *
 * ```js
 * const picomatch = require('picomatch');
 * const state = picomatch.parse('*.js');
 * // picomatch.compileRe(state[, options]);
 *
 * console.log(picomatch.compileRe(state));
 * //=> /^(?:(?!\.)(?=.)[^/]*?\.js)$/
 * ```
 * @param {String} `state` The object returned from the `.parse` method.
 * @param {Object} `options`
 * @param {Boolean} `returnOutput` Implementors may use this argument to return the compiled output, instead of a regular expression. This is not exposed on the options to prevent end-users from mutating the result.
 * @param {Boolean} `returnState` Implementors may use this argument to return the state from the parsed glob with the returned regular expression.
 * @return {RegExp} Returns a regex created from the given pattern.
 * @api public
 */

picomatch.makeRe = (input, options = {}, returnOutput = false, returnState = false) => {
  if (!input || typeof input !== 'string') {
    throw new TypeError('Expected a non-empty string');
  }

  let parsed = { negated: false, fastpaths: true };

  if (options.fastpaths !== false && (input[0] === '.' || input[0] === '*')) {
    parsed.output = parse.fastpaths(input, options);
  }

  if (!parsed.output) {
    parsed = parse(input, options);
  }

  return picomatch.compileRe(parsed, options, returnOutput, returnState);
};

/**
 * Create a regular expression from the given regex source string.
 *
 * ```js
 * const picomatch = require('picomatch');
 * // picomatch.toRegex(source[, options]);
 *
 * const { output } = picomatch.parse('*.js');
 * console.log(picomatch.toRegex(output));
 * //=> /^(?:(?!\.)(?=.)[^/]*?\.js)$/
 * ```
 * @param {String} `source` Regular expression source string.
 * @param {Object} `options`
 * @return {RegExp}
 * @api public
 */

picomatch.toRegex = (source, options) => {
  try {
    const opts = options || {};
    return new RegExp(source, opts.flags || (opts.nocase ? 'i' : ''));
  } catch (err) {
    if (options && options.debug === true) throw err;
    return /$^/;
  }
};

/**
 * Picomatch constants.
 * @return {Object}
 */

picomatch.constants = constants;

/**
 * Expose "picomatch"
 */

module.exports = picomatch;


/***/ }),

/***/ 97965:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


const utils = __webpack_require__(95266);
const {
  CHAR_ASTERISK,             /* * */
  CHAR_AT,                   /* @ */
  CHAR_BACKWARD_SLASH,       /* \ */
  CHAR_COMMA,                /* , */
  CHAR_DOT,                  /* . */
  CHAR_EXCLAMATION_MARK,     /* ! */
  CHAR_FORWARD_SLASH,        /* / */
  CHAR_LEFT_CURLY_BRACE,     /* { */
  CHAR_LEFT_PARENTHESES,     /* ( */
  CHAR_LEFT_SQUARE_BRACKET,  /* [ */
  CHAR_PLUS,                 /* + */
  CHAR_QUESTION_MARK,        /* ? */
  CHAR_RIGHT_CURLY_BRACE,    /* } */
  CHAR_RIGHT_PARENTHESES,    /* ) */
  CHAR_RIGHT_SQUARE_BRACKET  /* ] */
} = __webpack_require__(87654);

const isPathSeparator = code => {
  return code === CHAR_FORWARD_SLASH || code === CHAR_BACKWARD_SLASH;
};

const depth = token => {
  if (token.isPrefix !== true) {
    token.depth = token.isGlobstar ? Infinity : 1;
  }
};

/**
 * Quickly scans a glob pattern and returns an object with a handful of
 * useful properties, like `isGlob`, `path` (the leading non-glob, if it exists),
 * `glob` (the actual pattern), `negated` (true if the path starts with `!` but not
 * with `!(`) and `negatedExtglob` (true if the path starts with `!(`).
 *
 * ```js
 * const pm = require('picomatch');
 * console.log(pm.scan('foo/bar/*.js'));
 * { isGlob: true, input: 'foo/bar/*.js', base: 'foo/bar', glob: '*.js' }
 * ```
 * @param {String} `str`
 * @param {Object} `options`
 * @return {Object} Returns an object with tokens and regex source string.
 * @api public
 */

const scan = (input, options) => {
  const opts = options || {};

  const length = input.length - 1;
  const scanToEnd = opts.parts === true || opts.scanToEnd === true;
  const slashes = [];
  const tokens = [];
  const parts = [];

  let str = input;
  let index = -1;
  let start = 0;
  let lastIndex = 0;
  let isBrace = false;
  let isBracket = false;
  let isGlob = false;
  let isExtglob = false;
  let isGlobstar = false;
  let braceEscaped = false;
  let backslashes = false;
  let negated = false;
  let negatedExtglob = false;
  let finished = false;
  let braces = 0;
  let prev;
  let code;
  let token = { value: '', depth: 0, isGlob: false };

  const eos = () => index >= length;
  const peek = () => str.charCodeAt(index + 1);
  const advance = () => {
    prev = code;
    return str.charCodeAt(++index);
  };

  while (index < length) {
    code = advance();
    let next;

    if (code === CHAR_BACKWARD_SLASH) {
      backslashes = token.backslashes = true;
      code = advance();

      if (code === CHAR_LEFT_CURLY_BRACE) {
        braceEscaped = true;
      }
      continue;
    }

    if (braceEscaped === true || code === CHAR_LEFT_CURLY_BRACE) {
      braces++;

      while (eos() !== true && (code = advance())) {
        if (code === CHAR_BACKWARD_SLASH) {
          backslashes = token.backslashes = true;
          advance();
          continue;
        }

        if (code === CHAR_LEFT_CURLY_BRACE) {
          braces++;
          continue;
        }

        if (braceEscaped !== true && code === CHAR_DOT && (code = advance()) === CHAR_DOT) {
          isBrace = token.isBrace = true;
          isGlob = token.isGlob = true;
          finished = true;

          if (scanToEnd === true) {
            continue;
          }

          break;
        }

        if (braceEscaped !== true && code === CHAR_COMMA) {
          isBrace = token.isBrace = true;
          isGlob = token.isGlob = true;
          finished = true;

          if (scanToEnd === true) {
            continue;
          }

          break;
        }

        if (code === CHAR_RIGHT_CURLY_BRACE) {
          braces--;

          if (braces === 0) {
            braceEscaped = false;
            isBrace = token.isBrace = true;
            finished = true;
            break;
          }
        }
      }

      if (scanToEnd === true) {
        continue;
      }

      break;
    }

    if (code === CHAR_FORWARD_SLASH) {
      slashes.push(index);
      tokens.push(token);
      token = { value: '', depth: 0, isGlob: false };

      if (finished === true) continue;
      if (prev === CHAR_DOT && index === (start + 1)) {
        start += 2;
        continue;
      }

      lastIndex = index + 1;
      continue;
    }

    if (opts.noext !== true) {
      const isExtglobChar = code === CHAR_PLUS
        || code === CHAR_AT
        || code === CHAR_ASTERISK
        || code === CHAR_QUESTION_MARK
        || code === CHAR_EXCLAMATION_MARK;

      if (isExtglobChar === true && peek() === CHAR_LEFT_PARENTHESES) {
        isGlob = token.isGlob = true;
        isExtglob = token.isExtglob = true;
        finished = true;
        if (code === CHAR_EXCLAMATION_MARK && index === start) {
          negatedExtglob = true;
        }

        if (scanToEnd === true) {
          while (eos() !== true && (code = advance())) {
            if (code === CHAR_BACKWARD_SLASH) {
              backslashes = token.backslashes = true;
              code = advance();
              continue;
            }

            if (code === CHAR_RIGHT_PARENTHESES) {
              isGlob = token.isGlob = true;
              finished = true;
              break;
            }
          }
          continue;
        }
        break;
      }
    }

    if (code === CHAR_ASTERISK) {
      if (prev === CHAR_ASTERISK) isGlobstar = token.isGlobstar = true;
      isGlob = token.isGlob = true;
      finished = true;

      if (scanToEnd === true) {
        continue;
      }
      break;
    }

    if (code === CHAR_QUESTION_MARK) {
      isGlob = token.isGlob = true;
      finished = true;

      if (scanToEnd === true) {
        continue;
      }
      break;
    }

    if (code === CHAR_LEFT_SQUARE_BRACKET) {
      while (eos() !== true && (next = advance())) {
        if (next === CHAR_BACKWARD_SLASH) {
          backslashes = token.backslashes = true;
          advance();
          continue;
        }

        if (next === CHAR_RIGHT_SQUARE_BRACKET) {
          isBracket = token.isBracket = true;
          isGlob = token.isGlob = true;
          finished = true;
          break;
        }
      }

      if (scanToEnd === true) {
        continue;
      }

      break;
    }

    if (opts.nonegate !== true && code === CHAR_EXCLAMATION_MARK && index === start) {
      negated = token.negated = true;
      start++;
      continue;
    }

    if (opts.noparen !== true && code === CHAR_LEFT_PARENTHESES) {
      isGlob = token.isGlob = true;

      if (scanToEnd === true) {
        while (eos() !== true && (code = advance())) {
          if (code === CHAR_LEFT_PARENTHESES) {
            backslashes = token.backslashes = true;
            code = advance();
            continue;
          }

          if (code === CHAR_RIGHT_PARENTHESES) {
            finished = true;
            break;
          }
        }
        continue;
      }
      break;
    }

    if (isGlob === true) {
      finished = true;

      if (scanToEnd === true) {
        continue;
      }

      break;
    }
  }

  if (opts.noext === true) {
    isExtglob = false;
    isGlob = false;
  }

  let base = str;
  let prefix = '';
  let glob = '';

  if (start > 0) {
    prefix = str.slice(0, start);
    str = str.slice(start);
    lastIndex -= start;
  }

  if (base && isGlob === true && lastIndex > 0) {
    base = str.slice(0, lastIndex);
    glob = str.slice(lastIndex);
  } else if (isGlob === true) {
    base = '';
    glob = str;
  } else {
    base = str;
  }

  if (base && base !== '' && base !== '/' && base !== str) {
    if (isPathSeparator(base.charCodeAt(base.length - 1))) {
      base = base.slice(0, -1);
    }
  }

  if (opts.unescape === true) {
    if (glob) glob = utils.removeBackslashes(glob);

    if (base && backslashes === true) {
      base = utils.removeBackslashes(base);
    }
  }

  const state = {
    prefix,
    input,
    start,
    base,
    glob,
    isBrace,
    isBracket,
    isGlob,
    isExtglob,
    isGlobstar,
    negated,
    negatedExtglob
  };

  if (opts.tokens === true) {
    state.maxDepth = 0;
    if (!isPathSeparator(code)) {
      tokens.push(token);
    }
    state.tokens = tokens;
  }

  if (opts.parts === true || opts.tokens === true) {
    let prevIndex;

    for (let idx = 0; idx < slashes.length; idx++) {
      const n = prevIndex ? prevIndex + 1 : start;
      const i = slashes[idx];
      const value = input.slice(n, i);
      if (opts.tokens) {
        if (idx === 0 && start !== 0) {
          tokens[idx].isPrefix = true;
          tokens[idx].value = prefix;
        } else {
          tokens[idx].value = value;
        }
        depth(tokens[idx]);
        state.maxDepth += tokens[idx].depth;
      }
      if (idx !== 0 || value !== '') {
        parts.push(value);
      }
      prevIndex = i;
    }

    if (prevIndex && prevIndex + 1 < input.length) {
      const value = input.slice(prevIndex + 1);
      parts.push(value);

      if (opts.tokens) {
        tokens[tokens.length - 1].value = value;
        depth(tokens[tokens.length - 1]);
        state.maxDepth += tokens[tokens.length - 1].depth;
      }
    }

    state.slashes = slashes;
    state.parts = parts;
  }

  return state;
};

module.exports = scan;


/***/ }),

/***/ 95266:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


const path = __webpack_require__(71017);
const win32 = process.platform === 'win32';
const {
  REGEX_BACKSLASH,
  REGEX_REMOVE_BACKSLASH,
  REGEX_SPECIAL_CHARS,
  REGEX_SPECIAL_CHARS_GLOBAL
} = __webpack_require__(87654);

exports.isObject = val => val !== null && typeof val === 'object' && !Array.isArray(val);
exports.hasRegexChars = str => REGEX_SPECIAL_CHARS.test(str);
exports.isRegexChar = str => str.length === 1 && exports.hasRegexChars(str);
exports.escapeRegex = str => str.replace(REGEX_SPECIAL_CHARS_GLOBAL, '\\$1');
exports.toPosixSlashes = str => str.replace(REGEX_BACKSLASH, '/');

exports.removeBackslashes = str => {
  return str.replace(REGEX_REMOVE_BACKSLASH, match => {
    return match === '\\' ? '' : match;
  });
};

exports.supportsLookbehinds = () => {
  const segs = process.version.slice(1).split('.').map(Number);
  if (segs.length === 3 && segs[0] >= 9 || (segs[0] === 8 && segs[1] >= 10)) {
    return true;
  }
  return false;
};

exports.isWindows = options => {
  if (options && typeof options.windows === 'boolean') {
    return options.windows;
  }
  return win32 === true || path.sep === '\\';
};

exports.escapeLast = (input, char, lastIdx) => {
  const idx = input.lastIndexOf(char, lastIdx);
  if (idx === -1) return input;
  if (input[idx - 1] === '\\') return exports.escapeLast(input, char, idx - 1);
  return `${input.slice(0, idx)}\\${input.slice(idx)}`;
};

exports.removePrefix = (input, state = {}) => {
  let output = input;
  if (output.startsWith('./')) {
    output = output.slice(2);
    state.prefix = './';
  }
  return output;
};

exports.wrapOutput = (input, state = {}, options = {}) => {
  const prepend = options.contains ? '' : '^';
  const append = options.contains ? '' : '$';

  let output = `${prepend}(?:${input})${append}`;
  if (state.negated === true) {
    output = `(?:^(?!${output}).*$)`;
  }
  return output;
};


/***/ }),

/***/ 31819:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var parseUrl = (__webpack_require__(57310).parse);

var DEFAULT_PORTS = {
  ftp: 21,
  gopher: 70,
  http: 80,
  https: 443,
  ws: 80,
  wss: 443,
};

var stringEndsWith = String.prototype.endsWith || function(s) {
  return s.length <= this.length &&
    this.indexOf(s, this.length - s.length) !== -1;
};

/**
 * @param {string|object} url - The URL, or the result from url.parse.
 * @return {string} The URL of the proxy that should handle the request to the
 *  given URL. If no proxy is set, this will be an empty string.
 */
function getProxyForUrl(url) {
  var parsedUrl = typeof url === 'string' ? parseUrl(url) : url || {};
  var proto = parsedUrl.protocol;
  var hostname = parsedUrl.host;
  var port = parsedUrl.port;
  if (typeof hostname !== 'string' || !hostname || typeof proto !== 'string') {
    return '';  // Don't proxy URLs without a valid scheme or host.
  }

  proto = proto.split(':', 1)[0];
  // Stripping ports in this way instead of using parsedUrl.hostname to make
  // sure that the brackets around IPv6 addresses are kept.
  hostname = hostname.replace(/:\d*$/, '');
  port = parseInt(port) || DEFAULT_PORTS[proto] || 0;
  if (!shouldProxy(hostname, port)) {
    return '';  // Don't proxy URLs that match NO_PROXY.
  }

  var proxy =
    getEnv('npm_config_' + proto + '_proxy') ||
    getEnv(proto + '_proxy') ||
    getEnv('npm_config_proxy') ||
    getEnv('all_proxy');
  if (proxy && proxy.indexOf('://') === -1) {
    // Missing scheme in proxy, default to the requested URL's scheme.
    proxy = proto + '://' + proxy;
  }
  return proxy;
}

/**
 * Determines whether a given URL should be proxied.
 *
 * @param {string} hostname - The host name of the URL.
 * @param {number} port - The effective port of the URL.
 * @returns {boolean} Whether the given URL should be proxied.
 * @private
 */
function shouldProxy(hostname, port) {
  var NO_PROXY =
    (getEnv('npm_config_no_proxy') || getEnv('no_proxy')).toLowerCase();
  if (!NO_PROXY) {
    return true;  // Always proxy if NO_PROXY is not set.
  }
  if (NO_PROXY === '*') {
    return false;  // Never proxy if wildcard is set.
  }

  return NO_PROXY.split(/[,\s]/).every(function(proxy) {
    if (!proxy) {
      return true;  // Skip zero-length hosts.
    }
    var parsedProxy = proxy.match(/^(.+):(\d+)$/);
    var parsedProxyHostname = parsedProxy ? parsedProxy[1] : proxy;
    var parsedProxyPort = parsedProxy ? parseInt(parsedProxy[2]) : 0;
    if (parsedProxyPort && parsedProxyPort !== port) {
      return true;  // Skip if ports don't match.
    }

    if (!/^[.*]/.test(parsedProxyHostname)) {
      // No wildcards, so stop proxying if there is an exact match.
      return hostname !== parsedProxyHostname;
    }

    if (parsedProxyHostname.charAt(0) === '*') {
      // Remove leading wildcard.
      parsedProxyHostname = parsedProxyHostname.slice(1);
    }
    // Stop proxying if the hostname ends with the no_proxy host.
    return !stringEndsWith.call(hostname, parsedProxyHostname);
  });
}

/**
 * Get the value for an environment variable.
 *
 * @param {string} key - The name of the environment variable.
 * @return {string} The value of the environment variable.
 * @private
 */
function getEnv(key) {
  return process.env[key.toLowerCase()] || process.env[key.toUpperCase()] || '';
}

exports.getProxyForUrl = getProxyForUrl;


/***/ }),

/***/ 32461:
/***/ ((module) => {

/*! queue-microtask. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */
let promise

module.exports = typeof queueMicrotask === 'function'
  ? queueMicrotask.bind(typeof window !== 'undefined' ? window : global)
  // reuse resolved promise, and allocate it lazily
  : cb => (promise || (promise = Promise.resolve()))
    .then(cb)
    .catch(err => setTimeout(() => { throw err }, 0))


/***/ }),

/***/ 53587:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


const fs = __webpack_require__(57147);
const { Readable } = __webpack_require__(12781);
const sysPath = __webpack_require__(71017);
const { promisify } = __webpack_require__(73837);
const picomatch = __webpack_require__(57514);

const readdir = promisify(fs.readdir);
const stat = promisify(fs.stat);
const lstat = promisify(fs.lstat);
const realpath = promisify(fs.realpath);

/**
 * @typedef {Object} EntryInfo
 * @property {String} path
 * @property {String} fullPath
 * @property {fs.Stats=} stats
 * @property {fs.Dirent=} dirent
 * @property {String} basename
 */

const BANG = '!';
const RECURSIVE_ERROR_CODE = 'READDIRP_RECURSIVE_ERROR';
const NORMAL_FLOW_ERRORS = new Set(['ENOENT', 'EPERM', 'EACCES', 'ELOOP', RECURSIVE_ERROR_CODE]);
const FILE_TYPE = 'files';
const DIR_TYPE = 'directories';
const FILE_DIR_TYPE = 'files_directories';
const EVERYTHING_TYPE = 'all';
const ALL_TYPES = [FILE_TYPE, DIR_TYPE, FILE_DIR_TYPE, EVERYTHING_TYPE];

const isNormalFlowError = error => NORMAL_FLOW_ERRORS.has(error.code);
const [maj, min] = process.versions.node.split('.').slice(0, 2).map(n => Number.parseInt(n, 10));
const wantBigintFsStats = process.platform === 'win32' && (maj > 10 || (maj === 10 && min >= 5));

const normalizeFilter = filter => {
  if (filter === undefined) return;
  if (typeof filter === 'function') return filter;

  if (typeof filter === 'string') {
    const glob = picomatch(filter.trim());
    return entry => glob(entry.basename);
  }

  if (Array.isArray(filter)) {
    const positive = [];
    const negative = [];
    for (const item of filter) {
      const trimmed = item.trim();
      if (trimmed.charAt(0) === BANG) {
        negative.push(picomatch(trimmed.slice(1)));
      } else {
        positive.push(picomatch(trimmed));
      }
    }

    if (negative.length > 0) {
      if (positive.length > 0) {
        return entry =>
          positive.some(f => f(entry.basename)) && !negative.some(f => f(entry.basename));
      }
      return entry => !negative.some(f => f(entry.basename));
    }
    return entry => positive.some(f => f(entry.basename));
  }
};

class ReaddirpStream extends Readable {
  static get defaultOptions() {
    return {
      root: '.',
      /* eslint-disable no-unused-vars */
      fileFilter: (path) => true,
      directoryFilter: (path) => true,
      /* eslint-enable no-unused-vars */
      type: FILE_TYPE,
      lstat: false,
      depth: 2147483648,
      alwaysStat: false
    };
  }

  constructor(options = {}) {
    super({
      objectMode: true,
      autoDestroy: true,
      highWaterMark: options.highWaterMark || 4096
    });
    const opts = { ...ReaddirpStream.defaultOptions, ...options };
    const { root, type } = opts;

    this._fileFilter = normalizeFilter(opts.fileFilter);
    this._directoryFilter = normalizeFilter(opts.directoryFilter);

    const statMethod = opts.lstat ? lstat : stat;
    // Use bigint stats if it's windows and stat() supports options (node 10+).
    if (wantBigintFsStats) {
      this._stat = path => statMethod(path, { bigint: true });
    } else {
      this._stat = statMethod;
    }

    this._maxDepth = opts.depth;
    this._wantsDir = [DIR_TYPE, FILE_DIR_TYPE, EVERYTHING_TYPE].includes(type);
    this._wantsFile = [FILE_TYPE, FILE_DIR_TYPE, EVERYTHING_TYPE].includes(type);
    this._wantsEverything = type === EVERYTHING_TYPE;
    this._root = sysPath.resolve(root);
    this._isDirent = ('Dirent' in fs) && !opts.alwaysStat;
    this._statsProp = this._isDirent ? 'dirent' : 'stats';
    this._rdOptions = { encoding: 'utf8', withFileTypes: this._isDirent };

    // Launch stream with one parent, the root dir.
    this.parents = [this._exploreDir(root, 1)];
    this.reading = false;
    this.parent = undefined;
  }

  async _read(batch) {
    if (this.reading) return;
    this.reading = true;

    try {
      while (!this.destroyed && batch > 0) {
        const { path, depth, files = [] } = this.parent || {};

        if (files.length > 0) {
          const slice = files.splice(0, batch).map(dirent => this._formatEntry(dirent, path));
          for (const entry of await Promise.all(slice)) {
            if (this.destroyed) return;

            const entryType = await this._getEntryType(entry);
            if (entryType === 'directory' && this._directoryFilter(entry)) {
              if (depth <= this._maxDepth) {
                this.parents.push(this._exploreDir(entry.fullPath, depth + 1));
              }

              if (this._wantsDir) {
                this.push(entry);
                batch--;
              }
            } else if ((entryType === 'file' || this._includeAsFile(entry)) && this._fileFilter(entry)) {
              if (this._wantsFile) {
                this.push(entry);
                batch--;
              }
            }
          }
        } else {
          const parent = this.parents.pop();
          if (!parent) {
            this.push(null);
            break;
          }
          this.parent = await parent;
          if (this.destroyed) return;
        }
      }
    } catch (error) {
      this.destroy(error);
    } finally {
      this.reading = false;
    }
  }

  async _exploreDir(path, depth) {
    let files;
    try {
      files = await readdir(path, this._rdOptions);
    } catch (error) {
      this._onError(error);
    }
    return { files, depth, path };
  }

  async _formatEntry(dirent, path) {
    let entry;
    try {
      const basename = this._isDirent ? dirent.name : dirent;
      const fullPath = sysPath.resolve(sysPath.join(path, basename));
      entry = { path: sysPath.relative(this._root, fullPath), fullPath, basename };
      entry[this._statsProp] = this._isDirent ? dirent : await this._stat(fullPath);
    } catch (err) {
      this._onError(err);
    }
    return entry;
  }

  _onError(err) {
    if (isNormalFlowError(err) && !this.destroyed) {
      this.emit('warn', err);
    } else {
      this.destroy(err);
    }
  }

  async _getEntryType(entry) {
    // entry may be undefined, because a warning or an error were emitted
    // and the statsProp is undefined
    const stats = entry && entry[this._statsProp];
    if (!stats) {
      return;
    }
    if (stats.isFile()) {
      return 'file';
    }
    if (stats.isDirectory()) {
      return 'directory';
    }
    if (stats && stats.isSymbolicLink()) {
      const full = entry.fullPath;
      try {
        const entryRealPath = await realpath(full);
        const entryRealPathStats = await lstat(entryRealPath);
        if (entryRealPathStats.isFile()) {
          return 'file';
        }
        if (entryRealPathStats.isDirectory()) {
          const len = entryRealPath.length;
          if (full.startsWith(entryRealPath) && full.substr(len, 1) === sysPath.sep) {
            const recursiveError = new Error(
              `Circular symlink detected: "${full}" points to "${entryRealPath}"`
            );
            recursiveError.code = RECURSIVE_ERROR_CODE;
            return this._onError(recursiveError);
          }
          return 'directory';
        }
      } catch (error) {
        this._onError(error);
      }
    }
  }

  _includeAsFile(entry) {
    const stats = entry && entry[this._statsProp];

    return stats && this._wantsEverything && !stats.isDirectory();
  }
}

/**
 * @typedef {Object} ReaddirpArguments
 * @property {Function=} fileFilter
 * @property {Function=} directoryFilter
 * @property {String=} type
 * @property {Number=} depth
 * @property {String=} root
 * @property {Boolean=} lstat
 * @property {Boolean=} bigint
 */

/**
 * Main function which ends up calling readdirRec and reads all files and directories in given root recursively.
 * @param {String} root Root directory
 * @param {ReaddirpArguments=} options Options to specify root (start directory), filters and recursion depth
 */
const readdirp = (root, options = {}) => {
  let type = options.entryType || options.type;
  if (type === 'both') type = FILE_DIR_TYPE; // backwards-compatibility
  if (type) options.type = type;
  if (!root) {
    throw new Error('readdirp: root argument is required. Usage: readdirp(root, options)');
  } else if (typeof root !== 'string') {
    throw new TypeError('readdirp: root argument must be a string. Usage: readdirp(root, options)');
  } else if (type && !ALL_TYPES.includes(type)) {
    throw new Error(`readdirp: Invalid type passed. Use one of ${ALL_TYPES.join(', ')}`);
  }

  options.root = root;
  return new ReaddirpStream(options);
};

const readdirpPromise = (root, options = {}) => {
  return new Promise((resolve, reject) => {
    const files = [];
    readdirp(root, options)
      .on('data', entry => files.push(entry))
      .on('end', () => resolve(files))
      .on('error', error => reject(error));
  });
};

readdirp.promise = readdirpPromise;
readdirp.ReaddirpStream = ReaddirpStream;
readdirp.default = readdirp;

module.exports = readdirp;


/***/ }),

/***/ 32383:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var setFunctionName = __webpack_require__(91023);

var $Object = Object;
var $TypeError = TypeError;

module.exports = setFunctionName(function flags() {
	if (this != null && this !== $Object(this)) {
		throw new $TypeError('RegExp.prototype.flags getter called on non-object');
	}
	var result = '';
	if (this.hasIndices) {
		result += 'd';
	}
	if (this.global) {
		result += 'g';
	}
	if (this.ignoreCase) {
		result += 'i';
	}
	if (this.multiline) {
		result += 'm';
	}
	if (this.dotAll) {
		result += 's';
	}
	if (this.unicode) {
		result += 'u';
	}
	if (this.unicodeSets) {
		result += 'v';
	}
	if (this.sticky) {
		result += 'y';
	}
	return result;
}, 'get flags', true);



/***/ }),

/***/ 83060:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var define = __webpack_require__(48297);
var callBind = __webpack_require__(86606);

var implementation = __webpack_require__(32383);
var getPolyfill = __webpack_require__(33482);
var shim = __webpack_require__(30464);

var flagsBound = callBind(getPolyfill());

define(flagsBound, {
	getPolyfill: getPolyfill,
	implementation: implementation,
	shim: shim
});

module.exports = flagsBound;


/***/ }),

/***/ 48297:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var keys = __webpack_require__(75514);
var hasSymbols = typeof Symbol === 'function' && typeof Symbol('foo') === 'symbol';

var toStr = Object.prototype.toString;
var concat = Array.prototype.concat;
var defineDataProperty = __webpack_require__(56713);

var isFunction = function (fn) {
	return typeof fn === 'function' && toStr.call(fn) === '[object Function]';
};

var supportsDescriptors = __webpack_require__(64666)();

var defineProperty = function (object, name, value, predicate) {
	if (name in object) {
		if (predicate === true) {
			if (object[name] === value) {
				return;
			}
		} else if (!isFunction(predicate) || !predicate()) {
			return;
		}
	}

	if (supportsDescriptors) {
		defineDataProperty(object, name, value, true);
	} else {
		defineDataProperty(object, name, value);
	}
};

var defineProperties = function (object, map) {
	var predicates = arguments.length > 2 ? arguments[2] : {};
	var props = keys(map);
	if (hasSymbols) {
		props = concat.call(props, Object.getOwnPropertySymbols(map));
	}
	for (var i = 0; i < props.length; i += 1) {
		defineProperty(object, props[i], map[props[i]], predicates[props[i]]);
	}
};

defineProperties.supportsDescriptors = !!supportsDescriptors;

module.exports = defineProperties;


/***/ }),

/***/ 33482:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var implementation = __webpack_require__(32383);

var supportsDescriptors = (__webpack_require__(48297).supportsDescriptors);
var $gOPD = Object.getOwnPropertyDescriptor;

module.exports = function getPolyfill() {
	if (supportsDescriptors && (/a/mig).flags === 'gim') {
		var descriptor = $gOPD(RegExp.prototype, 'flags');
		if (
			descriptor
			&& typeof descriptor.get === 'function'
			&& typeof RegExp.prototype.dotAll === 'boolean'
			&& typeof RegExp.prototype.hasIndices === 'boolean'
		) {
			/* eslint getter-return: 0 */
			var calls = '';
			var o = {};
			Object.defineProperty(o, 'hasIndices', {
				get: function () {
					calls += 'd';
				}
			});
			Object.defineProperty(o, 'sticky', {
				get: function () {
					calls += 'y';
				}
			});
			if (calls === 'dy') {
				return descriptor.get;
			}
		}
	}
	return implementation;
};


/***/ }),

/***/ 30464:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var supportsDescriptors = (__webpack_require__(48297).supportsDescriptors);
var getPolyfill = __webpack_require__(33482);
var gOPD = Object.getOwnPropertyDescriptor;
var defineProperty = Object.defineProperty;
var TypeErr = TypeError;
var getProto = Object.getPrototypeOf;
var regex = /a/;

module.exports = function shimFlags() {
	if (!supportsDescriptors || !getProto) {
		throw new TypeErr('RegExp.prototype.flags requires a true ES5 environment that supports property descriptors');
	}
	var polyfill = getPolyfill();
	var proto = getProto(regex);
	var descriptor = gOPD(proto, 'flags');
	if (!descriptor || descriptor.get !== polyfill) {
		defineProperty(proto, 'flags', {
			configurable: true,
			enumerable: false,
			get: polyfill
		});
	}
	return polyfill;
};


/***/ }),

/***/ 57551:
/***/ ((module) => {

"use strict";


function reusify (Constructor) {
  var head = new Constructor()
  var tail = head

  function get () {
    var current = head

    if (current.next) {
      head = current.next
    } else {
      head = new Constructor()
      tail = head
    }

    current.next = null

    return current
  }

  function release (obj) {
    tail.next = obj
    tail = obj
  }

  return {
    get: get,
    release: release
  }
}

module.exports = reusify


/***/ }),

/***/ 73844:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const assert = __webpack_require__(39491)
const path = __webpack_require__(71017)
const fs = __webpack_require__(57147)
let glob = undefined
try {
  glob = __webpack_require__(76825)
} catch (_err) {
  // treat glob as optional.
}

const defaultGlobOpts = {
  nosort: true,
  silent: true
}

// for EMFILE handling
let timeout = 0

const isWindows = (process.platform === "win32")

const defaults = options => {
  const methods = [
    'unlink',
    'chmod',
    'stat',
    'lstat',
    'rmdir',
    'readdir'
  ]
  methods.forEach(m => {
    options[m] = options[m] || fs[m]
    m = m + 'Sync'
    options[m] = options[m] || fs[m]
  })

  options.maxBusyTries = options.maxBusyTries || 3
  options.emfileWait = options.emfileWait || 1000
  if (options.glob === false) {
    options.disableGlob = true
  }
  if (options.disableGlob !== true && glob === undefined) {
    throw Error('glob dependency not found, set `options.disableGlob = true` if intentional')
  }
  options.disableGlob = options.disableGlob || false
  options.glob = options.glob || defaultGlobOpts
}

const rimraf = (p, options, cb) => {
  if (typeof options === 'function') {
    cb = options
    options = {}
  }

  assert(p, 'rimraf: missing path')
  assert.equal(typeof p, 'string', 'rimraf: path should be a string')
  assert.equal(typeof cb, 'function', 'rimraf: callback function required')
  assert(options, 'rimraf: invalid options argument provided')
  assert.equal(typeof options, 'object', 'rimraf: options should be object')

  defaults(options)

  let busyTries = 0
  let errState = null
  let n = 0

  const next = (er) => {
    errState = errState || er
    if (--n === 0)
      cb(errState)
  }

  const afterGlob = (er, results) => {
    if (er)
      return cb(er)

    n = results.length
    if (n === 0)
      return cb()

    results.forEach(p => {
      const CB = (er) => {
        if (er) {
          if ((er.code === "EBUSY" || er.code === "ENOTEMPTY" || er.code === "EPERM") &&
              busyTries < options.maxBusyTries) {
            busyTries ++
            // try again, with the same exact callback as this one.
            return setTimeout(() => rimraf_(p, options, CB), busyTries * 100)
          }

          // this one won't happen if graceful-fs is used.
          if (er.code === "EMFILE" && timeout < options.emfileWait) {
            return setTimeout(() => rimraf_(p, options, CB), timeout ++)
          }

          // already gone
          if (er.code === "ENOENT") er = null
        }

        timeout = 0
        next(er)
      }
      rimraf_(p, options, CB)
    })
  }

  if (options.disableGlob || !glob.hasMagic(p))
    return afterGlob(null, [p])

  options.lstat(p, (er, stat) => {
    if (!er)
      return afterGlob(null, [p])

    glob(p, options.glob, afterGlob)
  })

}

// Two possible strategies.
// 1. Assume it's a file.  unlink it, then do the dir stuff on EPERM or EISDIR
// 2. Assume it's a directory.  readdir, then do the file stuff on ENOTDIR
//
// Both result in an extra syscall when you guess wrong.  However, there
// are likely far more normal files in the world than directories.  This
// is based on the assumption that a the average number of files per
// directory is >= 1.
//
// If anyone ever complains about this, then I guess the strategy could
// be made configurable somehow.  But until then, YAGNI.
const rimraf_ = (p, options, cb) => {
  assert(p)
  assert(options)
  assert(typeof cb === 'function')

  // sunos lets the root user unlink directories, which is... weird.
  // so we have to lstat here and make sure it's not a dir.
  options.lstat(p, (er, st) => {
    if (er && er.code === "ENOENT")
      return cb(null)

    // Windows can EPERM on stat.  Life is suffering.
    if (er && er.code === "EPERM" && isWindows)
      fixWinEPERM(p, options, er, cb)

    if (st && st.isDirectory())
      return rmdir(p, options, er, cb)

    options.unlink(p, er => {
      if (er) {
        if (er.code === "ENOENT")
          return cb(null)
        if (er.code === "EPERM")
          return (isWindows)
            ? fixWinEPERM(p, options, er, cb)
            : rmdir(p, options, er, cb)
        if (er.code === "EISDIR")
          return rmdir(p, options, er, cb)
      }
      return cb(er)
    })
  })
}

const fixWinEPERM = (p, options, er, cb) => {
  assert(p)
  assert(options)
  assert(typeof cb === 'function')

  options.chmod(p, 0o666, er2 => {
    if (er2)
      cb(er2.code === "ENOENT" ? null : er)
    else
      options.stat(p, (er3, stats) => {
        if (er3)
          cb(er3.code === "ENOENT" ? null : er)
        else if (stats.isDirectory())
          rmdir(p, options, er, cb)
        else
          options.unlink(p, cb)
      })
  })
}

const fixWinEPERMSync = (p, options, er) => {
  assert(p)
  assert(options)

  try {
    options.chmodSync(p, 0o666)
  } catch (er2) {
    if (er2.code === "ENOENT")
      return
    else
      throw er
  }

  let stats
  try {
    stats = options.statSync(p)
  } catch (er3) {
    if (er3.code === "ENOENT")
      return
    else
      throw er
  }

  if (stats.isDirectory())
    rmdirSync(p, options, er)
  else
    options.unlinkSync(p)
}

const rmdir = (p, options, originalEr, cb) => {
  assert(p)
  assert(options)
  assert(typeof cb === 'function')

  // try to rmdir first, and only readdir on ENOTEMPTY or EEXIST (SunOS)
  // if we guessed wrong, and it's not a directory, then
  // raise the original error.
  options.rmdir(p, er => {
    if (er && (er.code === "ENOTEMPTY" || er.code === "EEXIST" || er.code === "EPERM"))
      rmkids(p, options, cb)
    else if (er && er.code === "ENOTDIR")
      cb(originalEr)
    else
      cb(er)
  })
}

const rmkids = (p, options, cb) => {
  assert(p)
  assert(options)
  assert(typeof cb === 'function')

  options.readdir(p, (er, files) => {
    if (er)
      return cb(er)
    let n = files.length
    if (n === 0)
      return options.rmdir(p, cb)
    let errState
    files.forEach(f => {
      rimraf(path.join(p, f), options, er => {
        if (errState)
          return
        if (er)
          return cb(errState = er)
        if (--n === 0)
          options.rmdir(p, cb)
      })
    })
  })
}

// this looks simpler, and is strictly *faster*, but will
// tie up the JavaScript thread and fail on excessively
// deep directory trees.
const rimrafSync = (p, options) => {
  options = options || {}
  defaults(options)

  assert(p, 'rimraf: missing path')
  assert.equal(typeof p, 'string', 'rimraf: path should be a string')
  assert(options, 'rimraf: missing options')
  assert.equal(typeof options, 'object', 'rimraf: options should be object')

  let results

  if (options.disableGlob || !glob.hasMagic(p)) {
    results = [p]
  } else {
    try {
      options.lstatSync(p)
      results = [p]
    } catch (er) {
      results = glob.sync(p, options.glob)
    }
  }

  if (!results.length)
    return

  for (let i = 0; i < results.length; i++) {
    const p = results[i]

    let st
    try {
      st = options.lstatSync(p)
    } catch (er) {
      if (er.code === "ENOENT")
        return

      // Windows can EPERM on stat.  Life is suffering.
      if (er.code === "EPERM" && isWindows)
        fixWinEPERMSync(p, options, er)
    }

    try {
      // sunos lets the root user unlink directories, which is... weird.
      if (st && st.isDirectory())
        rmdirSync(p, options, null)
      else
        options.unlinkSync(p)
    } catch (er) {
      if (er.code === "ENOENT")
        return
      if (er.code === "EPERM")
        return isWindows ? fixWinEPERMSync(p, options, er) : rmdirSync(p, options, er)
      if (er.code !== "EISDIR")
        throw er

      rmdirSync(p, options, er)
    }
  }
}

const rmdirSync = (p, options, originalEr) => {
  assert(p)
  assert(options)

  try {
    options.rmdirSync(p)
  } catch (er) {
    if (er.code === "ENOENT")
      return
    if (er.code === "ENOTDIR")
      throw originalEr
    if (er.code === "ENOTEMPTY" || er.code === "EEXIST" || er.code === "EPERM")
      rmkidsSync(p, options)
  }
}

const rmkidsSync = (p, options) => {
  assert(p)
  assert(options)
  options.readdirSync(p).forEach(f => rimrafSync(path.join(p, f), options))

  // We only end up here once we got ENOTEMPTY at least once, and
  // at this point, we are guaranteed to have removed all the kids.
  // So, we know that it won't be ENOENT or ENOTDIR or anything else.
  // try really hard to delete stuff on windows, because it has a
  // PROFOUNDLY annoying habit of not closing handles promptly when
  // files are deleted, resulting in spurious ENOTEMPTY errors.
  const retries = isWindows ? 100 : 1
  let i = 0
  do {
    let threw = true
    try {
      const ret = options.rmdirSync(p, options)
      threw = false
      return ret
    } finally {
      if (++i < retries && threw)
        continue
    }
  } while (true)
}

module.exports = rimraf
rimraf.sync = rimrafSync


/***/ }),

/***/ 88842:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/*! run-parallel. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */
module.exports = runParallel

const queueMicrotask = __webpack_require__(32461)

function runParallel (tasks, cb) {
  let results, pending, keys
  let isSync = true

  if (Array.isArray(tasks)) {
    results = []
    pending = tasks.length
  } else {
    keys = Object.keys(tasks)
    results = {}
    pending = keys.length
  }

  function done (err) {
    function end () {
      if (cb) cb(err, results)
      cb = null
    }
    if (isSync) queueMicrotask(end)
    else end()
  }

  function each (i, err, result) {
    results[i] = result
    if (--pending === 0 || err) {
      done(err)
    }
  }

  if (!pending) {
    // empty
    done(null)
  } else if (keys) {
    // object
    keys.forEach(function (key) {
      tasks[key](function (err, result) { each(key, err, result) })
    })
  } else {
    // array
    tasks.forEach(function (task, i) {
      task(function (err, result) { each(i, err, result) })
    })
  }

  isSync = false
}


/***/ }),

/***/ 51236:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var callBound = __webpack_require__(34045);
var GetIntrinsic = __webpack_require__(41033);
var isRegex = __webpack_require__(84812);

var $exec = callBound('RegExp.prototype.exec');
var $TypeError = GetIntrinsic('%TypeError%');

module.exports = function regexTester(regex) {
	if (!isRegex(regex)) {
		throw new $TypeError('`regex` must be a RegExp');
	}
	return function test(s) {
		return $exec(regex, s) !== null;
	};
};


/***/ }),

/***/ 34045:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var GetIntrinsic = __webpack_require__(41033);

var callBind = __webpack_require__(30239);

var $indexOf = callBind(GetIntrinsic('String.prototype.indexOf'));

module.exports = function callBoundIntrinsic(name, allowMissing) {
	var intrinsic = GetIntrinsic(name, !!allowMissing);
	if (typeof intrinsic === 'function' && $indexOf(name, '.prototype.') > -1) {
		return callBind(intrinsic);
	}
	return intrinsic;
};


/***/ }),

/***/ 30239:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var bind = __webpack_require__(98089);
var GetIntrinsic = __webpack_require__(41033);
var setFunctionLength = __webpack_require__(10291);

var $TypeError = GetIntrinsic('%TypeError%');
var $apply = GetIntrinsic('%Function.prototype.apply%');
var $call = GetIntrinsic('%Function.prototype.call%');
var $reflectApply = GetIntrinsic('%Reflect.apply%', true) || bind.call($call, $apply);

var $defineProperty = GetIntrinsic('%Object.defineProperty%', true);
var $max = GetIntrinsic('%Math.max%');

if ($defineProperty) {
	try {
		$defineProperty({}, 'a', { value: 1 });
	} catch (e) {
		// IE 8 has a broken defineProperty
		$defineProperty = null;
	}
}

module.exports = function callBind(originalFunction) {
	if (typeof originalFunction !== 'function') {
		throw new $TypeError('a function is required');
	}
	var func = $reflectApply(bind, $call, arguments);
	return setFunctionLength(
		func,
		1 + $max(0, originalFunction.length - (arguments.length - 1)),
		true
	);
};

var applyBind = function applyBind() {
	return $reflectApply(bind, $apply, arguments);
};

if ($defineProperty) {
	$defineProperty(module.exports, 'apply', { value: applyBind });
} else {
	module.exports.apply = applyBind;
}


/***/ }),

/***/ 2080:
/***/ ((module) => {

"use strict";


/* eslint no-invalid-this: 1 */

var ERROR_MESSAGE = 'Function.prototype.bind called on incompatible ';
var toStr = Object.prototype.toString;
var max = Math.max;
var funcType = '[object Function]';

var concatty = function concatty(a, b) {
    var arr = [];

    for (var i = 0; i < a.length; i += 1) {
        arr[i] = a[i];
    }
    for (var j = 0; j < b.length; j += 1) {
        arr[j + a.length] = b[j];
    }

    return arr;
};

var slicy = function slicy(arrLike, offset) {
    var arr = [];
    for (var i = offset || 0, j = 0; i < arrLike.length; i += 1, j += 1) {
        arr[j] = arrLike[i];
    }
    return arr;
};

var joiny = function (arr, joiner) {
    var str = '';
    for (var i = 0; i < arr.length; i += 1) {
        str += arr[i];
        if (i + 1 < arr.length) {
            str += joiner;
        }
    }
    return str;
};

module.exports = function bind(that) {
    var target = this;
    if (typeof target !== 'function' || toStr.apply(target) !== funcType) {
        throw new TypeError(ERROR_MESSAGE + target);
    }
    var args = slicy(arguments, 1);

    var bound;
    var binder = function () {
        if (this instanceof bound) {
            var result = target.apply(
                this,
                concatty(args, arguments)
            );
            if (Object(result) === result) {
                return result;
            }
            return this;
        }
        return target.apply(
            that,
            concatty(args, arguments)
        );

    };

    var boundLength = max(0, target.length - args.length);
    var boundArgs = [];
    for (var i = 0; i < boundLength; i++) {
        boundArgs[i] = '$' + i;
    }

    bound = Function('binder', 'return function (' + joiny(boundArgs, ',') + '){ return binder.apply(this,arguments); }')(binder);

    if (target.prototype) {
        var Empty = function Empty() {};
        Empty.prototype = target.prototype;
        bound.prototype = new Empty();
        Empty.prototype = null;
    }

    return bound;
};


/***/ }),

/***/ 98089:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var implementation = __webpack_require__(2080);

module.exports = Function.prototype.bind || implementation;


/***/ }),

/***/ 52931:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
/* eslint-disable node/no-deprecated-api */



var buffer = __webpack_require__(14300)
var Buffer = buffer.Buffer

var safer = {}

var key

for (key in buffer) {
  if (!buffer.hasOwnProperty(key)) continue
  if (key === 'SlowBuffer' || key === 'Buffer') continue
  safer[key] = buffer[key]
}

var Safer = safer.Buffer = {}
for (key in Buffer) {
  if (!Buffer.hasOwnProperty(key)) continue
  if (key === 'allocUnsafe' || key === 'allocUnsafeSlow') continue
  Safer[key] = Buffer[key]
}

safer.Buffer.prototype = Buffer.prototype

if (!Safer.from || Safer.from === Uint8Array.from) {
  Safer.from = function (value, encodingOrOffset, length) {
    if (typeof value === 'number') {
      throw new TypeError('The "value" argument must not be of type number. Received type ' + typeof value)
    }
    if (value && typeof value.length === 'undefined') {
      throw new TypeError('The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type ' + typeof value)
    }
    return Buffer(value, encodingOrOffset, length)
  }
}

if (!Safer.alloc) {
  Safer.alloc = function (size, fill, encoding) {
    if (typeof size !== 'number') {
      throw new TypeError('The "size" argument must be of type number. Received type ' + typeof size)
    }
    if (size < 0 || size >= 2 * (1 << 30)) {
      throw new RangeError('The value "' + size + '" is invalid for option "size"')
    }
    var buf = Buffer(size)
    if (!fill || fill.length === 0) {
      buf.fill(0)
    } else if (typeof encoding === 'string') {
      buf.fill(fill, encoding)
    } else {
      buf.fill(fill)
    }
    return buf
  }
}

if (!safer.kStringMaxLength) {
  try {
    safer.kStringMaxLength = process.binding('buffer').kStringMaxLength
  } catch (e) {
    // we can't determine kStringMaxLength in environments where process.binding
    // is unsupported, so let's not set it
  }
}

if (!safer.constants) {
  safer.constants = {
    MAX_LENGTH: safer.kMaxLength
  }
  if (safer.kStringMaxLength) {
    safer.constants.MAX_STRING_LENGTH = safer.kStringMaxLength
  }
}

module.exports = safer


/***/ }),

/***/ 89990:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

;(function (sax) { // wrapper for non-node envs
  sax.parser = function (strict, opt) { return new SAXParser(strict, opt) }
  sax.SAXParser = SAXParser
  sax.SAXStream = SAXStream
  sax.createStream = createStream

  // When we pass the MAX_BUFFER_LENGTH position, start checking for buffer overruns.
  // When we check, schedule the next check for MAX_BUFFER_LENGTH - (max(buffer lengths)),
  // since that's the earliest that a buffer overrun could occur.  This way, checks are
  // as rare as required, but as often as necessary to ensure never crossing this bound.
  // Furthermore, buffers are only tested at most once per write(), so passing a very
  // large string into write() might have undesirable effects, but this is manageable by
  // the caller, so it is assumed to be safe.  Thus, a call to write() may, in the extreme
  // edge case, result in creating at most one complete copy of the string passed in.
  // Set to Infinity to have unlimited buffers.
  sax.MAX_BUFFER_LENGTH = 64 * 1024

  var buffers = [
    'comment', 'sgmlDecl', 'textNode', 'tagName', 'doctype',
    'procInstName', 'procInstBody', 'entity', 'attribName',
    'attribValue', 'cdata', 'script'
  ]

  sax.EVENTS = [
    'text',
    'processinginstruction',
    'sgmldeclaration',
    'doctype',
    'comment',
    'opentagstart',
    'attribute',
    'opentag',
    'closetag',
    'opencdata',
    'cdata',
    'closecdata',
    'error',
    'end',
    'ready',
    'script',
    'opennamespace',
    'closenamespace'
  ]

  function SAXParser (strict, opt) {
    if (!(this instanceof SAXParser)) {
      return new SAXParser(strict, opt)
    }

    var parser = this
    clearBuffers(parser)
    parser.q = parser.c = ''
    parser.bufferCheckPosition = sax.MAX_BUFFER_LENGTH
    parser.opt = opt || {}
    parser.opt.lowercase = parser.opt.lowercase || parser.opt.lowercasetags
    parser.looseCase = parser.opt.lowercase ? 'toLowerCase' : 'toUpperCase'
    parser.tags = []
    parser.closed = parser.closedRoot = parser.sawRoot = false
    parser.tag = parser.error = null
    parser.strict = !!strict
    parser.noscript = !!(strict || parser.opt.noscript)
    parser.state = S.BEGIN
    parser.strictEntities = parser.opt.strictEntities
    parser.ENTITIES = parser.strictEntities ? Object.create(sax.XML_ENTITIES) : Object.create(sax.ENTITIES)
    parser.attribList = []

    // namespaces form a prototype chain.
    // it always points at the current tag,
    // which protos to its parent tag.
    if (parser.opt.xmlns) {
      parser.ns = Object.create(rootNS)
    }

    // mostly just for error reporting
    parser.trackPosition = parser.opt.position !== false
    if (parser.trackPosition) {
      parser.position = parser.line = parser.column = 0
    }
    emit(parser, 'onready')
  }

  if (!Object.create) {
    Object.create = function (o) {
      function F () {}
      F.prototype = o
      var newf = new F()
      return newf
    }
  }

  if (!Object.keys) {
    Object.keys = function (o) {
      var a = []
      for (var i in o) if (o.hasOwnProperty(i)) a.push(i)
      return a
    }
  }

  function checkBufferLength (parser) {
    var maxAllowed = Math.max(sax.MAX_BUFFER_LENGTH, 10)
    var maxActual = 0
    for (var i = 0, l = buffers.length; i < l; i++) {
      var len = parser[buffers[i]].length
      if (len > maxAllowed) {
        // Text/cdata nodes can get big, and since they're buffered,
        // we can get here under normal conditions.
        // Avoid issues by emitting the text node now,
        // so at least it won't get any bigger.
        switch (buffers[i]) {
          case 'textNode':
            closeText(parser)
            break

          case 'cdata':
            emitNode(parser, 'oncdata', parser.cdata)
            parser.cdata = ''
            break

          case 'script':
            emitNode(parser, 'onscript', parser.script)
            parser.script = ''
            break

          default:
            error(parser, 'Max buffer length exceeded: ' + buffers[i])
        }
      }
      maxActual = Math.max(maxActual, len)
    }
    // schedule the next check for the earliest possible buffer overrun.
    var m = sax.MAX_BUFFER_LENGTH - maxActual
    parser.bufferCheckPosition = m + parser.position
  }

  function clearBuffers (parser) {
    for (var i = 0, l = buffers.length; i < l; i++) {
      parser[buffers[i]] = ''
    }
  }

  function flushBuffers (parser) {
    closeText(parser)
    if (parser.cdata !== '') {
      emitNode(parser, 'oncdata', parser.cdata)
      parser.cdata = ''
    }
    if (parser.script !== '') {
      emitNode(parser, 'onscript', parser.script)
      parser.script = ''
    }
  }

  SAXParser.prototype = {
    end: function () { end(this) },
    write: write,
    resume: function () { this.error = null; return this },
    close: function () { return this.write(null) },
    flush: function () { flushBuffers(this) }
  }

  var Stream
  try {
    Stream = (__webpack_require__(12781).Stream)
  } catch (ex) {
    Stream = function () {}
  }

  var streamWraps = sax.EVENTS.filter(function (ev) {
    return ev !== 'error' && ev !== 'end'
  })

  function createStream (strict, opt) {
    return new SAXStream(strict, opt)
  }

  function SAXStream (strict, opt) {
    if (!(this instanceof SAXStream)) {
      return new SAXStream(strict, opt)
    }

    Stream.apply(this)

    this._parser = new SAXParser(strict, opt)
    this.writable = true
    this.readable = true

    var me = this

    this._parser.onend = function () {
      me.emit('end')
    }

    this._parser.onerror = function (er) {
      me.emit('error', er)

      // if didn't throw, then means error was handled.
      // go ahead and clear error, so we can write again.
      me._parser.error = null
    }

    this._decoder = null

    streamWraps.forEach(function (ev) {
      Object.defineProperty(me, 'on' + ev, {
        get: function () {
          return me._parser['on' + ev]
        },
        set: function (h) {
          if (!h) {
            me.removeAllListeners(ev)
            me._parser['on' + ev] = h
            return h
          }
          me.on(ev, h)
        },
        enumerable: true,
        configurable: false
      })
    })
  }

  SAXStream.prototype = Object.create(Stream.prototype, {
    constructor: {
      value: SAXStream
    }
  })

  SAXStream.prototype.write = function (data) {
    if (typeof Buffer === 'function' &&
      typeof Buffer.isBuffer === 'function' &&
      Buffer.isBuffer(data)) {
      if (!this._decoder) {
        var SD = (__webpack_require__(71576).StringDecoder)
        this._decoder = new SD('utf8')
      }
      data = this._decoder.write(data)
    }

    this._parser.write(data.toString())
    this.emit('data', data)
    return true
  }

  SAXStream.prototype.end = function (chunk) {
    if (chunk && chunk.length) {
      this.write(chunk)
    }
    this._parser.end()
    return true
  }

  SAXStream.prototype.on = function (ev, handler) {
    var me = this
    if (!me._parser['on' + ev] && streamWraps.indexOf(ev) !== -1) {
      me._parser['on' + ev] = function () {
        var args = arguments.length === 1 ? [arguments[0]] : Array.apply(null, arguments)
        args.splice(0, 0, ev)
        me.emit.apply(me, args)
      }
    }

    return Stream.prototype.on.call(me, ev, handler)
  }

  // this really needs to be replaced with character classes.
  // XML allows all manner of ridiculous numbers and digits.
  var CDATA = '[CDATA['
  var DOCTYPE = 'DOCTYPE'
  var XML_NAMESPACE = 'http://www.w3.org/XML/1998/namespace'
  var XMLNS_NAMESPACE = 'http://www.w3.org/2000/xmlns/'
  var rootNS = { xml: XML_NAMESPACE, xmlns: XMLNS_NAMESPACE }

  // http://www.w3.org/TR/REC-xml/#NT-NameStartChar
  // This implementation works on strings, a single character at a time
  // as such, it cannot ever support astral-plane characters (10000-EFFFF)
  // without a significant breaking change to either this  parser, or the
  // JavaScript language.  Implementation of an emoji-capable xml parser
  // is left as an exercise for the reader.
  var nameStart = /[:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]/

  var nameBody = /[:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\u00B7\u0300-\u036F\u203F-\u2040.\d-]/

  var entityStart = /[#:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]/
  var entityBody = /[#:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\u00B7\u0300-\u036F\u203F-\u2040.\d-]/

  function isWhitespace (c) {
    return c === ' ' || c === '\n' || c === '\r' || c === '\t'
  }

  function isQuote (c) {
    return c === '"' || c === '\''
  }

  function isAttribEnd (c) {
    return c === '>' || isWhitespace(c)
  }

  function isMatch (regex, c) {
    return regex.test(c)
  }

  function notMatch (regex, c) {
    return !isMatch(regex, c)
  }

  var S = 0
  sax.STATE = {
    BEGIN: S++, // leading byte order mark or whitespace
    BEGIN_WHITESPACE: S++, // leading whitespace
    TEXT: S++, // general stuff
    TEXT_ENTITY: S++, // &amp and such.
    OPEN_WAKA: S++, // <
    SGML_DECL: S++, // <!BLARG
    SGML_DECL_QUOTED: S++, // <!BLARG foo "bar
    DOCTYPE: S++, // <!DOCTYPE
    DOCTYPE_QUOTED: S++, // <!DOCTYPE "//blah
    DOCTYPE_DTD: S++, // <!DOCTYPE "//blah" [ ...
    DOCTYPE_DTD_QUOTED: S++, // <!DOCTYPE "//blah" [ "foo
    COMMENT_STARTING: S++, // <!-
    COMMENT: S++, // <!--
    COMMENT_ENDING: S++, // <!-- blah -
    COMMENT_ENDED: S++, // <!-- blah --
    CDATA: S++, // <![CDATA[ something
    CDATA_ENDING: S++, // ]
    CDATA_ENDING_2: S++, // ]]
    PROC_INST: S++, // <?hi
    PROC_INST_BODY: S++, // <?hi there
    PROC_INST_ENDING: S++, // <?hi "there" ?
    OPEN_TAG: S++, // <strong
    OPEN_TAG_SLASH: S++, // <strong /
    ATTRIB: S++, // <a
    ATTRIB_NAME: S++, // <a foo
    ATTRIB_NAME_SAW_WHITE: S++, // <a foo _
    ATTRIB_VALUE: S++, // <a foo=
    ATTRIB_VALUE_QUOTED: S++, // <a foo="bar
    ATTRIB_VALUE_CLOSED: S++, // <a foo="bar"
    ATTRIB_VALUE_UNQUOTED: S++, // <a foo=bar
    ATTRIB_VALUE_ENTITY_Q: S++, // <foo bar="&quot;"
    ATTRIB_VALUE_ENTITY_U: S++, // <foo bar=&quot
    CLOSE_TAG: S++, // </a
    CLOSE_TAG_SAW_WHITE: S++, // </a   >
    SCRIPT: S++, // <script> ...
    SCRIPT_ENDING: S++ // <script> ... <
  }

  sax.XML_ENTITIES = {
    'amp': '&',
    'gt': '>',
    'lt': '<',
    'quot': '"',
    'apos': "'"
  }

  sax.ENTITIES = {
    'amp': '&',
    'gt': '>',
    'lt': '<',
    'quot': '"',
    'apos': "'",
    'AElig': 198,
    'Aacute': 193,
    'Acirc': 194,
    'Agrave': 192,
    'Aring': 197,
    'Atilde': 195,
    'Auml': 196,
    'Ccedil': 199,
    'ETH': 208,
    'Eacute': 201,
    'Ecirc': 202,
    'Egrave': 200,
    'Euml': 203,
    'Iacute': 205,
    'Icirc': 206,
    'Igrave': 204,
    'Iuml': 207,
    'Ntilde': 209,
    'Oacute': 211,
    'Ocirc': 212,
    'Ograve': 210,
    'Oslash': 216,
    'Otilde': 213,
    'Ouml': 214,
    'THORN': 222,
    'Uacute': 218,
    'Ucirc': 219,
    'Ugrave': 217,
    'Uuml': 220,
    'Yacute': 221,
    'aacute': 225,
    'acirc': 226,
    'aelig': 230,
    'agrave': 224,
    'aring': 229,
    'atilde': 227,
    'auml': 228,
    'ccedil': 231,
    'eacute': 233,
    'ecirc': 234,
    'egrave': 232,
    'eth': 240,
    'euml': 235,
    'iacute': 237,
    'icirc': 238,
    'igrave': 236,
    'iuml': 239,
    'ntilde': 241,
    'oacute': 243,
    'ocirc': 244,
    'ograve': 242,
    'oslash': 248,
    'otilde': 245,
    'ouml': 246,
    'szlig': 223,
    'thorn': 254,
    'uacute': 250,
    'ucirc': 251,
    'ugrave': 249,
    'uuml': 252,
    'yacute': 253,
    'yuml': 255,
    'copy': 169,
    'reg': 174,
    'nbsp': 160,
    'iexcl': 161,
    'cent': 162,
    'pound': 163,
    'curren': 164,
    'yen': 165,
    'brvbar': 166,
    'sect': 167,
    'uml': 168,
    'ordf': 170,
    'laquo': 171,
    'not': 172,
    'shy': 173,
    'macr': 175,
    'deg': 176,
    'plusmn': 177,
    'sup1': 185,
    'sup2': 178,
    'sup3': 179,
    'acute': 180,
    'micro': 181,
    'para': 182,
    'middot': 183,
    'cedil': 184,
    'ordm': 186,
    'raquo': 187,
    'frac14': 188,
    'frac12': 189,
    'frac34': 190,
    'iquest': 191,
    'times': 215,
    'divide': 247,
    'OElig': 338,
    'oelig': 339,
    'Scaron': 352,
    'scaron': 353,
    'Yuml': 376,
    'fnof': 402,
    'circ': 710,
    'tilde': 732,
    'Alpha': 913,
    'Beta': 914,
    'Gamma': 915,
    'Delta': 916,
    'Epsilon': 917,
    'Zeta': 918,
    'Eta': 919,
    'Theta': 920,
    'Iota': 921,
    'Kappa': 922,
    'Lambda': 923,
    'Mu': 924,
    'Nu': 925,
    'Xi': 926,
    'Omicron': 927,
    'Pi': 928,
    'Rho': 929,
    'Sigma': 931,
    'Tau': 932,
    'Upsilon': 933,
    'Phi': 934,
    'Chi': 935,
    'Psi': 936,
    'Omega': 937,
    'alpha': 945,
    'beta': 946,
    'gamma': 947,
    'delta': 948,
    'epsilon': 949,
    'zeta': 950,
    'eta': 951,
    'theta': 952,
    'iota': 953,
    'kappa': 954,
    'lambda': 955,
    'mu': 956,
    'nu': 957,
    'xi': 958,
    'omicron': 959,
    'pi': 960,
    'rho': 961,
    'sigmaf': 962,
    'sigma': 963,
    'tau': 964,
    'upsilon': 965,
    'phi': 966,
    'chi': 967,
    'psi': 968,
    'omega': 969,
    'thetasym': 977,
    'upsih': 978,
    'piv': 982,
    'ensp': 8194,
    'emsp': 8195,
    'thinsp': 8201,
    'zwnj': 8204,
    'zwj': 8205,
    'lrm': 8206,
    'rlm': 8207,
    'ndash': 8211,
    'mdash': 8212,
    'lsquo': 8216,
    'rsquo': 8217,
    'sbquo': 8218,
    'ldquo': 8220,
    'rdquo': 8221,
    'bdquo': 8222,
    'dagger': 8224,
    'Dagger': 8225,
    'bull': 8226,
    'hellip': 8230,
    'permil': 8240,
    'prime': 8242,
    'Prime': 8243,
    'lsaquo': 8249,
    'rsaquo': 8250,
    'oline': 8254,
    'frasl': 8260,
    'euro': 8364,
    'image': 8465,
    'weierp': 8472,
    'real': 8476,
    'trade': 8482,
    'alefsym': 8501,
    'larr': 8592,
    'uarr': 8593,
    'rarr': 8594,
    'darr': 8595,
    'harr': 8596,
    'crarr': 8629,
    'lArr': 8656,
    'uArr': 8657,
    'rArr': 8658,
    'dArr': 8659,
    'hArr': 8660,
    'forall': 8704,
    'part': 8706,
    'exist': 8707,
    'empty': 8709,
    'nabla': 8711,
    'isin': 8712,
    'notin': 8713,
    'ni': 8715,
    'prod': 8719,
    'sum': 8721,
    'minus': 8722,
    'lowast': 8727,
    'radic': 8730,
    'prop': 8733,
    'infin': 8734,
    'ang': 8736,
    'and': 8743,
    'or': 8744,
    'cap': 8745,
    'cup': 8746,
    'int': 8747,
    'there4': 8756,
    'sim': 8764,
    'cong': 8773,
    'asymp': 8776,
    'ne': 8800,
    'equiv': 8801,
    'le': 8804,
    'ge': 8805,
    'sub': 8834,
    'sup': 8835,
    'nsub': 8836,
    'sube': 8838,
    'supe': 8839,
    'oplus': 8853,
    'otimes': 8855,
    'perp': 8869,
    'sdot': 8901,
    'lceil': 8968,
    'rceil': 8969,
    'lfloor': 8970,
    'rfloor': 8971,
    'lang': 9001,
    'rang': 9002,
    'loz': 9674,
    'spades': 9824,
    'clubs': 9827,
    'hearts': 9829,
    'diams': 9830
  }

  Object.keys(sax.ENTITIES).forEach(function (key) {
    var e = sax.ENTITIES[key]
    var s = typeof e === 'number' ? String.fromCharCode(e) : e
    sax.ENTITIES[key] = s
  })

  for (var s in sax.STATE) {
    sax.STATE[sax.STATE[s]] = s
  }

  // shorthand
  S = sax.STATE

  function emit (parser, event, data) {
    parser[event] && parser[event](data)
  }

  function emitNode (parser, nodeType, data) {
    if (parser.textNode) closeText(parser)
    emit(parser, nodeType, data)
  }

  function closeText (parser) {
    parser.textNode = textopts(parser.opt, parser.textNode)
    if (parser.textNode) emit(parser, 'ontext', parser.textNode)
    parser.textNode = ''
  }

  function textopts (opt, text) {
    if (opt.trim) text = text.trim()
    if (opt.normalize) text = text.replace(/\s+/g, ' ')
    return text
  }

  function error (parser, er) {
    closeText(parser)
    if (parser.trackPosition) {
      er += '\nLine: ' + parser.line +
        '\nColumn: ' + parser.column +
        '\nChar: ' + parser.c
    }
    er = new Error(er)
    parser.error = er
    emit(parser, 'onerror', er)
    return parser
  }

  function end (parser) {
    if (parser.sawRoot && !parser.closedRoot) strictFail(parser, 'Unclosed root tag')
    if ((parser.state !== S.BEGIN) &&
      (parser.state !== S.BEGIN_WHITESPACE) &&
      (parser.state !== S.TEXT)) {
      error(parser, 'Unexpected end')
    }
    closeText(parser)
    parser.c = ''
    parser.closed = true
    emit(parser, 'onend')
    SAXParser.call(parser, parser.strict, parser.opt)
    return parser
  }

  function strictFail (parser, message) {
    if (typeof parser !== 'object' || !(parser instanceof SAXParser)) {
      throw new Error('bad call to strictFail')
    }
    if (parser.strict) {
      error(parser, message)
    }
  }

  function newTag (parser) {
    if (!parser.strict) parser.tagName = parser.tagName[parser.looseCase]()
    var parent = parser.tags[parser.tags.length - 1] || parser
    var tag = parser.tag = { name: parser.tagName, attributes: {} }

    // will be overridden if tag contails an xmlns="foo" or xmlns:foo="bar"
    if (parser.opt.xmlns) {
      tag.ns = parent.ns
    }
    parser.attribList.length = 0
    emitNode(parser, 'onopentagstart', tag)
  }

  function qname (name, attribute) {
    var i = name.indexOf(':')
    var qualName = i < 0 ? [ '', name ] : name.split(':')
    var prefix = qualName[0]
    var local = qualName[1]

    // <x "xmlns"="http://foo">
    if (attribute && name === 'xmlns') {
      prefix = 'xmlns'
      local = ''
    }

    return { prefix: prefix, local: local }
  }

  function attrib (parser) {
    if (!parser.strict) {
      parser.attribName = parser.attribName[parser.looseCase]()
    }

    if (parser.attribList.indexOf(parser.attribName) !== -1 ||
      parser.tag.attributes.hasOwnProperty(parser.attribName)) {
      parser.attribName = parser.attribValue = ''
      return
    }

    if (parser.opt.xmlns) {
      var qn = qname(parser.attribName, true)
      var prefix = qn.prefix
      var local = qn.local

      if (prefix === 'xmlns') {
        // namespace binding attribute. push the binding into scope
        if (local === 'xml' && parser.attribValue !== XML_NAMESPACE) {
          strictFail(parser,
            'xml: prefix must be bound to ' + XML_NAMESPACE + '\n' +
            'Actual: ' + parser.attribValue)
        } else if (local === 'xmlns' && parser.attribValue !== XMLNS_NAMESPACE) {
          strictFail(parser,
            'xmlns: prefix must be bound to ' + XMLNS_NAMESPACE + '\n' +
            'Actual: ' + parser.attribValue)
        } else {
          var tag = parser.tag
          var parent = parser.tags[parser.tags.length - 1] || parser
          if (tag.ns === parent.ns) {
            tag.ns = Object.create(parent.ns)
          }
          tag.ns[local] = parser.attribValue
        }
      }

      // defer onattribute events until all attributes have been seen
      // so any new bindings can take effect. preserve attribute order
      // so deferred events can be emitted in document order
      parser.attribList.push([parser.attribName, parser.attribValue])
    } else {
      // in non-xmlns mode, we can emit the event right away
      parser.tag.attributes[parser.attribName] = parser.attribValue
      emitNode(parser, 'onattribute', {
        name: parser.attribName,
        value: parser.attribValue
      })
    }

    parser.attribName = parser.attribValue = ''
  }

  function openTag (parser, selfClosing) {
    if (parser.opt.xmlns) {
      // emit namespace binding events
      var tag = parser.tag

      // add namespace info to tag
      var qn = qname(parser.tagName)
      tag.prefix = qn.prefix
      tag.local = qn.local
      tag.uri = tag.ns[qn.prefix] || ''

      if (tag.prefix && !tag.uri) {
        strictFail(parser, 'Unbound namespace prefix: ' +
          JSON.stringify(parser.tagName))
        tag.uri = qn.prefix
      }

      var parent = parser.tags[parser.tags.length - 1] || parser
      if (tag.ns && parent.ns !== tag.ns) {
        Object.keys(tag.ns).forEach(function (p) {
          emitNode(parser, 'onopennamespace', {
            prefix: p,
            uri: tag.ns[p]
          })
        })
      }

      // handle deferred onattribute events
      // Note: do not apply default ns to attributes:
      //   http://www.w3.org/TR/REC-xml-names/#defaulting
      for (var i = 0, l = parser.attribList.length; i < l; i++) {
        var nv = parser.attribList[i]
        var name = nv[0]
        var value = nv[1]
        var qualName = qname(name, true)
        var prefix = qualName.prefix
        var local = qualName.local
        var uri = prefix === '' ? '' : (tag.ns[prefix] || '')
        var a = {
          name: name,
          value: value,
          prefix: prefix,
          local: local,
          uri: uri
        }

        // if there's any attributes with an undefined namespace,
        // then fail on them now.
        if (prefix && prefix !== 'xmlns' && !uri) {
          strictFail(parser, 'Unbound namespace prefix: ' +
            JSON.stringify(prefix))
          a.uri = prefix
        }
        parser.tag.attributes[name] = a
        emitNode(parser, 'onattribute', a)
      }
      parser.attribList.length = 0
    }

    parser.tag.isSelfClosing = !!selfClosing

    // process the tag
    parser.sawRoot = true
    parser.tags.push(parser.tag)
    emitNode(parser, 'onopentag', parser.tag)
    if (!selfClosing) {
      // special case for <script> in non-strict mode.
      if (!parser.noscript && parser.tagName.toLowerCase() === 'script') {
        parser.state = S.SCRIPT
      } else {
        parser.state = S.TEXT
      }
      parser.tag = null
      parser.tagName = ''
    }
    parser.attribName = parser.attribValue = ''
    parser.attribList.length = 0
  }

  function closeTag (parser) {
    if (!parser.tagName) {
      strictFail(parser, 'Weird empty close tag.')
      parser.textNode += '</>'
      parser.state = S.TEXT
      return
    }

    if (parser.script) {
      if (parser.tagName !== 'script') {
        parser.script += '</' + parser.tagName + '>'
        parser.tagName = ''
        parser.state = S.SCRIPT
        return
      }
      emitNode(parser, 'onscript', parser.script)
      parser.script = ''
    }

    // first make sure that the closing tag actually exists.
    // <a><b></c></b></a> will close everything, otherwise.
    var t = parser.tags.length
    var tagName = parser.tagName
    if (!parser.strict) {
      tagName = tagName[parser.looseCase]()
    }
    var closeTo = tagName
    while (t--) {
      var close = parser.tags[t]
      if (close.name !== closeTo) {
        // fail the first time in strict mode
        strictFail(parser, 'Unexpected close tag')
      } else {
        break
      }
    }

    // didn't find it.  we already failed for strict, so just abort.
    if (t < 0) {
      strictFail(parser, 'Unmatched closing tag: ' + parser.tagName)
      parser.textNode += '</' + parser.tagName + '>'
      parser.state = S.TEXT
      return
    }
    parser.tagName = tagName
    var s = parser.tags.length
    while (s-- > t) {
      var tag = parser.tag = parser.tags.pop()
      parser.tagName = parser.tag.name
      emitNode(parser, 'onclosetag', parser.tagName)

      var x = {}
      for (var i in tag.ns) {
        x[i] = tag.ns[i]
      }

      var parent = parser.tags[parser.tags.length - 1] || parser
      if (parser.opt.xmlns && tag.ns !== parent.ns) {
        // remove namespace bindings introduced by tag
        Object.keys(tag.ns).forEach(function (p) {
          var n = tag.ns[p]
          emitNode(parser, 'onclosenamespace', { prefix: p, uri: n })
        })
      }
    }
    if (t === 0) parser.closedRoot = true
    parser.tagName = parser.attribValue = parser.attribName = ''
    parser.attribList.length = 0
    parser.state = S.TEXT
  }

  function parseEntity (parser) {
    var entity = parser.entity
    var entityLC = entity.toLowerCase()
    var num
    var numStr = ''

    if (parser.ENTITIES[entity]) {
      return parser.ENTITIES[entity]
    }
    if (parser.ENTITIES[entityLC]) {
      return parser.ENTITIES[entityLC]
    }
    entity = entityLC
    if (entity.charAt(0) === '#') {
      if (entity.charAt(1) === 'x') {
        entity = entity.slice(2)
        num = parseInt(entity, 16)
        numStr = num.toString(16)
      } else {
        entity = entity.slice(1)
        num = parseInt(entity, 10)
        numStr = num.toString(10)
      }
    }
    entity = entity.replace(/^0+/, '')
    if (isNaN(num) || numStr.toLowerCase() !== entity) {
      strictFail(parser, 'Invalid character entity')
      return '&' + parser.entity + ';'
    }

    return String.fromCodePoint(num)
  }

  function beginWhiteSpace (parser, c) {
    if (c === '<') {
      parser.state = S.OPEN_WAKA
      parser.startTagPosition = parser.position
    } else if (!isWhitespace(c)) {
      // have to process this as a text node.
      // weird, but happens.
      strictFail(parser, 'Non-whitespace before first tag.')
      parser.textNode = c
      parser.state = S.TEXT
    }
  }

  function charAt (chunk, i) {
    var result = ''
    if (i < chunk.length) {
      result = chunk.charAt(i)
    }
    return result
  }

  function write (chunk) {
    var parser = this
    if (this.error) {
      throw this.error
    }
    if (parser.closed) {
      return error(parser,
        'Cannot write after close. Assign an onready handler.')
    }
    if (chunk === null) {
      return end(parser)
    }
    if (typeof chunk === 'object') {
      chunk = chunk.toString()
    }
    var i = 0
    var c = ''
    while (true) {
      c = charAt(chunk, i++)
      parser.c = c

      if (!c) {
        break
      }

      if (parser.trackPosition) {
        parser.position++
        if (c === '\n') {
          parser.line++
          parser.column = 0
        } else {
          parser.column++
        }
      }

      switch (parser.state) {
        case S.BEGIN:
          parser.state = S.BEGIN_WHITESPACE
          if (c === '\uFEFF') {
            continue
          }
          beginWhiteSpace(parser, c)
          continue

        case S.BEGIN_WHITESPACE:
          beginWhiteSpace(parser, c)
          continue

        case S.TEXT:
          if (parser.sawRoot && !parser.closedRoot) {
            var starti = i - 1
            while (c && c !== '<' && c !== '&') {
              c = charAt(chunk, i++)
              if (c && parser.trackPosition) {
                parser.position++
                if (c === '\n') {
                  parser.line++
                  parser.column = 0
                } else {
                  parser.column++
                }
              }
            }
            parser.textNode += chunk.substring(starti, i - 1)
          }
          if (c === '<' && !(parser.sawRoot && parser.closedRoot && !parser.strict)) {
            parser.state = S.OPEN_WAKA
            parser.startTagPosition = parser.position
          } else {
            if (!isWhitespace(c) && (!parser.sawRoot || parser.closedRoot)) {
              strictFail(parser, 'Text data outside of root node.')
            }
            if (c === '&') {
              parser.state = S.TEXT_ENTITY
            } else {
              parser.textNode += c
            }
          }
          continue

        case S.SCRIPT:
          // only non-strict
          if (c === '<') {
            parser.state = S.SCRIPT_ENDING
          } else {
            parser.script += c
          }
          continue

        case S.SCRIPT_ENDING:
          if (c === '/') {
            parser.state = S.CLOSE_TAG
          } else {
            parser.script += '<' + c
            parser.state = S.SCRIPT
          }
          continue

        case S.OPEN_WAKA:
          // either a /, ?, !, or text is coming next.
          if (c === '!') {
            parser.state = S.SGML_DECL
            parser.sgmlDecl = ''
          } else if (isWhitespace(c)) {
            // wait for it...
          } else if (isMatch(nameStart, c)) {
            parser.state = S.OPEN_TAG
            parser.tagName = c
          } else if (c === '/') {
            parser.state = S.CLOSE_TAG
            parser.tagName = ''
          } else if (c === '?') {
            parser.state = S.PROC_INST
            parser.procInstName = parser.procInstBody = ''
          } else {
            strictFail(parser, 'Unencoded <')
            // if there was some whitespace, then add that in.
            if (parser.startTagPosition + 1 < parser.position) {
              var pad = parser.position - parser.startTagPosition
              c = new Array(pad).join(' ') + c
            }
            parser.textNode += '<' + c
            parser.state = S.TEXT
          }
          continue

        case S.SGML_DECL:
          if ((parser.sgmlDecl + c).toUpperCase() === CDATA) {
            emitNode(parser, 'onopencdata')
            parser.state = S.CDATA
            parser.sgmlDecl = ''
            parser.cdata = ''
          } else if (parser.sgmlDecl + c === '--') {
            parser.state = S.COMMENT
            parser.comment = ''
            parser.sgmlDecl = ''
          } else if ((parser.sgmlDecl + c).toUpperCase() === DOCTYPE) {
            parser.state = S.DOCTYPE
            if (parser.doctype || parser.sawRoot) {
              strictFail(parser,
                'Inappropriately located doctype declaration')
            }
            parser.doctype = ''
            parser.sgmlDecl = ''
          } else if (c === '>') {
            emitNode(parser, 'onsgmldeclaration', parser.sgmlDecl)
            parser.sgmlDecl = ''
            parser.state = S.TEXT
          } else if (isQuote(c)) {
            parser.state = S.SGML_DECL_QUOTED
            parser.sgmlDecl += c
          } else {
            parser.sgmlDecl += c
          }
          continue

        case S.SGML_DECL_QUOTED:
          if (c === parser.q) {
            parser.state = S.SGML_DECL
            parser.q = ''
          }
          parser.sgmlDecl += c
          continue

        case S.DOCTYPE:
          if (c === '>') {
            parser.state = S.TEXT
            emitNode(parser, 'ondoctype', parser.doctype)
            parser.doctype = true // just remember that we saw it.
          } else {
            parser.doctype += c
            if (c === '[') {
              parser.state = S.DOCTYPE_DTD
            } else if (isQuote(c)) {
              parser.state = S.DOCTYPE_QUOTED
              parser.q = c
            }
          }
          continue

        case S.DOCTYPE_QUOTED:
          parser.doctype += c
          if (c === parser.q) {
            parser.q = ''
            parser.state = S.DOCTYPE
          }
          continue

        case S.DOCTYPE_DTD:
          parser.doctype += c
          if (c === ']') {
            parser.state = S.DOCTYPE
          } else if (isQuote(c)) {
            parser.state = S.DOCTYPE_DTD_QUOTED
            parser.q = c
          }
          continue

        case S.DOCTYPE_DTD_QUOTED:
          parser.doctype += c
          if (c === parser.q) {
            parser.state = S.DOCTYPE_DTD
            parser.q = ''
          }
          continue

        case S.COMMENT:
          if (c === '-') {
            parser.state = S.COMMENT_ENDING
          } else {
            parser.comment += c
          }
          continue

        case S.COMMENT_ENDING:
          if (c === '-') {
            parser.state = S.COMMENT_ENDED
            parser.comment = textopts(parser.opt, parser.comment)
            if (parser.comment) {
              emitNode(parser, 'oncomment', parser.comment)
            }
            parser.comment = ''
          } else {
            parser.comment += '-' + c
            parser.state = S.COMMENT
          }
          continue

        case S.COMMENT_ENDED:
          if (c !== '>') {
            strictFail(parser, 'Malformed comment')
            // allow <!-- blah -- bloo --> in non-strict mode,
            // which is a comment of " blah -- bloo "
            parser.comment += '--' + c
            parser.state = S.COMMENT
          } else {
            parser.state = S.TEXT
          }
          continue

        case S.CDATA:
          if (c === ']') {
            parser.state = S.CDATA_ENDING
          } else {
            parser.cdata += c
          }
          continue

        case S.CDATA_ENDING:
          if (c === ']') {
            parser.state = S.CDATA_ENDING_2
          } else {
            parser.cdata += ']' + c
            parser.state = S.CDATA
          }
          continue

        case S.CDATA_ENDING_2:
          if (c === '>') {
            if (parser.cdata) {
              emitNode(parser, 'oncdata', parser.cdata)
            }
            emitNode(parser, 'onclosecdata')
            parser.cdata = ''
            parser.state = S.TEXT
          } else if (c === ']') {
            parser.cdata += ']'
          } else {
            parser.cdata += ']]' + c
            parser.state = S.CDATA
          }
          continue

        case S.PROC_INST:
          if (c === '?') {
            parser.state = S.PROC_INST_ENDING
          } else if (isWhitespace(c)) {
            parser.state = S.PROC_INST_BODY
          } else {
            parser.procInstName += c
          }
          continue

        case S.PROC_INST_BODY:
          if (!parser.procInstBody && isWhitespace(c)) {
            continue
          } else if (c === '?') {
            parser.state = S.PROC_INST_ENDING
          } else {
            parser.procInstBody += c
          }
          continue

        case S.PROC_INST_ENDING:
          if (c === '>') {
            emitNode(parser, 'onprocessinginstruction', {
              name: parser.procInstName,
              body: parser.procInstBody
            })
            parser.procInstName = parser.procInstBody = ''
            parser.state = S.TEXT
          } else {
            parser.procInstBody += '?' + c
            parser.state = S.PROC_INST_BODY
          }
          continue

        case S.OPEN_TAG:
          if (isMatch(nameBody, c)) {
            parser.tagName += c
          } else {
            newTag(parser)
            if (c === '>') {
              openTag(parser)
            } else if (c === '/') {
              parser.state = S.OPEN_TAG_SLASH
            } else {
              if (!isWhitespace(c)) {
                strictFail(parser, 'Invalid character in tag name')
              }
              parser.state = S.ATTRIB
            }
          }
          continue

        case S.OPEN_TAG_SLASH:
          if (c === '>') {
            openTag(parser, true)
            closeTag(parser)
          } else {
            strictFail(parser, 'Forward-slash in opening tag not followed by >')
            parser.state = S.ATTRIB
          }
          continue

        case S.ATTRIB:
          // haven't read the attribute name yet.
          if (isWhitespace(c)) {
            continue
          } else if (c === '>') {
            openTag(parser)
          } else if (c === '/') {
            parser.state = S.OPEN_TAG_SLASH
          } else if (isMatch(nameStart, c)) {
            parser.attribName = c
            parser.attribValue = ''
            parser.state = S.ATTRIB_NAME
          } else {
            strictFail(parser, 'Invalid attribute name')
          }
          continue

        case S.ATTRIB_NAME:
          if (c === '=') {
            parser.state = S.ATTRIB_VALUE
          } else if (c === '>') {
            strictFail(parser, 'Attribute without value')
            parser.attribValue = parser.attribName
            attrib(parser)
            openTag(parser)
          } else if (isWhitespace(c)) {
            parser.state = S.ATTRIB_NAME_SAW_WHITE
          } else if (isMatch(nameBody, c)) {
            parser.attribName += c
          } else {
            strictFail(parser, 'Invalid attribute name')
          }
          continue

        case S.ATTRIB_NAME_SAW_WHITE:
          if (c === '=') {
            parser.state = S.ATTRIB_VALUE
          } else if (isWhitespace(c)) {
            continue
          } else {
            strictFail(parser, 'Attribute without value')
            parser.tag.attributes[parser.attribName] = ''
            parser.attribValue = ''
            emitNode(parser, 'onattribute', {
              name: parser.attribName,
              value: ''
            })
            parser.attribName = ''
            if (c === '>') {
              openTag(parser)
            } else if (isMatch(nameStart, c)) {
              parser.attribName = c
              parser.state = S.ATTRIB_NAME
            } else {
              strictFail(parser, 'Invalid attribute name')
              parser.state = S.ATTRIB
            }
          }
          continue

        case S.ATTRIB_VALUE:
          if (isWhitespace(c)) {
            continue
          } else if (isQuote(c)) {
            parser.q = c
            parser.state = S.ATTRIB_VALUE_QUOTED
          } else {
            strictFail(parser, 'Unquoted attribute value')
            parser.state = S.ATTRIB_VALUE_UNQUOTED
            parser.attribValue = c
          }
          continue

        case S.ATTRIB_VALUE_QUOTED:
          if (c !== parser.q) {
            if (c === '&') {
              parser.state = S.ATTRIB_VALUE_ENTITY_Q
            } else {
              parser.attribValue += c
            }
            continue
          }
          attrib(parser)
          parser.q = ''
          parser.state = S.ATTRIB_VALUE_CLOSED
          continue

        case S.ATTRIB_VALUE_CLOSED:
          if (isWhitespace(c)) {
            parser.state = S.ATTRIB
          } else if (c === '>') {
            openTag(parser)
          } else if (c === '/') {
            parser.state = S.OPEN_TAG_SLASH
          } else if (isMatch(nameStart, c)) {
            strictFail(parser, 'No whitespace between attributes')
            parser.attribName = c
            parser.attribValue = ''
            parser.state = S.ATTRIB_NAME
          } else {
            strictFail(parser, 'Invalid attribute name')
          }
          continue

        case S.ATTRIB_VALUE_UNQUOTED:
          if (!isAttribEnd(c)) {
            if (c === '&') {
              parser.state = S.ATTRIB_VALUE_ENTITY_U
            } else {
              parser.attribValue += c
            }
            continue
          }
          attrib(parser)
          if (c === '>') {
            openTag(parser)
          } else {
            parser.state = S.ATTRIB
          }
          continue

        case S.CLOSE_TAG:
          if (!parser.tagName) {
            if (isWhitespace(c)) {
              continue
            } else if (notMatch(nameStart, c)) {
              if (parser.script) {
                parser.script += '</' + c
                parser.state = S.SCRIPT
              } else {
                strictFail(parser, 'Invalid tagname in closing tag.')
              }
            } else {
              parser.tagName = c
            }
          } else if (c === '>') {
            closeTag(parser)
          } else if (isMatch(nameBody, c)) {
            parser.tagName += c
          } else if (parser.script) {
            parser.script += '</' + parser.tagName
            parser.tagName = ''
            parser.state = S.SCRIPT
          } else {
            if (!isWhitespace(c)) {
              strictFail(parser, 'Invalid tagname in closing tag')
            }
            parser.state = S.CLOSE_TAG_SAW_WHITE
          }
          continue

        case S.CLOSE_TAG_SAW_WHITE:
          if (isWhitespace(c)) {
            continue
          }
          if (c === '>') {
            closeTag(parser)
          } else {
            strictFail(parser, 'Invalid characters in closing tag')
          }
          continue

        case S.TEXT_ENTITY:
        case S.ATTRIB_VALUE_ENTITY_Q:
        case S.ATTRIB_VALUE_ENTITY_U:
          var returnState
          var buffer
          switch (parser.state) {
            case S.TEXT_ENTITY:
              returnState = S.TEXT
              buffer = 'textNode'
              break

            case S.ATTRIB_VALUE_ENTITY_Q:
              returnState = S.ATTRIB_VALUE_QUOTED
              buffer = 'attribValue'
              break

            case S.ATTRIB_VALUE_ENTITY_U:
              returnState = S.ATTRIB_VALUE_UNQUOTED
              buffer = 'attribValue'
              break
          }

          if (c === ';') {
            parser[buffer] += parseEntity(parser)
            parser.entity = ''
            parser.state = returnState
          } else if (isMatch(parser.entity.length ? entityBody : entityStart, c)) {
            parser.entity += c
          } else {
            strictFail(parser, 'Invalid character in entity name')
            parser[buffer] += '&' + parser.entity + c
            parser.entity = ''
            parser.state = returnState
          }

          continue

        default:
          throw new Error(parser, 'Unknown state: ' + parser.state)
      }
    } // while

    if (parser.position >= parser.bufferCheckPosition) {
      checkBufferLength(parser)
    }
    return parser
  }

  /*! http://mths.be/fromcodepoint v0.1.0 by @mathias */
  /* istanbul ignore next */
  if (!String.fromCodePoint) {
    (function () {
      var stringFromCharCode = String.fromCharCode
      var floor = Math.floor
      var fromCodePoint = function () {
        var MAX_SIZE = 0x4000
        var codeUnits = []
        var highSurrogate
        var lowSurrogate
        var index = -1
        var length = arguments.length
        if (!length) {
          return ''
        }
        var result = ''
        while (++index < length) {
          var codePoint = Number(arguments[index])
          if (
            !isFinite(codePoint) || // `NaN`, `+Infinity`, or `-Infinity`
            codePoint < 0 || // not a valid Unicode code point
            codePoint > 0x10FFFF || // not a valid Unicode code point
            floor(codePoint) !== codePoint // not an integer
          ) {
            throw RangeError('Invalid code point: ' + codePoint)
          }
          if (codePoint <= 0xFFFF) { // BMP code point
            codeUnits.push(codePoint)
          } else { // Astral code point; split in surrogate halves
            // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
            codePoint -= 0x10000
            highSurrogate = (codePoint >> 10) + 0xD800
            lowSurrogate = (codePoint % 0x400) + 0xDC00
            codeUnits.push(highSurrogate, lowSurrogate)
          }
          if (index + 1 === length || codeUnits.length > MAX_SIZE) {
            result += stringFromCharCode.apply(null, codeUnits)
            codeUnits.length = 0
          }
        }
        return result
      }
      /* istanbul ignore next */
      if (Object.defineProperty) {
        Object.defineProperty(String, 'fromCodePoint', {
          value: fromCodePoint,
          configurable: true,
          writable: true
        })
      } else {
        String.fromCodePoint = fromCodePoint
      }
    }())
  }
})( false ? 0 : exports)


/***/ }),

/***/ 10291:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var GetIntrinsic = __webpack_require__(41033);
var define = __webpack_require__(56713);
var hasDescriptors = __webpack_require__(39697)();
var gOPD = __webpack_require__(99966);

var $TypeError = GetIntrinsic('%TypeError%');
var $floor = GetIntrinsic('%Math.floor%');

/** @typedef {(...args: unknown[]) => unknown} Func */

/** @type {<T extends Func = Func>(fn: T, length: number, loose?: boolean) => T} */
module.exports = function setFunctionLength(fn, length) {
	if (typeof fn !== 'function') {
		throw new $TypeError('`fn` is not a function');
	}
	if (typeof length !== 'number' || length < 0 || length > 0xFFFFFFFF || $floor(length) !== length) {
		throw new $TypeError('`length` must be a positive 32-bit integer');
	}

	var loose = arguments.length > 2 && !!arguments[2];

	var functionLengthIsConfigurable = true;
	var functionLengthIsWritable = true;
	if ('length' in fn && gOPD) {
		var desc = gOPD(fn, 'length');
		if (desc && !desc.configurable) {
			functionLengthIsConfigurable = false;
		}
		if (desc && !desc.writable) {
			functionLengthIsWritable = false;
		}
	}

	if (functionLengthIsConfigurable || functionLengthIsWritable || !loose) {
		if (hasDescriptors) {
			define(/** @type {Parameters<define>[0]} */ (fn), 'length', length, true, true);
		} else {
			define(/** @type {Parameters<define>[0]} */ (fn), 'length', length);
		}
	}
	return fn;
};


/***/ }),

/***/ 39697:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var GetIntrinsic = __webpack_require__(41033);

var $defineProperty = GetIntrinsic('%Object.defineProperty%', true);

var hasPropertyDescriptors = function hasPropertyDescriptors() {
	if ($defineProperty) {
		try {
			$defineProperty({}, 'a', { value: 1 });
			return true;
		} catch (e) {
			// IE 8 has a broken defineProperty
			return false;
		}
	}
	return false;
};

hasPropertyDescriptors.hasArrayLengthDefineBug = function hasArrayLengthDefineBug() {
	// node v0.6 has a bug where array lengths can be Set but not Defined
	if (!hasPropertyDescriptors()) {
		return null;
	}
	try {
		return $defineProperty([], 'length', { value: 1 }).length !== 1;
	} catch (e) {
		// In Firefox 4-22, defining length on an array throws an exception.
		return true;
	}
};

module.exports = hasPropertyDescriptors;


/***/ }),

/***/ 91023:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var define = __webpack_require__(56713);
var hasDescriptors = __webpack_require__(64666)();
var functionsHaveConfigurableNames = (__webpack_require__(60658).functionsHaveConfigurableNames)();

var $TypeError = TypeError;

module.exports = function setFunctionName(fn, name) {
	if (typeof fn !== 'function') {
		throw new $TypeError('`fn` is not a function');
	}
	var loose = arguments.length > 2 && !!arguments[2];
	if (!loose || functionsHaveConfigurableNames) {
		if (hasDescriptors) {
			define(fn, 'name', name, true, true);
		} else {
			define(fn, 'name', name);
		}
	}
	return fn;
};


/***/ }),

/***/ 56758:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var GetIntrinsic = __webpack_require__(80093);
var callBound = __webpack_require__(32622);
var inspect = __webpack_require__(13690);

var $TypeError = GetIntrinsic('%TypeError%');
var $WeakMap = GetIntrinsic('%WeakMap%', true);
var $Map = GetIntrinsic('%Map%', true);

var $weakMapGet = callBound('WeakMap.prototype.get', true);
var $weakMapSet = callBound('WeakMap.prototype.set', true);
var $weakMapHas = callBound('WeakMap.prototype.has', true);
var $mapGet = callBound('Map.prototype.get', true);
var $mapSet = callBound('Map.prototype.set', true);
var $mapHas = callBound('Map.prototype.has', true);

/*
 * This function traverses the list returning the node corresponding to the
 * given key.
 *
 * That node is also moved to the head of the list, so that if it's accessed
 * again we don't need to traverse the whole list. By doing so, all the recently
 * used nodes can be accessed relatively quickly.
 */
var listGetNode = function (list, key) { // eslint-disable-line consistent-return
	for (var prev = list, curr; (curr = prev.next) !== null; prev = curr) {
		if (curr.key === key) {
			prev.next = curr.next;
			curr.next = list.next;
			list.next = curr; // eslint-disable-line no-param-reassign
			return curr;
		}
	}
};

var listGet = function (objects, key) {
	var node = listGetNode(objects, key);
	return node && node.value;
};
var listSet = function (objects, key, value) {
	var node = listGetNode(objects, key);
	if (node) {
		node.value = value;
	} else {
		// Prepend the new node to the beginning of the list
		objects.next = { // eslint-disable-line no-param-reassign
			key: key,
			next: objects.next,
			value: value
		};
	}
};
var listHas = function (objects, key) {
	return !!listGetNode(objects, key);
};

module.exports = function getSideChannel() {
	var $wm;
	var $m;
	var $o;
	var channel = {
		assert: function (key) {
			if (!channel.has(key)) {
				throw new $TypeError('Side channel does not contain ' + inspect(key));
			}
		},
		get: function (key) { // eslint-disable-line consistent-return
			if ($WeakMap && key && (typeof key === 'object' || typeof key === 'function')) {
				if ($wm) {
					return $weakMapGet($wm, key);
				}
			} else if ($Map) {
				if ($m) {
					return $mapGet($m, key);
				}
			} else {
				if ($o) { // eslint-disable-line no-lonely-if
					return listGet($o, key);
				}
			}
		},
		has: function (key) {
			if ($WeakMap && key && (typeof key === 'object' || typeof key === 'function')) {
				if ($wm) {
					return $weakMapHas($wm, key);
				}
			} else if ($Map) {
				if ($m) {
					return $mapHas($m, key);
				}
			} else {
				if ($o) { // eslint-disable-line no-lonely-if
					return listHas($o, key);
				}
			}
			return false;
		},
		set: function (key, value) {
			if ($WeakMap && key && (typeof key === 'object' || typeof key === 'function')) {
				if (!$wm) {
					$wm = new $WeakMap();
				}
				$weakMapSet($wm, key, value);
			} else if ($Map) {
				if (!$m) {
					$m = new $Map();
				}
				$mapSet($m, key, value);
			} else {
				if (!$o) {
					/*
					 * Initialize the linked list as an empty node, so that we don't have
					 * to special-case handling of the first node: we can always refer to
					 * it as (previous node).next, instead of something like (list).head
					 */
					$o = { key: {}, next: null };
				}
				listSet($o, key, value);
			}
		}
	};
	return channel;
};


/***/ }),

/***/ 80093:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var undefined;

var $SyntaxError = SyntaxError;
var $Function = Function;
var $TypeError = TypeError;

// eslint-disable-next-line consistent-return
var getEvalledConstructor = function (expressionSyntax) {
	try {
		return $Function('"use strict"; return (' + expressionSyntax + ').constructor;')();
	} catch (e) {}
};

var $gOPD = Object.getOwnPropertyDescriptor;
if ($gOPD) {
	try {
		$gOPD({}, '');
	} catch (e) {
		$gOPD = null; // this is IE 8, which has a broken gOPD
	}
}

var throwTypeError = function () {
	throw new $TypeError();
};
var ThrowTypeError = $gOPD
	? (function () {
		try {
			// eslint-disable-next-line no-unused-expressions, no-caller, no-restricted-properties
			arguments.callee; // IE 8 does not throw here
			return throwTypeError;
		} catch (calleeThrows) {
			try {
				// IE 8 throws on Object.getOwnPropertyDescriptor(arguments, '')
				return $gOPD(arguments, 'callee').get;
			} catch (gOPDthrows) {
				return throwTypeError;
			}
		}
	}())
	: throwTypeError;

var hasSymbols = __webpack_require__(66478)();

var getProto = Object.getPrototypeOf || function (x) { return x.__proto__; }; // eslint-disable-line no-proto

var needsEval = {};

var TypedArray = typeof Uint8Array === 'undefined' ? undefined : getProto(Uint8Array);

var INTRINSICS = {
	'%AggregateError%': typeof AggregateError === 'undefined' ? undefined : AggregateError,
	'%Array%': Array,
	'%ArrayBuffer%': typeof ArrayBuffer === 'undefined' ? undefined : ArrayBuffer,
	'%ArrayIteratorPrototype%': hasSymbols ? getProto([][Symbol.iterator]()) : undefined,
	'%AsyncFromSyncIteratorPrototype%': undefined,
	'%AsyncFunction%': needsEval,
	'%AsyncGenerator%': needsEval,
	'%AsyncGeneratorFunction%': needsEval,
	'%AsyncIteratorPrototype%': needsEval,
	'%Atomics%': typeof Atomics === 'undefined' ? undefined : Atomics,
	'%BigInt%': typeof BigInt === 'undefined' ? undefined : BigInt,
	'%Boolean%': Boolean,
	'%DataView%': typeof DataView === 'undefined' ? undefined : DataView,
	'%Date%': Date,
	'%decodeURI%': decodeURI,
	'%decodeURIComponent%': decodeURIComponent,
	'%encodeURI%': encodeURI,
	'%encodeURIComponent%': encodeURIComponent,
	'%Error%': Error,
	'%eval%': eval, // eslint-disable-line no-eval
	'%EvalError%': EvalError,
	'%Float32Array%': typeof Float32Array === 'undefined' ? undefined : Float32Array,
	'%Float64Array%': typeof Float64Array === 'undefined' ? undefined : Float64Array,
	'%FinalizationRegistry%': typeof FinalizationRegistry === 'undefined' ? undefined : FinalizationRegistry,
	'%Function%': $Function,
	'%GeneratorFunction%': needsEval,
	'%Int8Array%': typeof Int8Array === 'undefined' ? undefined : Int8Array,
	'%Int16Array%': typeof Int16Array === 'undefined' ? undefined : Int16Array,
	'%Int32Array%': typeof Int32Array === 'undefined' ? undefined : Int32Array,
	'%isFinite%': isFinite,
	'%isNaN%': isNaN,
	'%IteratorPrototype%': hasSymbols ? getProto(getProto([][Symbol.iterator]())) : undefined,
	'%JSON%': typeof JSON === 'object' ? JSON : undefined,
	'%Map%': typeof Map === 'undefined' ? undefined : Map,
	'%MapIteratorPrototype%': typeof Map === 'undefined' || !hasSymbols ? undefined : getProto(new Map()[Symbol.iterator]()),
	'%Math%': Math,
	'%Number%': Number,
	'%Object%': Object,
	'%parseFloat%': parseFloat,
	'%parseInt%': parseInt,
	'%Promise%': typeof Promise === 'undefined' ? undefined : Promise,
	'%Proxy%': typeof Proxy === 'undefined' ? undefined : Proxy,
	'%RangeError%': RangeError,
	'%ReferenceError%': ReferenceError,
	'%Reflect%': typeof Reflect === 'undefined' ? undefined : Reflect,
	'%RegExp%': RegExp,
	'%Set%': typeof Set === 'undefined' ? undefined : Set,
	'%SetIteratorPrototype%': typeof Set === 'undefined' || !hasSymbols ? undefined : getProto(new Set()[Symbol.iterator]()),
	'%SharedArrayBuffer%': typeof SharedArrayBuffer === 'undefined' ? undefined : SharedArrayBuffer,
	'%String%': String,
	'%StringIteratorPrototype%': hasSymbols ? getProto(''[Symbol.iterator]()) : undefined,
	'%Symbol%': hasSymbols ? Symbol : undefined,
	'%SyntaxError%': $SyntaxError,
	'%ThrowTypeError%': ThrowTypeError,
	'%TypedArray%': TypedArray,
	'%TypeError%': $TypeError,
	'%Uint8Array%': typeof Uint8Array === 'undefined' ? undefined : Uint8Array,
	'%Uint8ClampedArray%': typeof Uint8ClampedArray === 'undefined' ? undefined : Uint8ClampedArray,
	'%Uint16Array%': typeof Uint16Array === 'undefined' ? undefined : Uint16Array,
	'%Uint32Array%': typeof Uint32Array === 'undefined' ? undefined : Uint32Array,
	'%URIError%': URIError,
	'%WeakMap%': typeof WeakMap === 'undefined' ? undefined : WeakMap,
	'%WeakRef%': typeof WeakRef === 'undefined' ? undefined : WeakRef,
	'%WeakSet%': typeof WeakSet === 'undefined' ? undefined : WeakSet
};

var doEval = function doEval(name) {
	var value;
	if (name === '%AsyncFunction%') {
		value = getEvalledConstructor('async function () {}');
	} else if (name === '%GeneratorFunction%') {
		value = getEvalledConstructor('function* () {}');
	} else if (name === '%AsyncGeneratorFunction%') {
		value = getEvalledConstructor('async function* () {}');
	} else if (name === '%AsyncGenerator%') {
		var fn = doEval('%AsyncGeneratorFunction%');
		if (fn) {
			value = fn.prototype;
		}
	} else if (name === '%AsyncIteratorPrototype%') {
		var gen = doEval('%AsyncGenerator%');
		if (gen) {
			value = getProto(gen.prototype);
		}
	}

	INTRINSICS[name] = value;

	return value;
};

var LEGACY_ALIASES = {
	'%ArrayBufferPrototype%': ['ArrayBuffer', 'prototype'],
	'%ArrayPrototype%': ['Array', 'prototype'],
	'%ArrayProto_entries%': ['Array', 'prototype', 'entries'],
	'%ArrayProto_forEach%': ['Array', 'prototype', 'forEach'],
	'%ArrayProto_keys%': ['Array', 'prototype', 'keys'],
	'%ArrayProto_values%': ['Array', 'prototype', 'values'],
	'%AsyncFunctionPrototype%': ['AsyncFunction', 'prototype'],
	'%AsyncGenerator%': ['AsyncGeneratorFunction', 'prototype'],
	'%AsyncGeneratorPrototype%': ['AsyncGeneratorFunction', 'prototype', 'prototype'],
	'%BooleanPrototype%': ['Boolean', 'prototype'],
	'%DataViewPrototype%': ['DataView', 'prototype'],
	'%DatePrototype%': ['Date', 'prototype'],
	'%ErrorPrototype%': ['Error', 'prototype'],
	'%EvalErrorPrototype%': ['EvalError', 'prototype'],
	'%Float32ArrayPrototype%': ['Float32Array', 'prototype'],
	'%Float64ArrayPrototype%': ['Float64Array', 'prototype'],
	'%FunctionPrototype%': ['Function', 'prototype'],
	'%Generator%': ['GeneratorFunction', 'prototype'],
	'%GeneratorPrototype%': ['GeneratorFunction', 'prototype', 'prototype'],
	'%Int8ArrayPrototype%': ['Int8Array', 'prototype'],
	'%Int16ArrayPrototype%': ['Int16Array', 'prototype'],
	'%Int32ArrayPrototype%': ['Int32Array', 'prototype'],
	'%JSONParse%': ['JSON', 'parse'],
	'%JSONStringify%': ['JSON', 'stringify'],
	'%MapPrototype%': ['Map', 'prototype'],
	'%NumberPrototype%': ['Number', 'prototype'],
	'%ObjectPrototype%': ['Object', 'prototype'],
	'%ObjProto_toString%': ['Object', 'prototype', 'toString'],
	'%ObjProto_valueOf%': ['Object', 'prototype', 'valueOf'],
	'%PromisePrototype%': ['Promise', 'prototype'],
	'%PromiseProto_then%': ['Promise', 'prototype', 'then'],
	'%Promise_all%': ['Promise', 'all'],
	'%Promise_reject%': ['Promise', 'reject'],
	'%Promise_resolve%': ['Promise', 'resolve'],
	'%RangeErrorPrototype%': ['RangeError', 'prototype'],
	'%ReferenceErrorPrototype%': ['ReferenceError', 'prototype'],
	'%RegExpPrototype%': ['RegExp', 'prototype'],
	'%SetPrototype%': ['Set', 'prototype'],
	'%SharedArrayBufferPrototype%': ['SharedArrayBuffer', 'prototype'],
	'%StringPrototype%': ['String', 'prototype'],
	'%SymbolPrototype%': ['Symbol', 'prototype'],
	'%SyntaxErrorPrototype%': ['SyntaxError', 'prototype'],
	'%TypedArrayPrototype%': ['TypedArray', 'prototype'],
	'%TypeErrorPrototype%': ['TypeError', 'prototype'],
	'%Uint8ArrayPrototype%': ['Uint8Array', 'prototype'],
	'%Uint8ClampedArrayPrototype%': ['Uint8ClampedArray', 'prototype'],
	'%Uint16ArrayPrototype%': ['Uint16Array', 'prototype'],
	'%Uint32ArrayPrototype%': ['Uint32Array', 'prototype'],
	'%URIErrorPrototype%': ['URIError', 'prototype'],
	'%WeakMapPrototype%': ['WeakMap', 'prototype'],
	'%WeakSetPrototype%': ['WeakSet', 'prototype']
};

var bind = __webpack_require__(60497);
var hasOwn = __webpack_require__(98356);
var $concat = bind.call(Function.call, Array.prototype.concat);
var $spliceApply = bind.call(Function.apply, Array.prototype.splice);
var $replace = bind.call(Function.call, String.prototype.replace);
var $strSlice = bind.call(Function.call, String.prototype.slice);

/* adapted from https://github.com/lodash/lodash/blob/4.17.15/dist/lodash.js#L6735-L6744 */
var rePropName = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g;
var reEscapeChar = /\\(\\)?/g; /** Used to match backslashes in property paths. */
var stringToPath = function stringToPath(string) {
	var first = $strSlice(string, 0, 1);
	var last = $strSlice(string, -1);
	if (first === '%' && last !== '%') {
		throw new $SyntaxError('invalid intrinsic syntax, expected closing `%`');
	} else if (last === '%' && first !== '%') {
		throw new $SyntaxError('invalid intrinsic syntax, expected opening `%`');
	}
	var result = [];
	$replace(string, rePropName, function (match, number, quote, subString) {
		result[result.length] = quote ? $replace(subString, reEscapeChar, '$1') : number || match;
	});
	return result;
};
/* end adaptation */

var getBaseIntrinsic = function getBaseIntrinsic(name, allowMissing) {
	var intrinsicName = name;
	var alias;
	if (hasOwn(LEGACY_ALIASES, intrinsicName)) {
		alias = LEGACY_ALIASES[intrinsicName];
		intrinsicName = '%' + alias[0] + '%';
	}

	if (hasOwn(INTRINSICS, intrinsicName)) {
		var value = INTRINSICS[intrinsicName];
		if (value === needsEval) {
			value = doEval(intrinsicName);
		}
		if (typeof value === 'undefined' && !allowMissing) {
			throw new $TypeError('intrinsic ' + name + ' exists, but is not available. Please file an issue!');
		}

		return {
			alias: alias,
			name: intrinsicName,
			value: value
		};
	}

	throw new $SyntaxError('intrinsic ' + name + ' does not exist!');
};

module.exports = function GetIntrinsic(name, allowMissing) {
	if (typeof name !== 'string' || name.length === 0) {
		throw new $TypeError('intrinsic name must be a non-empty string');
	}
	if (arguments.length > 1 && typeof allowMissing !== 'boolean') {
		throw new $TypeError('"allowMissing" argument must be a boolean');
	}

	var parts = stringToPath(name);
	var intrinsicBaseName = parts.length > 0 ? parts[0] : '';

	var intrinsic = getBaseIntrinsic('%' + intrinsicBaseName + '%', allowMissing);
	var intrinsicRealName = intrinsic.name;
	var value = intrinsic.value;
	var skipFurtherCaching = false;

	var alias = intrinsic.alias;
	if (alias) {
		intrinsicBaseName = alias[0];
		$spliceApply(parts, $concat([0, 1], alias));
	}

	for (var i = 1, isOwn = true; i < parts.length; i += 1) {
		var part = parts[i];
		var first = $strSlice(part, 0, 1);
		var last = $strSlice(part, -1);
		if (
			(
				(first === '"' || first === "'" || first === '`')
				|| (last === '"' || last === "'" || last === '`')
			)
			&& first !== last
		) {
			throw new $SyntaxError('property names with quotes must have matching quotes');
		}
		if (part === 'constructor' || !isOwn) {
			skipFurtherCaching = true;
		}

		intrinsicBaseName += '.' + part;
		intrinsicRealName = '%' + intrinsicBaseName + '%';

		if (hasOwn(INTRINSICS, intrinsicRealName)) {
			value = INTRINSICS[intrinsicRealName];
		} else if (value != null) {
			if (!(part in value)) {
				if (!allowMissing) {
					throw new $TypeError('base intrinsic for ' + name + ' exists, but the property is not available.');
				}
				return void undefined;
			}
			if ($gOPD && (i + 1) >= parts.length) {
				var desc = $gOPD(value, part);
				isOwn = !!desc;

				// By convention, when a data property is converted to an accessor
				// property to emulate a data property that does not suffer from
				// the override mistake, that accessor's getter is marked with
				// an `originalValue` property. Here, when we detect this, we
				// uphold the illusion by pretending to see that original data
				// property, i.e., returning the value rather than the getter
				// itself.
				if (isOwn && 'get' in desc && !('originalValue' in desc.get)) {
					value = desc.get;
				} else {
					value = value[part];
				}
			} else {
				isOwn = hasOwn(value, part);
				value = value[part];
			}

			if (isOwn && !skipFurtherCaching) {
				INTRINSICS[intrinsicRealName] = value;
			}
		}
	}
	return value;
};


/***/ }),

/***/ 29039:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var Call = __webpack_require__(80272);
var Get = __webpack_require__(22552);
var GetMethod = __webpack_require__(61338);
var IsRegExp = __webpack_require__(56453);
var ToString = __webpack_require__(61610);
var RequireObjectCoercible = __webpack_require__(92464);
var callBound = __webpack_require__(32622);
var hasSymbols = __webpack_require__(66478)();
var flagsGetter = __webpack_require__(83060);

var $indexOf = callBound('String.prototype.indexOf');

var regexpMatchAllPolyfill = __webpack_require__(22772);

var getMatcher = function getMatcher(regexp) { // eslint-disable-line consistent-return
	var matcherPolyfill = regexpMatchAllPolyfill();
	if (hasSymbols && typeof Symbol.matchAll === 'symbol') {
		var matcher = GetMethod(regexp, Symbol.matchAll);
		if (matcher === RegExp.prototype[Symbol.matchAll] && matcher !== matcherPolyfill) {
			return matcherPolyfill;
		}
		return matcher;
	}
	// fallback for pre-Symbol.matchAll environments
	if (IsRegExp(regexp)) {
		return matcherPolyfill;
	}
};

module.exports = function matchAll(regexp) {
	var O = RequireObjectCoercible(this);

	if (typeof regexp !== 'undefined' && regexp !== null) {
		var isRegExp = IsRegExp(regexp);
		if (isRegExp) {
			// workaround for older engines that lack RegExp.prototype.flags
			var flags = 'flags' in regexp ? Get(regexp, 'flags') : flagsGetter(regexp);
			RequireObjectCoercible(flags);
			if ($indexOf(ToString(flags), 'g') < 0) {
				throw new TypeError('matchAll requires a global regular expression');
			}
		}

		var matcher = getMatcher(regexp);
		if (typeof matcher !== 'undefined') {
			return Call(matcher, regexp, [O]);
		}
	}

	var S = ToString(O);
	// var rx = RegExpCreate(regexp, 'g');
	var rx = new RegExp(regexp, 'g');
	return Call(getMatcher(rx), rx, [S]);
};


/***/ }),

/***/ 39138:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var callBind = __webpack_require__(86606);
var define = __webpack_require__(61482);

var implementation = __webpack_require__(29039);
var getPolyfill = __webpack_require__(92569);
var shim = __webpack_require__(48505);

var boundMatchAll = callBind(implementation);

define(boundMatchAll, {
	getPolyfill: getPolyfill,
	implementation: implementation,
	shim: shim
});

module.exports = boundMatchAll;


/***/ }),

/***/ 61482:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var keys = __webpack_require__(75514);
var hasSymbols = typeof Symbol === 'function' && typeof Symbol('foo') === 'symbol';

var toStr = Object.prototype.toString;
var concat = Array.prototype.concat;
var defineDataProperty = __webpack_require__(56713);

var isFunction = function (fn) {
	return typeof fn === 'function' && toStr.call(fn) === '[object Function]';
};

var supportsDescriptors = __webpack_require__(64666)();

var defineProperty = function (object, name, value, predicate) {
	if (name in object) {
		if (predicate === true) {
			if (object[name] === value) {
				return;
			}
		} else if (!isFunction(predicate) || !predicate()) {
			return;
		}
	}

	if (supportsDescriptors) {
		defineDataProperty(object, name, value, true);
	} else {
		defineDataProperty(object, name, value);
	}
};

var defineProperties = function (object, map) {
	var predicates = arguments.length > 2 ? arguments[2] : {};
	var props = keys(map);
	if (hasSymbols) {
		props = concat.call(props, Object.getOwnPropertySymbols(map));
	}
	for (var i = 0; i < props.length; i += 1) {
		defineProperty(object, props[i], map[props[i]], predicates[props[i]]);
	}
};

defineProperties.supportsDescriptors = !!supportsDescriptors;

module.exports = defineProperties;


/***/ }),

/***/ 24821:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var GetIntrinsic = __webpack_require__(41033);

var callBind = __webpack_require__(63252);

var $indexOf = callBind(GetIntrinsic('String.prototype.indexOf'));

module.exports = function callBoundIntrinsic(name, allowMissing) {
	var intrinsic = GetIntrinsic(name, !!allowMissing);
	if (typeof intrinsic === 'function' && $indexOf(name, '.prototype.') > -1) {
		return callBind(intrinsic);
	}
	return intrinsic;
};


/***/ }),

/***/ 63252:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var bind = __webpack_require__(43046);
var GetIntrinsic = __webpack_require__(41033);
var setFunctionLength = __webpack_require__(10291);

var $TypeError = GetIntrinsic('%TypeError%');
var $apply = GetIntrinsic('%Function.prototype.apply%');
var $call = GetIntrinsic('%Function.prototype.call%');
var $reflectApply = GetIntrinsic('%Reflect.apply%', true) || bind.call($call, $apply);

var $defineProperty = GetIntrinsic('%Object.defineProperty%', true);
var $max = GetIntrinsic('%Math.max%');

if ($defineProperty) {
	try {
		$defineProperty({}, 'a', { value: 1 });
	} catch (e) {
		// IE 8 has a broken defineProperty
		$defineProperty = null;
	}
}

module.exports = function callBind(originalFunction) {
	if (typeof originalFunction !== 'function') {
		throw new $TypeError('a function is required');
	}
	var func = $reflectApply(bind, $call, arguments);
	return setFunctionLength(
		func,
		1 + $max(0, originalFunction.length - (arguments.length - 1)),
		true
	);
};

var applyBind = function applyBind() {
	return $reflectApply(bind, $apply, arguments);
};

if ($defineProperty) {
	$defineProperty(module.exports, 'apply', { value: applyBind });
} else {
	module.exports.apply = applyBind;
}


/***/ }),

/***/ 14769:
/***/ ((module) => {

"use strict";


/* eslint no-invalid-this: 1 */

var ERROR_MESSAGE = 'Function.prototype.bind called on incompatible ';
var toStr = Object.prototype.toString;
var max = Math.max;
var funcType = '[object Function]';

var concatty = function concatty(a, b) {
    var arr = [];

    for (var i = 0; i < a.length; i += 1) {
        arr[i] = a[i];
    }
    for (var j = 0; j < b.length; j += 1) {
        arr[j + a.length] = b[j];
    }

    return arr;
};

var slicy = function slicy(arrLike, offset) {
    var arr = [];
    for (var i = offset || 0, j = 0; i < arrLike.length; i += 1, j += 1) {
        arr[j] = arrLike[i];
    }
    return arr;
};

var joiny = function (arr, joiner) {
    var str = '';
    for (var i = 0; i < arr.length; i += 1) {
        str += arr[i];
        if (i + 1 < arr.length) {
            str += joiner;
        }
    }
    return str;
};

module.exports = function bind(that) {
    var target = this;
    if (typeof target !== 'function' || toStr.apply(target) !== funcType) {
        throw new TypeError(ERROR_MESSAGE + target);
    }
    var args = slicy(arguments, 1);

    var bound;
    var binder = function () {
        if (this instanceof bound) {
            var result = target.apply(
                this,
                concatty(args, arguments)
            );
            if (Object(result) === result) {
                return result;
            }
            return this;
        }
        return target.apply(
            that,
            concatty(args, arguments)
        );

    };

    var boundLength = max(0, target.length - args.length);
    var boundArgs = [];
    for (var i = 0; i < boundLength; i++) {
        boundArgs[i] = '$' + i;
    }

    bound = Function('binder', 'return function (' + joiny(boundArgs, ',') + '){ return binder.apply(this,arguments); }')(binder);

    if (target.prototype) {
        var Empty = function Empty() {};
        Empty.prototype = target.prototype;
        bound.prototype = new Empty();
        Empty.prototype = null;
    }

    return bound;
};


/***/ }),

/***/ 43046:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var implementation = __webpack_require__(14769);

module.exports = Function.prototype.bind || implementation;


/***/ }),

/***/ 56754:
/***/ ((module) => {

"use strict";


var fnToStr = Function.prototype.toString;
var reflectApply = typeof Reflect === 'object' && Reflect !== null && Reflect.apply;
var badArrayLike;
var isCallableMarker;
if (typeof reflectApply === 'function' && typeof Object.defineProperty === 'function') {
	try {
		badArrayLike = Object.defineProperty({}, 'length', {
			get: function () {
				throw isCallableMarker;
			}
		});
		isCallableMarker = {};
		// eslint-disable-next-line no-throw-literal
		reflectApply(function () { throw 42; }, null, badArrayLike);
	} catch (_) {
		if (_ !== isCallableMarker) {
			reflectApply = null;
		}
	}
} else {
	reflectApply = null;
}

var constructorRegex = /^\s*class\b/;
var isES6ClassFn = function isES6ClassFunction(value) {
	try {
		var fnStr = fnToStr.call(value);
		return constructorRegex.test(fnStr);
	} catch (e) {
		return false; // not a function
	}
};

var tryFunctionObject = function tryFunctionToStr(value) {
	try {
		if (isES6ClassFn(value)) { return false; }
		fnToStr.call(value);
		return true;
	} catch (e) {
		return false;
	}
};
var toStr = Object.prototype.toString;
var objectClass = '[object Object]';
var fnClass = '[object Function]';
var genClass = '[object GeneratorFunction]';
var ddaClass = '[object HTMLAllCollection]'; // IE 11
var ddaClass2 = '[object HTML document.all class]';
var ddaClass3 = '[object HTMLCollection]'; // IE 9-10
var hasToStringTag = typeof Symbol === 'function' && !!Symbol.toStringTag; // better: use `has-tostringtag`

var isIE68 = !(0 in [,]); // eslint-disable-line no-sparse-arrays, comma-spacing

var isDDA = function isDocumentDotAll() { return false; };
if (typeof document === 'object') {
	// Firefox 3 canonicalizes DDA to undefined when it's not accessed directly
	var all = document.all;
	if (toStr.call(all) === toStr.call(document.all)) {
		isDDA = function isDocumentDotAll(value) {
			/* globals document: false */
			// in IE 6-8, typeof document.all is "object" and it's truthy
			if ((isIE68 || !value) && (typeof value === 'undefined' || typeof value === 'object')) {
				try {
					var str = toStr.call(value);
					return (
						str === ddaClass
						|| str === ddaClass2
						|| str === ddaClass3 // opera 12.16
						|| str === objectClass // IE 6-8
					) && value('') == null; // eslint-disable-line eqeqeq
				} catch (e) { /**/ }
			}
			return false;
		};
	}
}

module.exports = reflectApply
	? function isCallable(value) {
		if (isDDA(value)) { return true; }
		if (!value) { return false; }
		if (typeof value !== 'function' && typeof value !== 'object') { return false; }
		try {
			reflectApply(value, null, badArrayLike);
		} catch (e) {
			if (e !== isCallableMarker) { return false; }
		}
		return !isES6ClassFn(value) && tryFunctionObject(value);
	}
	: function isCallable(value) {
		if (isDDA(value)) { return true; }
		if (!value) { return false; }
		if (typeof value !== 'function' && typeof value !== 'object') { return false; }
		if (hasToStringTag) { return tryFunctionObject(value); }
		if (isES6ClassFn(value)) { return false; }
		var strClass = toStr.call(value);
		if (strClass !== fnClass && strClass !== genClass && !(/^\[object HTML/).test(strClass)) { return false; }
		return tryFunctionObject(value);
	};


/***/ }),

/***/ 45534:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var hasMap = typeof Map === 'function' && Map.prototype;
var mapSizeDescriptor = Object.getOwnPropertyDescriptor && hasMap ? Object.getOwnPropertyDescriptor(Map.prototype, 'size') : null;
var mapSize = hasMap && mapSizeDescriptor && typeof mapSizeDescriptor.get === 'function' ? mapSizeDescriptor.get : null;
var mapForEach = hasMap && Map.prototype.forEach;
var hasSet = typeof Set === 'function' && Set.prototype;
var setSizeDescriptor = Object.getOwnPropertyDescriptor && hasSet ? Object.getOwnPropertyDescriptor(Set.prototype, 'size') : null;
var setSize = hasSet && setSizeDescriptor && typeof setSizeDescriptor.get === 'function' ? setSizeDescriptor.get : null;
var setForEach = hasSet && Set.prototype.forEach;
var hasWeakMap = typeof WeakMap === 'function' && WeakMap.prototype;
var weakMapHas = hasWeakMap ? WeakMap.prototype.has : null;
var hasWeakSet = typeof WeakSet === 'function' && WeakSet.prototype;
var weakSetHas = hasWeakSet ? WeakSet.prototype.has : null;
var hasWeakRef = typeof WeakRef === 'function' && WeakRef.prototype;
var weakRefDeref = hasWeakRef ? WeakRef.prototype.deref : null;
var booleanValueOf = Boolean.prototype.valueOf;
var objectToString = Object.prototype.toString;
var functionToString = Function.prototype.toString;
var $match = String.prototype.match;
var $slice = String.prototype.slice;
var $replace = String.prototype.replace;
var $toUpperCase = String.prototype.toUpperCase;
var $toLowerCase = String.prototype.toLowerCase;
var $test = RegExp.prototype.test;
var $concat = Array.prototype.concat;
var $join = Array.prototype.join;
var $arrSlice = Array.prototype.slice;
var $floor = Math.floor;
var bigIntValueOf = typeof BigInt === 'function' ? BigInt.prototype.valueOf : null;
var gOPS = Object.getOwnPropertySymbols;
var symToString = typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol' ? Symbol.prototype.toString : null;
var hasShammedSymbols = typeof Symbol === 'function' && typeof Symbol.iterator === 'object';
// ie, `has-tostringtag/shams
var toStringTag = typeof Symbol === 'function' && Symbol.toStringTag && (typeof Symbol.toStringTag === hasShammedSymbols ? 'object' : 'symbol')
    ? Symbol.toStringTag
    : null;
var isEnumerable = Object.prototype.propertyIsEnumerable;

var gPO = (typeof Reflect === 'function' ? Reflect.getPrototypeOf : Object.getPrototypeOf) || (
    [].__proto__ === Array.prototype // eslint-disable-line no-proto
        ? function (O) {
            return O.__proto__; // eslint-disable-line no-proto
        }
        : null
);

function addNumericSeparator(num, str) {
    if (
        num === Infinity
        || num === -Infinity
        || num !== num
        || (num && num > -1000 && num < 1000)
        || $test.call(/e/, str)
    ) {
        return str;
    }
    var sepRegex = /[0-9](?=(?:[0-9]{3})+(?![0-9]))/g;
    if (typeof num === 'number') {
        var int = num < 0 ? -$floor(-num) : $floor(num); // trunc(num)
        if (int !== num) {
            var intStr = String(int);
            var dec = $slice.call(str, intStr.length + 1);
            return $replace.call(intStr, sepRegex, '$&_') + '.' + $replace.call($replace.call(dec, /([0-9]{3})/g, '$&_'), /_$/, '');
        }
    }
    return $replace.call(str, sepRegex, '$&_');
}

var utilInspect = __webpack_require__(46609);
var inspectCustom = utilInspect.custom;
var inspectSymbol = isSymbol(inspectCustom) ? inspectCustom : null;

module.exports = function inspect_(obj, options, depth, seen) {
    var opts = options || {};

    if (has(opts, 'quoteStyle') && (opts.quoteStyle !== 'single' && opts.quoteStyle !== 'double')) {
        throw new TypeError('option "quoteStyle" must be "single" or "double"');
    }
    if (
        has(opts, 'maxStringLength') && (typeof opts.maxStringLength === 'number'
            ? opts.maxStringLength < 0 && opts.maxStringLength !== Infinity
            : opts.maxStringLength !== null
        )
    ) {
        throw new TypeError('option "maxStringLength", if provided, must be a positive integer, Infinity, or `null`');
    }
    var customInspect = has(opts, 'customInspect') ? opts.customInspect : true;
    if (typeof customInspect !== 'boolean' && customInspect !== 'symbol') {
        throw new TypeError('option "customInspect", if provided, must be `true`, `false`, or `\'symbol\'`');
    }

    if (
        has(opts, 'indent')
        && opts.indent !== null
        && opts.indent !== '\t'
        && !(parseInt(opts.indent, 10) === opts.indent && opts.indent > 0)
    ) {
        throw new TypeError('option "indent" must be "\\t", an integer > 0, or `null`');
    }
    if (has(opts, 'numericSeparator') && typeof opts.numericSeparator !== 'boolean') {
        throw new TypeError('option "numericSeparator", if provided, must be `true` or `false`');
    }
    var numericSeparator = opts.numericSeparator;

    if (typeof obj === 'undefined') {
        return 'undefined';
    }
    if (obj === null) {
        return 'null';
    }
    if (typeof obj === 'boolean') {
        return obj ? 'true' : 'false';
    }

    if (typeof obj === 'string') {
        return inspectString(obj, opts);
    }
    if (typeof obj === 'number') {
        if (obj === 0) {
            return Infinity / obj > 0 ? '0' : '-0';
        }
        var str = String(obj);
        return numericSeparator ? addNumericSeparator(obj, str) : str;
    }
    if (typeof obj === 'bigint') {
        var bigIntStr = String(obj) + 'n';
        return numericSeparator ? addNumericSeparator(obj, bigIntStr) : bigIntStr;
    }

    var maxDepth = typeof opts.depth === 'undefined' ? 5 : opts.depth;
    if (typeof depth === 'undefined') { depth = 0; }
    if (depth >= maxDepth && maxDepth > 0 && typeof obj === 'object') {
        return isArray(obj) ? '[Array]' : '[Object]';
    }

    var indent = getIndent(opts, depth);

    if (typeof seen === 'undefined') {
        seen = [];
    } else if (indexOf(seen, obj) >= 0) {
        return '[Circular]';
    }

    function inspect(value, from, noIndent) {
        if (from) {
            seen = $arrSlice.call(seen);
            seen.push(from);
        }
        if (noIndent) {
            var newOpts = {
                depth: opts.depth
            };
            if (has(opts, 'quoteStyle')) {
                newOpts.quoteStyle = opts.quoteStyle;
            }
            return inspect_(value, newOpts, depth + 1, seen);
        }
        return inspect_(value, opts, depth + 1, seen);
    }

    if (typeof obj === 'function' && !isRegExp(obj)) { // in older engines, regexes are callable
        var name = nameOf(obj);
        var keys = arrObjKeys(obj, inspect);
        return '[Function' + (name ? ': ' + name : ' (anonymous)') + ']' + (keys.length > 0 ? ' { ' + $join.call(keys, ', ') + ' }' : '');
    }
    if (isSymbol(obj)) {
        var symString = hasShammedSymbols ? $replace.call(String(obj), /^(Symbol\(.*\))_[^)]*$/, '$1') : symToString.call(obj);
        return typeof obj === 'object' && !hasShammedSymbols ? markBoxed(symString) : symString;
    }
    if (isElement(obj)) {
        var s = '<' + $toLowerCase.call(String(obj.nodeName));
        var attrs = obj.attributes || [];
        for (var i = 0; i < attrs.length; i++) {
            s += ' ' + attrs[i].name + '=' + wrapQuotes(quote(attrs[i].value), 'double', opts);
        }
        s += '>';
        if (obj.childNodes && obj.childNodes.length) { s += '...'; }
        s += '</' + $toLowerCase.call(String(obj.nodeName)) + '>';
        return s;
    }
    if (isArray(obj)) {
        if (obj.length === 0) { return '[]'; }
        var xs = arrObjKeys(obj, inspect);
        if (indent && !singleLineValues(xs)) {
            return '[' + indentedJoin(xs, indent) + ']';
        }
        return '[ ' + $join.call(xs, ', ') + ' ]';
    }
    if (isError(obj)) {
        var parts = arrObjKeys(obj, inspect);
        if (!('cause' in Error.prototype) && 'cause' in obj && !isEnumerable.call(obj, 'cause')) {
            return '{ [' + String(obj) + '] ' + $join.call($concat.call('[cause]: ' + inspect(obj.cause), parts), ', ') + ' }';
        }
        if (parts.length === 0) { return '[' + String(obj) + ']'; }
        return '{ [' + String(obj) + '] ' + $join.call(parts, ', ') + ' }';
    }
    if (typeof obj === 'object' && customInspect) {
        if (inspectSymbol && typeof obj[inspectSymbol] === 'function' && utilInspect) {
            return utilInspect(obj, { depth: maxDepth - depth });
        } else if (customInspect !== 'symbol' && typeof obj.inspect === 'function') {
            return obj.inspect();
        }
    }
    if (isMap(obj)) {
        var mapParts = [];
        if (mapForEach) {
            mapForEach.call(obj, function (value, key) {
                mapParts.push(inspect(key, obj, true) + ' => ' + inspect(value, obj));
            });
        }
        return collectionOf('Map', mapSize.call(obj), mapParts, indent);
    }
    if (isSet(obj)) {
        var setParts = [];
        if (setForEach) {
            setForEach.call(obj, function (value) {
                setParts.push(inspect(value, obj));
            });
        }
        return collectionOf('Set', setSize.call(obj), setParts, indent);
    }
    if (isWeakMap(obj)) {
        return weakCollectionOf('WeakMap');
    }
    if (isWeakSet(obj)) {
        return weakCollectionOf('WeakSet');
    }
    if (isWeakRef(obj)) {
        return weakCollectionOf('WeakRef');
    }
    if (isNumber(obj)) {
        return markBoxed(inspect(Number(obj)));
    }
    if (isBigInt(obj)) {
        return markBoxed(inspect(bigIntValueOf.call(obj)));
    }
    if (isBoolean(obj)) {
        return markBoxed(booleanValueOf.call(obj));
    }
    if (isString(obj)) {
        return markBoxed(inspect(String(obj)));
    }
    // note: in IE 8, sometimes `global !== window` but both are the prototypes of each other
    /* eslint-env browser */
    if (typeof window !== 'undefined' && obj === window) {
        return '{ [object Window] }';
    }
    if (obj === global) {
        return '{ [object globalThis] }';
    }
    if (!isDate(obj) && !isRegExp(obj)) {
        var ys = arrObjKeys(obj, inspect);
        var isPlainObject = gPO ? gPO(obj) === Object.prototype : obj instanceof Object || obj.constructor === Object;
        var protoTag = obj instanceof Object ? '' : 'null prototype';
        var stringTag = !isPlainObject && toStringTag && Object(obj) === obj && toStringTag in obj ? $slice.call(toStr(obj), 8, -1) : protoTag ? 'Object' : '';
        var constructorTag = isPlainObject || typeof obj.constructor !== 'function' ? '' : obj.constructor.name ? obj.constructor.name + ' ' : '';
        var tag = constructorTag + (stringTag || protoTag ? '[' + $join.call($concat.call([], stringTag || [], protoTag || []), ': ') + '] ' : '');
        if (ys.length === 0) { return tag + '{}'; }
        if (indent) {
            return tag + '{' + indentedJoin(ys, indent) + '}';
        }
        return tag + '{ ' + $join.call(ys, ', ') + ' }';
    }
    return String(obj);
};

function wrapQuotes(s, defaultStyle, opts) {
    var quoteChar = (opts.quoteStyle || defaultStyle) === 'double' ? '"' : "'";
    return quoteChar + s + quoteChar;
}

function quote(s) {
    return $replace.call(String(s), /"/g, '&quot;');
}

function isArray(obj) { return toStr(obj) === '[object Array]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }
function isDate(obj) { return toStr(obj) === '[object Date]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }
function isRegExp(obj) { return toStr(obj) === '[object RegExp]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }
function isError(obj) { return toStr(obj) === '[object Error]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }
function isString(obj) { return toStr(obj) === '[object String]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }
function isNumber(obj) { return toStr(obj) === '[object Number]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }
function isBoolean(obj) { return toStr(obj) === '[object Boolean]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }

// Symbol and BigInt do have Symbol.toStringTag by spec, so that can't be used to eliminate false positives
function isSymbol(obj) {
    if (hasShammedSymbols) {
        return obj && typeof obj === 'object' && obj instanceof Symbol;
    }
    if (typeof obj === 'symbol') {
        return true;
    }
    if (!obj || typeof obj !== 'object' || !symToString) {
        return false;
    }
    try {
        symToString.call(obj);
        return true;
    } catch (e) {}
    return false;
}

function isBigInt(obj) {
    if (!obj || typeof obj !== 'object' || !bigIntValueOf) {
        return false;
    }
    try {
        bigIntValueOf.call(obj);
        return true;
    } catch (e) {}
    return false;
}

var hasOwn = Object.prototype.hasOwnProperty || function (key) { return key in this; };
function has(obj, key) {
    return hasOwn.call(obj, key);
}

function toStr(obj) {
    return objectToString.call(obj);
}

function nameOf(f) {
    if (f.name) { return f.name; }
    var m = $match.call(functionToString.call(f), /^function\s*([\w$]+)/);
    if (m) { return m[1]; }
    return null;
}

function indexOf(xs, x) {
    if (xs.indexOf) { return xs.indexOf(x); }
    for (var i = 0, l = xs.length; i < l; i++) {
        if (xs[i] === x) { return i; }
    }
    return -1;
}

function isMap(x) {
    if (!mapSize || !x || typeof x !== 'object') {
        return false;
    }
    try {
        mapSize.call(x);
        try {
            setSize.call(x);
        } catch (s) {
            return true;
        }
        return x instanceof Map; // core-js workaround, pre-v2.5.0
    } catch (e) {}
    return false;
}

function isWeakMap(x) {
    if (!weakMapHas || !x || typeof x !== 'object') {
        return false;
    }
    try {
        weakMapHas.call(x, weakMapHas);
        try {
            weakSetHas.call(x, weakSetHas);
        } catch (s) {
            return true;
        }
        return x instanceof WeakMap; // core-js workaround, pre-v2.5.0
    } catch (e) {}
    return false;
}

function isWeakRef(x) {
    if (!weakRefDeref || !x || typeof x !== 'object') {
        return false;
    }
    try {
        weakRefDeref.call(x);
        return true;
    } catch (e) {}
    return false;
}

function isSet(x) {
    if (!setSize || !x || typeof x !== 'object') {
        return false;
    }
    try {
        setSize.call(x);
        try {
            mapSize.call(x);
        } catch (m) {
            return true;
        }
        return x instanceof Set; // core-js workaround, pre-v2.5.0
    } catch (e) {}
    return false;
}

function isWeakSet(x) {
    if (!weakSetHas || !x || typeof x !== 'object') {
        return false;
    }
    try {
        weakSetHas.call(x, weakSetHas);
        try {
            weakMapHas.call(x, weakMapHas);
        } catch (s) {
            return true;
        }
        return x instanceof WeakSet; // core-js workaround, pre-v2.5.0
    } catch (e) {}
    return false;
}

function isElement(x) {
    if (!x || typeof x !== 'object') { return false; }
    if (typeof HTMLElement !== 'undefined' && x instanceof HTMLElement) {
        return true;
    }
    return typeof x.nodeName === 'string' && typeof x.getAttribute === 'function';
}

function inspectString(str, opts) {
    if (str.length > opts.maxStringLength) {
        var remaining = str.length - opts.maxStringLength;
        var trailer = '... ' + remaining + ' more character' + (remaining > 1 ? 's' : '');
        return inspectString($slice.call(str, 0, opts.maxStringLength), opts) + trailer;
    }
    // eslint-disable-next-line no-control-regex
    var s = $replace.call($replace.call(str, /(['\\])/g, '\\$1'), /[\x00-\x1f]/g, lowbyte);
    return wrapQuotes(s, 'single', opts);
}

function lowbyte(c) {
    var n = c.charCodeAt(0);
    var x = {
        8: 'b',
        9: 't',
        10: 'n',
        12: 'f',
        13: 'r'
    }[n];
    if (x) { return '\\' + x; }
    return '\\x' + (n < 0x10 ? '0' : '') + $toUpperCase.call(n.toString(16));
}

function markBoxed(str) {
    return 'Object(' + str + ')';
}

function weakCollectionOf(type) {
    return type + ' { ? }';
}

function collectionOf(type, size, entries, indent) {
    var joinedEntries = indent ? indentedJoin(entries, indent) : $join.call(entries, ', ');
    return type + ' (' + size + ') {' + joinedEntries + '}';
}

function singleLineValues(xs) {
    for (var i = 0; i < xs.length; i++) {
        if (indexOf(xs[i], '\n') >= 0) {
            return false;
        }
    }
    return true;
}

function getIndent(opts, depth) {
    var baseIndent;
    if (opts.indent === '\t') {
        baseIndent = '\t';
    } else if (typeof opts.indent === 'number' && opts.indent > 0) {
        baseIndent = $join.call(Array(opts.indent + 1), ' ');
    } else {
        return null;
    }
    return {
        base: baseIndent,
        prev: $join.call(Array(depth + 1), baseIndent)
    };
}

function indentedJoin(xs, indent) {
    if (xs.length === 0) { return ''; }
    var lineJoiner = '\n' + indent.prev + indent.base;
    return lineJoiner + $join.call(xs, ',' + lineJoiner) + '\n' + indent.prev;
}

function arrObjKeys(obj, inspect) {
    var isArr = isArray(obj);
    var xs = [];
    if (isArr) {
        xs.length = obj.length;
        for (var i = 0; i < obj.length; i++) {
            xs[i] = has(obj, i) ? inspect(obj[i], obj) : '';
        }
    }
    var syms = typeof gOPS === 'function' ? gOPS(obj) : [];
    var symMap;
    if (hasShammedSymbols) {
        symMap = {};
        for (var k = 0; k < syms.length; k++) {
            symMap['$' + syms[k]] = syms[k];
        }
    }

    for (var key in obj) { // eslint-disable-line no-restricted-syntax
        if (!has(obj, key)) { continue; } // eslint-disable-line no-restricted-syntax, no-continue
        if (isArr && String(Number(key)) === key && key < obj.length) { continue; } // eslint-disable-line no-restricted-syntax, no-continue
        if (hasShammedSymbols && symMap['$' + key] instanceof Symbol) {
            // this is to prevent shammed Symbols, which are stored as strings, from being included in the string key section
            continue; // eslint-disable-line no-restricted-syntax, no-continue
        } else if ($test.call(/[^\w$]/, key)) {
            xs.push(inspect(key, obj) + ': ' + inspect(obj[key], obj));
        } else {
            xs.push(key + ': ' + inspect(obj[key], obj));
        }
    }
    if (typeof gOPS === 'function') {
        for (var j = 0; j < syms.length; j++) {
            if (isEnumerable.call(obj, syms[j])) {
                xs.push('[' + inspect(syms[j]) + ']: ' + inspect(obj[syms[j]], obj));
            }
        }
    }
    return xs;
}


/***/ }),

/***/ 46609:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__(73837).inspect;


/***/ }),

/***/ 22772:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var hasSymbols = __webpack_require__(66478)();
var regexpMatchAll = __webpack_require__(25470);

module.exports = function getRegExpMatchAllPolyfill() {
	if (!hasSymbols || typeof Symbol.matchAll !== 'symbol' || typeof RegExp.prototype[Symbol.matchAll] !== 'function') {
		return regexpMatchAll;
	}
	return RegExp.prototype[Symbol.matchAll];
};


/***/ }),

/***/ 92569:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var implementation = __webpack_require__(29039);

module.exports = function getPolyfill() {
	if (String.prototype.matchAll) {
		try {
			''.matchAll(RegExp.prototype);
		} catch (e) {
			return String.prototype.matchAll;
		}
	}
	return implementation;
};


/***/ }),

/***/ 25470:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


// var Construct = require('es-abstract/2023/Construct');
var CreateRegExpStringIterator = __webpack_require__(77471);
var Get = __webpack_require__(22552);
var Set = __webpack_require__(22170);
var SpeciesConstructor = __webpack_require__(82416);
var ToLength = __webpack_require__(3664);
var ToString = __webpack_require__(61610);
var Type = __webpack_require__(93130);
var flagsGetter = __webpack_require__(83060);
var setFunctionName = __webpack_require__(91023);
var callBound = __webpack_require__(32622);

var $indexOf = callBound('String.prototype.indexOf');

var OrigRegExp = RegExp;

var supportsConstructingWithFlags = 'flags' in RegExp.prototype;

var constructRegexWithFlags = function constructRegex(C, R) {
	var matcher;
	// workaround for older engines that lack RegExp.prototype.flags
	var flags = 'flags' in R ? Get(R, 'flags') : ToString(flagsGetter(R));
	if (supportsConstructingWithFlags && typeof flags === 'string') {
		matcher = new C(R, flags);
	} else if (C === OrigRegExp) {
		// workaround for older engines that can not construct a RegExp with flags
		matcher = new C(R.source, flags);
	} else {
		matcher = new C(R, flags);
	}
	return { flags: flags, matcher: matcher };
};

var regexMatchAll = setFunctionName(function SymbolMatchAll(string) {
	var R = this;
	if (Type(R) !== 'Object') {
		throw new TypeError('"this" value must be an Object');
	}
	var S = ToString(string);
	var C = SpeciesConstructor(R, OrigRegExp);

	var tmp = constructRegexWithFlags(C, R);
	// var flags = ToString(Get(R, 'flags'));
	var flags = tmp.flags;
	// var matcher = Construct(C, [R, flags]);
	var matcher = tmp.matcher;

	var lastIndex = ToLength(Get(R, 'lastIndex'));
	Set(matcher, 'lastIndex', lastIndex, true);
	var global = $indexOf(flags, 'g') > -1;
	var fullUnicode = $indexOf(flags, 'u') > -1;
	return CreateRegExpStringIterator(matcher, S, global, fullUnicode);
}, '[Symbol.matchAll]', true);

module.exports = regexMatchAll;


/***/ }),

/***/ 48505:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var define = __webpack_require__(61482);
var hasSymbols = __webpack_require__(66478)();
var getPolyfill = __webpack_require__(92569);
var regexpMatchAllPolyfill = __webpack_require__(22772);

var defineP = Object.defineProperty;
var gOPD = Object.getOwnPropertyDescriptor;

module.exports = function shimMatchAll() {
	var polyfill = getPolyfill();
	define(
		String.prototype,
		{ matchAll: polyfill },
		{ matchAll: function () { return String.prototype.matchAll !== polyfill; } }
	);
	if (hasSymbols) {
		// eslint-disable-next-line no-restricted-properties
		var symbol = Symbol.matchAll || (Symbol['for'] ? Symbol['for']('Symbol.matchAll') : Symbol('Symbol.matchAll'));
		define(
			Symbol,
			{ matchAll: symbol },
			{ matchAll: function () { return Symbol.matchAll !== symbol; } }
		);

		if (defineP && gOPD) {
			var desc = gOPD(Symbol, symbol);
			if (!desc || desc.configurable) {
				defineP(Symbol, symbol, {
					configurable: false,
					enumerable: false,
					value: symbol,
					writable: false
				});
			}
		}

		var regexpMatchAll = regexpMatchAllPolyfill();
		var func = {};
		func[symbol] = regexpMatchAll;
		var predicate = {};
		predicate[symbol] = function () {
			return RegExp.prototype[symbol] !== regexpMatchAll;
		};
		define(RegExp.prototype, func, predicate);
	}
	return polyfill;
};


/***/ }),

/***/ 97523:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var RequireObjectCoercible = __webpack_require__(19076);
var ToString = __webpack_require__(86685);
var callBound = __webpack_require__(32622);
var $replace = callBound('String.prototype.replace');

var mvsIsWS = (/^\s$/).test('\u180E');
/* eslint-disable no-control-regex */
var leftWhitespace = mvsIsWS
	? /^[\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF]+/
	: /^[\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF]+/;
var rightWhitespace = mvsIsWS
	? /[\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF]+$/
	: /[\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF]+$/;
/* eslint-enable no-control-regex */

module.exports = function trim() {
	var S = ToString(RequireObjectCoercible(this));
	return $replace($replace(S, leftWhitespace, ''), rightWhitespace, '');
};


/***/ }),

/***/ 88367:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var callBind = __webpack_require__(86606);
var define = __webpack_require__(10091);
var RequireObjectCoercible = __webpack_require__(19076);

var implementation = __webpack_require__(97523);
var getPolyfill = __webpack_require__(68232);
var shim = __webpack_require__(7927);

var bound = callBind(getPolyfill());
var boundMethod = function trim(receiver) {
	RequireObjectCoercible(receiver);
	return bound(receiver);
};

define(boundMethod, {
	getPolyfill: getPolyfill,
	implementation: implementation,
	shim: shim
});

module.exports = boundMethod;


/***/ }),

/***/ 10091:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var keys = __webpack_require__(75514);
var hasSymbols = typeof Symbol === 'function' && typeof Symbol('foo') === 'symbol';

var toStr = Object.prototype.toString;
var concat = Array.prototype.concat;
var defineDataProperty = __webpack_require__(56713);

var isFunction = function (fn) {
	return typeof fn === 'function' && toStr.call(fn) === '[object Function]';
};

var supportsDescriptors = __webpack_require__(64666)();

var defineProperty = function (object, name, value, predicate) {
	if (name in object) {
		if (predicate === true) {
			if (object[name] === value) {
				return;
			}
		} else if (!isFunction(predicate) || !predicate()) {
			return;
		}
	}

	if (supportsDescriptors) {
		defineDataProperty(object, name, value, true);
	} else {
		defineDataProperty(object, name, value);
	}
};

var defineProperties = function (object, map) {
	var predicates = arguments.length > 2 ? arguments[2] : {};
	var props = keys(map);
	if (hasSymbols) {
		props = concat.call(props, Object.getOwnPropertySymbols(map));
	}
	for (var i = 0; i < props.length; i += 1) {
		defineProperty(object, props[i], map[props[i]], predicates[props[i]]);
	}
};

defineProperties.supportsDescriptors = !!supportsDescriptors;

module.exports = defineProperties;


/***/ }),

/***/ 68232:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var implementation = __webpack_require__(97523);

var zeroWidthSpace = '\u200b';
var mongolianVowelSeparator = '\u180E';

module.exports = function getPolyfill() {
	if (
		String.prototype.trim
		&& zeroWidthSpace.trim() === zeroWidthSpace
		&& mongolianVowelSeparator.trim() === mongolianVowelSeparator
		&& ('_' + mongolianVowelSeparator).trim() === ('_' + mongolianVowelSeparator)
		&& (mongolianVowelSeparator + '_').trim() === (mongolianVowelSeparator + '_')
	) {
		return String.prototype.trim;
	}
	return implementation;
};


/***/ }),

/***/ 7927:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var define = __webpack_require__(10091);
var getPolyfill = __webpack_require__(68232);

module.exports = function shimStringTrim() {
	var polyfill = getPolyfill();
	define(String.prototype, { trim: polyfill }, {
		trim: function testTrim() {
			return String.prototype.trim !== polyfill;
		}
	});
	return polyfill;
};


/***/ }),

/***/ 27581:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

const os = __webpack_require__(22037);
const tty = __webpack_require__(76224);
const hasFlag = __webpack_require__(36275);

const {env} = process;

let flagForceColor;
if (hasFlag('no-color') ||
	hasFlag('no-colors') ||
	hasFlag('color=false') ||
	hasFlag('color=never')) {
	flagForceColor = 0;
} else if (hasFlag('color') ||
	hasFlag('colors') ||
	hasFlag('color=true') ||
	hasFlag('color=always')) {
	flagForceColor = 1;
}

function envForceColor() {
	if ('FORCE_COLOR' in env) {
		if (env.FORCE_COLOR === 'true') {
			return 1;
		}

		if (env.FORCE_COLOR === 'false') {
			return 0;
		}

		return env.FORCE_COLOR.length === 0 ? 1 : Math.min(Number.parseInt(env.FORCE_COLOR, 10), 3);
	}
}

function translateLevel(level) {
	if (level === 0) {
		return false;
	}

	return {
		level,
		hasBasic: true,
		has256: level >= 2,
		has16m: level >= 3
	};
}

function supportsColor(haveStream, {streamIsTTY, sniffFlags = true} = {}) {
	const noFlagForceColor = envForceColor();
	if (noFlagForceColor !== undefined) {
		flagForceColor = noFlagForceColor;
	}

	const forceColor = sniffFlags ? flagForceColor : noFlagForceColor;

	if (forceColor === 0) {
		return 0;
	}

	if (sniffFlags) {
		if (hasFlag('color=16m') ||
			hasFlag('color=full') ||
			hasFlag('color=truecolor')) {
			return 3;
		}

		if (hasFlag('color=256')) {
			return 2;
		}
	}

	if (haveStream && !streamIsTTY && forceColor === undefined) {
		return 0;
	}

	const min = forceColor || 0;

	if (env.TERM === 'dumb') {
		return min;
	}

	if (process.platform === 'win32') {
		// Windows 10 build 10586 is the first Windows release that supports 256 colors.
		// Windows 10 build 14931 is the first release that supports 16m/TrueColor.
		const osRelease = os.release().split('.');
		if (
			Number(osRelease[0]) >= 10 &&
			Number(osRelease[2]) >= 10586
		) {
			return Number(osRelease[2]) >= 14931 ? 3 : 2;
		}

		return 1;
	}

	if ('CI' in env) {
		if (['TRAVIS', 'CIRCLECI', 'APPVEYOR', 'GITLAB_CI', 'GITHUB_ACTIONS', 'BUILDKITE', 'DRONE'].some(sign => sign in env) || env.CI_NAME === 'codeship') {
			return 1;
		}

		return min;
	}

	if ('TEAMCITY_VERSION' in env) {
		return /^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(env.TEAMCITY_VERSION) ? 1 : 0;
	}

	if (env.COLORTERM === 'truecolor') {
		return 3;
	}

	if ('TERM_PROGRAM' in env) {
		const version = Number.parseInt((env.TERM_PROGRAM_VERSION || '').split('.')[0], 10);

		switch (env.TERM_PROGRAM) {
			case 'iTerm.app':
				return version >= 3 ? 3 : 2;
			case 'Apple_Terminal':
				return 2;
			// No default
		}
	}

	if (/-256(color)?$/i.test(env.TERM)) {
		return 2;
	}

	if (/^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(env.TERM)) {
		return 1;
	}

	if ('COLORTERM' in env) {
		return 1;
	}

	return min;
}

function getSupportLevel(stream, options = {}) {
	const level = supportsColor(stream, {
		streamIsTTY: stream && stream.isTTY,
		...options
	});

	return translateLevel(level);
}

module.exports = {
	supportsColor: getSupportLevel,
	stdout: getSupportLevel({isTTY: tty.isatty(1)}),
	stderr: getSupportLevel({isTTY: tty.isatty(2)})
};


/***/ }),

/***/ 74248:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ExperimentationService = void 0;
var ExperimentationService_1 = __webpack_require__(79009);
Object.defineProperty(exports, "ExperimentationService", ({ enumerable: true, get: function () { return ExperimentationService_1.ExperimentationService; } }));
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 79009:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ExperimentationService = void 0;
const TasApiFeatureProvider_1 = __webpack_require__(61392);
const AxiosHttpClient_1 = __webpack_require__(24762);
const ExperimentationServiceAutoPolling_1 = __webpack_require__(3043);
/**
 * Experimentation service to provide functionality of A/B experiments:
 * - reading flights;
 * - caching current set of flights;
 * - get answer on if flights are enabled.
 */
class ExperimentationService extends ExperimentationServiceAutoPolling_1.ExperimentationServiceAutoPolling {
    constructor(options) {
        super(options.telemetry, options.filterProviders || [], // Defaulted to empty array.
        options.refetchInterval != null
            ? options.refetchInterval
            : // If no fetch interval is provided, refetch functionality is turned off.
                0, options.assignmentContextTelemetryPropertyName, options.telemetryEventName, options.storageKey, options.keyValueStorage);
        this.options = options;
        this.invokeInit();
    }
    init() {
        // set feature providers to be an empty array.
        this.featureProviders = [];
        // Add WebApi feature provider.
        this.addFeatureProvider(new TasApiFeatureProvider_1.TasApiFeatureProvider(new AxiosHttpClient_1.AxiosHttpClient(this.options.endpoint), this.telemetry, this.filterProviders));
        // This will start polling the TAS.
        super.init();
    }
}
exports.ExperimentationService = ExperimentationService;
ExperimentationService.REFRESH_RATE_IN_MINUTES = 30;
//# sourceMappingURL=ExperimentationService.js.map

/***/ }),

/***/ 3043:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ExperimentationServiceAutoPolling = void 0;
const ExperimentationServiceBase_1 = __webpack_require__(59859);
const PollingService_1 = __webpack_require__(93283);
/**
 * Implementation of Feature provider that provides a polling feature, where the source can be re-fetched every x time given.
 */
class ExperimentationServiceAutoPolling extends ExperimentationServiceBase_1.ExperimentationServiceBase {
    constructor(telemetry, filterProviders, refreshRateMs, assignmentContextTelemetryPropertyName, telemetryEventName, storageKey, storage) {
        super(telemetry, assignmentContextTelemetryPropertyName, telemetryEventName, storageKey, storage);
        this.telemetry = telemetry;
        this.filterProviders = filterProviders;
        this.refreshRateMs = refreshRateMs;
        this.assignmentContextTelemetryPropertyName = assignmentContextTelemetryPropertyName;
        this.telemetryEventName = telemetryEventName;
        this.storageKey = storageKey;
        this.storage = storage;
        // Excluding 0 since it allows to turn off the auto polling.
        if (refreshRateMs < 1000 && refreshRateMs !== 0) {
            throw new Error('The minimum refresh rate for polling is 1000 ms (1 second). If you wish to deactivate this auto-polling use value of 0.');
        }
        if (refreshRateMs > 0) {
            this.pollingService = new PollingService_1.PollingService(refreshRateMs);
            this.pollingService.OnPollTick(async () => {
                await super.getFeaturesAsync();
            });
        }
    }
    init() {
        if (this.pollingService) {
            this.pollingService.StartPolling(true);
        }
        else {
            super.getFeaturesAsync();
        }
    }
    /**
     * Wrapper that will reset the polling intervals whenever the feature data is fetched manually.
     */
    async getFeaturesAsync(overrideInMemoryFeatures = false) {
        if (!this.pollingService) {
            return await super.getFeaturesAsync(overrideInMemoryFeatures);
        }
        else {
            this.pollingService.StopPolling();
            let result = await super.getFeaturesAsync(overrideInMemoryFeatures);
            this.pollingService.StartPolling();
            return result;
        }
    }
}
exports.ExperimentationServiceAutoPolling = ExperimentationServiceAutoPolling;
//# sourceMappingURL=ExperimentationServiceAutoPolling.js.map

/***/ }),

/***/ 59859:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ExperimentationServiceBase = void 0;
const MemoryKeyValueStorage_1 = __webpack_require__(20350);
/**
 * Experimentation service to provide functionality of A/B experiments:
 * - reading flights;
 * - caching current set of flights;
 * - get answer on if flights are enabled.
 */
class ExperimentationServiceBase {
    get features() {
        return this._features;
    }
    set features(value) {
        this._features = value;
        /**
         * If an implementation of telemetry exists, we set the shared property.
         */
        if (this.telemetry) {
            this.telemetry.setSharedProperty(this.assignmentContextTelemetryPropertyName, this.features.assignmentContext);
        }
    }
    constructor(telemetry, assignmentContextTelemetryPropertyName, telemetryEventName, storageKey, storage) {
        this.telemetry = telemetry;
        this.assignmentContextTelemetryPropertyName = assignmentContextTelemetryPropertyName;
        this.telemetryEventName = telemetryEventName;
        this.storageKey = storageKey;
        this.storage = storage;
        this.featuresConsumed = false;
        this.cachedTelemetryEvents = [];
        this._features = {
            features: [],
            assignmentContext: '',
            configs: []
        };
        if (!this.storageKey) {
            this.storageKey = 'ABExp.Features';
        }
        if (!this.storage) {
            storage = new MemoryKeyValueStorage_1.MemoryKeyValueStorage();
        }
        this.loadCachePromise = this.loadCachedFeatureData();
        this.initializePromise = this.loadCachePromise;
        this.initialFetch = new Promise((resolve, reject) => {
            this.resolveInitialFetchPromise = resolve;
        });
    }
    /**
     * Gets all the features from the provider sources (not cache).
     * It returns these features and will also update the providers to have the latest features cached.
     */
    async getFeaturesAsync(overrideInMemoryFeatures = false) {
        /**
         * If there's already a fetching promise, there's no need to call it again.
         * We return that as result.
         */
        if (this.fetchPromise != null) {
            try {
                await this.fetchPromise;
            }
            catch (_a) {
                // Fetching features threw. Can happen if not connected to the internet, e.g
            }
            return this.features;
        }
        if (!this.featureProviders || this.featureProviders.length === 0) {
            return Promise.resolve({
                features: [],
                assignmentContext: '',
                configs: []
            });
        }
        try {
            /**
             * Fetch all from providers.
             */
            this.fetchPromise = Promise.all(this.featureProviders.map(async (provider) => {
                return await provider.getFeatures();
            }));
            const featureResults = await this.fetchPromise;
            this.updateFeatures(featureResults, overrideInMemoryFeatures);
        }
        catch (_b) {
            // Fetching features threw error. Can happen if not connected to the internet, e.g.
        }
        this.fetchPromise = undefined;
        if (this.resolveInitialFetchPromise) {
            this.resolveInitialFetchPromise();
            this.resolveInitialFetchPromise = undefined;
        }
        /**
         * At this point all features have been re-fetched and cache has been updated.
         * We return the cached features.
         */
        return this.features;
    }
    /**
     *
     * @param featureResults The feature results obtained from all the feature providers.
     */
    updateFeatures(featureResults, overrideInMemoryFeatures = false) {
        /**
         * if features comes as a null value, that is taken as if there aren't any features active,
         * so an empty array is defaulted.
         */
        let features = {
            features: [],
            assignmentContext: '',
            configs: []
        };
        for (let result of featureResults) {
            for (let feature of result.features) {
                if (!features.features.includes(feature)) {
                    features.features.push(feature);
                }
            }
            for (let config of result.configs) {
                const existingConfig = features.configs.find(c => c.Id === config.Id);
                if (existingConfig) {
                    existingConfig.Parameters = Object.assign(Object.assign({}, existingConfig.Parameters), config.Parameters);
                }
                else {
                    features.configs.push(config);
                }
            }
            features.assignmentContext += result.assignmentContext;
        }
        /**
         * Set the obtained feature values to the global features variable. This stores them in memory.
         */
        if (overrideInMemoryFeatures || !this.featuresConsumed) {
            this.features = features;
        }
        /**
         * If we have storage, we cache the latest results into the storage.
         */
        if (this.storage) {
            this.storage.setValue(this.storageKey, features);
        }
    }
    async loadCachedFeatureData() {
        let cachedFeatureData;
        if (this.storage) {
            cachedFeatureData = await this.storage.getValue(this.storageKey);
            // When updating from an older version of tas-client, configs may be undefined 
            if (cachedFeatureData !== undefined && cachedFeatureData.configs === undefined) {
                cachedFeatureData.configs = [];
            }
        }
        if (this.features.features.length === 0) {
            this.features = cachedFeatureData || { features: [], assignmentContext: '', configs: [] };
        }
    }
    /**
     * Returns a value indicating whether the given flight is enabled.
     * It uses the in-memory cache.
     * @param flight The flight to check.
     */
    isFlightEnabled(flight) {
        this.featuresConsumed = true;
        this.PostEventToTelemetry(flight);
        return this.features.features.includes(flight);
    }
    /**
     * Returns a value indicating whether the given flight is enabled.
     * It uses the values currently on cache.
     * @param flight The flight to check.
     */
    async isCachedFlightEnabled(flight) {
        await this.loadCachePromise;
        this.featuresConsumed = true;
        this.PostEventToTelemetry(flight);
        return this.features.features.includes(flight);
    }
    /**
     * Returns a value indicating whether the given flight is enabled.
     * It re-fetches values from the server.
     * @param flight the flight to check.
     */
    async isFlightEnabledAsync(flight) {
        const features = await this.getFeaturesAsync(true);
        this.featuresConsumed = true;
        this.PostEventToTelemetry(flight);
        return features.features.includes(flight);
    }
    /**
     * Returns the value of the treatment variable, or undefined if not found.
     * It uses the values currently in memory, so the experimentation service
     * must be initialized before calling.
     * @param config name of the config to check.
     * @param name name of the treatment variable.
     */
    getTreatmentVariable(configId, name) {
        this.featuresConsumed = true;
        this.PostEventToTelemetry(`${configId}.${name}`);
        const config = this.features.configs.find(c => c.Id === configId);
        return config === null || config === void 0 ? void 0 : config.Parameters[name];
    }
    /**
     * Returns the value of the treatment variable, or undefined if not found.
     * It re-fetches values from the server. If checkCache is set to true and the value exists
     * in the cache, the Treatment Assignment Service is not called.
     * @param config name of the config to check.
     * @param name name of the treatment variable.
     * @param checkCache check the cache for the variable before calling the TAS.
     */
    async getTreatmentVariableAsync(configId, name, checkCache) {
        if (checkCache) {
            const _featuresConsumed = this.featuresConsumed;
            const cachedValue = this.getTreatmentVariable(configId, name);
            if (cachedValue === undefined) {
                this.featuresConsumed = _featuresConsumed;
            }
            else {
                return cachedValue;
            }
        }
        await this.getFeaturesAsync(true);
        return this.getTreatmentVariable(configId, name);
    }
    PostEventToTelemetry(flight) {
        /**
         * If this event has already been posted, we omit from posting it again.
         */
        if (this.cachedTelemetryEvents.includes(flight)) {
            return;
        }
        this.telemetry.postEvent(this.telemetryEventName, new Map([['ABExp.queriedFeature', flight]]));
        /**
         * We cache the flight so we don't post it again.
         */
        this.cachedTelemetryEvents.push(flight);
    }
    invokeInit() {
        this.init();
    }
    addFeatureProvider(...providers) {
        if (providers == null || this.featureProviders == null) {
            return;
        }
        for (let provider of providers) {
            this.featureProviders.push(provider);
        }
    }
}
exports.ExperimentationServiceBase = ExperimentationServiceBase;
//# sourceMappingURL=ExperimentationServiceBase.js.map

/***/ }),

/***/ 90433:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.BaseFeatureProvider = void 0;
/**
 * Abstract class for Feature Provider Implementation.
 */
class BaseFeatureProvider {
    /**
     * @param telemetry The telemetry implementation.
     */
    constructor(telemetry) {
        this.telemetry = telemetry;
        this.isFetching = false;
    }
    /**
     * Method that wraps the fetch method in order to re-use the fetch promise if needed.
     * @param headers The headers to be used on the fetch method.
     */
    async getFeatures() {
        if (this.isFetching && this.fetchPromise) {
            return this.fetchPromise;
        }
        this.fetchPromise = this.fetch();
        let features = await this.fetchPromise;
        this.isFetching = false;
        this.fetchPromise = undefined;
        return features;
    }
}
exports.BaseFeatureProvider = BaseFeatureProvider;
//# sourceMappingURL=BaseFeatureProvider.js.map

/***/ }),

/***/ 62958:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FilteredFeatureProvider = void 0;
const BaseFeatureProvider_1 = __webpack_require__(90433);
/**
 * Feature provider implementation that handles filters.
 */
class FilteredFeatureProvider extends BaseFeatureProvider_1.BaseFeatureProvider {
    constructor(telemetry, filterProviders) {
        super(telemetry);
        this.telemetry = telemetry;
        this.filterProviders = filterProviders;
        this.cachedTelemetryEvents = [];
    }
    getFilters() {
        // We get the filters that will be sent as headers.
        let filters = new Map();
        for (let filter of this.filterProviders) {
            let filterHeaders = filter.getFilters();
            for (let key of filterHeaders.keys()) {
                // Headers can be overridden by custom filters.
                // That's why a check isn't done to see if the header already exists, the value is just set.
                let filterValue = filterHeaders.get(key);
                filters.set(key, filterValue);
            }
        }
        return filters;
    }
    PostEventToTelemetry(headers) {
        /**
         * If these headers have already been posted, we skip from posting them again..
         */
        if (this.cachedTelemetryEvents.includes(headers)) {
            return;
        }
        const jsonHeaders = JSON.stringify(headers);
        this.telemetry.postEvent('report-headers', new Map([['ABExp.headers', jsonHeaders]]));
        /**
         * We cache the flight so we don't post it again.
         */
        this.cachedTelemetryEvents.push(headers);
    }
}
exports.FilteredFeatureProvider = FilteredFeatureProvider;
//# sourceMappingURL=FilteredFeatureProvider.js.map

/***/ }),

/***/ 61392:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TasApiFeatureProvider = exports.TASAPI_FETCHERROR_EVENTNAME = void 0;
const FilteredFeatureProvider_1 = __webpack_require__(62958);
exports.TASAPI_FETCHERROR_EVENTNAME = 'call-tas-error';
const ErrorType = 'ErrorType';
/**
 * Feature provider implementation that calls the TAS web service to get the most recent active features.
 */
class TasApiFeatureProvider extends FilteredFeatureProvider_1.FilteredFeatureProvider {
    constructor(httpClient, telemetry, filterProviders) {
        super(telemetry, filterProviders);
        this.httpClient = httpClient;
        this.telemetry = telemetry;
        this.filterProviders = filterProviders;
    }
    /**
     * Method that handles fetching of latest data (in this case, flights) from the provider.
     */
    async fetch() {
        // We get the filters that will be sent as headers.
        let filters = this.getFilters();
        let headers = {};
        // Filters are handled using Map<string,any> therefore we need to
        // convert these filters into something axios can take as headers.
        for (let key of filters.keys()) {
            const filterValue = filters.get(key);
            headers[key] = filterValue;
        }
        //axios webservice call.
        let response;
        try {
            /**
             * As mentioned in the axios docs:
             * Axios Promise will handle handle the catch
             * section of promises whenever a request is not succesful.
             * https://axios-http.com/docs/handling_errors
             */
            response = await this.httpClient.get({ headers: headers });
        }
        catch (error) {
            const axiosError = error;
            const properties = new Map();
            if (axiosError.response) {
                // The request was made and the server responded with a status code
                // that falls out of the range of 2xx
                properties.set(ErrorType, 'ServerError');
            }
            else if (axiosError.request) {
                // The request was made but no response was received
                // `error.request` is an instance of XMLHttpRequest in the browser and an instance of
                // http.ClientRequest in node.js
                properties.set(ErrorType, 'NoResponse');
            }
            else {
                // Something happened in setting up the request that triggered an Error
                properties.set(ErrorType, 'GenericError');
            }
            this.telemetry.postEvent(exports.TASAPI_FETCHERROR_EVENTNAME, properties);
        }
        // In case the response fetching failed, throw
        // exception so that the caller exits.
        if (!response) {
            throw Error(exports.TASAPI_FETCHERROR_EVENTNAME);
        }
        // If we have at least one filter, we post it to telemetry event.
        if (filters.keys.length > 0) {
            this.PostEventToTelemetry(headers);
        }
        // Read the response data from the server.
        let responseData = response.data;
        let configs = responseData.Configs;
        let features = [];
        for (let c of configs) {
            if (!c.Parameters) {
                continue;
            }
            for (let key of Object.keys(c.Parameters)) {
                const featureName = key + (c.Parameters[key] ? '' : 'cf');
                if (!features.includes(featureName)) {
                    features.push(featureName);
                }
            }
        }
        return {
            features,
            assignmentContext: responseData.AssignmentContext,
            configs,
        };
    }
}
exports.TasApiFeatureProvider = TasApiFeatureProvider;
//# sourceMappingURL=TasApiFeatureProvider.js.map

/***/ }),

/***/ 24762:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AxiosHttpClient = void 0;
const axios_1 = __webpack_require__(51575);
class AxiosHttpClient {
    constructor(endpoint) {
        this.endpoint = endpoint;
    }
    get(config) {
        return axios_1.default.get(this.endpoint, Object.assign(Object.assign({}, config), { proxy: false }));
    }
}
exports.AxiosHttpClient = AxiosHttpClient;
//# sourceMappingURL=AxiosHttpClient.js.map

/***/ }),

/***/ 20350:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.MemoryKeyValueStorage = void 0;
class MemoryKeyValueStorage {
    constructor() {
        this.storage = new Map();
    }
    async getValue(key, defaultValue) {
        if (this.storage.has(key)) {
            return await Promise.resolve(this.storage.get(key));
        }
        return await Promise.resolve(defaultValue || undefined);
    }
    setValue(key, value) {
        this.storage.set(key, value);
    }
}
exports.MemoryKeyValueStorage = MemoryKeyValueStorage;
//# sourceMappingURL=MemoryKeyValueStorage.js.map

/***/ }),

/***/ 93283:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PollingService = void 0;
class PollingService {
    constructor(fetchInterval) {
        this.fetchInterval = fetchInterval;
    }
    StopPolling() {
        clearInterval(this.intervalHandle);
        this.intervalHandle = undefined;
    }
    OnPollTick(callback) {
        this.onTick = callback;
    }
    StartPolling(pollImmediately = false) {
        if (this.intervalHandle) {
            this.StopPolling();
        }
        // If there's no callback, there's no point to start polling.
        if (this.onTick == null) {
            return;
        }
        if (pollImmediately) {
            this.onTick().then(() => { return; }).catch(() => { return; });
        }
        /**
         * Set the interval to start running.
         */
        this.intervalHandle = setInterval(async () => {
            await this.onTick();
        }, this.fetchInterval);
        if (this.intervalHandle.unref) { // unref is only available in Node, not the web
            this.intervalHandle.unref(); // unref is used to avoid keeping node.js alive only because of these timeouts.
        }
    }
}
exports.PollingService = PollingService;
//# sourceMappingURL=PollingService.js.map

/***/ }),

/***/ 93534:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
/*!
 * to-regex-range <https://github.com/micromatch/to-regex-range>
 *
 * Copyright (c) 2015-present, Jon Schlinkert.
 * Released under the MIT License.
 */



const isNumber = __webpack_require__(97106);

const toRegexRange = (min, max, options) => {
  if (isNumber(min) === false) {
    throw new TypeError('toRegexRange: expected the first argument to be a number');
  }

  if (max === void 0 || min === max) {
    return String(min);
  }

  if (isNumber(max) === false) {
    throw new TypeError('toRegexRange: expected the second argument to be a number.');
  }

  let opts = { relaxZeros: true, ...options };
  if (typeof opts.strictZeros === 'boolean') {
    opts.relaxZeros = opts.strictZeros === false;
  }

  let relax = String(opts.relaxZeros);
  let shorthand = String(opts.shorthand);
  let capture = String(opts.capture);
  let wrap = String(opts.wrap);
  let cacheKey = min + ':' + max + '=' + relax + shorthand + capture + wrap;

  if (toRegexRange.cache.hasOwnProperty(cacheKey)) {
    return toRegexRange.cache[cacheKey].result;
  }

  let a = Math.min(min, max);
  let b = Math.max(min, max);

  if (Math.abs(a - b) === 1) {
    let result = min + '|' + max;
    if (opts.capture) {
      return `(${result})`;
    }
    if (opts.wrap === false) {
      return result;
    }
    return `(?:${result})`;
  }

  let isPadded = hasPadding(min) || hasPadding(max);
  let state = { min, max, a, b };
  let positives = [];
  let negatives = [];

  if (isPadded) {
    state.isPadded = isPadded;
    state.maxLen = String(state.max).length;
  }

  if (a < 0) {
    let newMin = b < 0 ? Math.abs(b) : 1;
    negatives = splitToPatterns(newMin, Math.abs(a), state, opts);
    a = state.a = 0;
  }

  if (b >= 0) {
    positives = splitToPatterns(a, b, state, opts);
  }

  state.negatives = negatives;
  state.positives = positives;
  state.result = collatePatterns(negatives, positives, opts);

  if (opts.capture === true) {
    state.result = `(${state.result})`;
  } else if (opts.wrap !== false && (positives.length + negatives.length) > 1) {
    state.result = `(?:${state.result})`;
  }

  toRegexRange.cache[cacheKey] = state;
  return state.result;
};

function collatePatterns(neg, pos, options) {
  let onlyNegative = filterPatterns(neg, pos, '-', false, options) || [];
  let onlyPositive = filterPatterns(pos, neg, '', false, options) || [];
  let intersected = filterPatterns(neg, pos, '-?', true, options) || [];
  let subpatterns = onlyNegative.concat(intersected).concat(onlyPositive);
  return subpatterns.join('|');
}

function splitToRanges(min, max) {
  let nines = 1;
  let zeros = 1;

  let stop = countNines(min, nines);
  let stops = new Set([max]);

  while (min <= stop && stop <= max) {
    stops.add(stop);
    nines += 1;
    stop = countNines(min, nines);
  }

  stop = countZeros(max + 1, zeros) - 1;

  while (min < stop && stop <= max) {
    stops.add(stop);
    zeros += 1;
    stop = countZeros(max + 1, zeros) - 1;
  }

  stops = [...stops];
  stops.sort(compare);
  return stops;
}

/**
 * Convert a range to a regex pattern
 * @param {Number} `start`
 * @param {Number} `stop`
 * @return {String}
 */

function rangeToPattern(start, stop, options) {
  if (start === stop) {
    return { pattern: start, count: [], digits: 0 };
  }

  let zipped = zip(start, stop);
  let digits = zipped.length;
  let pattern = '';
  let count = 0;

  for (let i = 0; i < digits; i++) {
    let [startDigit, stopDigit] = zipped[i];

    if (startDigit === stopDigit) {
      pattern += startDigit;

    } else if (startDigit !== '0' || stopDigit !== '9') {
      pattern += toCharacterClass(startDigit, stopDigit, options);

    } else {
      count++;
    }
  }

  if (count) {
    pattern += options.shorthand === true ? '\\d' : '[0-9]';
  }

  return { pattern, count: [count], digits };
}

function splitToPatterns(min, max, tok, options) {
  let ranges = splitToRanges(min, max);
  let tokens = [];
  let start = min;
  let prev;

  for (let i = 0; i < ranges.length; i++) {
    let max = ranges[i];
    let obj = rangeToPattern(String(start), String(max), options);
    let zeros = '';

    if (!tok.isPadded && prev && prev.pattern === obj.pattern) {
      if (prev.count.length > 1) {
        prev.count.pop();
      }

      prev.count.push(obj.count[0]);
      prev.string = prev.pattern + toQuantifier(prev.count);
      start = max + 1;
      continue;
    }

    if (tok.isPadded) {
      zeros = padZeros(max, tok, options);
    }

    obj.string = zeros + obj.pattern + toQuantifier(obj.count);
    tokens.push(obj);
    start = max + 1;
    prev = obj;
  }

  return tokens;
}

function filterPatterns(arr, comparison, prefix, intersection, options) {
  let result = [];

  for (let ele of arr) {
    let { string } = ele;

    // only push if _both_ are negative...
    if (!intersection && !contains(comparison, 'string', string)) {
      result.push(prefix + string);
    }

    // or _both_ are positive
    if (intersection && contains(comparison, 'string', string)) {
      result.push(prefix + string);
    }
  }
  return result;
}

/**
 * Zip strings
 */

function zip(a, b) {
  let arr = [];
  for (let i = 0; i < a.length; i++) arr.push([a[i], b[i]]);
  return arr;
}

function compare(a, b) {
  return a > b ? 1 : b > a ? -1 : 0;
}

function contains(arr, key, val) {
  return arr.some(ele => ele[key] === val);
}

function countNines(min, len) {
  return Number(String(min).slice(0, -len) + '9'.repeat(len));
}

function countZeros(integer, zeros) {
  return integer - (integer % Math.pow(10, zeros));
}

function toQuantifier(digits) {
  let [start = 0, stop = ''] = digits;
  if (stop || start > 1) {
    return `{${start + (stop ? ',' + stop : '')}}`;
  }
  return '';
}

function toCharacterClass(a, b, options) {
  return `[${a}${(b - a === 1) ? '' : '-'}${b}]`;
}

function hasPadding(str) {
  return /^-?(0+)\d/.test(str);
}

function padZeros(value, tok, options) {
  if (!tok.isPadded) {
    return value;
  }

  let diff = Math.abs(tok.maxLen - String(value).length);
  let relax = options.relaxZeros !== false;

  switch (diff) {
    case 0:
      return '';
    case 1:
      return relax ? '0?' : '0';
    case 2:
      return relax ? '0{0,2}' : '00';
    default: {
      return relax ? `0{0,${diff}}` : `0{${diff}}`;
    }
  }
}

/**
 * Cache
 */

toRegexRange.cache = {};
toRegexRange.clearCache = () => (toRegexRange.cache = {});

/**
 * Expose `toRegexRange`
 */

module.exports = toRegexRange;


/***/ }),

/***/ 97106:
/***/ ((module) => {

"use strict";
/*!
 * is-number <https://github.com/jonschlinkert/is-number>
 *
 * Copyright (c) 2014-present, Jon Schlinkert.
 * Released under the MIT License.
 */



module.exports = function(num) {
  if (typeof num === 'number') {
    return num - num === 0;
  }
  if (typeof num === 'string' && num.trim() !== '') {
    return Number.isFinite ? Number.isFinite(+num) : isFinite(+num);
  }
  return false;
};


/***/ }),

/***/ 15905:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See LICENSE in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CMakeToolsApiImpl = void 0;
const api = __webpack_require__(77081);
const util_1 = __webpack_require__(16182);
class CMakeToolsApiImpl {
    constructor(manager) {
        this.manager = manager;
        this.version = api.Version.v2;
    }
    showUIElement(element) {
        return this.setUIElementVisibility(element, true);
    }
    hideUIElement(element) {
        return this.setUIElementVisibility(element, false);
    }
    get onBuildTargetChanged() {
        return this.manager.onBuildTargetChanged;
    }
    get onLaunchTargetChanged() {
        return this.manager.onLaunchTargetChanged;
    }
    get onActiveProjectChanged() {
        return this.manager.onActiveProjectChanged;
    }
    async getProject(uri) {
        const project = await this.manager.projectController.getProjectForFolder(uri.fsPath);
        return project ? new CMakeProjectWrapper(project) : undefined;
    }
    getActiveFolderPath() {
        return this.manager.activeFolderPath();
    }
    async setUIElementVisibility(element, visible) {
        switch (element) {
            case api.UIElement.StatusBarDebugButton:
                await this.manager.hideDebugCommand(!visible);
                break;
            case api.UIElement.StatusBarLaunchButton:
                await this.manager.hideLaunchCommand(!visible);
                break;
            default:
                (0, util_1.assertNever)(element);
        }
    }
}
exports.CMakeToolsApiImpl = CMakeToolsApiImpl;
async function withErrorCheck(name, action) {
    const code = await action();
    if (code !== 0) {
        throw new Error(`${name} failed with code ${code}`);
    }
}
class CMakeProjectWrapper {
    constructor(project) {
        this.project = project;
    }
    get codeModel() {
        var _a;
        return (_a = this.project.codeModelContent) !== null && _a !== void 0 ? _a : undefined;
    }
    get onCodeModelChanged() {
        return this.project.onCodeModelChangedApiEvent;
    }
    configure() {
        return withErrorCheck('configure', async () => (await this.project.configure()).result);
    }
    build(targets) {
        return withErrorCheck('build', () => this.project.build(targets));
    }
    install() {
        return withErrorCheck('install', () => this.project.install());
    }
    clean() {
        return withErrorCheck('clean', () => this.project.clean());
    }
    reconfigure() {
        return withErrorCheck('reconfigure', async () => (await this.project.cleanConfigure()).result);
    }
    async getBuildDirectory() {
        var _a;
        return (_a = (await this.project.buildDirectory())) !== null && _a !== void 0 ? _a : undefined;
    }
    async getActiveBuildType() {
        var _a;
        return (_a = (await this.project.currentBuildType())) !== null && _a !== void 0 ? _a : undefined;
    }
}


/***/ }),

/***/ 78510:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/**
 * Module for reading from the CMake cache
 */ /** */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CMakeCache = exports.CacheEntry = exports.CacheEntryType = void 0;
const logging = __webpack_require__(71067);
const pr_1 = __webpack_require__(72502);
const rollbar_1 = __webpack_require__(58543);
const util = __webpack_require__(16182);
const nls = __webpack_require__(33463);
nls.config({ messageFormat: nls.MessageFormat.bundle, bundleFormat: nls.BundleFormat.standalone })((__webpack_require__(71017).join)(__dirname, 'src\\cache.ts'));
const localize = nls.loadMessageBundle((__webpack_require__(71017).join)(__dirname, 'src\\cache.ts'));
const log = logging.createLogger('cache');
/**
 * The type of a CMake cache entry
 */
var CacheEntryType;
(function (CacheEntryType) {
    CacheEntryType[CacheEntryType["Bool"] = 0] = "Bool";
    CacheEntryType[CacheEntryType["String"] = 1] = "String";
    CacheEntryType[CacheEntryType["Path"] = 2] = "Path";
    CacheEntryType[CacheEntryType["FilePath"] = 3] = "FilePath";
    CacheEntryType[CacheEntryType["Internal"] = 4] = "Internal";
    CacheEntryType[CacheEntryType["Uninitialized"] = 5] = "Uninitialized";
    CacheEntryType[CacheEntryType["Static"] = 6] = "Static";
})(CacheEntryType = exports.CacheEntryType || (exports.CacheEntryType = {}));
/**
 * Implements access to CMake cache entries.
 */
class CacheEntry {
    /**
     * Create a new Cache Entry instance. Doesn't modify any files. You probably
     * want to get these from the `CMakeCache` object instead.
     * @param key The name of the entry
     * @param value The actual value of the entry. Always a string.
     * @param type The actual type of `value`
     * @param docString The `DOC` string in the cache
     * @param advanced Whether the entry is `ADVANCED`
     */
    constructor(key, value, type, docString, advanced) {
        this.type = CacheEntryType.Uninitialized;
        this.helpString = '';
        /** The name of the cache entry */
        this.key = '';
        /** The entry's value. Type depends on `type`. */
        this.value = null;
        /** Whether this entry is ADVANCED, meaning it hidden from the user. */
        this.advanced = false;
        /** List of allowed values, as specified by STRINGS property */
        this.choices = [];
        this.serializedKey = '';
        this.key = key;
        this.serializedKey = key; // may be overwritten later with quoted version of `key`
        this.type = type;
        if (type === CacheEntryType.Bool) {
            this.value = util.isTruthy(value);
        }
        else {
            this.value = value;
        }
        this.helpString = docString;
        this.advanced = advanced;
    }
    /**
     * Return the value as a `T` instance. Does no actual conversion. It's up to
     * you to check the value of `CacheEntryProperties.type`.
     */
    as() {
        return this.value;
    }
}
exports.CacheEntry = CacheEntry;
/**
 * Reads a CMake cache file. This class is immutable.
 */
class CMakeCache {
    /**
     * Create a new instance. This is **private**. You may only create an instance
     * via the `fromPath` static method.
     * @param path Path to the cache file
     * @param cacheEntries Entries in the cache
     */
    constructor(path, cacheEntries) {
        this.path = path;
        this.cacheEntries = cacheEntries;
    }
    /**
     * Read the contents of a CMakeCache.txt file.
     * @param path Path to a CMakeCache.txt-format file
     * @returns The CMake cache.
     *
     * @note The cache *may* not exist. In that case, the entries is empty and
     * the `exists` property is `false`. Creating or modifying the file named by
     * `path` has no effect on existing instance of this class.
     */
    static async fromPath(path) {
        log.debug(localize(0, null, path));
        const exists = await pr_1.fs.exists(path);
        if (exists) {
            log.trace(localize(1, null));
            const content = await pr_1.fs.readFile(path);
            log.trace(localize(2, null));
            const entries = CMakeCache.parseCache(content.toString());
            log.trace(localize(3, null, entries.size, path));
            return new CMakeCache(path, entries);
        }
        else {
            log.debug(localize(4, null));
            return new CMakeCache(path, new Map());
        }
    }
    /** Get a list of all cache entries */
    get allEntries() {
        return Array.from(this.cacheEntries.values());
    }
    /**
     * Reload the cache file and return a new instance. This will not modify this
     * instance.
     * @returns A **new instance**.
     */
    getReloaded() {
        log.debug(localize(5, null, this.path));
        return CMakeCache.fromPath(this.path);
    }
    /**
     * Parse the contents of a CMake cache file.
     * @param content The contents of a CMake cache file.
     * @returns A map from the cache keys to the entries in the cache.
     */
    static parseCache(content) {
        log.debug(localize(6, null));
        const lines = content.split(/\r\n|\n|\r/).filter(line => !!line.length).filter(line => !/^\s*#/.test(line));
        const entries = new Map();
        let docStringAccumulator = '';
        const advancedNames = [];
        const choices = new Map();
        for (const line of lines) {
            if (line.startsWith('//')) {
                docStringAccumulator += /^\/\/(.*)/.exec(line)[1] + ' ';
            }
            else {
                const match = /^("(.*?)"|(.*?)):([^:]*?)=(.*)/.exec(line);
                if (!match) {
                    rollbar_1.default.error(localize(7, null, line));
                    continue;
                }
                const [, serializedName, quotedName, unquotedName, typeName, value] = match;
                const name = quotedName || unquotedName;
                if (!name || !typeName) {
                    continue;
                }
                log.trace(localize(8, null, 'name', name, 'typename', typeName, 'valuestr', value));
                if (name.endsWith('-ADVANCED')) {
                    if (value === '1') {
                        const entryName = name.substr(0, name.lastIndexOf('-'));
                        advancedNames.push(entryName);
                    }
                }
                else if (name.endsWith('-MODIFIED')) {
                    // ignore irrelevant entry property
                }
                else if (name.endsWith('-STRINGS')) {
                    choices.set(name.substr(0, name.lastIndexOf('-')), value.split(';'));
                }
                else {
                    const key = name;
                    const typemap = {
                        BOOL: CacheEntryType.Bool,
                        STRING: CacheEntryType.String,
                        PATH: CacheEntryType.Path,
                        FILEPATH: CacheEntryType.FilePath,
                        INTERNAL: CacheEntryType.Internal,
                        UNINITIALIZED: CacheEntryType.Uninitialized,
                        STATIC: CacheEntryType.Static
                    };
                    const type = typemap[typeName];
                    const docString = docStringAccumulator.trim();
                    docStringAccumulator = '';
                    if (type === undefined) {
                        rollbar_1.default.error(localize(9, null, `"${name}"`, `"${typeName}"`));
                    }
                    else {
                        log.trace(localize(10, null));
                        const entry = new CacheEntry(key, value, type, docString, false);
                        entry.serializedKey = serializedName;
                        entries.set(name, entry);
                    }
                }
            }
        }
        // Update `advanced` attribute
        advancedNames.forEach(name => {
            const entry = entries.get(name);
            if (entry) {
                entry.advanced = true;
            }
            else {
                log.warning(localize(11, null, `"${name}"`));
            }
        });
        // update `choices`
        choices.forEach((list, name) => {
            const entry = entries.get(name);
            if (entry) {
                entry.choices = list;
            }
            else {
                log.warning(localize(12, null, `"${name}"`, '"STRINGS"'));
            }
        });
        log.trace(localize(13, null, entries.size));
        return entries;
    }
    /**
     * Takes a configuration file as a content string and replaces the cmake cache keys with the corresponding value (i.e. 'TRUE' or 'FALSE').
     * @param content Configuration File Content as String
     * @param key The CMake Cache Option Key to edit
     * @param value Boolean value
     */
    replace(content, key, value) {
        const entry = this.cacheEntries.get(key);
        if (entry !== undefined) {
            // cmake variable name may contain characters with special meanings in regex
            const escapedKey = entry.serializedKey.replace(/[^A-Za-z0-9_]/g, '\\$&');
            const re = RegExp(`^${escapedKey}(:[^=]+=)(.*)`, 'm');
            const found = content.match(re);
            if (found && found.length >= 3) {
                const line = found[0];
                const type = found[1];
                // FIXME: How can `value` be boolean desipte being marked as string in the signature?
                if (util.isString(value)) {
                    const newlineIndex = value.search(/[\r\n]/);
                    if (newlineIndex >= 0) {
                        value = value.substring(0, newlineIndex);
                        log.warning(localize(14, null, `"${key}"`, `"${value}"`));
                    }
                }
                const newValueLine = entry.serializedKey + type + (util.isBoolean(value) ? (value ? "TRUE" : "FALSE") : value);
                return content.replace(line, newValueLine);
            }
        }
        return content;
    }
    /**
     * Will replace value cmake option in the current loaded workspace.
     * @param key cmake option name
     * @param value value of cmake option
     */
    async replaceOption(key, value) {
        const exists = await pr_1.fs.exists(this.path);
        if (exists) {
            const content = (await pr_1.fs.readFile(this.path)).toString();
            return this.replace(content, key, value);
        }
        return '';
    }
    async replaceOptions(options) {
        const exists = await pr_1.fs.exists(this.path);
        if (exists) {
            let content = (await pr_1.fs.readFile(this.path)).toString();
            for (const option of options) {
                content = this.replace(content, option.key, option.value);
            }
            return content;
        }
        return '';
    }
    async save(key, value) {
        const content = await this.replaceOption(key, value);
        if (content) {
            if (await pr_1.fs.exists(this.path)) {
                await pr_1.fs.writeFile(this.path, content);
            }
        }
    }
    async saveAll(options) {
        const content = await this.replaceOptions(options);
        if (content) {
            if (await pr_1.fs.exists(this.path)) {
                await pr_1.fs.writeFile(this.path, content);
            }
        }
    }
    /**
     * Get an entry from the cache
     * @param key The name of a cache entry
     * @returns The cache entry, or `null` if the cache entry is not present.
     */
    get(key) {
        const ret = this.cacheEntries.get(key) || null;
        if (ret) {
            log.trace(localize(15, null, key, ret.value));
        }
        else {
            log.trace(localize(16, null, key));
        }
        return ret;
    }
}
exports.CMakeCache = CMakeCache;


/***/ }),

/***/ 23812:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ConfigurationWebview = void 0;
const vscode = __webpack_require__(89496);
const nls = __webpack_require__(33463);
const telemetry = __webpack_require__(21818);
const util = __webpack_require__(16182);
const cache_1 = __webpack_require__(78510);
const logging = __webpack_require__(71067);
const log = logging.createLogger('cache');
nls.config({ messageFormat: nls.MessageFormat.bundle, bundleFormat: nls.BundleFormat.standalone })((__webpack_require__(71017).join)(__dirname, 'src\\cacheView.ts'));
const localize = nls.loadMessageBundle((__webpack_require__(71017).join)(__dirname, 'src\\cacheView.ts'));
/**
 * This object manages the webview rendering.
 */
class ConfigurationWebview {
    constructor(cachePath, save) {
        this.cachePath = cachePath;
        this.save = save;
        this.cmakeCacheEditorText = localize(0, null);
        // The dirty state of the whole webview.
        this.dirtyFlag = false;
        this.options = [];
        this.panel = vscode.window.createWebviewPanel('cmakeConfiguration', // Identifies the type of the webview. Used internally
        this.cmakeCacheEditorText, // Title of the panel displayed to the user
        vscode.ViewColumn.One, // Editor column to show the new webview panel in.
        {
            // this is needed for the html view to trigger events in the extension
            enableScripts: true
        });
    }
    get isDirty() {
        return this.dirtyFlag;
    }
    set isDirty(d) {
        this.dirtyFlag = d;
        if (this.panel.title) {
            // The webview title should reflect the dirty state
            this.panel.title = this.cmakeCacheEditorText;
            if (d) {
                this.panel.title += "*";
            }
            else {
                // If the global dirty state gets cleared, make sure all the entries
                // of the cache table have their state dirty updated accordingly.
                this.options.forEach(opt => opt.dirty = false);
            }
        }
    }
    // Save from the UI table into the CMake cache file if there are any unsaved edits.
    async persistCacheEntries() {
        if (this.isDirty) {
            telemetry.logEvent("editCMakeCache", { command: "saveCMakeCacheUI" });
            await this.saveCmakeCache(this.options);
            void vscode.window.showInformationMessage(localize(1, null));
            // start configure
            this.save();
            this.isDirty = false;
        }
    }
    /**
     * Called when the extension detects a cache change performed outside this webview.
     * The webview is updated with the latest cache variables (this includes new or deleted entries),
     * but for merge conflicts the user is asked which values to keep.
     */
    async refreshPanel() {
        if (this.isDirty) {
            const newOptions = await this.getConfigurationOptions();
            const mergedOptions = [];
            let conflictsExist = false;
            newOptions.forEach(option => {
                const index = this.options.findIndex(opt => opt.key === option.key);
                // Add to the final list of cache entries if it's a new, an unchanged value
                // or a changed value of a cache variable that is not dirty in the webview.
                if (index === -1 ||
                    this.options[index].value === option.value ||
                    !this.options[index].dirty) {
                    mergedOptions.push(option);
                }
                else {
                    // Log the cache value mismatch in the Output Channel, until we display the conflicts
                    // more friendly in the UI.
                    conflictsExist = true;
                    log.info(`Detected a cache merge conflict for entry "${option.key}": ` +
                        `value in CMakeCache.txt="${option.value}", ` +
                        `value in UI="${this.options[index].value}"`);
                    // Include in the final list of cache entries the version from UI.
                    // If later the user choses 'ignore' or 'fromUI', the UI value is good for both
                    // and in case of 'fromCache' the read operation will be done from the cache
                    // and will override the value displayed currently in the UI.
                    // If we don't do this then any merge conflicting entries will disappear from the list
                    // if in the middle and will be showed at the end (because we would need to add them
                    // via a concat).
                    mergedOptions.push(this.options[index]);
                }
            });
            // Any variables present in the current webview but not in the latest CMake Cache file
            // represent deleted cache entries. Remember them because in the 'ignore' case below
            // we need to keep them.
            const deletedOptions = [];
            this.options.forEach(option => {
                if (newOptions.findIndex(opt => opt.key === option.key) === -1) {
                    deletedOptions.push(option);
                }
            });
            let result;
            // Don't reload the conflicting CMake cache entries. Keep but don't save the current edits.
            // Include any new or non-conflicting CMake cache updates.
            const ignore = localize(2, null);
            // Persist the currently unsaved edits.
            const fromUI = localize(3, null);
            // Reload the CMake cache, losing the curent unsaved edits.
            const fromCache = localize(4, null);
            if (conflictsExist) {
                result = await vscode.window.showWarningMessage(localize(5, null), ignore, fromCache, fromUI);
                if (result === fromUI) {
                    this.options = mergedOptions;
                    await this.persistCacheEntries();
                }
                else if (result === fromCache) {
                    this.options = newOptions;
                }
            }
            else {
                this.options = mergedOptions;
            }
            // The webview needs a re-render also for the "ignore" or "fromUI" cases
            // to reflect all the unconflicting changes.
            if (this.panel.visible) {
                await this.renderWebview(this.panel, false);
            }
            // Keep the unsaved look in case the user decided to ignore the CMake Cache conflicts
            // between the webview and the file on disk.
            if (result !== ignore) {
                this.isDirty = false;
            }
        }
        else {
            this.options = await this.getConfigurationOptions();
        }
    }
    /**
     * Initializes the panel, registers events and renders initial content
     */
    async initPanel() {
        await this.renderWebview(this.panel, true);
        this.panel.onDidChangeViewState(async (event) => {
            if (event.webviewPanel.visible) {
                await this.renderWebview(event.webviewPanel, false);
            }
        });
        this.panel.onDidDispose(async (event) => {
            console.log(`disposing webview ${event} - ${this.panel}`);
            if (this.isDirty) {
                const yes = localize(6, null);
                const no = localize(7, null);
                const result = await vscode.window.showWarningMessage(localize(8, null), yes, no);
                if (result === yes) {
                    await this.persistCacheEntries();
                }
            }
        });
        // handles the following events:
        //     - checkbox update (update entry in the internal array)
        //     - editbox update (update entry in the internal array)
        //     - save button (save the internal array into the cache file)
        this.panel.webview.onDidReceiveMessage(async (option) => {
            if (!option) {
                await this.persistCacheEntries();
            }
            else {
                const index = this.options.findIndex(opt => opt.key === option.key);
                if (this.options[index].value !== option.value) {
                    this.isDirty = true;
                    this.options[index].dirty = true;
                    this.options[index].type = option.type;
                    this.options[index].value = option.value;
                }
            }
        });
    }
    async saveCmakeCache(options) {
        const cmakeCache = await cache_1.CMakeCache.fromPath(this.cachePath);
        await cmakeCache.saveAll(options);
    }
    /**
     * reads local cmake cache path from build folder and returns array of IOption objects
     */
    async getConfigurationOptions() {
        const options = [];
        // get cmake cache
        const cmakeCache = await cache_1.CMakeCache.fromPath(this.cachePath);
        for (const entry of cmakeCache.allEntries) {
            // Static cache entries are set automatically by CMake, overriding any value set by the user in this view.
            // Not useful to show these entries in the list.
            if (entry.type !== cache_1.CacheEntryType.Static) {
                options.push({ key: entry.key, helpString: entry.helpString, choices: entry.choices, type: (entry.type === cache_1.CacheEntryType.Bool) ? "Bool" : "String", value: entry.value, dirty: false });
            }
        }
        return options;
    }
    /**
     *
     * @param panel
     */
    async renderWebview(panel, refresh = false) {
        if (!panel) {
            panel = this.panel;
        }
        if (refresh) {
            this.options = this.options.concat(await this.getConfigurationOptions());
        }
        panel.webview.html = this.getWebviewMarkup();
    }
    /**
     * Returns an HTML markup
     * @param options CMake Cache Options
     */
    getWebviewMarkup() {
        const key = '%TABLE_ROWS%';
        const searchButtonText = localize(9, null);
        const saveButtonText = localize(10, null);
        const keyColumnText = localize(11, null);
        const valueColumnText = localize(12, null);
        let html = `
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>${this.cmakeCacheEditorText}</title>
        <style>
          .select-default {
              width: 300px;
              height: 25px;
              font-size: 13px;
              font-family:sans-serif;
              color: var(--vscode-settings-dropdownForeground);
              background: var(--vscode-settings-dropdownBackground);
              border: 1px solid var(--vscode-settings-dropdownBorder);
          }
          input {
            height: 17px;
            padding: 6px;
            border: solid 1px;
            font-size: 13px;
            font-family: Menlo, Monaco, Consolas, "Droid Sans Mono", "Courier New", monospace, "Droid Sans Fallback";
            color: var(--vscode-settings-textInputForeground);
            background: var(--vscode-settings-textInputBackground);
            border: 1px solid var(--vscode-settings-textInputBorder);
          }
          .invalid-selection {
            background-color: #4e2621;
          }
          .vscode-light .input-disabled {
              background-color:rgba(255, 255, 255, 0.4);
              color: rgb(138, 138, 138);
              border: solid 1px rgb(201, 198, 198);
          }
          .vscode-dark .input-disabled {
              background-color: rgba(255, 255, 255, 0.1);
              color: rgb(167, 167, 167);
          }
          .vscode-high-contrast .input-disabled {
               background-color: transparent;
               color: #fff;
               border: solid 1px rgb(255, 255, 255);
          }
          .vscode-high-contrast code > div {
              background-color: #000
          }
          .vscode-high-contrast h1 {
              border-color: #000
          }
          .vscode-light {
              color: #1e1e1e
          }
          .vscode-dark {
              color: #ddd
          }
          .vscode-high-contrast {
              color: #fff
          }
          .vscode-light table,
          .vscode-high-contrast table {
            border: 1px solid var(--vscode-settings-textInputBorder);
            border-collapse: collapse;
          }
          .vscode-dark table {
            border: 1px solid rgb(255,255,255,0.3);
            border-collapse: collapse;
          }
          .container {
            padding-right: 15px;
            padding-left: 15px;
            width: 760px;
            margin: 30px auto;
          }
          tr {
            height: 25px;
          }
          .vscode-light th {
            background: rgba(0,0,0,.1);
          }
          .vscode-dark th {
            background: rgba(255,255,255,.1);
          }
          input#search {
            width: 98%;
            padding: 11px 0px 11px 11px;
            margin: 10px 0;
            color: var(--vscode-settings-textInputForeground);
            background: var(--vscode-settings-textInputBackground);
            border: 1px solid var(--vscode-settings-textInputBorder);
          }
          .invisible {
            display: none;
          }
          button#save {
            float: right;
            padding: 10px 25px;
            margin-top: 15px;
            background: var(--vscode-button-background);
            color: var(--vscode-button-foreground);
            text-transform: uppercase;
            font-weight: bold;
            border: solid 1px var(--vscode-contrastBorder);
            transition: 100ms ease-in-out;
          }
          button#save:hover {
            cursor: pointer;
            background-color: var(--vscode-button-hoverBackground);
          }
          button#save:focus,
          button#save input:focus,
          button#save select:focus {
            outline: 1px solid -webkit-focus-ring-color;
            outline-offset: 2px;
            border-color: var(--vscode-focusBorder);
            border: var(--vscode-focusBorder);
            contrastBorder: var(--vscode-focusBorder);
            contrastActiveBorder: var(--vscode-focusBorder);
          }
          button#save:active {
            outline: none;
          }
          checkbox:active,
          checkbox {
            color: var(--vscode-settings-checkboxForeground);
            background: var(--vscode-settings-checkboxForeground);
            border: var(--vscode-settings-checkboxBorder);
          }
          .vscode-light cmake-input-bool input:checked,
          .vscode-dark cmake-input-bool {
            color: var(--vscode-settings-checkboxForeground);
            background: var(--vscode-settings-checkboxForeground);
            border: var(--vscode-settings-checkboxBorder);
          }
          .cmake-input-bool input:checked,
          .cmake-input-bool:active,
          .cmake-input-bool {
            color: var(--vscode-settings-checkboxForeground);
            background: var(--vscode-settings-checkboxForeground);
            border: var(--vscode-settings-checkboxBorder);
          }
          a:focus,
          input:focus,
          select:focus,
          textarea:focus {
              outline: 1px solid -webkit-focus-ring-color;
              outline-offset: -1px;
              border-color: var(--vscode-focusBorder);
              contrastBorder: var(--vscode-focusBorder);
              contrastActiveBorder: var(--vscode-focusBorder);
          }
        </style>
        <script>
          const vscode = acquireVsCodeApi();
          function updateCheckboxState(checkbox) {
            checkbox.labels.forEach(label => label.textContent = checkbox.checked ? 'ON' : 'OFF');
          }
          function toggleKey(checkbox) {
            updateCheckboxState(checkbox);
            vscode.postMessage({key: checkbox.id, type: "Bool", value: checkbox.checked});
            document.getElementById('not-saved').classList.remove('invisible');
          }
          function validateInput(editbox) {
            const list = editbox.list;
            if (list) {
              let found = false;
              for (const opt of list.options) {
                if (opt.value === editbox.value) {
                  found = true;
                  break;
                }
              }
              editbox.classList.toggle('invalid-selection', !found);
            }
          }
          function edit(editbox) {
            validateInput(editbox);
            vscode.postMessage({key: editbox.id, type: "String", value: editbox.value});
            document.getElementById('not-saved').classList.remove('invisible');
          }
          function save() {
            document.getElementById('not-saved').classList.add('invisible');
            vscode.postMessage(false);
          }
          function search() {
            const filter = document.getElementById('search').value.toLowerCase();
            for (const tr of document.querySelectorAll('.content-tr')) {
              if (!tr.innerHTML.toLowerCase().includes(filter)) {
                tr.classList.add('invisible');
              } else {
                tr.classList.remove('invisible');
              }
            }
          }
          window.onload = function() {
            document.querySelectorAll('.cmake-input-bool').forEach(checkbox => {
              updateCheckboxState(checkbox);
              checkbox.onclick = () => toggleKey(checkbox);
            });
            document.querySelectorAll('.cmake-input-text').forEach(editbox => {
              validateInput(editbox)
              editbox.oninput = () => edit(editbox);
            });
          }
        </script>
    </head>
    <body>
      <div class="container">
        <button id="save" onclick="save()">${saveButtonText}</button>
        <h1>${this.cmakeCacheEditorText}<span class="invisible" id="not-saved">*</span></h1>
        <input class="search" type="text" id="search" oninput="search()" placeholder="${searchButtonText}" autofocus>
        <table style="width:100%">
          <tr style="height: 25px;">
            <th style="width: 30px"></th>
            <th style="width: 1px; white-space: nowrap;">${keyColumnText}</th>
            <th>${valueColumnText}</th>
          </tr>
          ${key}
        </table>
      </div>
    </body>
    </html>`;
        // compile a list of table rows that contain the key and value pairs
        const tableRows = this.options.map(option => {
            // HTML attributes may not contain literal double quotes or ambiguous ampersands
            const escapeAttribute = (text) => text.replace(/&/g, "&amp;").replace(/"/g, "&quot;");
            // Escape HTML special characters that may not occur literally in any text
            const escapeHtml = (text) => escapeAttribute(text)
                .replace(/</g, "&lt;")
                .replace(/>/g, "&gt;")
                .replace(/'/g, "&#039;")
                .replace(/ /g, "&nbsp;"); // we are usually dealing with single line entities - avoid unintential line breaks
            const id = escapeAttribute(option.key);
            let editControls = '';
            if (option.type === "Bool") {
                editControls = `<input class="cmake-input-bool" id="${id}" type="checkbox" ${util.isTruthy(option.value) ? 'checked' : ''}>
          <label id="LABEL_${id}" for="${id}"/>`;
            }
            else {
                const hasChoices = option.choices.length > 0;
                if (hasChoices) {
                    editControls = `<datalist id="CHOICES_${id}">
            ${option.choices.map(ch => `<option value="${escapeAttribute(ch)}">`).join()}
          </datalist>`;
                }
                editControls += `<input class="cmake-input-text" id="${id}" value="${escapeAttribute(option.value)}" style="width: 90%;"
          type="text" ${hasChoices ? `list="CHOICES_${id}"` : ''}>`;
            }
            return `<tr class="content-tr">
      <td></td>
      <td title="${escapeAttribute(option.helpString)}">${escapeHtml(option.key)}</td>
      <td>${editControls}</td>
    </tr>`;
        });
        html = html.replace(key, tableRows.join(""));
        return html;
    }
}
exports.ConfigurationWebview = ConfigurationWebview;


/***/ }),

/***/ 25239:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/**
 * Module for running CMake Build Task
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CMakeBuildRunner = void 0;
const vscode = __webpack_require__(89496);
const nls = __webpack_require__(33463);
const util = __webpack_require__(16182);
nls.config({ messageFormat: nls.MessageFormat.bundle, bundleFormat: nls.BundleFormat.standalone })((__webpack_require__(71017).join)(__dirname, 'src\\cmakeBuildRunner.ts'));
class CMakeBuildRunner {
    constructor() {
        this.buildInProgress = false;
        this.buildInProgress = false;
    }
    isBuildInProgress() {
        return this.buildInProgress;
    }
    setBuildInProgress(buildInProgress) {
        this.buildInProgress = buildInProgress;
    }
    setBuildProcess(buildProcess) {
        this.currentBuildProcess = buildProcess;
        this.setBuildInProgress(true);
    }
    async setBuildProcessForTask(taskExecutor) {
        this.taskExecutor = taskExecutor;
        this.currentBuildProcess = { child: undefined, result: new Promise(resolve => {
                const disposable = vscode.tasks.onDidEndTask((endEvent) => {
                    if (endEvent.execution === this.taskExecutor) {
                        this.taskExecutor = undefined;
                        disposable.dispose();
                        resolve({ retc: 0, stdout: '', stderr: '' });
                    }
                });
            }) };
        this.setBuildInProgress(true);
    }
    async stop() {
        if (this.currentBuildProcess && this.currentBuildProcess.child) {
            await util.termProc(this.currentBuildProcess.child);
            this.currentBuildProcess = undefined;
        }
        if (this.taskExecutor) {
            this.taskExecutor.terminate();
        }
        this.setBuildInProgress(false);
    }
    async getResult() {
        var _a;
        await ((_a = this.currentBuildProcess) === null || _a === void 0 ? void 0 : _a.result);
        const buildProcess = this.currentBuildProcess;
        this.currentBuildProcess = undefined;
        return buildProcess;
    }
}
exports.CMakeBuildRunner = CMakeBuildRunner;


/***/ }),

/***/ 37874:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CMakeProject = exports.ConfigureTrigger = exports.ConfigureType = void 0;
const cache_1 = __webpack_require__(78510);
const cmakeExecutable_1 = __webpack_require__(87630);
const compilationDatabase_1 = __webpack_require__(5236);
const debuggerModule = __webpack_require__(85304);
const collections_1 = __webpack_require__(89158);
const shlex = __webpack_require__(64913);
const strand_1 = __webpack_require__(9010);
const util_1 = __webpack_require__(16182);
const path = __webpack_require__(71017);
const vscode = __webpack_require__(89496);
const drivers_1 = __webpack_require__(70271);
const ctest_1 = __webpack_require__(98454);
const cpack_1 = __webpack_require__(68441);
const workflow_1 = __webpack_require__(28085);
const build_1 = __webpack_require__(42498);
const cmake_1 = __webpack_require__(95057);
const util_2 = __webpack_require__(52919);
const expand_1 = __webpack_require__(77504);
const logging = __webpack_require__(71067);
const pr_1 = __webpack_require__(72502);
const proc_1 = __webpack_require__(3477);
const prop_1 = __webpack_require__(88822);
const rollbar_1 = __webpack_require__(58543);
const telemetry = __webpack_require__(21818);
const variant_1 = __webpack_require__(89987);
const nls = __webpack_require__(33463);
const cacheView_1 = __webpack_require__(23812);
const extension_1 = __webpack_require__(12406);
const config_1 = __webpack_require__(62498);
const preset = __webpack_require__(10739);
const util = __webpack_require__(16182);
const environmentVariables_1 = __webpack_require__(40085);
const kitsController_1 = __webpack_require__(61145);
const presetsController_1 = __webpack_require__(84464);
const paths_1 = __webpack_require__(86640);
const debuggerConfigureDriver_1 = __webpack_require__(38129);
nls.config({ messageFormat: nls.MessageFormat.bundle, bundleFormat: nls.BundleFormat.standalone })((__webpack_require__(71017).join)(__dirname, 'src\\cmakeProject.ts'));
const localize = nls.loadMessageBundle((__webpack_require__(71017).join)(__dirname, 'src\\cmakeProject.ts'));
const open = __webpack_require__(37433);
const log = logging.createLogger('main');
const buildLogger = logging.createLogger('build');
const cmakeLogger = logging.createLogger('cmake');
var ConfigureType;
(function (ConfigureType) {
    ConfigureType[ConfigureType["Normal"] = 0] = "Normal";
    ConfigureType[ConfigureType["Clean"] = 1] = "Clean";
    ConfigureType[ConfigureType["Cache"] = 2] = "Cache";
    ConfigureType[ConfigureType["ShowCommandOnly"] = 3] = "ShowCommandOnly";
    ConfigureType[ConfigureType["NormalWithDebugger"] = 4] = "NormalWithDebugger";
    ConfigureType[ConfigureType["CleanWithDebugger"] = 5] = "CleanWithDebugger";
})(ConfigureType = exports.ConfigureType || (exports.ConfigureType = {}));
var ConfigureTrigger;
(function (ConfigureTrigger) {
    ConfigureTrigger["api"] = "api";
    ConfigureTrigger["runTests"] = "runTests";
    ConfigureTrigger["package"] = "package";
    ConfigureTrigger["workflow"] = "workflow";
    ConfigureTrigger["badHomeDir"] = "badHomeDir";
    ConfigureTrigger["configureOnOpen"] = "configureOnOpen";
    ConfigureTrigger["configureWithCache"] = "configureWithCache";
    ConfigureTrigger["quickStart"] = "quickStart";
    ConfigureTrigger["setVariant"] = "setVariant";
    ConfigureTrigger["cmakeListsChange"] = "cmakeListsChange";
    ConfigureTrigger["sourceDirectoryChange"] = "sourceDirectoryChange";
    ConfigureTrigger["buttonNewKitsDefinition"] = "buttonNewKitsDefinition";
    ConfigureTrigger["compilation"] = "compilation";
    ConfigureTrigger["launch"] = "launch";
    ConfigureTrigger["commandEditCacheUI"] = "commandEditCacheUI";
    ConfigureTrigger["commandConfigure"] = "commandConfigure";
    ConfigureTrigger["commandConfigureWithDebugger"] = "commandConfigureWithDebugger";
    ConfigureTrigger["projectOutlineConfigureWithDebugger"] = "projectOutlineConfigureWithDebugger";
    ConfigureTrigger["commandCleanConfigure"] = "commandCleanConfigure";
    ConfigureTrigger["commandCleanConfigureWithDebugger"] = "commandCleanConfigureWithDebugger";
    ConfigureTrigger["commandConfigureAll"] = "commandConfigureAll";
    ConfigureTrigger["commandConfigureAllWithDebugger"] = "commandConfigureAllWithDebugger";
    ConfigureTrigger["projectOutlineConfigureAllWithDebugger"] = "projectOutlineConfigureAllWithDebugger";
    ConfigureTrigger["commandCleanConfigureAll"] = "commandCleanConfigureAll";
    ConfigureTrigger["commandCleanConfigureAllWithDebugger"] = "commandConfigureAllWithDebugger";
    ConfigureTrigger["projectOutlineCleanConfigureAllWithDebugger"] = "projectOutlineCleanConfigureAllWithDebugger";
    ConfigureTrigger["configureFailedConfigureWithDebuggerButton"] = "configureFailedConfigureWithDebuggerButton";
    ConfigureTrigger["taskProvider"] = "taskProvider";
    ConfigureTrigger["selectConfigurePreset"] = "selectConfigurePreset";
    ConfigureTrigger["selectKit"] = "selectKit";
})(ConfigureTrigger = exports.ConfigureTrigger || (exports.ConfigureTrigger = {}));
/**
 * Class implementing the extension. It's all here!
 *
 * The class internally uses a two-phase initialization, since proper startup
 * requires asynchrony. To ensure proper initialization. The class must be
 * created via the `create` static method. This will run the two phases
 * internally and return a promise to the new instance. This ensures that the
 * class invariants are maintained at all times.
 *
 * Some fields also require two-phase init. Their first phase is in the first
 * phase of the CMakeProject init, ie. the constructor.
 *
 * The second phases of fields will be called by the second phase of the parent
 * class. See the `init` private method for this initialization.
 */
class CMakeProject {
    /**
     * Construct a new instance. The instance isn't ready, and must be initalized.
     * @param projectController Required for test explorer to work properly. Setting as optional to avoid breaking tests.
     *
     * This is private. You must call `create` to get an instance.
     */
    constructor(workspaceContext, projectController, isMultiProjectFolder = false) {
        this.workspaceContext = workspaceContext;
        this.isMultiProjectFolder = isMultiProjectFolder;
        this.disposables = [];
        this.onUseCMakePresetsChangedEmitter = new vscode.EventEmitter();
        /**
         * Whether we use presets
         */
        this._useCMakePresets = false; // The default value doesn't matter, value is set when folder is loaded
        this.statusMessage = new prop_1.Property(localize(0, null));
        this._configurePreset = new prop_1.Property(null);
        this._buildPreset = new prop_1.Property(null);
        this._testPreset = new prop_1.Property(null);
        this._packagePreset = new prop_1.Property(null);
        this._workflowPreset = new prop_1.Property(null);
        this.initTargetName = '__init__';
        this.targetName = new prop_1.Property(this.initTargetName);
        this.activeVariant = new prop_1.Property('Unconfigured');
        this._launchTargetName = new prop_1.Property(null);
        this._ctestEnabled = new prop_1.Property(false);
        this._cpackEnabled = new prop_1.Property(false);
        this.isBusy = new prop_1.Property(false);
        this._codeModelContent = new prop_1.Property(null);
        this.codeModelDriverSub = null;
        this._codeModelChangedApiEventEmitter = new vscode.EventEmitter();
        this.communicationModeSub = this.workspaceContext.config.onChange('cmakeCommunicationMode', () => {
            log.info(localize(1, null));
            return this.shutDownCMakeDriver();
        });
        this.generatorSub = this.workspaceContext.config.onChange('generator', async () => {
            log.info(localize(2, null));
            await this.reloadCMakeDriver();
        });
        this.preferredGeneratorsSub = this.workspaceContext.config.onChange('preferredGenerators', async () => {
            log.info(localize(3, null));
            await this.reloadCMakeDriver();
        });
        this.cmakePathSub = this.workspaceContext.config.onChange('cmakePath', async () => {
            // Force re-reading of cmake exe, this will ensure that the debugger capabilities are updated.
            const cmakeInfo = await this.getCMakeExecutable();
            if (!cmakeInfo.isPresent) {
                void vscode.window.showErrorMessage(localize(4, null, `"${cmakeInfo.path}"`, '"cmake.cmakePath"'));
                telemetry.logEvent('CMakeExecutableNotFound');
            }
            await this.reloadCMakeDriver();
        });
        /**
         * The variant manager keeps track of build variants. Has two-phase init.
         */
        this.variantManager = new variant_1.VariantManager(this.workspaceFolder, this.workspaceContext.state, this.workspaceContext.config, this.isMultiProjectFolder);
        /**
         * A strand to serialize operations with the CMake driver
         */
        this.driverStrand = new strand_1.Strand();
        /**
         * The object in charge of talking to CMake. It starts empty (null) because
         * we don't know what driver to use at the current time. The driver also has
         * two-phase init and a private constructor. The driver may be replaced at
         * any time by the user making changes to the workspace configuration.
         */
        this.cmakeDriver = Promise.resolve(null);
        this.disposeEmitter = new vscode.EventEmitter();
        this.onReconfiguredEmitter = new vscode.EventEmitter();
        this.onTargetChangedEmitter = new vscode.EventEmitter();
        this.refreshLaunchEnvironment = false;
        this._activeKit = null;
        /**
         * The compilation database for this driver.
         */
        this.compilationDatabase = null;
        this.activeBuild = Promise.resolve(0);
        this.targetsInPresetName = localize(5, null);
        this.launchTerminals = new Map();
        this.launchTerminalTargetName = '_CMAKE_TOOLS_LAUNCH_TERMINAL_TARGET_NAME';
        this.launchTerminalPath = '_CMAKE_TOOLS_LAUNCH_TERMINAL_PATH';
        // Watch for the user closing our terminal
        this.termCloseSub = vscode.window.onDidCloseTerminal(async (term) => {
            const processId = await term.processId;
            if (this.launchTerminals.has(processId)) {
                this.launchTerminals.delete(processId);
            }
        });
        // Don't get this from the driver. Source dir is required to evaluate presets.
        // Presets contain generator info. Generator info is required for server api.
        this._sourceDir = '';
        this.cmakeListsExists = false;
        this.hideBuildButton = false;
        this.hideDebugButton = false;
        this.hideLaunchButton = false;
        // Handle the active kit changing. We want to do some updates and teardown
        log.debug(localize(6, null));
        this.cTestController = new ctest_1.CTestDriver(workspaceContext, projectController);
        this.cPackageController = new cpack_1.CPackDriver(workspaceContext);
        this.workflowController = new workflow_1.WorkflowDriver(workspaceContext, projectController);
        this.onCodeModelChanged(prop_1.FireLate, (_) => this._codeModelChangedApiEventEmitter.fire());
    }
    /**
     * The Workspace folder associated with this CMakeProject instance.
     * This is where we search for the variants and workspace-local kits.
     */
    get workspaceFolder() {
        return this.workspaceContext.folder;
    }
    /**
     * The folder associated with this CMakeProject.
     * For single-project folders, this is the WorkspaceFolder for historical reasons.
     * For multi-project folders, this is the directory where the CMakeProject lives (this.sourceDir)
     */
    get folderPath() {
        return this.isMultiProjectFolder ? this.sourceDir : this.workspaceContext.folder.uri.fsPath;
    }
    /**
     * The name of the folder for this CMakeProject instance
     */
    get folderName() {
        return path.basename(this.folderPath);
    }
    get useCMakePresets() {
        return this._useCMakePresets;
    }
    async setUseCMakePresets(useCMakePresets) {
        if (this.targetName.value === this.initTargetName) {
            if (useCMakePresets) {
                this.targetName.set(this.targetsInPresetName);
            }
            else {
                this.targetName.set('all');
            }
        }
        if (!useCMakePresets && this.targetName.value === this.targetsInPresetName) {
            this.targetName.set('all');
        }
        const oldValue = this.useCMakePresets;
        if (oldValue !== useCMakePresets) {
            this._useCMakePresets = useCMakePresets;
            const drv = await this.cmakeDriver;
            if (drv) {
                log.debug(localize(7, null));
                await drv.asyncDispose();
                this.cmakeDriver = Promise.resolve(null);
            }
        }
    }
    // Events that effect the user-interface
    /**
     * The status of this backend
     */
    get onStatusMessageChanged() {
        return this.statusMessage.changeEvent;
    }
    /**
     * Currently selected configure preset
     */
    get configurePreset() {
        return this._configurePreset.value;
    }
    get onActiveConfigurePresetChanged() {
        return this._configurePreset.changeEvent;
    }
    async resetPresets(driver) {
        // NOTE: don't delete from workspaceContext the association between this.folderName-this.configurePreset.name
        // and all the previously selected build/test/package/workflow presets.
        // If we set the configure preset back to the value before this "reset", all should be restored fine.
        await this.workspaceContext.state.setConfigurePresetName(this.folderName, null, this.isMultiProjectFolder);
        this._configurePreset.set(null);
        this._buildPreset.set(null);
        this._testPreset.set(null);
        this._packagePreset.set(null);
        this._workflowPreset.set(null);
        await (driver === null || driver === void 0 ? void 0 : driver.setConfigurePreset(null));
        await (driver === null || driver === void 0 ? void 0 : driver.setBuildPreset(null));
        await (driver === null || driver === void 0 ? void 0 : driver.setTestPreset(null));
        await (driver === null || driver === void 0 ? void 0 : driver.setPackagePreset(null));
        await (driver === null || driver === void 0 ? void 0 : driver.setWorkflowPreset(null));
    }
    async expandConfigPresetbyName(configurePreset) {
        if (!configurePreset) {
            return undefined;
        }
        log.debug(localize(8, null));
        const expandedConfigurePreset = await preset.expandConfigurePreset(this.folderPath, configurePreset, (0, util_1.lightNormalizePath)(this.folderPath || '.'), this.sourceDir, true);
        if (!expandedConfigurePreset) {
            log.error(localize(9, null, configurePreset));
            return undefined;
        }
        if (expandedConfigurePreset.__file && expandedConfigurePreset.__file.version <= 2) {
            if (!expandedConfigurePreset.binaryDir) {
                log.error(localize(10, null, "\"binaryDir\"", configurePreset));
                return undefined;
            }
            if (!expandedConfigurePreset.generator) {
                log.error(localize(11, null, "\"generator\"", configurePreset));
                return undefined;
            }
        }
        return expandedConfigurePreset;
    }
    /**
     * Presets are loaded by PresetsController, so this function should only be called by PresetsController.
     */
    async setConfigurePreset(configurePreset) {
        var _a;
        const previousGenerator = (_a = this.configurePreset) === null || _a === void 0 ? void 0 : _a.generator;
        const drv = await this.cmakeDriver; // Use only an existing driver, do not create one
        if (configurePreset) {
            const expandedConfigurePreset = await this.expandConfigPresetbyName(configurePreset);
            if (!expandedConfigurePreset) {
                await this.resetPresets(drv);
                return;
            }
            const priorCMakePath = await this.getCMakePathofProject(); // used for later comparison to determine if we need to update the driver's cmake.
            this._configurePreset.set(expandedConfigurePreset);
            if (previousGenerator && previousGenerator !== (expandedConfigurePreset === null || expandedConfigurePreset === void 0 ? void 0 : expandedConfigurePreset.generator)) {
                await this.shutDownCMakeDriver();
            }
            log.debug(localize(12, null));
            if (drv) {
                try {
                    this.statusMessage.set(localize(13, null));
                    await drv.setConfigurePreset(expandedConfigurePreset);
                    const updatedCMakePath = await this.getCMakePathofProject();
                    // check if we need to update the driver's cmake, if so, update.
                    if (priorCMakePath !== updatedCMakePath) {
                        drv.cmake = await this.getCMakeExecutable();
                    }
                    await this.workspaceContext.state.setConfigurePresetName(this.folderName, configurePreset, this.isMultiProjectFolder);
                    this.statusMessage.set(localize(14, null));
                }
                catch (error) {
                    void vscode.window.showErrorMessage(localize(15, null, `"${error}"`));
                    this.statusMessage.set(localize(16, null, error.message));
                    this.cmakeDriver = Promise.resolve(null);
                    await this.resetPresets(drv);
                }
            }
            else {
                // Remember the selected configure preset for the next session.
                await this.workspaceContext.state.setConfigurePresetName(this.folderName, configurePreset, this.isMultiProjectFolder);
            }
        }
        else {
            await this.resetPresets(drv);
        }
    }
    /**
     * Currently selected build preset
     */
    get buildPreset() {
        return this._buildPreset.value;
    }
    get onActiveBuildPresetChanged() {
        return this._buildPreset.changeEvent;
    }
    async expandBuildPresetbyName(buildPreset) {
        var _a;
        if (!buildPreset) {
            return undefined;
        }
        log.debug(localize(17, null));
        const expandedBuildPreset = await preset.expandBuildPreset(this.folderPath, buildPreset, (0, util_1.lightNormalizePath)(this.folderPath || '.'), this.sourceDir, this.workspaceContext.config.parallelJobs, this.getPreferredGeneratorName(), true, (_a = this.configurePreset) === null || _a === void 0 ? void 0 : _a.name);
        if (!expandedBuildPreset) {
            log.error(localize(18, null, buildPreset));
            return undefined;
        }
        return expandedBuildPreset;
    }
    /**
     * Presets are loaded by PresetsController, so this function should only be called by PresetsController.
     */
    async setBuildPreset(buildPreset) {
        const drv = await this.cmakeDriver; // Use only an existing driver, do not create one
        if (buildPreset) {
            const expandedBuildPreset = await this.expandBuildPresetbyName(buildPreset);
            if (!expandedBuildPreset) {
                this._buildPreset.set(null);
                return;
            }
            this._buildPreset.set(expandedBuildPreset);
            if (!expandedBuildPreset.configurePreset) {
                log.error(localize(19, null, "\"configurePreset\"", buildPreset));
                this._buildPreset.set(null);
                return;
            }
            log.debug(localize(20, null));
            if (drv) {
                try {
                    this.statusMessage.set(localize(21, null));
                    await drv.setBuildPreset(expandedBuildPreset);
                    await this.workspaceContext.state.setBuildPresetName(this.folderName, expandedBuildPreset.configurePreset, buildPreset, this.isMultiProjectFolder);
                    this.statusMessage.set(localize(22, null));
                }
                catch (error) {
                    void vscode.window.showErrorMessage(localize(23, null, `"${error}"`));
                    this.statusMessage.set(localize(24, null, error.message));
                    this.cmakeDriver = Promise.resolve(null);
                    this._buildPreset.set(null);
                }
            }
            else {
                // Remember the selected build preset for the next session.
                await this.workspaceContext.state.setBuildPresetName(this.folderName, expandedBuildPreset.configurePreset, buildPreset, this.isMultiProjectFolder);
            }
        }
        else {
            this._buildPreset.set(null);
            await (drv === null || drv === void 0 ? void 0 : drv.setBuildPreset(null));
            if (this.configurePreset) {
                await this.workspaceContext.state.setBuildPresetName(this.folderName, this.configurePreset.name, null, this.isMultiProjectFolder);
            }
        }
    }
    /**
     * Currently selected test preset
     */
    get testPreset() {
        return this._testPreset.value;
    }
    get onActiveTestPresetChanged() {
        return this._testPreset.changeEvent;
    }
    async expandTestPresetbyName(testPreset) {
        var _a;
        if (!testPreset) {
            return undefined;
        }
        log.debug(localize(25, null));
        const expandedTestPreset = await preset.expandTestPreset(this.folderPath, testPreset, (0, util_1.lightNormalizePath)(this.folderPath || '.'), this.sourceDir, this.getPreferredGeneratorName(), true, (_a = this.configurePreset) === null || _a === void 0 ? void 0 : _a.name);
        if (!expandedTestPreset) {
            log.error(localize(26, null, testPreset));
            return undefined;
        }
        if (!expandedTestPreset.configurePreset) {
            log.error(localize(27, null, "\"configurePreset\"", testPreset));
            return undefined;
        }
        return expandedTestPreset;
    }
    /**
     * Presets are loaded by PresetsController, so this function should only be called by PresetsController.
     */
    async setTestPreset(testPreset) {
        const drv = await this.cmakeDriver; // Use only an existing driver, do not create one
        if (testPreset) {
            log.debug(localize(28, null));
            const expandedTestPreset = await this.expandTestPresetbyName(testPreset);
            if (!expandedTestPreset) {
                this._testPreset.set(null);
                return;
            }
            this._testPreset.set(expandedTestPreset);
            log.debug(localize(29, null));
            if (drv) {
                try {
                    this.statusMessage.set(localize(30, null));
                    await drv.setTestPreset(expandedTestPreset);
                    if (expandedTestPreset.configurePreset) {
                        await this.workspaceContext.state.setTestPresetName(this.folderName, expandedTestPreset.configurePreset, testPreset, this.isMultiProjectFolder);
                    }
                    this.statusMessage.set(localize(31, null));
                }
                catch (error) {
                    void vscode.window.showErrorMessage(localize(32, null, `"${error}"`));
                    this.statusMessage.set(localize(33, null, error.message));
                    this.cmakeDriver = Promise.resolve(null);
                    this._testPreset.set(null);
                }
            }
            else {
                if (expandedTestPreset.configurePreset) {
                    // Remember the selected test preset for the next session.
                    await this.workspaceContext.state.setTestPresetName(this.folderName, expandedTestPreset.configurePreset, testPreset, this.isMultiProjectFolder);
                }
            }
        }
        else {
            this._testPreset.set(null);
            await (drv === null || drv === void 0 ? void 0 : drv.setTestPreset(null));
            if (this.configurePreset) {
                await this.workspaceContext.state.setTestPresetName(this.folderName, this.configurePreset.name, null, this.isMultiProjectFolder);
            }
        }
    }
    /**
     * Currently selected package preset
     */
    get packagePreset() {
        return this._packagePreset.value;
    }
    get onActivePackagePresetChanged() {
        return this._packagePreset.changeEvent;
    }
    async expandPackagePresetbyName(packagePreset) {
        var _a;
        if (!packagePreset) {
            return undefined;
        }
        log.debug(localize(34, null));
        const expandedPackagePreset = await preset.expandPackagePreset(this.folderPath, packagePreset, (0, util_1.lightNormalizePath)(this.folderPath || '.'), this.sourceDir, this.getPreferredGeneratorName(), true, (_a = this.configurePreset) === null || _a === void 0 ? void 0 : _a.name);
        if (!expandedPackagePreset) {
            log.error(localize(35, null, packagePreset));
            return undefined;
        }
        if (!expandedPackagePreset.configurePreset) {
            log.error(localize(36, null, "\"configurePreset\"", packagePreset));
            return undefined;
        }
        return expandedPackagePreset;
    }
    /**
     * Presets are loaded by PresetsController, so this function should only be called by PresetsController.
     */
    async setPackagePreset(packagePreset) {
        const drv = await this.cmakeDriver; // Use only an existing driver, do not create one
        if (packagePreset) {
            log.debug(localize(37, null));
            const expandedPackagePreset = await this.expandPackagePresetbyName(packagePreset);
            if (!expandedPackagePreset) {
                this._packagePreset.set(null);
                return;
            }
            this._packagePreset.set(expandedPackagePreset);
            log.debug(localize(38, null));
            if (drv) {
                try {
                    this.statusMessage.set(localize(39, null));
                    await drv.setPackagePreset(expandedPackagePreset);
                    if (expandedPackagePreset.configurePreset) {
                        await this.workspaceContext.state.setPackagePresetName(this.folderName, expandedPackagePreset.configurePreset, packagePreset, this.isMultiProjectFolder);
                    }
                    this.statusMessage.set(localize(40, null));
                }
                catch (error) {
                    void vscode.window.showErrorMessage(localize(41, null, `"${error}"`));
                    this.statusMessage.set(localize(42, null, error.message));
                    this.cmakeDriver = Promise.resolve(null);
                    this._packagePreset.set(null);
                }
            }
            else {
                if (expandedPackagePreset.configurePreset) {
                    // Remember the selected package preset for the next session.
                    await this.workspaceContext.state.setPackagePresetName(this.folderName, expandedPackagePreset.configurePreset, packagePreset, this.isMultiProjectFolder);
                }
            }
        }
        else {
            this._packagePreset.set(null);
            await (drv === null || drv === void 0 ? void 0 : drv.setPackagePreset(null));
            if (this.configurePreset) {
                await this.workspaceContext.state.setPackagePresetName(this.folderName, this.configurePreset.name, null, this.isMultiProjectFolder);
            }
        }
    }
    /**
     * Currently selected workflow preset
     */
    get workflowPreset() {
        return this._workflowPreset.value;
    }
    get onActiveWorkflowPresetChanged() {
        return this._workflowPreset.changeEvent;
    }
    async expandWorkflowPresetbyName(workflowPreset) {
        var _a;
        if (!workflowPreset) {
            return undefined;
        }
        log.debug(localize(43, null));
        const expandedWorkflowPreset = await preset.expandWorkflowPreset(this.folderPath, workflowPreset, (0, util_1.lightNormalizePath)(this.folderPath || '.'), this.sourceDir, this.getPreferredGeneratorName(), true, (_a = this.configurePreset) === null || _a === void 0 ? void 0 : _a.name);
        if (!expandedWorkflowPreset) {
            log.error(localize(44, null, workflowPreset));
            return undefined;
        }
        if (!expandedWorkflowPreset.steps[0].name) {
            log.error(localize(45, null, "\"configurePreset\"", workflowPreset));
            return undefined;
        }
        return expandedWorkflowPreset;
    }
    /**
     * Presets are loaded by PresetsController, so this function should only be called by PresetsController.
     */
    async setWorkflowPreset(workflowPreset) {
        const drv = await this.cmakeDriver; // Use only an existing driver, do not create one
        if (workflowPreset) {
            log.debug(localize(46, null));
            const expandedWorkflowPreset = await this.expandWorkflowPresetbyName(workflowPreset);
            if (!expandedWorkflowPreset) {
                this._workflowPreset.set(null);
                return;
            }
            this._workflowPreset.set(expandedWorkflowPreset);
            log.debug(localize(47, null));
            if (drv) {
                try {
                    this.statusMessage.set(localize(48, null));
                    await drv.setWorkflowPreset(expandedWorkflowPreset);
                    // We need to associate this workflow preset with the current configure preset of the project,
                    // not the configure preset of step0 (which may even differ).
                    if (this.configurePreset) {
                        await this.workspaceContext.state.setWorkflowPresetName(this.folderName, this.configurePreset.name, workflowPreset, this.isMultiProjectFolder);
                    }
                    this.statusMessage.set(localize(49, null));
                }
                catch (error) {
                    void vscode.window.showErrorMessage(localize(50, null, `"${error}"`));
                    this.statusMessage.set(localize(51, null, error.message));
                    this.cmakeDriver = Promise.resolve(null);
                    this._workflowPreset.set(null);
                }
            }
            else {
                if (this.configurePreset) {
                    // Remember the selected workflow preset for the next session.
                    await this.workspaceContext.state.setWorkflowPresetName(this.folderName, this.configurePreset.name, workflowPreset, this.isMultiProjectFolder);
                }
            }
        }
        else {
            this._workflowPreset.set(null);
            await (drv === null || drv === void 0 ? void 0 : drv.setWorkflowPreset(null));
            if (this.configurePreset) {
                await this.workspaceContext.state.setWorkflowPresetName(this.folderName, this.configurePreset.name, null, this.isMultiProjectFolder);
            }
        }
    }
    /**
     * The current target to build.
     */
    get onTargetNameChanged() {
        return this.targetName.changeEvent;
    }
    /**
     * The current variant name for displaying to the UI (not the buildType)
     */
    get activeVariantName() {
        return this.activeVariant.value;
    }
    get onActiveVariantNameChanged() {
        return this.activeVariant.changeEvent;
    }
    /**
     * The "launch target" (the target that will be run by debugging)
     */
    get launchTargetName() {
        return this._launchTargetName.value;
    }
    get onLaunchTargetNameChanged() {
        return this._launchTargetName.changeEvent;
    }
    /**
     * Whether CTest is enabled
     */
    get ctestEnabled() {
        return this._ctestEnabled.value;
    }
    get onCTestEnabledChanged() {
        return this._ctestEnabled.changeEvent;
    }
    /**
     * Whether CPack is enabled
     */
    get cpackEnabled() {
        return this._cpackEnabled.value;
    }
    get onCPackEnabledChanged() {
        return this._cpackEnabled.changeEvent;
    }
    /**
     * Whether the backend is busy running some task
     */
    get onIsBusyChanged() {
        return this.isBusy.changeEvent;
    }
    /**
     * Event fired when the code model from CMake is updated
     */
    get codeModelContent() {
        return this._codeModelContent.value;
    }
    get onCodeModelChanged() {
        return this._codeModelContent.changeEvent;
    }
    get onCodeModelChangedApiEvent() {
        return this._codeModelChangedApiEventEmitter.event;
    }
    /**
     * Event fired just as CMakeProject is about to be disposed
     */
    get onDispose() {
        return this.disposeEmitter.event;
    }
    /**
     * Dispose the instance
     */
    dispose() {
        log.debug(localize(52, null));
        this.disposeEmitter.fire();
        this.termCloseSub.dispose();
        this.launchTerminals.forEach(term => term.dispose());
        for (const sub of [
            this.generatorSub,
            this.preferredGeneratorsSub,
            this.communicationModeSub,
            this.cmakePathSub
        ]) {
            sub.dispose();
        }
        this.kitsController.dispose();
        rollbar_1.default.invokeAsync(localize(53, null), () => this.asyncDispose());
        if (this.onDidOpenTextDocumentListener) {
            this.onDidOpenTextDocumentListener.dispose();
        }
    }
    /**
     * Dispose of the extension asynchronously.
     */
    async asyncDispose() {
        collections_1.default.reset();
        const drv = await this.cmakeDriver;
        if (drv) {
            await drv.asyncDispose();
        }
        for (const disp of [this.statusMessage, this.targetName, this.activeVariant, this._ctestEnabled, this.isBusy, this.variantManager, this.cTestController, this.cPackageController]) {
            disp.dispose();
        }
    }
    getPreferredGenerators() {
        // User can override generator with a setting
        const userGenerator = this.workspaceContext.config.generator;
        if (userGenerator) {
            log.debug(localize(54, null, userGenerator));
            return [{
                    name: userGenerator,
                    platform: this.workspaceContext.config.platform || undefined,
                    toolset: this.workspaceContext.config.toolset || undefined
                }];
        }
        const userPreferred = this.workspaceContext.config.preferredGenerators.map(g => ({ name: g }));
        return userPreferred;
    }
    getPreferredGeneratorName() {
        var _a;
        const generators = this.getPreferredGenerators();
        return (_a = generators[0]) === null || _a === void 0 ? void 0 : _a.name;
    }
    /**
     * Execute pre-configure/build tasks to check if we are ready to run a full
     * configure. This should be called by a derived driver before any
     * configuration tasks are run
     */
    async cmakePreConditionProblemHandler(e, isConfiguring, config) {
        let telemetryEvent;
        const telemetryProperties = {};
        switch (e) {
            case drivers_1.CMakePreconditionProblems.ConfigureIsAlreadyRunning:
                void vscode.window.showErrorMessage(localize(55, null));
                break;
            case drivers_1.CMakePreconditionProblems.BuildIsAlreadyRunning:
                void vscode.window.showErrorMessage(localize(56, null));
                break;
            case drivers_1.CMakePreconditionProblems.NoSourceDirectoryFound:
                void vscode.window.showErrorMessage(localize(57, null));
                break;
            case drivers_1.CMakePreconditionProblems.MissingCMakeListsFile:
                telemetryEvent = "partialActivation";
                telemetry.logEvent('missingCMakeListsFile'); // Fire this event in case the notification is dismissed with the `ESC` key.
                const ignoreCMakeListsMissing = this.workspaceContext.state.getIgnoreCMakeListsMissing(this.folderName, this.isMultiProjectFolder) || this.workspaceContext.config.ignoreCMakeListsMissing;
                telemetryProperties["ignoreCMakeListsMissing"] = ignoreCMakeListsMissing.toString();
                if (!ignoreCMakeListsMissing && !this.isMultiProjectFolder) {
                    const existingCmakeListsFiles = await util.getAllCMakeListsPaths(this.folderPath);
                    if (existingCmakeListsFiles !== undefined && existingCmakeListsFiles.length > 0) {
                        telemetryProperties["hasCmakeLists"] = "true";
                    }
                    else {
                        telemetryProperties["hasCMakeLists"] = "false";
                    }
                    const items = existingCmakeListsFiles ? existingCmakeListsFiles.map(file => ({
                        label: util.getRelativePath(file, this.folderPath) + "/CMakeLists.txt",
                        fullPath: file
                    })) : [];
                    const browse = localize(58, null);
                    items.push({ label: browse, fullPath: "", description: "Search for CMakeLists.txt on this computer" });
                    const selection = await vscode.window.showQuickPick(items, {
                        placeHolder: (items.length === 1 ? localize(59, null) : localize(60, null))
                    });
                    telemetryProperties["missingCMakeListsUserAction"] = (selection === undefined) ? "cancel" : (selection.label === browse) ? "browse" : "pick";
                    let selectedFile;
                    if (!selection) {
                        break; // User canceled it.
                    }
                    else if (selection.label === browse) {
                        const openOpts = {
                            canSelectMany: false,
                            defaultUri: vscode.Uri.file(this.folderPath),
                            filters: { "CMake files": ["txt"], "All files": ["*"] },
                            openLabel: "Load"
                        };
                        const cmakeListsFile = await vscode.window.showOpenDialog(openOpts);
                        if (cmakeListsFile) {
                            // Keep the absolute path for CMakeLists.txt files that are located outside of the workspace folder.
                            selectedFile = cmakeListsFile[0].fsPath;
                        }
                    }
                    else {
                        // Keep the relative path for CMakeLists.txt files that are located inside of the workspace folder.
                        // selection.label is the relative path to the selected CMakeLists.txt.
                        selectedFile = selection.label;
                    }
                    if (selectedFile) {
                        const newSourceDirectory = path.dirname(selectedFile);
                        await this.setSourceDir(await util.normalizeAndVerifySourceDir(newSourceDirectory, drivers_1.CMakeDriver.sourceDirExpansionOptions(this.workspaceContext.folder.uri.fsPath)));
                        void vscode.workspace.getConfiguration('cmake', this.workspaceFolder.uri).update("sourceDirectory", this._sourceDir);
                        if (config) {
                            // Updating sourceDirectory here, at the beginning of the configure process,
                            // doesn't need to fire the settings change event (which would trigger unnecessarily
                            // another immediate configure, which will be blocked anyway).
                            config.updatePartial({ sourceDirectory: newSourceDirectory }, false);
                            // Since the source directory is set via a file open dialog tuned to CMakeLists.txt,
                            // we know that it exists and we don't need any other additional checks on its value,
                            // so simply enable full feature set.
                            await (0, extension_1.enableFullFeatureSet)(true);
                            if (!isConfiguring) {
                                telemetry.logEvent(telemetryEvent, telemetryProperties);
                                return vscode.commands.executeCommand('cmake.configure');
                            }
                        }
                    }
                    else {
                        telemetryProperties["missingCMakeListsUserAction"] = "cancel-browse";
                    }
                }
                break;
        }
        if (telemetryEvent) {
            telemetry.logEvent(telemetryEvent, telemetryProperties);
        }
        // This project folder can go through various changes while executing this function
        // that could be relevant to the partial/full feature set view.
        // This is a good place for an update.
        return (0, extension_1.updateFullFeatureSet)();
    }
    /**
     * Start up a new CMake driver and return it. This is so that the initialization
     * of the driver is atomic to those using it
     */
    async startNewCMakeDriver(cmake) {
        log.debug(localize(61, null));
        if (!cmake.isPresent) {
            throw new Error(localize(62, null, `"${cmake.path}"`));
        }
        const workspace = this.workspaceFolder.uri.fsPath;
        let drv;
        const preferredGenerators = this.getPreferredGenerators();
        const preConditionHandler = async (e, config) => this.cmakePreConditionProblemHandler(e, true, config);
        let communicationMode = this.workspaceContext.config.cmakeCommunicationMode.toLowerCase();
        const fileApi = 'fileapi';
        const serverApi = 'serverapi';
        const legacy = 'legacy';
        if (communicationMode !== fileApi && communicationMode !== serverApi && communicationMode !== legacy) {
            if (cmake.isFileApiModeSupported) {
                communicationMode = fileApi;
            }
            else if (cmake.isServerModeSupported) {
                communicationMode = serverApi;
            }
            else {
                communicationMode = legacy;
            }
        }
        else if (communicationMode === fileApi) {
            if (!cmake.isFileApiModeSupported) {
                if (cmake.isServerModeSupported) {
                    communicationMode = serverApi;
                    log.warning(localize(63, null, (0, util_1.versionToString)(cmake.minimalFileApiModeVersion)));
                }
                else {
                    communicationMode = legacy;
                }
            }
        }
        if (communicationMode !== fileApi && communicationMode !== serverApi) {
            log.warning(localize(64, null, (0, util_1.versionToString)(cmake.minimalServerModeVersion)));
        }
        try {
            if (communicationMode === serverApi) {
                this.statusMessage.set(localize(65, null));
            }
            switch (communicationMode) {
                case fileApi:
                    drv = await drivers_1.CMakeFileApiDriver.create(cmake, this.workspaceContext.config, this.sourceDir, this.isMultiProjectFolder, this.useCMakePresets, this.activeKit, this.configurePreset, this.buildPreset, this.testPreset, this.packagePreset, this.workflowPreset, workspace, preConditionHandler, preferredGenerators);
                    break;
                case serverApi:
                    drv = await drivers_1.CMakeServerDriver.create(cmake, this.workspaceContext.config, this.sourceDir, this.isMultiProjectFolder, this.useCMakePresets, this.activeKit, this.configurePreset, this.buildPreset, this.testPreset, this.packagePreset, this.workflowPreset, workspace, preConditionHandler, preferredGenerators);
                    break;
                default:
                    drv = await drivers_1.CMakeLegacyDriver.create(cmake, this.workspaceContext.config, this.sourceDir, this.isMultiProjectFolder, this.useCMakePresets, this.activeKit, this.configurePreset, this.buildPreset, this.testPreset, this.packagePreset, this.workflowPreset, workspace, preConditionHandler, preferredGenerators);
            }
        }
        finally {
            this.statusMessage.set(localize(66, null));
        }
        await drv.setVariant(this.variantManager.activeVariantOptions, this.variantManager.activeKeywordSetting);
        const newTargetName = this.defaultBuildTarget || (this.useCMakePresets ? this.targetsInPresetName : drv.allTargetName);
        if (this.targetName.value !== newTargetName) {
            this.targetName.set(newTargetName);
        }
        this.cTestController.clearTests(drv);
        // All set up. Fulfill the driver promise.
        return drv;
    }
    getConfigurationReader() {
        return this.workspaceContext.config;
    }
    /**
     * Event fired after CMake configure runs
     */
    get onReconfigured() {
        return this.onReconfiguredEmitter.event;
    }
    get onTargetChanged() {
        return this.onTargetChangedEmitter.event;
    }
    async executeCMakeCommand(args, options) {
        const drv = await this.getCMakeDriverInstance();
        if (drv) {
            return drv.executeCommand(drv.cmake.path, args, undefined, options).result;
        }
        else {
            throw new Error(localize(67, null));
        }
    }
    async execute(program, args, options) {
        const drv = await this.getCMakeDriverInstance();
        if (drv) {
            return drv.executeCommand(program, args, undefined, options).result;
        }
        else {
            throw new Error(localize(68, null));
        }
    }
    async shutDownCMakeDriver() {
        const drv = await this.cmakeDriver;
        if (drv) {
            log.debug(localize(69, null));
            await drv.asyncDispose();
            this.cmakeDriver = Promise.resolve(null);
        }
    }
    /**
     * Reload/restarts the CMake Driver
     */
    async reloadCMakeDriver() {
        const drv = await this.cmakeDriver;
        if (drv) {
            log.debug(localize(70, null));
            await drv.asyncDispose();
            return this.cmakeDriver = this.startNewCMakeDriver(await this.getCMakeExecutable());
        }
    }
    /**
     * Second phase of two-phase init. Called by `create`.
     */
    async init(sourceDirectory) {
        log.debug(localize(71, null));
        await this.setSourceDir(await util.normalizeAndVerifySourceDir(sourceDirectory, drivers_1.CMakeDriver.sourceDirExpansionOptions(this.workspaceContext.folder.uri.fsPath)));
        this.doStatusChange(this.workspaceContext.config.options);
        // Start up the variant manager
        await this.variantManager.initialize(this.folderName);
        // Set the status bar message
        this.activeVariant.set(this.variantManager.activeVariantOptions.short);
        // Restore the debug target
        this._launchTargetName.set(this.workspaceContext.state.getLaunchTargetName(this.folderName, this.isMultiProjectFolder) || '');
        // Hook up event handlers
        // Listen for the variant to change
        this.variantManager.onActiveVariantChanged(() => {
            log.debug(localize(72, null));
            rollbar_1.default.invokeAsync(localize(73, null), async () => {
                const drv = await this.getCMakeDriverInstance();
                if (drv) {
                    await drv.setVariant(this.variantManager.activeVariantOptions, this.variantManager.activeKeywordSetting);
                    this.activeVariant.set(this.variantManager.activeVariantOptions.short);
                    // We don't configure yet, since someone else might be in the middle of a configure
                }
            });
        });
        this.cTestController.onTestingEnabledChanged(enabled => this._ctestEnabled.set(enabled));
        this.cPackageController.onPackagingEnabledChanged(enabled => this._cpackEnabled.set(enabled));
        this.statusMessage.set(localize(74, null));
        this.kitsController = await kitsController_1.KitsController.init(this);
        this.presetsController = await presetsController_1.PresetsController.init(this, this.kitsController, this.isMultiProjectFolder);
        await this.doUseCMakePresetsChange();
        this.disposables.push(this.onPresetsChanged(() => this.doUseCMakePresetsChange()));
        this.disposables.push(this.onUserPresetsChanged(() => this.doUseCMakePresetsChange()));
    }
    async hasPresetsFiles() {
        if (await pr_1.fs.exists(this.presetsController.presetsPath) || await pr_1.fs.exists(this.presetsController.userPresetsPath)) {
            return true;
        }
        return false;
    }
    async doUseCMakePresetsChange(useCMakePresets) {
        if (useCMakePresets === undefined) {
            useCMakePresets = this.workspaceContext.config.useCMakePresets;
        }
        this._useCMakePresets = useCMakePresets === 'always' ? true : useCMakePresets === 'never' ? false : await this.hasPresetsFiles();
        const usingCMakePresets = this.useCMakePresets;
        if (usingCMakePresets !== this.wasUsingCMakePresets) {
            this.wasUsingCMakePresets = usingCMakePresets;
            await this.setUseCMakePresets(usingCMakePresets);
            await this.initializeKitOrPresets();
            const config = this.workspaceContext.config;
            if (usingCMakePresets) {
                const setPresetsFileLanguageMode = (document) => {
                    const fileName = path.basename(document.uri.fsPath);
                    if (util.isFileInsideFolder(document.uri, this.folderPath) && fileName === 'CMakePresets.json' || fileName === 'CMakeUserPresets.json') {
                        if (config.allowCommentsInPresetsFile && document.languageId !== 'jsonc') {
                            // setTextDocumentLanguage will trigger onDidOpenTextDocument
                            void vscode.languages.setTextDocumentLanguage(document, 'jsonc');
                        }
                        else if (!config.allowCommentsInPresetsFile && document.languageId !== 'json') {
                            void vscode.languages.setTextDocumentLanguage(document, 'json');
                        }
                    }
                };
                this.onDidOpenTextDocumentListener = vscode.workspace.onDidOpenTextDocument(document => setPresetsFileLanguageMode(document));
                vscode.workspace.textDocuments.forEach(document => setPresetsFileLanguageMode(document));
            }
            else {
                if (this.onDidOpenTextDocumentListener) {
                    this.onDidOpenTextDocumentListener.dispose();
                    this.onDidOpenTextDocumentListener = undefined;
                }
            }
            this.onUseCMakePresetsChangedEmitter.fire(usingCMakePresets);
        }
    }
    /**
     * Call configurePresets, buildPresets, testPresets, packagePresets or workflowPresets to get the latest presets when the event is fired.
     */
    onPresetsChanged(listener) {
        return this.presetsController.onPresetsChanged(listener);
    }
    /**
     * Call configurePresets, buildPresets, testPresets, packagePresets or workflowPresets to get the latest presets when the event is fired.
     */
    onUserPresetsChanged(listener) {
        return this.presetsController.onUserPresetsChanged(listener);
    }
    async initializeKitOrPresets() {
        if (this.useCMakePresets) {
            const latestConfigPresetName = this.workspaceContext.state.getConfigurePresetName(this.folderName, this.isMultiProjectFolder);
            if (latestConfigPresetName) {
                // Check if the latest configurePresetName from the previous session is still valid.
                const presets = await this.presetsController.getAllConfigurePresets();
                const latestConfigPreset = presets.find(preset => preset.name === latestConfigPresetName);
                if (latestConfigPreset && !latestConfigPreset.hidden) {
                    await this.presetsController.setConfigurePreset(latestConfigPresetName);
                }
            }
        }
        else {
            // Check if the CMakeProject remembers what kit it was last using in this dir:
            const kitName = this.workspaceContext.state.getActiveKitName(this.folderName, this.isMultiProjectFolder);
            if (kitName) {
                // It remembers a kit. Find it in the kits avail in this dir:
                const kit = this.kitsController.availableKits.find(k => k.name === kitName) || null;
                // Set the kit: (May do nothing if no kit was found)
                await this.setKit(kit);
            }
        }
    }
    async isNinjaInstalled() {
        const drv = await this.cmakeDriver;
        if (drv) {
            return await drv.testHaveCommand('ninja') || drv.testHaveCommand('ninja-build');
        }
        return false;
    }
    async setKit(kit) {
        if (!this.activeKit || (kit && this.activeKit.name !== kit.name)) {
            this.refreshLaunchEnvironment = true;
        }
        this._activeKit = kit;
        if (kit) {
            log.debug(localize(75, null));
            const drv = await this.cmakeDriver; // Use only an existing driver, do not create one
            if (drv) {
                try {
                    this.statusMessage.set(localize(76, null));
                    await drv.setKit(kit, this.getPreferredGenerators());
                    await this.workspaceContext.state.setActiveKitName(this.folderName, kit.name, this.isMultiProjectFolder);
                    this.statusMessage.set(localize(77, null));
                }
                catch (error) {
                    void vscode.window.showErrorMessage(localize(78, null, `"${error.message}"`));
                    this.statusMessage.set(localize(79, null, error.message));
                    this.cmakeDriver = Promise.resolve(null);
                    this._activeKit = null;
                }
            }
            else {
                // Remember the selected kit for the next session.
                await this.workspaceContext.state.setActiveKitName(this.folderName, kit.name, this.isMultiProjectFolder);
            }
        }
    }
    async getCMakePathofProject() {
        var _a;
        const overWriteCMakePathSetting = this.useCMakePresets ? (_a = this.configurePreset) === null || _a === void 0 ? void 0 : _a.cmakeExecutable : undefined;
        return await this.workspaceContext.getCMakePath(overWriteCMakePathSetting) || '';
    }
    async getCMakeExecutable() {
        const cmakePath = await this.getCMakePathofProject();
        const cmakeExe = await (0, cmakeExecutable_1.getCMakeExecutableInformation)(cmakePath);
        if (cmakeExe.version && this.minCMakeVersion && (0, util_1.versionLess)(cmakeExe.version, this.minCMakeVersion)) {
            rollbar_1.default.error(localize(80, null, (0, util_1.versionToString)(cmakeExe.version), (0, util_1.versionToString)(this.minCMakeVersion)));
        }
        return cmakeExe;
    }
    /**
     * Returns, if possible a cmake driver instance. To creation the driver instance,
     * there are preconditions that should be fulfilled, such as an active kit is selected.
     * These preconditions are checked before it driver instance creation. When creating a
     * driver instance, this function waits until the driver is ready before returning.
     * This ensures that user commands can always be executed, because error criterials like
     * exceptions would assign a null driver and it is possible to create a new driver instance later again.
     */
    async getCMakeDriverInstance() {
        return this.driverStrand.execute(async () => {
            if (!this.useCMakePresets && !this.activeKit) {
                log.debug(localize(81, null));
                return null;
            }
            const cmake = await this.getCMakeExecutable();
            if (!cmake.isPresent) {
                void vscode.window.showErrorMessage(localize(82, null, `"${cmake.path}"`, '"cmake.cmakePath"'));
                telemetry.logEvent('CMakeExecutableNotFound');
                return null;
            }
            if ((await this.cmakeDriver) === null) {
                log.debug(localize(83, null));
                this.cmakeDriver = this.startNewCMakeDriver(cmake);
                try {
                    await this.cmakeDriver;
                }
                catch (e) {
                    this.cmakeDriver = Promise.resolve(null);
                    if (e instanceof drivers_1.BadHomeDirectoryError) {
                        void vscode.window
                            .showErrorMessage(localize(84, null, `"${e.expecting}"`, e.cached), {}, { title: localize(85, null) })
                            .then(chosen => {
                            if (chosen) {
                                // There was only one choice: to clean-configure
                                rollbar_1.default.invokeAsync(localize(86, null), async () => {
                                    try {
                                        await pr_1.fs.unlink(e.badCachePath);
                                    }
                                    catch (e2) {
                                        log.error(localize(87, null, e.badCachePath, e2));
                                    }
                                    try {
                                        await pr_1.fs.rmdir(path.join(path.dirname(e.badCachePath), 'CMakeFiles'));
                                    }
                                    catch (e2) {
                                        log.error(localize(88, null, e.badCachePath, e2));
                                    }
                                    await this.cleanConfigure(ConfigureTrigger.badHomeDir);
                                });
                            }
                        });
                    }
                    else if (e instanceof drivers_1.NoGeneratorError) {
                        const message = localize(89, null);
                        log.error(message, e);
                        void vscode.window.showErrorMessage(message);
                    }
                    else {
                        throw e;
                    }
                    return null;
                }
                if (this.codeModelDriverSub) {
                    this.codeModelDriverSub.dispose();
                }
                const drv = await this.cmakeDriver;
                console.assert(drv !== null, 'Null driver immediately after creation?');
                if (drv && !(drv instanceof drivers_1.CMakeLegacyDriver)) {
                    this.codeModelDriverSub = drv.onCodeModelChanged(cm => this._codeModelContent.set(cm));
                }
            }
            return this.cmakeDriver;
        });
    }
    /**
     * Create an instance asynchronously
     * @param extensionContext The extension context
     * @param projectController Required for test explorer to work properly. Setting as optional to avoid breaking tests.
     *
     * The purpose of making this the only way to create an instance is to prevent
     * us from creating uninitialized instances of the CMake Tools extension.
     */
    static async create(workspaceContext, sourceDirectory, projectController, isMultiProjectFolder) {
        log.debug(localize(90, null));
        const inst = new CMakeProject(workspaceContext, projectController, isMultiProjectFolder);
        await inst.init(sourceDirectory);
        log.debug(localize(91, null));
        return inst;
    }
    get activeKit() {
        return this._activeKit;
    }
    async refreshCompileDatabase(opts) {
        const compdbPaths = [];
        if (this.workspaceContext.config.mergedCompileCommands && this.workspaceContext.config.copyCompileCommands) {
            log.warning(localize(92, null, 'cmake.copyCompileCommands', 'cmake.mergedCompileCommands'));
        }
        if (this.workspaceContext.config.mergedCompileCommands) {
            // recursively search the build directory for all
            const searchRoot = await this.binaryDir;
            if (await pr_1.fs.exists(searchRoot)) {
                (await pr_1.fs.walk(searchRoot)).forEach(e => {
                    if (e.name === 'compile_commands.json') {
                        compdbPaths.push(e.path);
                    }
                });
            }
        }
        else {
            // single file with known path
            const compdbPath = path.join(await this.binaryDir, 'compile_commands.json');
            if (await pr_1.fs.exists(compdbPath)) {
                compdbPaths.push(compdbPath);
                if (this.workspaceContext.config.copyCompileCommands) {
                    // Now try to copy the compdb to the user-requested path
                    const copyDest = this.workspaceContext.config.copyCompileCommands;
                    const expandedDest = await (0, expand_1.expandString)(copyDest, opts);
                    if (compdbPath !== expandedDest) {
                        const parentDir = path.dirname(expandedDest);
                        try {
                            log.debug(localize(93, null, compdbPath, expandedDest, 'compile_commands.json'));
                            await pr_1.fs.mkdir_p(parentDir);
                            try {
                                await pr_1.fs.copyFile(compdbPath, expandedDest);
                            }
                            catch (e) {
                                // Just display the error. It's the best we can do.
                                void vscode.window.showErrorMessage(localize(94, null, `"${compdbPath}"`, `"${expandedDest}"`, e.toString()));
                            }
                        }
                        catch (e) {
                            void vscode.window.showErrorMessage(localize(95, null, `"${compdbPath}"`, `"${expandedDest}"`, `"${parentDir}"`, e.toString()));
                        }
                    }
                }
            }
            else if (this.workspaceContext.config.copyCompileCommands) {
                log.debug(localize(96, null, compdbPath, 'compile_commands.json'));
            }
        }
        if (!this.workspaceContext.config.loadCompileCommands) {
            this.compilationDatabase = null;
        }
        else if (compdbPaths.length > 0) {
            try {
                // Read the compilation database, and update our db property
                const newDB = await compilationDatabase_1.CompilationDatabase.fromFilePaths(compdbPaths);
                this.compilationDatabase = newDB;
                // Now try to dump the compdb to the user-requested path
                const mergeDest = this.workspaceContext.config.mergedCompileCommands;
                if (!mergeDest) {
                    return;
                }
                let expandedDest = await (0, expand_1.expandString)(mergeDest, opts);
                const pardir = path.dirname(expandedDest);
                try {
                    await pr_1.fs.mkdir_p(pardir);
                }
                catch (e) {
                    void vscode.window.showErrorMessage(localize(97, null, `"${expandedDest}"`, `"${pardir}"`, e.toString()));
                    return;
                }
                if (await pr_1.fs.exists(expandedDest) && (await pr_1.fs.stat(expandedDest)).isDirectory()) {
                    // Emulate the behavior of copyFile() with writeFile() so that
                    // mergedCompileCommands works like copyCompileCommands for
                    // target paths which lead to existing directories.
                    expandedDest = path.join(expandedDest, "merged_compile_commands.json");
                }
                try {
                    await pr_1.fs.writeFile(expandedDest, compilationDatabase_1.CompilationDatabase.toJson(newDB));
                }
                catch (e) {
                    // Just display the error. It's the best we can do.
                    void vscode.window.showErrorMessage(localize(98, null, `"${expandedDest}"`, e.toString()));
                    return;
                }
            }
            catch (e) {
                // Just display the error. It's the best we can do.
                void vscode.window.showErrorMessage(localize(99, null, e.toString()));
                return;
            }
        }
    }
    /**
     * Implementation of `cmake.configure`
     * trigger: describes the circumstance that caused this configure to be run.
     *          In order to avoid a breaking change in the CMake Tools API,
     *          this parameter can default to that scenario.
     *          All other configure calls in this extension are able to provide
     *          proper trigger information.
     */
    configure(extraArgs = []) {
        return this.configureInternal(ConfigureTrigger.api, extraArgs, ConfigureType.Normal);
    }
    async configureInternal(trigger = ConfigureTrigger.api, extraArgs = [], type = ConfigureType.Normal, debuggerInformation) {
        const drv = await this.getCMakeDriverInstance();
        // Don't show a progress bar when the extension is using Cache for configuration.
        // Using cache for configuration happens only one time.
        if (drv && drv.shouldUseCachedConfiguration(trigger)) {
            const result = await drv.configure(trigger, []);
            if (result.result === 0) {
                await this.refreshCompileDatabase(drv.expansionOptions);
            }
            await this.cTestController.refreshTests(drv);
            this.onReconfiguredEmitter.fire();
            return result;
        }
        if (trigger === ConfigureTrigger.configureWithCache) {
            log.debug(localize(100, null));
            return { result: -1, resultType: drivers_1.ConfigureResultType.NoCache };
        }
        return vscode.window.withProgress({
            location: vscode.ProgressLocation.Window,
            title: localize(101, null),
            cancellable: true
        }, async (progress, cancel) => {
            progress.report({ message: localize(102, null) });
            cancel.onCancellationRequested(() => {
                rollbar_1.default.invokeAsync(localize(103, null), () => this.cancelConfiguration());
            });
            let forciblyCanceled = false;
            // if there is a debugger information, we are debugging. Set up a listener for stopping a cmake debug session.
            if (debuggerInformation) {
                const trackerFactoryDisposable = vscode.debug.registerDebugAdapterTrackerFactory("cmake", new debuggerConfigureDriver_1.DebugTrackerFactory(async () => {
                    forciblyCanceled = true;
                    await this.cancelConfiguration();
                    trackerFactoryDisposable.dispose();
                }));
            }
            if (type !== ConfigureType.ShowCommandOnly) {
                log.info(localize(104, null, this.folderName), extraArgs);
            }
            try {
                return this.doConfigure(type, progress, async (consumer) => {
                    const isConfiguringKey = 'cmake:isConfiguring';
                    if (drv) {
                        let oldProgress = 0;
                        const progressSub = drv.onProgress(pr => {
                            const newProgress = 100 * (pr.progressCurrent - pr.progressMinimum) / (pr.progressMaximum - pr.progressMinimum);
                            const increment = newProgress - oldProgress;
                            if (increment >= 1) {
                                oldProgress += increment;
                                progress.report({ increment });
                            }
                        });
                        try {
                            progress.report({ message: this.folderName });
                            let result;
                            await (0, extension_1.setContextAndStore)(isConfiguringKey, true);
                            if (type === ConfigureType.Cache) {
                                result = await drv.configure(trigger, [], consumer, debuggerInformation);
                            }
                            else {
                                switch (type) {
                                    case ConfigureType.Normal:
                                        result = await drv.configure(trigger, extraArgs, consumer);
                                        break;
                                    case ConfigureType.NormalWithDebugger:
                                        result = await drv.configure(trigger, extraArgs, consumer, debuggerInformation);
                                        break;
                                    case ConfigureType.Clean:
                                        result = await drv.cleanConfigure(trigger, extraArgs, consumer);
                                        break;
                                    case ConfigureType.CleanWithDebugger:
                                        result = await drv.cleanConfigure(trigger, extraArgs, consumer, debuggerInformation);
                                        break;
                                    case ConfigureType.ShowCommandOnly:
                                        result = await drv.configure(trigger, extraArgs, consumer, undefined, false, true);
                                        break;
                                    default:
                                        rollbar_1.default.error(localize(105, null), { type });
                                        result = await this.configureInternal(trigger, extraArgs, ConfigureType.Normal);
                                        break;
                                }
                                await (0, extension_1.setContextAndStore)(isConfiguringKey, false);
                            }
                            const cmakeConfiguration = vscode.workspace.getConfiguration('cmake');
                            const showDebuggerConfigurationString = "showConfigureWithDebuggerNotification";
                            if (result.result === 0) {
                                await (0, extension_1.enableFullFeatureSet)(true);
                                await this.refreshCompileDatabase(drv.expansionOptions);
                            }
                            else if (result.result !== 0 && (await this.getCMakeExecutable()).isDebuggerSupported && cmakeConfiguration.get(showDebuggerConfigurationString) && !forciblyCanceled && result.resultType === drivers_1.ConfigureResultType.NormalOperation) {
                                const yesButtonTitle = localize(106, null);
                                const doNotShowAgainTitle = localize(107, null);
                                void vscode.window.showErrorMessage(localize(108, null), { title: yesButtonTitle }, { title: localize(109, null) }, { title: doNotShowAgainTitle })
                                    .then(async (chosen) => {
                                    if (chosen) {
                                        if (chosen.title === yesButtonTitle) {
                                            await this.configureInternal(ConfigureTrigger.configureFailedConfigureWithDebuggerButton, extraArgs, ConfigureType.NormalWithDebugger, {
                                                pipeName: (0, debuggerConfigureDriver_1.getDebuggerPipeName)()
                                            });
                                        }
                                        else if (chosen.title === doNotShowAgainTitle) {
                                            await cmakeConfiguration.update(showDebuggerConfigurationString, false, vscode.ConfigurationTarget.Global);
                                        }
                                    }
                                });
                            }
                            await this.cTestController.refreshTests(drv);
                            this.onReconfiguredEmitter.fire();
                            return result;
                        }
                        finally {
                            await (0, extension_1.setContextAndStore)(isConfiguringKey, false);
                            progress.report({ message: localize(110, null) });
                            progressSub.dispose();
                        }
                    }
                    else {
                        progress.report({ message: localize(111, null) });
                        return { result: -1, resultType: drivers_1.ConfigureResultType.NormalOperation };
                    }
                });
            }
            catch (e) {
                const error = e;
                progress.report({ message: error.message });
                return { result: -1, resultType: drivers_1.ConfigureResultType.NormalOperation };
            }
        });
    }
    /**
     * Implementation of `cmake.cleanConfigure()`
     * trigger: describes the circumstance that caused this configure to be run.
     *          In order to avoid a breaking change in the CMake Tools API,
     *          this parameter can default to that scenario.
     *          All other configure calls in this extension are able to provide
     *          proper trigger information.
     */
    cleanConfigure(trigger = ConfigureTrigger.api) {
        return this.configureInternal(trigger, [], ConfigureType.Clean);
    }
    /**
     * Implementation of `cmake.cleanConfigureWithDebugger()`
     * trigger: describes the circumstance that caused this configure to be run.
     *          In order to avoid a breaking change in the CMake Tools API,
     *          this parameter can default to that scenario.
     *          All other configure calls in this extension are able to provide
     *          proper trigger information.
     */
    cleanConfigureWithDebugger(trigger = ConfigureTrigger.api, debuggerInformation) {
        return this.configureInternal(trigger, [], ConfigureType.CleanWithDebugger, debuggerInformation);
    }
    /**
     * Save all open files. "maybe" because the user may have disabled auto-saving
     * with `config.saveBeforeBuild`.
     */
    async maybeAutoSaveAll(showCommandOnly) {
        // Save open files before we configure/build
        if (this.workspaceContext.config.saveBeforeBuild) {
            if (!showCommandOnly) {
                log.debug(localize(112, null));
            }
            const cmakeConfiguration = vscode.workspace.getConfiguration('cmake');
            const showSaveFailedNotificationString = "showNotAllDocumentsSavedQuestion";
            const saveGood = await vscode.workspace.saveAll();
            if (!saveGood && cmakeConfiguration.get(showSaveFailedNotificationString)) {
                log.debug(localize(113, null));
                const yesButtonTitle = localize(114, null);
                const yesAndDoNotShowAgain = localize(115, null);
                const chosen = await vscode.window.showErrorMessage(localize(116, null), {
                    title: yesButtonTitle,
                    isCloseAffordance: false
                }, {
                    title: yesAndDoNotShowAgain,
                    isCloseAffordance: false
                }, {
                    title: localize(117, null),
                    isCloseAffordance: true
                });
                if ((chosen === null || chosen === void 0 ? void 0 : chosen.title) === yesAndDoNotShowAgain) {
                    await cmakeConfiguration.update(showSaveFailedNotificationString, false, vscode.ConfigurationTarget.Global);
                }
                return chosen !== undefined && (chosen.title === yesButtonTitle || chosen.title === yesAndDoNotShowAgain);
            }
        }
        return true;
    }
    /**
     * Wraps pre/post configure logic around an actual configure function
     * @param cb The actual configure callback. Called to do the configure
     */
    async doConfigure(type, progress, cb) {
        progress.report({ message: localize(118, null) });
        if (!await this.maybeAutoSaveAll(type === ConfigureType.ShowCommandOnly)) {
            return { result: -1, resultType: drivers_1.ConfigureResultType.Other };
        }
        if (!this.useCMakePresets) {
            if (!this.activeKit) {
                throw new Error(localize(119, null));
            }
            if (!this.variantManager.haveVariant) {
                progress.report({ message: localize(120, null) });
                await this.variantManager.selectVariant();
                if (!this.variantManager.haveVariant) {
                    log.debug(localize(121, null));
                    return { result: -1, resultType: drivers_1.ConfigureResultType.Other };
                }
            }
        }
        else if (!this.configurePreset) {
            throw new Error(localize(122, null));
        }
        log.showChannel();
        const consumer = new cmake_1.CMakeOutputConsumer(this.sourceDir, cmakeLogger);
        const result = await cb(consumer);
        (0, util_2.populateCollection)(collections_1.default.cmake, consumer.diagnostics);
        return result;
    }
    /**
     * Get the name of the "all" target; that is, the target name for which CMake
     * will build all default targets.
     *
     * This is required because simply using `all` as the target name is incorrect
     * for some generators, such as Visual Studio and Xcode.
     *
     * This is async because it depends on checking the active generator name
     */
    get allTargetName() {
        return this.allTargetNameAsync();
    }
    async allTargetNameAsync() {
        const drv = await this.getCMakeDriverInstance();
        if (drv) {
            return drv.allTargetName;
        }
        else {
            if (!this.useCMakePresets && !this.activeKit) {
                return localize(123, null);
            }
            return '';
        }
    }
    /**
     * Check if the current project needs to be (re)configured
     */
    async needsReconfigure() {
        const drv = await this.getCMakeDriverInstance();
        if (!drv) {
            return true;
        }
        let needsReconfigure = await drv.checkNeedsReconfigure();
        if (!needsReconfigure && !await pr_1.fs.exists(drv.binaryDir)) {
            needsReconfigure = true;
            log.info(localize(124, null));
        }
        const skipConfigureIfCachePresent = this.workspaceContext.config.skipConfigureIfCachePresent;
        if (skipConfigureIfCachePresent && needsReconfigure && await pr_1.fs.exists(drv.cachePath)) {
            log.info(localize(125, null));
            return false;
        }
        return needsReconfigure;
    }
    async ensureConfigured() {
        const drv = await this.getCMakeDriverInstance();
        if (!drv) {
            return null;
        }
        // First, save open files
        if (!await this.maybeAutoSaveAll()) {
            return -1;
        }
        if (await this.needsReconfigure()) {
            return (await this.configureInternal(ConfigureTrigger.compilation, [], ConfigureType.Normal)).result;
        }
        else {
            return 0;
        }
    }
    // Reconfigure if the saved file is a cmake file.
    async doCMakeFileChangeReconfigure(uri) {
        const filePath = util.platformNormalizePath(uri.fsPath);
        const driver = await this.getCMakeDriverInstance();
        // If we detect a change in the CMake cache file, refresh the webview
        if (this.cacheEditorWebview && driver && filePath === util.platformNormalizePath(driver.cachePath)) {
            await this.cacheEditorWebview.refreshPanel();
        }
        const sourceDirectory = util.platformNormalizePath(this.sourceDir);
        let isCmakeFile;
        if (driver && driver.cmakeFiles.length > 0) {
            // If CMake file information is available from the driver, use it
            isCmakeFile = driver.cmakeFiles.some(f => filePath === util.platformNormalizePath(path.resolve(this.sourceDir, f)));
        }
        else {
            // Otherwise, fallback to a simple check (does not cover CMake include files)
            isCmakeFile = false;
            if (filePath.endsWith("cmakelists.txt")) {
                const allcmakelists = await util.getAllCMakeListsPaths(this.folderPath);
                // Look for the CMakeLists.txt files that are in the sourceDirectory root.
                isCmakeFile = (filePath === path.join(sourceDirectory, "cmakelists.txt")) ||
                    ((allcmakelists === null || allcmakelists === void 0 ? void 0 : allcmakelists.find(file => filePath === util.platformNormalizePath(file))) !== undefined);
            }
        }
        if (isCmakeFile) {
            // CMakeLists.txt change event: its creation or deletion are relevant,
            // so update full/partial feature set view for this folder.
            await (0, extension_1.updateFullFeatureSet)();
            if (driver && !driver.configOrBuildInProgress()) {
                if (driver.config.configureOnEdit) {
                    log.debug(localize(126, null));
                    if (this.workspaceContext.config.clearOutputBeforeBuild) {
                        log.clearOutputChannel();
                    }
                    await this.configureInternal(ConfigureTrigger.cmakeListsChange, [], ConfigureType.Normal);
                }
            }
            else {
                log.warning(localize(127, null));
                log.debug(localize(128, null));
            }
        }
    }
    async tasksBuildCommandDrv(drv) {
        const targets = await this.getDefaultBuildTargets();
        const buildargs = await drv.getCMakeBuildCommand(targets || undefined);
        return (buildargs) ? (0, proc_1.buildCmdStr)(buildargs.command, buildargs.args) : null;
    }
    /**
     * Implementation of `cmake.tasksBuildCommand`
     */
    async tasksBuildCommand() {
        const drv = await this.getCMakeDriverInstance();
        return drv ? this.tasksBuildCommandDrv(drv) : null;
    }
    /**
     * Implementation of `cmake.build`
     */
    async runBuild(targets, showCommandOnly, taskConsumer, isBuildCommand) {
        var _a, _b, _c, _d;
        if (!showCommandOnly) {
            log.info(localize(129, null, this.folderName), (targets && targets.length > 0) ? targets.join(', ') : '');
        }
        let drv;
        if (showCommandOnly) {
            drv = await this.getCMakeDriverInstance();
            if (!drv) {
                throw new Error(localize(130, null));
            }
            const buildCmd = await drv.getCMakeBuildCommand(targets || await this.getDefaultBuildTargets());
            if (buildCmd) {
                log.showChannel();
                log.info((0, proc_1.buildCmdStr)(buildCmd.command, buildCmd.args));
            }
            else {
                throw new Error(localize(131, null));
            }
            return 0;
        }
        const configResult = await this.ensureConfigured();
        if (configResult === null) {
            throw new Error(localize(132, null));
        }
        else if (configResult !== 0) {
            return configResult;
        }
        drv = await this.getCMakeDriverInstance();
        if (!drv) {
            throw new Error(localize(133, null));
        }
        let newTargets = targets;
        let targetName;
        const defaultBuildTargets = await this.getDefaultBuildTargets();
        if (this.useCMakePresets) {
            newTargets = (newTargets && newTargets.length > 0) ? newTargets : defaultBuildTargets;
            targetName = `${((_a = this.buildPreset) === null || _a === void 0 ? void 0 : _a.displayName) || ((_b = this.buildPreset) === null || _b === void 0 ? void 0 : _b.name) || ''}${newTargets ? (': ' + newTargets.join(', ')) : ''}`;
            targetName = targetName || ((_c = this.buildPreset) === null || _c === void 0 ? void 0 : _c.displayName) || ((_d = this.buildPreset) === null || _d === void 0 ? void 0 : _d.name) || '';
        }
        else {
            newTargets = (newTargets && newTargets.length > 0) ? newTargets : defaultBuildTargets;
            targetName = newTargets.join(', ');
        }
        let consumer;
        const isBuildingKey = 'cmake:isBuilding';
        try {
            this.statusMessage.set(localize(134, null));
            this.isBusy.set(true);
            let rc;
            if (taskConsumer) {
                buildLogger.info(localize(135, null));
                await (0, extension_1.setContextAndStore)(isBuildingKey, true);
                rc = await drv.build(newTargets, taskConsumer, isBuildCommand);
                await (0, extension_1.setContextAndStore)(isBuildingKey, false);
                if (rc === null) {
                    buildLogger.info(localize(136, null));
                }
                else {
                    buildLogger.info(localize(137, null, rc));
                }
                return rc === null ? -1 : rc;
            }
            else {
                consumer = new build_1.CMakeBuildConsumer(buildLogger, drv.config);
                return await vscode.window.withProgress({
                    location: vscode.ProgressLocation.Window,
                    title: localize(138, null, targetName),
                    cancellable: true
                }, async (progress, cancel) => {
                    let oldProgress = 0;
                    consumer.onProgress(pr => {
                        const increment = pr.value - oldProgress;
                        if (increment >= 1) {
                            progress.report({ increment, message: `${pr.value}%` });
                            oldProgress += increment;
                        }
                    });
                    cancel.onCancellationRequested(() => rollbar_1.default.invokeAsync(localize(139, null), () => this.stop()));
                    log.showChannel();
                    buildLogger.info(localize(140, null));
                    await (0, extension_1.setContextAndStore)(isBuildingKey, true);
                    const rc = await drv.build(newTargets, consumer, isBuildCommand);
                    await (0, extension_1.setContextAndStore)(isBuildingKey, false);
                    if (rc === null) {
                        buildLogger.info(localize(141, null));
                    }
                    else {
                        buildLogger.info(localize(142, null, rc));
                    }
                    const fileDiags = drv.config.parseBuildDiagnostics ? consumer.compileConsumer.resolveDiagnostics(drv.binaryDir) : [];
                    if (fileDiags) {
                        (0, util_2.populateCollection)(collections_1.default.build, fileDiags);
                    }
                    await this.refreshCompileDatabase(drv.expansionOptions);
                    return rc === null ? -1 : rc;
                });
            }
        }
        finally {
            await (0, extension_1.setContextAndStore)(isBuildingKey, false);
            this.statusMessage.set(localize(143, null));
            this.isBusy.set(false);
            if (consumer) {
                consumer.dispose();
            }
        }
    }
    /**
     * Implementation of `cmake.build`
     */
    async build(targets, showCommandOnly, isBuildCommand = true) {
        this.activeBuild = this.runBuild(targets, showCommandOnly, undefined, isBuildCommand);
        return this.activeBuild;
    }
    /**
     * Attempt to execute the compile command associated with the file. If it
     * fails for _any reason_, returns `null`. Otherwise returns the terminal in
     * which the compilation is running
     * @param filePath The path to a file to try and compile
     */
    async tryCompileFile(filePath) {
        const configResult = await this.ensureConfigured();
        if (configResult === null || configResult !== 0) {
            // Config failed?
            return null;
        }
        if (!this.compilationDatabase) {
            return null;
        }
        const cmd = this.compilationDatabase.get(filePath);
        if (!cmd) {
            return null;
        }
        const drv = await this.getCMakeDriverInstance();
        if (!drv) {
            return null;
        }
        return drv.runCompileCommand(cmd);
    }
    async editCache() {
        const drv = await this.getCMakeDriverInstance();
        if (!drv) {
            void vscode.window.showErrorMessage(localize(144, null));
            return;
        }
        if (!await pr_1.fs.exists(drv.cachePath)) {
            const doConfigure = !!(await vscode.window.showErrorMessage(localize(145, null), localize(146, null)));
            if (doConfigure) {
                if ((await this.configureInternal()).result !== 0) {
                    return;
                }
            }
            else {
                return;
            }
        }
        void vscode.workspace.openTextDocument(vscode.Uri.file(drv.cachePath))
            .then(doc => void vscode.window.showTextDocument(doc));
    }
    /**
   * Implementation of `cmake.EditCacheUI`
   */
    async editCacheUI() {
        if (!this.cacheEditorWebview) {
            const drv = await this.getCMakeDriverInstance();
            if (!drv) {
                void vscode.window.showErrorMessage(localize(147, null));
                return 1;
            }
            this.cacheEditorWebview = new cacheView_1.ConfigurationWebview(drv.cachePath, () => {
                void this.configureInternal(ConfigureTrigger.commandEditCacheUI, [], ConfigureType.Cache);
            });
            await this.cacheEditorWebview.initPanel();
            this.cacheEditorWebview.panel.onDidDispose(() => {
                this.cacheEditorWebview = undefined;
            });
        }
        else {
            this.cacheEditorWebview.panel.reveal();
        }
        return 0;
    }
    async buildWithTarget() {
        var _a;
        const target = await this.showTargetSelector();
        if (target === null) {
            return -1;
        }
        let targets = target;
        if (target === this.targetsInPresetName) {
            targets = (_a = this.buildPreset) === null || _a === void 0 ? void 0 : _a.targets;
        }
        return this.build(util.isString(targets) ? [targets] : targets);
    }
    async showTargetSelector() {
        var _a;
        const drv = await this.getCMakeDriverInstance();
        if (!drv) {
            void vscode.window.showErrorMessage(localize(148, null));
            return '';
        }
        if (this.useCMakePresets && ((_a = this.buildPreset) === null || _a === void 0 ? void 0 : _a.targets)) {
            const targets = [this.targetsInPresetName];
            targets.push(...(util.isString(this.buildPreset.targets) ? [this.buildPreset.targets] : this.buildPreset.targets));
            const sel = await vscode.window.showQuickPick(targets, { placeHolder: localize(149, null) });
            return sel || null;
        }
        if (!drv.targets.length) {
            return await vscode.window.showInputBox({ prompt: localize(150, null) }) || null;
        }
        else {
            const choices = drv.uniqueTargets.map((t) => {
                switch (t.type) {
                    case 'named': {
                        return {
                            label: t.name,
                            description: localize(151, null)
                        };
                    }
                    case 'rich': {
                        return { label: t.name, description: t.targetType, detail: t.filepath };
                    }
                }
            });
            const sel = await vscode.window.showQuickPick(choices, { placeHolder: localize(152, null) });
            return sel ? sel.label : null;
        }
    }
    /**
     * Implementaiton of `cmake.clean`
     */
    async clean() {
        return this.build(['clean'], false, false);
    }
    /**
     * Implementation of `cmake.cleanRebuild`
     */
    async cleanRebuild() {
        const cleanResult = await this.clean();
        if (cleanResult !== 0) {
            return cleanResult;
        }
        return this.build();
    }
    async runCTestCustomized(driver, testPreset, consumer) {
        return this.cTestController.runCTest(driver, true, testPreset, consumer);
    }
    async preTest(fromWorkflow = false) {
        if (extension_1.extensionManager !== undefined && extension_1.extensionManager !== null && !fromWorkflow) {
            extension_1.extensionManager.cleanOutputChannel();
        }
        const buildResult = await this.build(undefined, false, false);
        if (buildResult !== 0) {
            throw new Error(localize(153, null));
        }
        const drv = await this.getCMakeDriverInstance();
        if (!drv) {
            throw new Error(localize(154, null));
        }
        return drv;
    }
    async ctest(fromWorkflow = false) {
        const drv = await this.preTest(fromWorkflow);
        const retc = await this.cTestController.runCTest(drv);
        return (retc) ? 0 : -1;
    }
    async cpack(fromWorkflow = false) {
        this.isBusy.set(true);
        const drv = await this.preTest(fromWorkflow);
        const retc = await this.cPackageController.runCPack(drv);
        this.isBusy.set(false);
        return (retc) ? 0 : -1;
    }
    async workflow() {
        // Don't call this.preTest for workflow (as all other types of presets do above).
        // The workflow handles itself any configure or building needed. It can even hurt to run preTest here (which triggers a build),
        // before the workflow preset has a chance to setup the desired configure and other parameters.
        const drv = await this.getCMakeDriverInstance();
        if (!drv) {
            throw new Error(localize(155, null));
        }
        // We shouldn't set isBusy here, because the workflow is composed of phases that each set this flag.
        return (await this.workflowController.runWorkflow(drv, this.workflowPreset, this.configurePreset, this.buildPreset, this.testPreset, this.packagePreset)) ? 0 : -1;
    }
    async revealTestExplorer() {
        if (!await this.cTestController.revealTestExplorer()) {
            await this.refreshTests();
            return this.cTestController.revealTestExplorer();
        }
    }
    async refreshTests() {
        const drv = await this.preTest();
        return this.cTestController.refreshTests(drv);
    }
    addTestExplorerRoot(folder) {
        return this.cTestController.addTestExplorerRoot(folder);
    }
    removeTestExplorerRoot(folder) {
        return this.cTestController.removeTestExplorerRoot(folder);
    }
    async runCPack(driver, packagePreset, consumer) {
        return this.cPackageController.runCPack(driver, packagePreset, consumer);
    }
    async runWorkflow(driver, workflowPreset, consumer) {
        return this.workflowController.runWorkflow(driver, workflowPreset, this.configurePreset, this.buildPreset, this.testPreset, this.packagePreset, consumer);
    }
    /**
     * Implementation of `cmake.install`
     */
    async install() {
        return this.build(['install'], false, false);
    }
    /**
     * Implementation of `cmake.stop`
     */
    async stop() {
        const drv = await this.cmakeDriver;
        if (!drv) {
            return false;
        }
        return drv.stopCurrentProcess().then(async () => {
            await this.activeBuild;
            this.cmakeDriver = Promise.resolve(null);
            this.isBusy.set(false);
            return true;
        }, () => false);
    }
    async cancelConfiguration() {
        const drv = await this.cmakeDriver;
        if (!drv) {
            return false;
        }
        return drv.stopCurrentProcess().then(async () => {
            await this.activeBuild;
            this.cmakeDriver = Promise.resolve(null);
            return true;
        }, () => false);
    }
    /**
     * Implementation of `cmake.setVariant`
     */
    async setVariant(name) {
        // Make this function compatibile with return code style...
        if (await this.variantManager.selectVariant(name)) {
            if (this.workspaceContext.config.automaticReconfigure) {
                await this.configureInternal(ConfigureTrigger.setVariant, [], ConfigureType.Normal);
            }
            return 0; // succeeded
        }
        return 1; // failed
    }
    /**
     * The target that will be built with a regular build invocation
     */
    get defaultBuildTarget() {
        return this.workspaceContext.state.getDefaultBuildTarget(this.folderName, this.isMultiProjectFolder);
    }
    async setDefaultBuildTarget(v) {
        await this.workspaceContext.state.setDefaultBuildTarget(this.folderName, v, this.isMultiProjectFolder);
        this.targetName.set(v);
    }
    async getDefaultBuildTargets() {
        var _a;
        const defaultTarget = this.defaultBuildTarget;
        let targets = defaultTarget || undefined;
        if (this.useCMakePresets && (!defaultTarget || defaultTarget === this.targetsInPresetName)) {
            targets = (_a = this.buildPreset) === null || _a === void 0 ? void 0 : _a.targets;
        }
        if (!this.useCMakePresets && !defaultTarget) {
            targets = await this.allTargetName;
        }
        return util.isString(targets) ? [targets] : targets;
    }
    /**
     * Set the default target to build. Implementation of `cmake.setDefaultTarget`
     * @param target If specified, set this target instead of asking the user
     */
    async setDefaultTarget(target) {
        if (!target) {
            target = await this.showTargetSelector();
        }
        if (!target) {
            return;
        }
        await this.setDefaultBuildTarget(target);
    }
    /**
     * Implementation of `cmake.getBuildTargetName`
     */
    async buildTargetName() {
        if (this.useCMakePresets) {
            return this.defaultBuildTarget || this.targetsInPresetName;
        }
        return this.defaultBuildTarget || this.allTargetName;
    }
    /**
     * Implementation of `cmake.selectLaunchTarget`
     */
    async selectLaunchTarget(name) {
        return this.setLaunchTargetByName(name);
    }
    /**
     * Used by vscode and as test interface
     */
    async setLaunchTargetByName(name) {
        if (await this.needsReconfigure()) {
            const rc = await this.configureInternal(ConfigureTrigger.launch, [], ConfigureType.Normal);
            if (rc.result !== 0) {
                return null;
            }
        }
        const executableTargets = await this.executableTargets;
        if (executableTargets.length === 0) {
            return null;
        }
        if (executableTargets.length === 1) {
            const target = executableTargets[0];
            await this.workspaceContext.state.setLaunchTargetName(this.folderName, target.name, this.isMultiProjectFolder);
            this._launchTargetName.set(target.name);
            return target.path;
        }
        const choices = executableTargets.map(e => ({
            label: e.name,
            description: '',
            detail: e.path
        }));
        let chosen;
        if (!name) {
            chosen = await vscode.window.showQuickPick(choices, { placeHolder: localize(156, null, this.folderName) });
        }
        else {
            chosen = choices.find(choice => choice.label === name);
        }
        if (!chosen) {
            return null;
        }
        await this.workspaceContext.state.setLaunchTargetName(this.folderName, chosen.label, this.isMultiProjectFolder);
        this._launchTargetName.set(chosen.label);
        return chosen.detail;
    }
    async getCurrentLaunchTarget() {
        const targetName = this.workspaceContext.state.getLaunchTargetName(this.folderName, this.isMultiProjectFolder);
        const target = (await this.executableTargets).find(e => e.name === targetName);
        if (!target) {
            return null;
        }
        return target;
    }
    /**
     * Implementation of `cmake.launchTargetPath`. This also ensures the target exists if `cmake.buildBeforeRun` is set.
     */
    async launchTargetPath() {
        const executable = await this.prepareLaunchTargetExecutable();
        if (!executable) {
            log.showChannel();
            log.warning('=======================================================');
            log.warning(localize(157, null));
            log.warning(` - ${localize(158, null)}`);
            log.warning(` - ${localize(159, null)}`);
            log.warning(localize(160, null));
            return null;
        }
        return executable.path;
    }
    /**
     * Implementation of `cmake.launchTargetDirectory`. This also ensures the target exists if `cmake.buildBeforeRun` is set.
     */
    async launchTargetDirectory() {
        const targetPath = await this.launchTargetPath();
        if (targetPath === null) {
            return null;
        }
        return path.dirname(targetPath);
    }
    /**
     * Implementation of `cmake.launchTargetFilename`. This also ensures the target exists if `cmake.buildBeforeRun` is set.
     */
    async launchTargetFilename() {
        const targetPath = await this.launchTargetPath();
        if (targetPath === null) {
            return null;
        }
        return path.basename(targetPath);
    }
    /**
     * Implementation of `cmake.getLaunchTargetPath`. This does not ensure the target exists.
     */
    async getLaunchTargetPath() {
        if (await this.needsReconfigure()) {
            const rc = await this.configureInternal(ConfigureTrigger.launch, [], ConfigureType.Normal);
            if (rc.result !== 0) {
                return null;
            }
        }
        const target = await this.getOrSelectLaunchTarget();
        if (!target) {
            log.showChannel();
            log.warning('=======================================================');
            log.warning(localize(161, null));
            log.warning(` - ${localize(162, null)}`);
            log.warning(` - ${localize(163, null)}`);
            log.warning(localize(164, null));
            return null;
        }
        return target.path;
    }
    /**
     * Implementation of `cmake.getLaunchTargetDirectory`. This does not ensure the target exists.
     */
    async getLaunchTargetDirectory() {
        const targetPath = await this.getLaunchTargetPath();
        if (targetPath === null) {
            return null;
        }
        return path.dirname(targetPath);
    }
    /**
     * Implementation of `cmake.getLaunchTargetFilename`. This does not ensure the target exists.
     */
    async getLaunchTargetFilename() {
        const targetPath = await this.getLaunchTargetPath();
        if (targetPath === null) {
            return null;
        }
        return path.basename(targetPath);
    }
    /**
     * Implementation of `cmake.buildType`
     */
    async currentBuildType() {
        var _a;
        let buildType = null;
        if (this.useCMakePresets) {
            if (this.buildPreset) {
                if (this.buildPreset.configuration) {
                    // The `configuration` is set for multi-config generators, and is optional for single-config generators.
                    buildType = this.buildPreset.configuration;
                }
                else {
                    try {
                        // Get the value from cache for multi-config generators
                        const cache = await cache_1.CMakeCache.fromPath(await this.cachePath);
                        const buildTypes = (_a = cache.get('CMAKE_CONFIGURATION_TYPES')) === null || _a === void 0 ? void 0 : _a.as().split(';');
                        if (buildTypes && buildTypes.length > 0) {
                            buildType = buildTypes[0];
                        }
                    }
                    catch (e) {
                    }
                }
            }
            if (!buildType && this.configurePreset && this.configurePreset.cacheVariables) {
                // Single config generators set the build type in config preset.
                buildType = preset.getStringValueFromCacheVar(this.configurePreset.cacheVariables["CMAKE_BUILD_TYPE"]);
            }
        }
        else {
            buildType = this.variantManager.activeVariantOptions.buildType || null;
        }
        return buildType;
    }
    /**
     * Implementation of `cmake.buildDirectory`
     */
    async buildDirectory() {
        const binaryDir = await this.binaryDir;
        if (binaryDir) {
            return binaryDir;
        }
        else {
            return null;
        }
    }
    /**
     * Implementation of `cmake.buildKit`
     */
    async buildKit() {
        if (this.activeKit) {
            return this.activeKit.name;
        }
        else {
            return null;
        }
    }
    async prepareLaunchTargetExecutable(name) {
        let chosen;
        // Ensure that we've configured the project already. If we haven't, `getOrSelectLaunchTarget` won't see any
        // executable targets and may show an uneccessary prompt to the user
        const isReconfigurationNeeded = await this.needsReconfigure();
        if (isReconfigurationNeeded) {
            const rc = await this.configureInternal(ConfigureTrigger.launch, [], ConfigureType.Normal);
            if (rc.result !== 0) {
                log.debug(localize(165, null));
                return null;
            }
        }
        if (name) {
            const found = (await this.executableTargets).find(e => e.name === name);
            if (!found) {
                return null;
            }
            chosen = found;
        }
        else {
            const current = await this.getOrSelectLaunchTarget();
            if (!current) {
                return null;
            }
            chosen = current;
        }
        const buildOnLaunch = this.workspaceContext.config.buildBeforeRun;
        if (buildOnLaunch || isReconfigurationNeeded) {
            const buildTargets = await this.getDefaultBuildTargets() || [];
            const allTargetName = await this.allTargetName;
            if (!buildTargets.includes(allTargetName) && !buildTargets.includes(chosen.name)) {
                buildTargets.push(chosen.name);
            }
            const buildResult = await this.build(buildTargets);
            if (buildResult !== 0) {
                log.debug(localize(166, null));
                return null;
            }
        }
        return chosen;
    }
    async getOrSelectLaunchTarget() {
        const current = await this.getCurrentLaunchTarget();
        if (current) {
            return current;
        }
        // Ask the user if we don't already have a target
        await this.selectLaunchTarget();
        return this.getCurrentLaunchTarget();
    }
    /**
     * Both debugTarget and launchTarget called this funciton, so it's refactored out
     * Array.concat's performance would not beat the Dict.merge a lot.
     * This is also the point to fixing the issue #1987
     */
    async getTargetLaunchEnvironment(drv, debugEnv) {
        var _a, _b;
        const env = util.fromDebuggerEnvironmentVars(debugEnv);
        // Add environment variables from ConfigureEnvironment.
        const configureEnv = await (drv === null || drv === void 0 ? void 0 : drv.getConfigureEnvironment());
        if (((_a = drv === null || drv === void 0 ? void 0 : drv.useCMakePresets) !== null && _a !== void 0 ? _a : false) && ((_b = (0, config_1.checkConfigureOverridesPresent)(this.workspaceContext.config)) !== null && _b !== void 0 ? _b : false)) {
            log.info(localize(167, null));
        }
        return environmentVariables_1.EnvironmentUtils.merge([env, configureEnv]);
    }
    /**
     * Implementation of `cmake.debugTarget`
     */
    async debugTarget(name) {
        var _a, _b, _c;
        const drv = await this.getCMakeDriverInstance();
        if (!drv) {
            void vscode.window.showErrorMessage(localize(168, null));
            return null;
        }
        if (drv instanceof drivers_1.CMakeLegacyDriver) {
            void vscode.window
                .showWarningMessage(localize(169, null), {
                title: localize(170, null),
                isLearnMore: true
            })
                .then(item => {
                if (item && item.isLearnMore) {
                    open('https://vector-of-bool.github.io/docs/vscode-cmake-tools/debugging.html');
                }
            });
            return null;
        }
        const targetExecutable = await this.prepareLaunchTargetExecutable(name);
        if (!targetExecutable) {
            log.error(localize(171, null, `"${name}"`));
            return null;
        }
        let debugConfig;
        try {
            const cache = await cache_1.CMakeCache.fromPath(drv.cachePath);
            debugConfig = await debuggerModule.getDebugConfigurationFromCache(cache, targetExecutable, process.platform, (_a = this.workspaceContext.config.debugConfig) === null || _a === void 0 ? void 0 : _a.MIMode, (_b = this.workspaceContext.config.debugConfig) === null || _b === void 0 ? void 0 : _b.miDebuggerPath);
            log.debug(localize(172, null, JSON.stringify(debugConfig)));
        }
        catch (error) {
            void vscode.window
                .showErrorMessage(error.message, {
                title: localize(173, null),
                isLearnMore: true
            })
                .then(item => {
                if (item && item.isLearnMore) {
                    open('https://vector-of-bool.github.io/docs/vscode-cmake-tools/debugging.html');
                }
            });
            log.debug(localize(174, null), error);
            return null;
        }
        if (debugConfig === null) {
            log.error(localize(175, null));
            void vscode.window.showErrorMessage(localize(176, null));
            return null;
        }
        // Add debug configuration from settings.
        const userConfig = this.workspaceContext.config.debugConfig;
        Object.assign(debugConfig, userConfig);
        const launchEnv = await this.getTargetLaunchEnvironment(drv, debugConfig.environment);
        debugConfig.environment = util.makeDebuggerEnvironmentVars(launchEnv);
        log.debug(localize(177, null), JSON.stringify({
            workspace: this.workspaceFolder.uri.toString(),
            config: debugConfig
        }));
        const cfg = vscode.workspace.getConfiguration('cmake', this.workspaceFolder.uri).inspect('debugConfig');
        const customSetting = ((cfg === null || cfg === void 0 ? void 0 : cfg.globalValue) !== undefined || (cfg === null || cfg === void 0 ? void 0 : cfg.workspaceValue) !== undefined || (cfg === null || cfg === void 0 ? void 0 : cfg.workspaceFolderValue) !== undefined);
        let dbg = (_c = debugConfig.MIMode) === null || _c === void 0 ? void 0 : _c.toString();
        if (!dbg && debugConfig.type === "cppvsdbg") {
            dbg = "vsdbg";
        }
        else {
            dbg = "(unset)";
        }
        const telemetryProperties = {
            customSetting: customSetting.toString(),
            debugger: dbg
        };
        telemetry.logEvent('debug', telemetryProperties);
        await vscode.debug.startDebugging(this.workspaceFolder, debugConfig);
        return vscode.debug.activeDebugSession;
    }
    async createTerminal(executable) {
        const launchBehavior = this.workspaceContext.config.launchBehavior.toLowerCase();
        if (launchBehavior !== "newterminal") {
            for (const [, terminal] of this.launchTerminals) {
                const creationOptions = terminal.creationOptions;
                const executablePath = creationOptions.env[this.launchTerminalTargetName];
                const terminalPath = creationOptions.env[this.launchTerminalPath];
                if (executablePath === executable.name) {
                    if (launchBehavior === 'breakandreuseterminal') {
                        terminal.sendText('\u0003');
                    }
                    // Dispose the terminal if the User's settings for preferred terminal have changed since the current target is launched,
                    // or if the kit is changed, which means the environment variables are possibly updated.
                    if (terminalPath !== vscode.env.shell || this.refreshLaunchEnvironment) {
                        terminal.dispose();
                        break;
                    }
                    return terminal;
                }
            }
        }
        const userConfig = this.workspaceContext.config.debugConfig;
        const drv = await this.getCMakeDriverInstance();
        const launchEnv = await this.getTargetLaunchEnvironment(drv, userConfig.environment);
        const options = {
            name: `CMake/Launch - ${executable.name}`,
            env: launchEnv,
            cwd: (userConfig && userConfig.cwd) || path.dirname(executable.path)
        };
        if (options && options.env) {
            options.env[this.launchTerminalTargetName] = executable.name;
            options.env[this.launchTerminalPath] = vscode.env.shell;
        }
        this.refreshLaunchEnvironment = false;
        return vscode.window.createTerminal(options);
    }
    /**
     * Implementation of `cmake.launchTarget`
     */
    async launchTarget(name) {
        var _a;
        const executable = await this.prepareLaunchTargetExecutable(name);
        if (!executable) {
            // The user has nothing selected and cancelled the prompt to select
            // a target.
            return null;
        }
        const userConfig = this.workspaceContext.config.debugConfig;
        const terminal = await this.createTerminal(executable);
        let executablePath = shlex.quote(executable.path);
        if (executablePath.startsWith("\"")) {
            let launchTerminalPath = terminal.creationOptions.env[this.launchTerminalPath];
            if (process.platform === 'win32') {
                executablePath = executablePath.replace(/\\/g, "/");
                launchTerminalPath = launchTerminalPath === null || launchTerminalPath === void 0 ? void 0 : launchTerminalPath.toLocaleLowerCase();
                if ((launchTerminalPath === null || launchTerminalPath === void 0 ? void 0 : launchTerminalPath.includes("pwsh.exe")) || (launchTerminalPath === null || launchTerminalPath === void 0 ? void 0 : launchTerminalPath.includes("powershell"))) {
                    executablePath = `.${executablePath}`;
                }
            }
            else {
                if (launchTerminalPath === null || launchTerminalPath === void 0 ? void 0 : launchTerminalPath.endsWith("pwsh")) {
                    executablePath = `.${executablePath}`;
                }
            }
        }
        terminal.sendText(executablePath, false);
        if (((_a = userConfig === null || userConfig === void 0 ? void 0 : userConfig.args) === null || _a === void 0 ? void 0 : _a.length) !== undefined && userConfig.args.length > 0) {
            const args = await (0, expand_1.expandStrings)(userConfig.args, await this.getExpansionOptions());
            args.forEach(arg => terminal.sendText(` ${shlex.quote(arg)}`, false));
        }
        terminal.sendText('', true); // Finally send the newline to complete the command.
        terminal.show(true);
        const processId = await terminal.processId;
        this.launchTerminals.set(processId, terminal);
        return terminal;
    }
    /**
     * Implementation of `cmake.quickStart`
     */
    async quickStart(workspaceFolder) {
        if (!workspaceFolder) {
            workspaceFolder = this.workspaceContext.folder;
        }
        if (!workspaceFolder) {
            void vscode.window.showErrorMessage(localize(178, null));
            return -2;
        }
        const mainListFile = path.join(this.sourceDir, 'CMakeLists.txt');
        if (await pr_1.fs.exists(mainListFile)) {
            void vscode.window.showErrorMessage(localize(179, null));
            return -1;
        }
        const projectName = await vscode.window.showInputBox({
            prompt: localize(180, null),
            validateInput: (value) => {
                if (!value.length) {
                    return localize(181, null);
                }
                return '';
            }
        });
        if (!projectName) {
            return -1;
        }
        const targetLang = (await vscode.window.showQuickPick([
            {
                label: 'C++',
                description: localize(182, null)
            },
            {
                label: 'C',
                description: localize(183, null)
            }
        ]));
        if (!targetLang) {
            return -1;
        }
        const targetType = (await vscode.window.showQuickPick([
            {
                label: 'Library',
                description: localize(184, null)
            },
            { label: 'Executable', description: localize(185, null) }
        ]));
        if (!targetType) {
            return -1;
        }
        const type = targetType.label;
        const lang = targetLang.label;
        const langName = lang === "C++" ? "C CXX" : "C";
        const langExt = lang === "C++" ? "cpp" : "c";
        const init = [
            'cmake_minimum_required(VERSION 3.0.0)',
            `project(${projectName} VERSION 0.1.0 LANGUAGES ${langName})`,
            '',
            'include(CTest)',
            'enable_testing()',
            '',
            type === 'Library' ? `add_library(${projectName} ${projectName}.${langExt})`
                : `add_executable(${projectName} main.${langExt})`,
            '',
            'set(CPACK_PROJECT_NAME ${PROJECT_NAME})',
            'set(CPACK_PROJECT_VERSION ${PROJECT_VERSION})',
            'include(CPack)',
            ''
        ].join('\n');
        if (type === 'Library') {
            if (!(await pr_1.fs.exists(path.join(this.sourceDir, `${projectName}.${langExt}`)))) {
                await pr_1.fs.writeFile(path.join(this.sourceDir, `${projectName}.${langExt}`), (lang === "C++" ?
                    ([
                        '#include <iostream>',
                        '',
                        'void say_hello(){',
                        `    std::cout << "Hello, from ${projectName}!\\n";`,
                        '}',
                        ''
                    ]) :
                    ([
                        '#include <stdio.h>',
                        '',
                        'void say_hello(){',
                        `    printf("Hello, from ${projectName}!\\n");`,
                        '}',
                        ''
                    ])).join('\n'));
            }
        }
        else {
            if (!(await pr_1.fs.exists(path.join(this.sourceDir, `main.${langExt}`)))) {
                await pr_1.fs.writeFile(path.join(this.sourceDir, `main.${langExt}`), (lang === "C++" ?
                    ([
                        '#include <iostream>',
                        '',
                        'int main(int, char**){',
                        `    std::cout << "Hello, from ${projectName}!\\n";`,
                        '}',
                        ''
                    ]) :
                    ([
                        '#include <stdio.h>',
                        '',
                        'int main(int, char**){',
                        `    printf("Hello, from ${projectName}!\\n");`,
                        '}',
                        ''
                    ])).join('\n'));
            }
        }
        await pr_1.fs.writeFile(mainListFile, init);
        const doc = await vscode.workspace.openTextDocument(mainListFile);
        await vscode.window.showTextDocument(doc);
        // By now, quickStart is succesful in creating a valid CMakeLists.txt.
        // Regardless of the following configure return code,
        // we want full feature set view for the whole workspace.
        await (0, extension_1.enableFullFeatureSet)(true);
        return (await this.configureInternal(ConfigureTrigger.quickStart, [], ConfigureType.Normal)).result;
    }
    /**
     * Implementation of `cmake.resetState`
     */
    async resetState() {
        await this.workspaceContext.state.reset(this.folderName, this.isMultiProjectFolder);
    }
    get sourceDir() {
        return this._sourceDir;
    }
    async setSourceDir(sourceDir) {
        this._sourceDir = sourceDir;
        this.cmakeListsExists = await pr_1.fs.exists(path.join(this._sourceDir, "CMakeLists.txt"));
    }
    hasCMakeLists() {
        return this.cmakeListsExists;
    }
    get mainListFile() {
        const drv = this.getCMakeDriverInstance();
        return drv.then(d => {
            if (!d) {
                return '';
            }
            return d.mainListFile;
        });
    }
    get binaryDir() {
        const drv = this.getCMakeDriverInstance();
        return drv.then(d => {
            if (!d) {
                return '';
            }
            return d.binaryDir;
        });
    }
    get cachePath() {
        const drv = this.getCMakeDriverInstance();
        return drv.then(d => {
            if (!d) {
                return '';
            }
            return d.cachePath;
        });
    }
    get targets() {
        const drv = this.getCMakeDriverInstance();
        return drv.then(d => {
            if (!d) {
                return [];
            }
            return d.targets;
        });
    }
    get executableTargets() {
        const drv = this.getCMakeDriverInstance();
        return drv.then(d => {
            if (!d) {
                return [];
            }
            return d.executableTargets;
        });
    }
    async jumpToCacheFile() {
        // Do nothing.
        return null;
    }
    async setBuildType() {
        // Do nothing
        return -1;
    }
    async selectEnvironments() {
        return null;
    }
    async getExpansionOptions() {
        const workspaceFolder = this.workspaceContext.folder.uri.fsPath;
        return {
            vars: {
                buildKit: '${buildKit}',
                buildType: '${buildType}',
                buildKitVendor: '${buildKitVendor}',
                buildKitTriple: '${buildKitTriple}',
                buildKitVersion: '${buildKitVersion}',
                buildKitHostOs: '${buildKitVendor}',
                buildKitTargetOs: '${buildKitTargetOs}',
                buildKitTargetArch: '${buildKitTargetArch}',
                buildKitVersionMajor: '${buildKitVersionMajor}',
                buildKitVersionMinor: '${buildKitVersionMinor}',
                generator: '${generator}',
                userHome: paths_1.default.userHome,
                workspaceFolder: workspaceFolder,
                workspaceFolderBasename: path.basename(workspaceFolder),
                sourceDir: this.sourceDir,
                workspaceHash: '${workspaceHash}',
                workspaceRoot: this.workspaceContext.folder.uri.fsPath,
                workspaceRootFolderName: path.basename(workspaceFolder)
            }
        };
    }
    async getExpandedAdditionalKitFiles() {
        const opts = await this.getExpansionOptions();
        return (0, expand_1.expandStrings)(this.workspaceContext.config.additionalKits, opts);
    }
    async sendFileTypeTelemetry(uri) {
        const filePath = util.platformNormalizePath(uri.fsPath);
        const sourceDirectory = util.platformNormalizePath(this.sourceDir);
        // "outside" evaluates whether the modified cmake file belongs to the project.
        let outside = true;
        let fileType;
        if (filePath.endsWith("cmakelists.txt")) {
            fileType = "CMakeLists";
            // The CMakeLists.txt belongs to the project only if sourceDirectory points to it.
            if (filePath === path.join(sourceDirectory, "cmakelists.txt")) {
                outside = false;
            }
        }
        else if (filePath.endsWith("cmakecache.txt")) {
            fileType = "CMakeCache";
            const binaryDirectory = util.platformNormalizePath(await this.binaryDir);
            // The CMakeCache.txt belongs to the project only if binaryDirectory points to it.
            if (filePath === path.join(binaryDirectory, "cmakecache.txt")) {
                outside = false;
            }
        }
        else if (filePath.endsWith(".cmake")) {
            fileType = ".cmake";
            const binaryDirectory = util.platformNormalizePath(await this.binaryDir);
            // Instead of parsing how and from where a *.cmake file is included or imported
            // let's consider one inside the project if it's in the workspace folder (single-project),
            // sourceDirectory or binaryDirectory.
            if ((!this.isMultiProjectFolder && filePath.startsWith(util.platformNormalizePath(this.folderPath))) ||
                filePath.startsWith(sourceDirectory) ||
                filePath.startsWith(binaryDirectory)) {
                outside = false;
            }
        }
        if (fileType) {
            telemetry.logEvent("cmakeFileWrite", { filetype: fileType, outsideActiveFolder: outside.toString() });
        }
    }
    async getDiagnostics() {
        try {
            const drv = await this.getCMakeDriverInstance();
            if (drv) {
                return drv.getDiagnostics();
            }
        }
        catch (_a) {
        }
        return {
            folder: (this.isMultiProjectFolder) ? this.sourceDir : this.workspaceFolder.uri.fsPath || "",
            cmakeVersion: "unknown",
            configured: false,
            generator: "unknown",
            usesPresets: false,
            compilers: {}
        };
    }
    async getSettingsDiagnostics() {
        try {
            const drv = await this.getCMakeDriverInstance();
            if (drv) {
                return {
                    communicationMode: drv.config.cmakeCommunicationMode,
                    useCMakePresets: drv.config.useCMakePresets,
                    configureOnOpen: drv.config.configureOnOpen
                };
            }
        }
        catch (_a) {
        }
        return {
            communicationMode: 'automatic',
            useCMakePresets: 'auto',
            configureOnOpen: null
        };
    }
    get onUseCMakePresetsChanged() {
        return this.onUseCMakePresetsChangedEmitter.event;
    }
    doStatusChange(options) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;
        this.hideBuildButton = (((_b = (_a = options === null || options === void 0 ? void 0 : options.advanced) === null || _a === void 0 ? void 0 : _a.build) === null || _b === void 0 ? void 0 : _b.statusBarVisibility) === "hidden" && ((_d = (_c = options === null || options === void 0 ? void 0 : options.advanced) === null || _c === void 0 ? void 0 : _c.build) === null || _d === void 0 ? void 0 : _d.projectStatusVisibility) === "hidden") ? true : false;
        this.hideDebugButton = (((_f = (_e = options === null || options === void 0 ? void 0 : options.advanced) === null || _e === void 0 ? void 0 : _e.debug) === null || _f === void 0 ? void 0 : _f.statusBarVisibility) === "hidden" && ((_h = (_g = options === null || options === void 0 ? void 0 : options.advanced) === null || _g === void 0 ? void 0 : _g.debug) === null || _h === void 0 ? void 0 : _h.projectStatusVisibility) === "hidden") ? true : false;
        this.hideLaunchButton = (((_k = (_j = options === null || options === void 0 ? void 0 : options.advanced) === null || _j === void 0 ? void 0 : _j.launch) === null || _k === void 0 ? void 0 : _k.statusBarVisibility) === "hidden" && ((_m = (_l = options === null || options === void 0 ? void 0 : options.advanced) === null || _l === void 0 ? void 0 : _l.launch) === null || _m === void 0 ? void 0 : _m.projectStatusVisibility) === "hidden") ? true : false;
    }
}
exports.CMakeProject = CMakeProject;
exports["default"] = CMakeProject;


/***/ }),

/***/ 81337:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.cmakeTaskProvider = exports.CustomBuildTaskTerminal = exports.CMakeTaskProvider = exports.CommandType = exports.CMakeTask = void 0;
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
const vscode = __webpack_require__(89496);
const proc = __webpack_require__(3477);
const nls = __webpack_require__(33463);
const environmentVariables_1 = __webpack_require__(40085);
const logging = __webpack_require__(71067);
const extension_1 = __webpack_require__(12406);
const cmakeProject_1 = __webpack_require__(37874);
const telemetry = __webpack_require__(21818);
const util = __webpack_require__(16182);
const expand = __webpack_require__(77504);
nls.config({ messageFormat: nls.MessageFormat.bundle, bundleFormat: nls.BundleFormat.standalone })((__webpack_require__(71017).join)(__dirname, 'src\\cmakeTaskProvider.ts'));
const localize = nls.loadMessageBundle((__webpack_require__(71017).join)(__dirname, 'src\\cmakeTaskProvider.ts'));
const log = logging.createLogger('TaskProvider');
const endOfLine = "\r\n";
class CMakeTask extends vscode.Task {
}
exports.CMakeTask = CMakeTask;
var CommandType;
(function (CommandType) {
    CommandType["build"] = "build";
    CommandType["config"] = "configure";
    CommandType["install"] = "install";
    CommandType["test"] = "test";
    CommandType["package"] = "package";
    CommandType["workflow"] = "workflow";
    CommandType["clean"] = "clean";
    CommandType["cleanRebuild"] = "cleanRebuild";
})(CommandType = exports.CommandType || (exports.CommandType = {}));
const localizeCommandType = (cmd) => {
    switch (cmd) {
        case CommandType.build: {
            return localize(0, null);
        }
        case CommandType.install: {
            return localize(1, null);
        }
        case CommandType.test: {
            return localize(2, null);
        }
        case CommandType.package: {
            return localize(3, null);
        }
        case CommandType.workflow: {
            return localize(4, null);
        }
        case CommandType.config: {
            return localize(5, null);
        }
        case CommandType.clean: {
            return localize(6, null);
        }
        case CommandType.cleanRebuild: {
            return localize(7, null);
        }
        default: {
            return "";
        }
    }
    ;
};
async function getDefaultPresetName(commandType, resolve = false) {
    let result;
    switch (commandType) {
        case CommandType.config:
            result = resolve ? await vscode.commands.executeCommand("cmake.activeConfigurePresetName", []) :
                "${command:cmake.activeConfigurePresetName}";
            break;
        case CommandType.build:
            result = resolve ? await vscode.commands.executeCommand("cmake.activeBuildPresetName", []) :
                "${command:cmake.activeBuildPresetName}";
            break;
        case CommandType.install:
            result = resolve ? await vscode.commands.executeCommand("cmake.activeBuildPresetName", []) :
                "${command:cmake.activeBuildPresetName}";
            break;
        case CommandType.clean:
            result = resolve ? await vscode.commands.executeCommand("cmake.activeBuildPresetName", []) :
                "${command:cmake.activeBuildPresetName}";
            break;
        case CommandType.cleanRebuild:
            result = resolve ? await vscode.commands.executeCommand("cmake.activeBuildPresetName", []) :
                "${command:cmake.activeBuildPresetName}";
            break;
        case CommandType.test:
            result = resolve ? await vscode.commands.executeCommand("cmake.activeTestPresetName", []) :
                "${command:cmake.activeTestPresetName}";
            break;
        case CommandType.package:
            result = resolve ? await vscode.commands.executeCommand("cmake.activePackagePresetName", []) :
                "${command:cmake.activePackagePresetName}";
            break;
        case CommandType.workflow:
            result = resolve ? await vscode.commands.executeCommand("cmake.activeWorkflowPresetName", []) :
                "${command:cmake.activeWorkflowPresetName}";
            break;
        default:
            return undefined;
    }
    return result;
}
class CMakeTaskProvider {
    constructor() {
    }
    async provideTasks() {
        const result = [];
        const project = (0, extension_1.getActiveProject)();
        const targets = await (project === null || project === void 0 ? void 0 : project.getDefaultBuildTargets()) || ["all"];
        if (extension_1.extensionManager === null || extension_1.extensionManager === void 0 ? void 0 : extension_1.extensionManager.workspaceHasAtLeastOneProject()) {
            result.push(await CMakeTaskProvider.provideTask(CommandType.config, project === null || project === void 0 ? void 0 : project.useCMakePresets));
            result.push(await CMakeTaskProvider.provideTask(CommandType.build, project === null || project === void 0 ? void 0 : project.useCMakePresets, targets));
            result.push(await CMakeTaskProvider.provideTask(CommandType.install, project === null || project === void 0 ? void 0 : project.useCMakePresets));
            result.push(await CMakeTaskProvider.provideTask(CommandType.test, project === null || project === void 0 ? void 0 : project.useCMakePresets));
            result.push(await CMakeTaskProvider.provideTask(CommandType.package, project === null || project === void 0 ? void 0 : project.useCMakePresets));
            result.push(await CMakeTaskProvider.provideTask(CommandType.workflow, project === null || project === void 0 ? void 0 : project.useCMakePresets));
            result.push(await CMakeTaskProvider.provideTask(CommandType.clean, project === null || project === void 0 ? void 0 : project.useCMakePresets));
            result.push(await CMakeTaskProvider.provideTask(CommandType.cleanRebuild, project === null || project === void 0 ? void 0 : project.useCMakePresets, targets));
        }
        return result;
    }
    static async provideTask(commandType, useCMakePresets, targets, presetName) {
        const taskName = localizeCommandType(commandType);
        let buildTargets;
        let preset;
        if (commandType === CommandType.build || commandType === CommandType.cleanRebuild) {
            buildTargets = targets;
        }
        if (presetName) {
            preset = presetName;
        }
        else if (useCMakePresets) {
            preset = await getDefaultPresetName(commandType);
        }
        const definition = {
            type: CMakeTaskProvider.CMakeScriptType,
            label: CMakeTaskProvider.CMakeSourceStr + ": " + taskName,
            command: commandType,
            targets: buildTargets,
            preset: preset
        };
        const task = new vscode.Task(definition, vscode.TaskScope.Workspace, taskName, CMakeTaskProvider.CMakeSourceStr, new vscode.CustomExecution(async (resolvedDefinition) => 
        // When the task is executed, this callback will run. Here, we setup for running the task.
        new CustomBuildTaskTerminal(resolvedDefinition.command, resolvedDefinition.targets, resolvedDefinition.preset, {})), []);
        task.group = (commandType === CommandType.build || commandType === CommandType.cleanRebuild) ? vscode.TaskGroup.Build : undefined;
        task.detail = localize(8, null, taskName);
        return task;
    }
    async resolveTask(task) {
        const execution = task.execution;
        if (!execution) {
            const definition = task.definition;
            const scope = vscode.TaskScope.Workspace;
            const resolvedTask = new vscode.Task(definition, scope, definition.label, CMakeTaskProvider.CMakeSourceStr, new vscode.CustomExecution(async (resolvedDefinition) => new CustomBuildTaskTerminal(resolvedDefinition.command, resolvedDefinition.targets, resolvedDefinition.preset, resolvedDefinition.options)), []);
            return resolvedTask;
        }
        return undefined;
    }
    static async resolveInternalTask(task) {
        const execution = task.execution;
        if (!execution) {
            const definition = task.definition;
            const scope = vscode.TaskScope.Workspace;
            const resolvedTask = new vscode.Task(definition, scope, definition.label, CMakeTaskProvider.CMakeSourceStr, new vscode.CustomExecution(async (resolvedDefinition) => new CustomBuildTaskTerminal(resolvedDefinition.command, resolvedDefinition.targets, resolvedDefinition.preset, resolvedDefinition.options)), []);
            return resolvedTask;
        }
        return task;
    }
    static async findBuildTask(presetName, targets, expansionOptions) {
        // Fetch all CMake task from `tasks.json` files.
        const allTasks = await vscode.tasks.fetchTasks({ type: CMakeTaskProvider.CMakeScriptType });
        const tasks = await Promise.all(allTasks.map(async (task) => {
            var _a;
            if (!task.definition.label || !task.group || (task.group && task.group.id !== vscode.TaskGroup.Build.id)) {
                return undefined;
            }
            let taskTargets;
            if (expansionOptions && task.definition.targets) {
                taskTargets = await expand.expandStrings(task.definition.targets, expansionOptions);
                if ((_a = task.definition.options) === null || _a === void 0 ? void 0 : _a.cwd) {
                    task.definition.options.cwd = await expand.expandString(task.definition.options.cwd, expansionOptions);
                }
            }
            else {
                taskTargets = task.definition.targets;
            }
            const definition = {
                type: task.definition.type,
                label: task.definition.label,
                command: task.definition.command,
                targets: taskTargets || targets,
                preset: task.definition.preset,
                options: task.definition.options
            };
            const buildTask = new vscode.Task(definition, vscode.TaskScope.Workspace, task.definition.label, CMakeTaskProvider.CMakeSourceStr);
            buildTask.detail = task.detail;
            if (task.group.isDefault) {
                buildTask.isDefault = true;
            }
            return buildTask;
        }));
        const buildTasks = tasks.filter((task) => task !== undefined);
        // No CMake Task is found.
        if (buildTasks.length === 0) {
            return undefined;
        }
        // Find tasks with a target that matches the input preset's target or the input targets
        let matchingTargetTasks;
        if (presetName) {
            matchingTargetTasks = buildTasks.filter(task => task.definition.preset === presetName);
        }
        else {
            matchingTargetTasks = buildTasks.filter(task => {
                const taskTargets = task.definition.targets || [];
                const inputTargets = targets || [];
                return taskTargets.length === inputTargets.length && taskTargets.every((item, index) => item === inputTargets[index]);
            });
        }
        if (matchingTargetTasks.length > 0) {
            // One task is found.
            if (matchingTargetTasks.length === 1) {
                return matchingTargetTasks[0];
            }
            else {
                // Search for the matching default task.
                const defaultTask = matchingTargetTasks.filter(task => task.isDefault);
                if (defaultTask.length >= 1) {
                    return defaultTask[0];
                }
                else {
                    // If there is no default task, matchingTargetTasks is a mixture of template and defined tasks.
                    // If there is only one task, that task is a template, so return the template.
                    // If there are only two tasks, the first one is always a template, and the second one is the defined task that we are searching for.
                    // But if there are more than two tasks, it means that there are multiple defiend tasks and none are set as default. So ask the user to choose one later.
                    if (matchingTargetTasks.length === 1 || matchingTargetTasks.length === 2) {
                        return matchingTargetTasks[matchingTargetTasks.length - 1];
                    }
                }
            }
        }
        // Fetch CMake task from from task provider
        matchingTargetTasks.push(await CMakeTaskProvider.provideTask(CommandType.build, undefined, targets, presetName));
        const items = matchingTargetTasks.map(task => ({ label: task.name, task: task, description: task.detail }));
        // Ask the user to pick a task.
        const selection = await vscode.window.showQuickPick(items, { placeHolder: localize(9, null) });
        return selection === null || selection === void 0 ? void 0 : selection.task;
    }
}
exports.CMakeTaskProvider = CMakeTaskProvider;
CMakeTaskProvider.CMakeScriptType = 'cmake';
CMakeTaskProvider.CMakeSourceStr = "CMake";
class CustomBuildTaskTerminal {
    constructor(command, targets, preset, options) {
        this.command = command;
        this.targets = targets;
        this.preset = preset;
        this.options = options;
        this.writeEmitter = new vscode.EventEmitter();
        this.closeEmitter = new vscode.EventEmitter();
        this._process = undefined;
    }
    get onDidWrite() {
        return this.writeEmitter.event;
    }
    get onDidClose() {
        return this.closeEmitter.event;
    }
    output(line) {
        this.writeEmitter.fire(line + endOfLine);
    }
    error(error) {
        this.writeEmitter.fire(error + endOfLine);
    }
    async open(_initialDimensions) {
        // At this point we can start using the terminal.
        switch (this.command) {
            case CommandType.config:
                await this.runConfigTask();
                break;
            case CommandType.build:
                await this.runBuildTask(CommandType.build);
                break;
            case CommandType.install:
                await this.runBuildTask(CommandType.install);
                break;
            case CommandType.test:
                await this.runTestTask();
                break;
            case CommandType.package:
                await this.runPackageTask();
                break;
            case CommandType.workflow:
                await this.runWorkflowTask();
                break;
            case CommandType.clean:
                await this.runBuildTask(CommandType.clean);
                break;
            case CommandType.cleanRebuild:
                await this.runCleanRebuildTask();
                break;
            default:
                this.writeEmitter.fire(localize(10, null, `"${this.command}"`) + endOfLine);
                this.closeEmitter.fire(-1);
                return;
        }
    }
    async close() {
        if (this._process) {
            if (this._process.child) {
                await util.termProc(this._process.child);
            }
            this._process = undefined;
        }
    }
    async correctTargets(project, commandType) {
        let targets = this.targets;
        const targetIsDefined = this.targets && this.targets.length > 0;
        const shouldIgnore = commandType !== CommandType.build;
        if (shouldIgnore && targetIsDefined) {
            this.writeEmitter.fire(localize(11, null) + endOfLine);
        }
        if (commandType === CommandType.install) {
            targets = ['install'];
        }
        else if (commandType === CommandType.clean) {
            targets = ['clean'];
        }
        else if (!shouldIgnore && !targetIsDefined && !project.useCMakePresets) {
            targets = [await project.buildTargetName() || await project.allTargetName];
        }
        return targets;
    }
    async isTaskCompatibleWithPresets(project) {
        const useCMakePresets = project.useCMakePresets;
        const presetDefined = this.preset !== undefined && this.preset !== null;
        const isNotCompatible = !useCMakePresets && presetDefined;
        if (!isNotCompatible) {
            return true;
        }
        const change = localize(12, null);
        const ignore = localize(13, null);
        /** We don't want to await on this error message,
         * because if the user decides to change the settings, the task needs to re-run for the new settings to be effective.
         **/
        void vscode.window.showErrorMessage(localize(14, null), change, ignore).then((selection) => {
            if (selection === change) {
                const config = vscode.workspace.getConfiguration();
                if (config) {
                    const newValue = (presetDefined) ? 'always' : 'never';
                    void config.update("cmake.useCMakePresets", newValue);
                }
            }
        });
        this.writeEmitter.fire(localize(15, null) + endOfLine);
        this.closeEmitter.fire(-1);
        return false;
    }
    async resolvePresetName(preset, useCMakePresets, commandType) {
        if (preset !== undefined) {
            return preset;
        }
        return useCMakePresets ? getDefaultPresetName(commandType, true) : undefined;
    }
    getActiveProject() {
        const project = (0, extension_1.getActiveProject)();
        if (!project) {
            log.debug(localize(16, null));
            this.writeEmitter.fire(localize(17, null) + endOfLine);
            this.closeEmitter.fire(-1);
        }
        return project;
    }
    async runConfigTask() {
        this.writeEmitter.fire(localize(18, null) + endOfLine);
        const project = this.getActiveProject();
        if (!project || !await this.isTaskCompatibleWithPresets(project)) {
            return;
        }
        telemetry.logEvent("task", { taskType: "configure", useCMakePresets: String(project.useCMakePresets) });
        await this.correctTargets(project, CommandType.config);
        const cmakeDriver = (await (project === null || project === void 0 ? void 0 : project.getCMakeDriverInstance())) || undefined;
        if (cmakeDriver) {
            if (project.useCMakePresets && cmakeDriver.config.configureOnEdit) {
                log.debug(localize(19, null));
            }
            this.preset = await this.resolvePresetName(this.preset, project.useCMakePresets, CommandType.config);
            const configPreset = await (project === null || project === void 0 ? void 0 : project.expandConfigPresetbyName(this.preset));
            const result = await cmakeDriver.configure(cmakeProject_1.ConfigureTrigger.taskProvider, [], this, undefined, false, false, configPreset, this.options);
            if (result === undefined || result === null) {
                this.writeEmitter.fire(localize(20, null) + endOfLine);
                this.closeEmitter.fire(-1);
            }
            else {
                this.writeEmitter.fire(localize(21, null, result.result) + endOfLine);
                this.closeEmitter.fire(result.result);
            }
        }
        else {
            log.debug(localize(22, null));
            this.writeEmitter.fire(localize(23, null) + endOfLine);
            this.closeEmitter.fire(-1);
        }
    }
    async runBuildTask(commandType, doCloseEmitter = true, generateLog = true, project) {
        var _a, _b;
        let targets = this.targets;
        const taskName = localizeCommandType(commandType);
        let fullCommand;
        let args = [];
        if (!project) {
            project = this.getActiveProject();
            if (!project || !await this.isTaskCompatibleWithPresets(project)) {
                return -1;
            }
        }
        if (generateLog) {
            telemetry.logEvent("task", { taskType: commandType, useCMakePresets: String(project.useCMakePresets) });
        }
        targets = await this.correctTargets(project, commandType);
        const cmakeDriver = (await (project === null || project === void 0 ? void 0 : project.getCMakeDriverInstance())) || undefined;
        let cmakePath;
        if (cmakeDriver) {
            cmakePath = cmakeDriver.getCMakeCommand();
            if (!this.options) {
                this.options = {};
            }
            this.preset = await this.resolvePresetName(this.preset, project.useCMakePresets, CommandType.build);
            if (this.preset) {
                const buildPreset = await (project === null || project === void 0 ? void 0 : project.expandBuildPresetbyName(this.preset));
                if (!buildPreset) {
                    log.debug(localize(24, null));
                    this.writeEmitter.fire(localize(25, null, this.preset, taskName) + endOfLine);
                    if (doCloseEmitter) {
                        this.closeEmitter.fire(-1);
                    }
                    return -1;
                }
                fullCommand = await cmakeDriver.generateBuildCommandFromPreset(buildPreset, targets);
                if (fullCommand) {
                    cmakePath = fullCommand.command;
                    args = fullCommand.args || [];
                    this.options.environment = environmentVariables_1.EnvironmentUtils.merge([fullCommand.build_env, this.options.environment], { preserveNull: true });
                }
            }
            else {
                fullCommand = await cmakeDriver.generateBuildCommandFromSettings(targets);
                if (fullCommand) {
                    cmakePath = fullCommand.command;
                    args = fullCommand.args ? fullCommand.args : [];
                    this.options.environment = environmentVariables_1.EnvironmentUtils.merge([fullCommand.build_env, this.options.environment]);
                }
            }
        }
        else {
            log.debug(localize(26, null));
            this.writeEmitter.fire(localize(27, null, taskName) + endOfLine);
            if (doCloseEmitter) {
                this.closeEmitter.fire(-1);
            }
            return -1;
        }
        this.writeEmitter.fire(localize(28, null, taskName) + endOfLine);
        this.writeEmitter.fire(proc.buildCmdStr(cmakePath, args) + endOfLine);
        try {
            this._process = proc.execute(cmakePath, args, this, this.options);
            const result = await this._process.result;
            this._process = undefined;
            if (result.retc) {
                this.writeEmitter.fire(localize(29, null, taskName) + endOfLine);
            }
            else if (result.stderr || (result.stdout && result.stdout.includes(": warning"))) {
                this.writeEmitter.fire(localize(30, null, taskName) + endOfLine);
            }
            else {
                this.writeEmitter.fire(localize(31, null, taskName) + endOfLine);
            }
            if (doCloseEmitter) {
                this.closeEmitter.fire((_a = result.retc) !== null && _a !== void 0 ? _a : 0);
            }
            return (_b = result.retc) !== null && _b !== void 0 ? _b : 0;
        }
        catch (_c) {
            this.writeEmitter.fire(localize(32, null, taskName) + endOfLine);
            if (doCloseEmitter) {
                this.closeEmitter.fire(-1);
            }
            return -1;
        }
    }
    async runTestTask() {
        this.writeEmitter.fire(localize(33, null) + endOfLine);
        const project = this.getActiveProject();
        if (!project || !await this.isTaskCompatibleWithPresets(project)) {
            return;
        }
        telemetry.logEvent("task", { taskType: "test", useCMakePresets: String(project.useCMakePresets) });
        await this.correctTargets(project, CommandType.test);
        const cmakeDriver = (await (project === null || project === void 0 ? void 0 : project.getCMakeDriverInstance())) || undefined;
        if (cmakeDriver) {
            let testPreset;
            this.preset = await this.resolvePresetName(this.preset, project.useCMakePresets, CommandType.test);
            if (this.preset) {
                testPreset = await (project === null || project === void 0 ? void 0 : project.expandTestPresetbyName(this.preset));
                if (!testPreset) {
                    log.debug(localize(34, null));
                    this.writeEmitter.fire(localize(35, null, this.preset) + endOfLine);
                    this.closeEmitter.fire(-1);
                    return;
                }
            }
            const result = cmakeDriver ? await (project === null || project === void 0 ? void 0 : project.runCTestCustomized(cmakeDriver, testPreset, this)) : undefined;
            if (result === undefined) {
                this.writeEmitter.fire(localize(36, null) + endOfLine);
                this.closeEmitter.fire(-1);
            }
            else {
                this.writeEmitter.fire(localize(37, null) + endOfLine);
                this.closeEmitter.fire(0);
            }
        }
        else {
            log.debug(localize(38, null));
            this.writeEmitter.fire(localize(39, null) + endOfLine);
            this.closeEmitter.fire(-1);
        }
    }
    async runPackageTask() {
        this.writeEmitter.fire(localize(40, null) + endOfLine);
        const project = this.getActiveProject();
        if (!project || !await this.isTaskCompatibleWithPresets(project)) {
            return;
        }
        telemetry.logEvent("task", { taskType: "package", useCMakePresets: String(project.useCMakePresets) });
        await this.correctTargets(project, CommandType.package);
        const cmakeDriver = (await (project === null || project === void 0 ? void 0 : project.getCMakeDriverInstance())) || undefined;
        if (cmakeDriver) {
            let packagePreset;
            this.preset = await this.resolvePresetName(this.preset, project.useCMakePresets, CommandType.package);
            if (this.preset) {
                packagePreset = await (project === null || project === void 0 ? void 0 : project.expandPackagePresetbyName(this.preset));
                if (!packagePreset) {
                    log.debug(localize(41, null));
                    this.writeEmitter.fire(localize(42, null, this.preset) + endOfLine);
                    this.closeEmitter.fire(-1);
                    return;
                }
            }
            const result = cmakeDriver ? await (project === null || project === void 0 ? void 0 : project.runCPack(cmakeDriver, packagePreset, this)) : undefined;
            if (result === undefined) {
                this.writeEmitter.fire(localize(43, null) + endOfLine);
                this.closeEmitter.fire(-1);
            }
            else {
                this.writeEmitter.fire(localize(44, null) + endOfLine);
                this.closeEmitter.fire(0);
            }
        }
        else {
            log.debug(localize(45, null));
            this.writeEmitter.fire(localize(46, null) + endOfLine);
            this.closeEmitter.fire(-1);
        }
    }
    async runWorkflowTask() {
        this.writeEmitter.fire(localize(47, null) + endOfLine);
        const project = this.getActiveProject();
        if (!project || !await this.isTaskCompatibleWithPresets(project)) {
            return;
        }
        telemetry.logEvent("task", { taskType: "workflow", useCMakePresets: String(project.useCMakePresets) });
        await this.correctTargets(project, CommandType.workflow); // ?????
        const cmakeDriver = (await (project === null || project === void 0 ? void 0 : project.getCMakeDriverInstance())) || undefined;
        if (cmakeDriver) {
            let workflowPreset;
            this.preset = await this.resolvePresetName(this.preset, project.useCMakePresets, CommandType.workflow);
            if (this.preset) {
                workflowPreset = await (project === null || project === void 0 ? void 0 : project.expandWorkflowPresetbyName(this.preset));
                if (!workflowPreset) {
                    log.debug(localize(48, null));
                    this.writeEmitter.fire(localize(49, null, this.preset) + endOfLine);
                    this.closeEmitter.fire(-1);
                    return;
                }
            }
            const result = cmakeDriver ? await (project === null || project === void 0 ? void 0 : project.runWorkflow(cmakeDriver, workflowPreset, this)) : undefined;
            if (result === undefined) {
                this.writeEmitter.fire(localize(50, null) + endOfLine);
                this.closeEmitter.fire(-1);
            }
            else {
                this.writeEmitter.fire(localize(51, null) + endOfLine);
                this.closeEmitter.fire(0);
            }
        }
        else {
            log.debug(localize(52, null));
            this.writeEmitter.fire(localize(53, null) + endOfLine);
            this.closeEmitter.fire(-1);
        }
    }
    async runCleanRebuildTask() {
        const project = this.getActiveProject();
        if (!project || !await this.isTaskCompatibleWithPresets(project)) {
            return;
        }
        telemetry.logEvent("task", { taskType: "cleanRebuild", useCMakePresets: String(project.useCMakePresets) });
        const cleanResult = await this.runBuildTask(CommandType.clean, false, false, project);
        if (cleanResult === 0) {
            await this.runBuildTask(CommandType.build, true, false, project);
        }
        else {
            this.closeEmitter.fire(cleanResult);
        }
    }
}
exports.CustomBuildTaskTerminal = CustomBuildTaskTerminal;
exports.cmakeTaskProvider = new CMakeTaskProvider();


/***/ }),

/***/ 87630:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.setCMakeDebuggerAvailableContext = exports.getCMakeExecutableInformation = void 0;
const proc = __webpack_require__(3477);
const util = __webpack_require__(16182);
const extension_1 = __webpack_require__(12406);
const cmakeInfo = new Map();
async function getCMakeExecutableInformation(path) {
    var _a, _b, _c, _d;
    const cmake = {
        path,
        isPresent: false,
        minimalServerModeVersion: util.parseVersion('3.7.1'),
        minimalFileApiModeVersion: util.parseVersion('3.14.0')
    };
    // The check for 'path' seems unnecessary, but crash logs tell us otherwise. It is not clear
    // what causes 'path' to be undefined here.
    if (path && path.length !== 0) {
        const normalizedPath = util.platformNormalizePath(path);
        if (cmakeInfo.has(normalizedPath)) {
            const cmakeExe = cmakeInfo.get(normalizedPath);
            await setCMakeDebuggerAvailableContext((_b = (_a = cmakeExe.isDebuggerSupported) === null || _a === void 0 ? void 0 : _a.valueOf()) !== null && _b !== void 0 ? _b : false);
            return cmakeExe;
        }
        try {
            const execVersion = await proc.execute(path, ['--version']).result;
            if (execVersion.retc === 0 && execVersion.stdout) {
                console.assert(execVersion.stdout);
                const regexVersion = /cmake.* version (.*?)\r?\n/;
                cmake.version = util.parseVersion(regexVersion.exec(execVersion.stdout)[1]);
                // We purposefully exclude versions <3.7.1, which have some major CMake
                // server bugs
                cmake.isServerModeSupported = util.versionGreater(cmake.version, cmake.minimalServerModeVersion);
                // Support for new file based API, it replace the server mode
                cmake.isFileApiModeSupported = util.versionGreaterOrEquals(cmake.version, cmake.minimalFileApiModeVersion);
                cmake.isPresent = true;
            }
            const debuggerPresent = await proc.execute(path, ['-E', 'capabilities']).result;
            if (debuggerPresent.retc === 0 && debuggerPresent.stdout) {
                console.assert(debuggerPresent.stdout);
                const stdoutJson = JSON.parse(debuggerPresent.stdout);
                cmake.isDebuggerSupported = stdoutJson["debugger"];
                await setCMakeDebuggerAvailableContext((_d = (_c = cmake.isDebuggerSupported) === null || _c === void 0 ? void 0 : _c.valueOf()) !== null && _d !== void 0 ? _d : false);
            }
        }
        catch (_e) {
        }
        cmakeInfo.set(normalizedPath, cmake);
    }
    return cmake;
}
exports.getCMakeExecutableInformation = getCMakeExecutableInformation;
async function setCMakeDebuggerAvailableContext(value) {
    await (0, extension_1.setContextAndStore)("cmake:cmakeDebuggerAvailable", value);
}
exports.setCMakeDebuggerAvailableContext = setCMakeDebuggerAvailableContext;


/***/ }),

/***/ 54955:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getWindowsCodepage = exports.getCodePageTable = void 0;
const logging_1 = __webpack_require__(71067);
const nls = __webpack_require__(33463);
nls.config({ messageFormat: nls.MessageFormat.bundle, bundleFormat: nls.BundleFormat.standalone })((__webpack_require__(71017).join)(__dirname, 'src\\codePageTable.ts'));
const localize = nls.loadMessageBundle((__webpack_require__(71017).join)(__dirname, 'src\\codePageTable.ts'));
const log = (0, logging_1.createLogger)('code-pages');
function getCodePageTable() {
    return {
        [37]: 'IBM037',
        [437]: 'IBM437',
        [500]: 'IBM500',
        [708]: 'ASMO-708',
        [709]: '',
        [710]: '',
        [720]: 'DOS-720',
        [737]: 'ibm737',
        [775]: 'ibm775',
        [850]: 'ibm850',
        [852]: 'ibm852',
        [855]: 'IBM855',
        [857]: 'ibm857',
        [858]: 'IBM00858',
        [860]: 'IBM860',
        [861]: 'ibm861',
        [862]: 'DOS-862',
        [863]: 'IBM863',
        [864]: 'IBM864',
        [865]: 'IBM865',
        [866]: 'cp866',
        [869]: 'ibm869',
        [870]: 'IBM870',
        [874]: 'windows-874',
        [875]: 'cp875',
        [932]: 'shift_jis',
        [936]: 'gb2312',
        [949]: 'ks_c_5601-1987',
        [950]: 'big5',
        [1026]: 'IBM1026',
        [1047]: 'IBM01047',
        [1140]: 'IBM01140',
        [1141]: 'IBM01141',
        [1142]: 'IBM01142',
        [1143]: 'IBM01143',
        [1144]: 'IBM01144',
        [1145]: 'IBM01145',
        [1146]: 'IBM01146',
        [1147]: 'IBM01147',
        [1148]: 'IBM01148',
        [1149]: 'IBM01149',
        [1200]: 'utf-16',
        [1201]: 'unicodeFFFE',
        [1250]: 'windows-1250',
        [1251]: 'windows-1251',
        [1252]: 'windows-1252',
        [1253]: 'windows-1253',
        [1254]: 'windows-1254',
        [1255]: 'windows-1255',
        [1256]: 'windows-1256',
        [1257]: 'windows-1257',
        [1258]: 'windows-1258',
        [1361]: 'Johab',
        [10000]: 'macintosh',
        [10001]: 'x-mac-japanese',
        [10002]: 'x-mac-chinesetrad',
        [10003]: 'x-mac-korean',
        [10004]: 'x-mac-arabic',
        [10005]: 'x-mac-hebrew',
        [10006]: 'x-mac-greek',
        [10007]: 'x-mac-cyrillic',
        [10008]: 'x-mac-chinesesimp',
        [10010]: 'x-mac-romanian',
        [10017]: 'x-mac-ukrainian',
        [10021]: 'x-mac-thai',
        [10029]: 'x-mac-ce',
        [10079]: 'x-mac-icelandic',
        [10081]: 'x-mac-turkish',
        [10082]: 'x-mac-croatian',
        [12000]: 'utf-32',
        [12001]: 'utf-32BE',
        [20000]: 'x-Chinese_CNS',
        [20001]: 'x-cp20001',
        [20002]: 'x_Chinese-Eten',
        [20003]: 'x-cp20003',
        [20004]: 'x-cp20004',
        [20005]: 'x-cp20005',
        [20105]: 'x-IA5',
        [20106]: 'x-IA5-German',
        [20107]: 'x-IA5-Swedish',
        [20108]: 'x-IA5-Norwegian',
        [20127]: 'us-ascii',
        [20261]: 'x-cp20261',
        [20269]: 'x-cp20269',
        [20273]: 'IBM273',
        [20277]: 'IBM277',
        [20278]: 'IBM278',
        [20280]: 'IBM280',
        [20284]: 'IBM284',
        [20285]: 'IBM285',
        [20290]: 'IBM290',
        [20297]: 'IBM297',
        [20420]: 'IBM420',
        [20423]: 'IBM423',
        [20424]: 'IBM424',
        [20833]: 'x-EBCDIC-KoreanExtended',
        [20838]: 'IBM-Thai',
        [20866]: 'koi8-r',
        [20871]: 'IBM871',
        [20880]: 'IBM880',
        [20905]: 'IBM905',
        [20924]: 'IBM00924',
        [20932]: 'EUC-JP',
        [20936]: 'x-cp20936',
        [20949]: 'x-cp20949',
        [21025]: 'cp1025',
        [21027]: '',
        [21866]: 'koi8-u',
        [28591]: 'iso-8859-1',
        [28592]: 'iso-8859-2',
        [28593]: 'iso-8859-3',
        [28594]: 'iso-8859-4',
        [28595]: 'iso-8859-5',
        [28596]: 'iso-8859-6',
        [28597]: 'iso-8859-7',
        [28598]: 'iso-8859-8',
        [28599]: 'iso-8859-9',
        [28603]: 'iso-8859-13',
        [28605]: 'iso-8859-15',
        [29001]: 'x-Europa',
        [38598]: 'iso-8859-8-i',
        [50220]: 'iso-2022-jp',
        [50221]: 'csISO2022JP',
        [50222]: 'iso-2022-jp',
        [50225]: 'iso-2022-kr',
        [50227]: 'x-cp50227',
        [50229]: '',
        [50930]: '',
        [50931]: '',
        [50933]: '',
        [50935]: '',
        [50936]: '',
        [50937]: '',
        [50939]: '',
        [51932]: 'euc-jp',
        [51936]: 'EUC-CN',
        [51949]: 'euc-kr',
        [51950]: '',
        [52936]: 'hz-gb-2312',
        [54936]: 'GB18030',
        [57002]: 'x-iscii-de',
        [57003]: 'x-iscii-be',
        [57004]: 'x-iscii-ta',
        [57005]: 'x-iscii-te',
        [57006]: 'x-iscii-as',
        [57007]: 'x-iscii-or',
        [57008]: 'x-iscii-ka',
        [57009]: 'x-iscii-ma',
        [57010]: 'x-iscii-gu',
        [57011]: 'x-iscii-pa',
        [65000]: 'utf-7',
        [65001]: 'utf-8'
    };
}
exports.getCodePageTable = getCodePageTable;
/**
 * A promise for idempotent codepage aquisition. @see getWindowsCodepage
 */
let codePage;
/**
 * Return the currently active Windows codepage (done by calling chcp in a subprocess');
 */
function getWindowsCodepage() {
    // Check if we have been called before
    if (codePage === undefined) {
        // If not, set the promise
        codePage = getWindowsActiveCodePage();
    }
    // Return that promise
    return codePage;
}
exports.getWindowsCodepage = getWindowsCodepage;
/**
 * Do the actual call to `chcp` to get the currently active codepage
 */
async function getWindowsActiveCodePage() {
    var _a;
    const proc = await Promise.resolve().then(() => __webpack_require__(3477));
    const chcpResult = await proc.execute('chcp', []).result;
    if (chcpResult.retc !== 0) {
        log.error(localize(0, null, "chcp"), chcpResult.stderr);
        return 'utf-8';
    }
    const numberString = ((_a = chcpResult.stdout) !== null && _a !== void 0 ? _a : '').replace(/[^0-9]/ig, '');
    const codePageNumber = parseInt(numberString);
    return getCodePageTable()[codePageNumber] || 'utf-8';
}


/***/ }),

/***/ 5236:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CompilationDatabase = void 0;
const shlex = __webpack_require__(64913);
const logging_1 = __webpack_require__(71067);
const pr_1 = __webpack_require__(72502);
const util = __webpack_require__(16182);
const nls = __webpack_require__(33463);
nls.config({ messageFormat: nls.MessageFormat.bundle, bundleFormat: nls.BundleFormat.standalone })((__webpack_require__(71017).join)(__dirname, 'src\\compilationDatabase.ts'));
const localize = nls.loadMessageBundle((__webpack_require__(71017).join)(__dirname, 'src\\compilationDatabase.ts'));
const log = (0, logging_1.createLogger)('compdb');
class CompilationDatabase {
    constructor(infos) {
        this.infoByFilePath = infos.reduce((acc, cur) => acc.set(util.platformNormalizePath(cur.file), {
            directory: cur.directory,
            file: cur.file,
            output: cur.output,
            command: cur.command,
            arguments: cur.arguments ? cur.arguments : [...shlex.split(cur.command)]
        }), new Map());
    }
    get(fsPath) {
        return this.infoByFilePath.get(util.platformNormalizePath(fsPath));
    }
    static async fromFilePaths(databasePaths) {
        const database = [];
        for (const path of databasePaths) {
            if (!await pr_1.fs.exists(path)) {
                continue;
            }
            const fileContent = await pr_1.fs.readFile(path);
            try {
                const content = JSON.parse(fileContent.toString());
                database.push(...content);
            }
            catch (e) {
                log.warning(localize(0, null, `"${path}"`, util.errorToString(e)));
                return null;
            }
        }
        if (database.length > 0) {
            return new CompilationDatabase(database);
        }
        return null;
    }
    static toJson(database) {
        if (database === null) {
            return '[]';
        }
        return JSON.stringify([...database.infoByFilePath.values()].map(({ file, command, directory }) => ({ file, command, directory })));
    }
}
exports.CompilationDatabase = CompilationDatabase;


/***/ }),

/***/ 62498:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/**
 * Provides a typed interface to CMake Tools' configuration options. You'll want
 * to import the `config` default export, which is an instance of the
 * `ConfigurationReader` class.
 */ /** */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.checkGeneralEnvironmentOverridesPresent = exports.checkPackageOverridesPresent = exports.checkTestOverridesPresent = exports.checkBuildOverridesPresent = exports.checkConfigureOverridesPresent = exports.getSettingsChangePromise = exports.ConfigurationReader = exports.defaultNumJobs = void 0;
const logging = __webpack_require__(71067);
const util = __webpack_require__(16182);
const os = __webpack_require__(22037);
const telemetry = __webpack_require__(21818);
const vscode = __webpack_require__(89496);
const nls = __webpack_require__(33463);
nls.config({ messageFormat: nls.MessageFormat.bundle, bundleFormat: nls.BundleFormat.standalone })((__webpack_require__(71017).join)(__dirname, 'src\\config.ts'));
const localize = nls.loadMessageBundle((__webpack_require__(71017).join)(__dirname, 'src\\config.ts'));
function defaultNumJobs() {
    return os.cpus().length + 2;
}
exports.defaultNumJobs = defaultNumJobs;
const log = logging.createLogger('config');
/**
 * This class exposes a number of readonly properties which can be used to
 * access configuration options. Each property corresponds to a value in
 * `settings.json`. See `package.json` for CMake Tools to see the information
 * on each property. An underscore in a property name corresponds to a dot `.`
 * in the setting name.
 */
class ConfigurationReader {
    constructor(configData) {
        this.configData = configData;
        this.emitters = {
            autoSelectActiveFolder: new vscode.EventEmitter(),
            cmakePath: new vscode.EventEmitter(),
            buildDirectory: new vscode.EventEmitter(),
            installPrefix: new vscode.EventEmitter(),
            sourceDirectory: new vscode.EventEmitter(),
            saveBeforeBuild: new vscode.EventEmitter(),
            buildBeforeRun: new vscode.EventEmitter(),
            clearOutputBeforeBuild: new vscode.EventEmitter(),
            configureSettings: new vscode.EventEmitter(),
            cacheInit: new vscode.EventEmitter(),
            preferredGenerators: new vscode.EventEmitter(),
            generator: new vscode.EventEmitter(),
            toolset: new vscode.EventEmitter(),
            platform: new vscode.EventEmitter(),
            configureArgs: new vscode.EventEmitter(),
            buildArgs: new vscode.EventEmitter(),
            buildToolArgs: new vscode.EventEmitter(),
            parallelJobs: new vscode.EventEmitter(),
            ctestPath: new vscode.EventEmitter(),
            cpackPath: new vscode.EventEmitter(),
            ctest: new vscode.EventEmitter(),
            parseBuildDiagnostics: new vscode.EventEmitter(),
            enabledOutputParsers: new vscode.EventEmitter(),
            debugConfig: new vscode.EventEmitter(),
            defaultVariants: new vscode.EventEmitter(),
            ctestArgs: new vscode.EventEmitter(),
            ctestDefaultArgs: new vscode.EventEmitter(),
            cpackArgs: new vscode.EventEmitter(),
            environment: new vscode.EventEmitter(),
            configureEnvironment: new vscode.EventEmitter(),
            buildEnvironment: new vscode.EventEmitter(),
            testEnvironment: new vscode.EventEmitter(),
            cpackEnvironment: new vscode.EventEmitter(),
            mingwSearchDirs: new vscode.EventEmitter(),
            additionalCompilerSearchDirs: new vscode.EventEmitter(),
            emscriptenSearchDirs: new vscode.EventEmitter(),
            mergedCompileCommands: new vscode.EventEmitter(),
            copyCompileCommands: new vscode.EventEmitter(),
            loadCompileCommands: new vscode.EventEmitter(),
            configureOnOpen: new vscode.EventEmitter(),
            configureOnEdit: new vscode.EventEmitter(),
            skipConfigureIfCachePresent: new vscode.EventEmitter(),
            useCMakeServer: new vscode.EventEmitter(),
            cmakeCommunicationMode: new vscode.EventEmitter(),
            showSystemKits: new vscode.EventEmitter(),
            ignoreKitEnv: new vscode.EventEmitter(),
            buildTask: new vscode.EventEmitter(),
            outputLogEncoding: new vscode.EventEmitter(),
            enableTraceLogging: new vscode.EventEmitter(),
            loggingLevel: new vscode.EventEmitter(),
            additionalKits: new vscode.EventEmitter(),
            touchbar: new vscode.EventEmitter(),
            showOptionsMovedNotification: new vscode.EventEmitter(),
            options: new vscode.EventEmitter(),
            useCMakePresets: new vscode.EventEmitter(),
            allowCommentsInPresetsFile: new vscode.EventEmitter(),
            allowUnsupportedPresetsVersions: new vscode.EventEmitter(),
            ignoreCMakeListsMissing: new vscode.EventEmitter(),
            launchBehavior: new vscode.EventEmitter(),
            automaticReconfigure: new vscode.EventEmitter(),
            pinnedCommands: new vscode.EventEmitter()
        };
    }
    dispose() {
        if (this.updateSubscription) {
            this.updateSubscription.dispose();
        }
    }
    /**
     * Get a configuration object relevant to the given workspace directory. This
     * supports multiple workspaces having differing configs.
     *
     * @param folder A directory to use for the config
     */
    static create(folder) {
        const configData = ConfigurationReader.loadConfig(folder);
        const reader = new ConfigurationReader(configData);
        reader.updateSubscription = vscode.workspace.onDidChangeConfiguration(e => {
            if (e.affectsConfiguration('cmake', folder === null || folder === void 0 ? void 0 : folder.uri)) {
                const newConfigData = ConfigurationReader.loadConfig(folder);
                const updatedKeys = reader.update(newConfigData);
                if (updatedKeys.length > 0) {
                    const telemetryProperties = {
                        isSet: updatedKeys.join(";")
                    };
                    telemetry.logEvent("settings", telemetryProperties);
                }
            }
        });
        return reader;
    }
    static loadConfig(folder) {
        const configData = vscode.workspace.getConfiguration('cmake', folder === null || folder === void 0 ? void 0 : folder.uri);
        const platformMap = {
            win32: 'windows',
            darwin: 'osx',
            linux: 'linux'
        };
        const platform = platformMap[process.platform];
        const forPlatform = configData[platform];
        return Object.assign(Object.assign({}, configData), (forPlatform || {}));
    }
    update(newConfigData) {
        return this.updatePartial(newConfigData);
    }
    updatePartial(newConfigData, fireEvent = true) {
        const keys = [];
        const oldValues = Object.assign({}, this.configData);
        Object.assign(this.configData, newConfigData);
        for (const keyObject of Object.getOwnPropertyNames(newConfigData)) {
            const key = keyObject;
            if (!(key in this.emitters)) {
                continue; // Extension config we load has some additional properties we don't care about.
            }
            const newValue = this.configData[key];
            const oldValue = oldValues[key];
            if (util.compare(newValue, oldValue) !== util.Ordering.Equivalent) {
                if (fireEvent) {
                    const em = this.emitters[key];
                    // The key is defined by this point.
                    const temp = newConfigData[key];
                    if (temp !== undefined) {
                        em.fire(temp);
                    }
                }
                keys.push(key);
            }
        }
        return keys;
    }
    get autoSelectActiveFolder() {
        return this.configData.autoSelectActiveFolder;
    }
    buildDirectory(multiProject, workspaceFolder) {
        if (multiProject && this.isDefaultValue('buildDirectory', workspaceFolder)) {
            return '${sourceDirectory}/build';
        }
        return this.configData.buildDirectory;
    }
    get installPrefix() {
        return this.configData.installPrefix;
    }
    get sourceDirectory() {
        if (!Array.isArray(this.configData.sourceDirectory)) {
            return [this.configData.sourceDirectory];
        }
        else {
            return this.configData.sourceDirectory;
        }
    }
    get saveBeforeBuild() {
        return !!this.configData.saveBeforeBuild;
    }
    get buildBeforeRun() {
        return this.configData.buildBeforeRun;
    }
    get clearOutputBeforeBuild() {
        return !!this.configData.clearOutputBeforeBuild;
    }
    get configureSettings() {
        return this.configData.configureSettings;
    }
    get cacheInit() {
        return this.configData.cacheInit;
    }
    get preferredGenerators() {
        return this.configData.preferredGenerators;
    }
    get generator() {
        return this.configData.generator;
    }
    get toolset() {
        return this.configData.toolset;
    }
    get platform() {
        return this.configData.platform;
    }
    get configureArgs() {
        return this.configData.configureArgs;
    }
    get buildArgs() {
        return this.configData.buildArgs;
    }
    get buildToolArgs() {
        return this.configData.buildToolArgs;
    }
    get parallelJobs() {
        return this.configData.parallelJobs;
    }
    get ctestParallelJobs() {
        return this.configData.ctest.parallelJobs;
    }
    get ctestAllowParallelJobs() {
        return this.configData.ctest.allowParallelJobs;
    }
    get testExplorerIntegrationEnabled() {
        return this.configData.ctest.testExplorerIntegrationEnabled;
    }
    get parseBuildDiagnostics() {
        return !!this.configData.parseBuildDiagnostics;
    }
    get enableOutputParsers() {
        return this.configData.enabledOutputParsers;
    }
    get pinnedCommands() {
        return this.configData.pinnedCommands;
    }
    get rawCMakePath() {
        return this.configData.cmakePath;
    }
    get rawCTestPath() {
        return this.configData.ctestPath;
    }
    get rawCPackPath() {
        return this.configData.cpackPath;
    }
    get debugConfig() {
        return this.configData.debugConfig;
    }
    get environment() {
        return this.configData.environment;
    }
    get configureEnvironment() {
        return this.configData.configureEnvironment;
    }
    get buildEnvironment() {
        return this.configData.buildEnvironment;
    }
    get testEnvironment() {
        return this.configData.testEnvironment;
    }
    get defaultVariants() {
        return this.configData.defaultVariants;
    }
    get ctestArgs() {
        return this.configData.ctestArgs;
    }
    get ctestDefaultArgs() {
        return this.configData.ctestDefaultArgs;
    }
    get cpackEnvironment() {
        return this.configData.cpackEnvironment;
    }
    get cpackArgs() {
        return this.configData.cpackArgs;
    }
    get configureOnOpen() {
        if (util.isCodespaces() && this.configData.configureOnOpen === null) {
            return true;
        }
        return this.configData.configureOnOpen;
    }
    get configureOnEdit() {
        return this.configData.configureOnEdit;
    }
    get skipConfigureIfCachePresent() {
        return this.configData.skipConfigureIfCachePresent;
    }
    get useCMakeServer() {
        return this.configData.useCMakeServer;
    }
    /**
     * Use folder.useCMakePresets() to check the actual decision on if we are using CMake presets.
     */
    get useCMakePresets() {
        return this.configData.useCMakePresets;
    }
    get allowCommentsInPresetsFile() {
        return this.configData.allowCommentsInPresetsFile;
    }
    get allowUnsupportedPresetsVersions() {
        return this.configData.allowUnsupportedPresetsVersions;
    }
    get ignoreCMakeListsMissing() {
        return this.configData.ignoreCMakeListsMissing;
    }
    get cmakeCommunicationMode() {
        let communicationMode = this.configData.cmakeCommunicationMode;
        if (communicationMode === "automatic" && this.useCMakeServer) {
            log.warning(localize(0, null, '"useCMakeServer"', '"cmakeCommunicationMode"'));
            communicationMode = 'serverApi';
        }
        return communicationMode;
    }
    get numJobs() {
        if (this.parallelJobs === undefined) {
            return undefined;
        }
        else if (this.parallelJobs === 0) {
            return defaultNumJobs();
        }
        else {
            return this.parallelJobs;
        }
    }
    get numCTestJobs() {
        const ctestJobs = this.ctestParallelJobs;
        if (!ctestJobs) {
            return this.numJobs || defaultNumJobs();
        }
        return ctestJobs;
    }
    get additionalCompilerSearchDirs() {
        // mingwSearchDirs is deprecated, but we still use it if additionalCompilerSearchDirs is not set for backwards compatibility
        if (this.configData.additionalCompilerSearchDirs.length === 0 && this.configData.mingwSearchDirs.length > 0) {
            log.warning(localize(1, null, '"mingwSearchDirs"', '"additionalCompilerSearchDirs"'));
            return this.configData.mingwSearchDirs;
        }
        return this.configData.additionalCompilerSearchDirs;
    }
    get additionalKits() {
        return this.configData.additionalKits;
    }
    get emscriptenSearchDirs() {
        return this.configData.emscriptenSearchDirs;
    }
    get mergedCompileCommands() {
        return this.configData.mergedCompileCommands;
    }
    get copyCompileCommands() {
        return this.configData.copyCompileCommands;
    }
    get loadCompileCommands() {
        return this.configData.loadCompileCommands;
    }
    get showSystemKits() {
        return this.configData.showSystemKits;
    }
    get ignoreKitEnv() {
        return this.configData.ignoreKitEnv;
    }
    get buildTask() {
        return this.configData.buildTask;
    }
    get outputLogEncoding() {
        return this.configData.outputLogEncoding;
    }
    get enableTraceLogging() {
        return this.configData.enableTraceLogging;
    }
    get loggingLevel() {
        if (process.env['CMT_LOGGING_LEVEL']) {
            return process.env['CMT_LOGGING_LEVEL'];
        }
        return this.configData.loggingLevel;
    }
    get touchbar() {
        return this.configData.touchbar;
    }
    get options() {
        return this.configData.options;
    }
    get launchBehavior() {
        return this.configData.launchBehavior;
    }
    get automaticReconfigure() {
        return this.configData.automaticReconfigure;
    }
    /**
     * Watch for changes on a particular setting
     * @param setting The name of the setting to watch
     * @param cb A callback when the setting changes
     */
    onChange(setting, cb) {
        // Can't use vscode.EventEmitter<ExtensionConfigurationSettings[K]> here, potentially because K and keyof ExtensionConfigurationSettings
        // may not be the same...
        const emitter = this.emitters[setting];
        const awaitableCallback = (value) => {
            activeChangeEvents.scheduleAndTrackTask(() => cb(value));
        };
        return emitter.event(awaitableCallback);
    }
    isDefaultValue(setting, configurationScope) {
        const settings = vscode.workspace.getConfiguration('cmake', configurationScope);
        const value = settings.inspect(setting);
        return (value === null || value === void 0 ? void 0 : value.globalValue) === undefined && (value === null || value === void 0 ? void 0 : value.workspaceValue) === undefined && (value === null || value === void 0 ? void 0 : value.workspaceFolderValue) === undefined;
    }
    getSettingsChangePromise() {
        return activeChangeEvents.getAwaiter();
    }
}
exports.ConfigurationReader = ConfigurationReader;
/**
 * Tracks work that is done as a result of a settings change.
 */
class PromiseTracker {
    constructor() {
        this.promises = new Set();
    }
    scheduleAndTrackTask(cb) {
        const selfDestructWrapper = util.scheduleTask(() => {
            const result = cb();
            return result;
        }).then(() => {
            this.promises.delete(selfDestructWrapper);
        });
        this.promises.add(selfDestructWrapper);
    }
    getAwaiter() {
        return Promise.all(this.promises);
    }
}
const activeChangeEvents = new PromiseTracker();
/**
 * Get a promise that will resolve when the current set of settings change handlers have completed.
 */
function getSettingsChangePromise() {
    return activeChangeEvents.getAwaiter();
}
exports.getSettingsChangePromise = getSettingsChangePromise;
function checkConfigureOverridesPresent(config) {
    if (config.configureArgs.length > 0 || Object.values(config.configureEnvironment).length > 0 || checkGeneralEnvironmentOverridesPresent(config)) {
        return true;
    }
    return false;
}
exports.checkConfigureOverridesPresent = checkConfigureOverridesPresent;
function checkBuildOverridesPresent(config) {
    if (config.buildArgs.length > 0 || config.buildToolArgs.length > 0
        || Object.values(config.buildEnvironment).length > 0 || checkGeneralEnvironmentOverridesPresent(config)) {
        return true;
    }
    return false;
}
exports.checkBuildOverridesPresent = checkBuildOverridesPresent;
function checkTestOverridesPresent(config) {
    if (Object.values(config.testEnvironment).length > 0 || config.ctestArgs.length > 0 || checkGeneralEnvironmentOverridesPresent(config)) {
        return true;
    }
    return false;
}
exports.checkTestOverridesPresent = checkTestOverridesPresent;
function checkPackageOverridesPresent(config) {
    if (Object.values(config.cpackEnvironment).length > 0 || config.cpackArgs.length > 0 || checkGeneralEnvironmentOverridesPresent(config)) {
        return true;
    }
    return false;
}
exports.checkPackageOverridesPresent = checkPackageOverridesPresent;
function checkGeneralEnvironmentOverridesPresent(config) {
    return Object.values(config.environment).length > 0;
}
exports.checkGeneralEnvironmentOverridesPresent = checkGeneralEnvironmentOverridesPresent;


/***/ }),

/***/ 67214:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.implies = exports.ContextKeyOrExpr = exports.ContextKeyAndExpr = exports.ContextKeyNotRegexExpr = exports.ContextKeyRegexExpr = exports.ContextKeySmallerEqualsExpr = exports.ContextKeySmallerExpr = exports.ContextKeyGreaterEqualsExpr = exports.ContextKeyGreaterExpr = exports.ContextKeyNotExpr = exports.ContextKeyNotEqualsExpr = exports.ContextKeyNotInExpr = exports.ContextKeyInExpr = exports.ContextKeyEqualsExpr = exports.ContextKeyDefinedExpr = exports.ContextKeyTrueExpr = exports.ContextKeyFalseExpr = exports.expressionsAreEqualWithConstantSubstitution = exports.validateWhenClauses = exports.ContextKeyExpr = exports.Parser = exports.isFalsyOrWhitespace = exports.setConstant = exports.Scanner = void 0;
/* eslint-disable @typescript-eslint/array-type */
/* Code recycled and modified from vscode repo: https://github.com/microsoft/vscode/blob/main/src/vs/platform/contextkey/common/contextkey.ts
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
const nls = __webpack_require__(33463);
const handlebars_1 = __webpack_require__(52573);
const localize = nls.loadMessageBundle((__webpack_require__(71017).join)(__dirname, 'src\\contextKeyExpr.ts'));
const CONSTANT_VALUES = new Map();
CONSTANT_VALUES.set('false', false);
CONSTANT_VALUES.set('true', true);
function hintDidYouMean(...meant) {
    switch (meant.length) {
        case 1:
            return localize(0, null, meant[0]);
        case 2:
            return localize(1, null, meant[0], meant[1]);
        case 3:
            return localize(2, null, meant[0], meant[1], meant[2]);
        default: // we just don't expect that many
            return undefined;
    }
}
const hintDidYouForgetToOpenOrCloseQuote = localize(3, null);
const hintDidYouForgetToEscapeSlash = localize(4, null);
/**
 * A simple scanner for context keys.
 *
 * Example:
 *
 * ```ts
 * const scanner = new Scanner().reset('resourceFileName =~ /docker/ && !config.docker.enabled');
 * const tokens = [...scanner];
 * if (scanner.errorTokens.length > 0) {
 *     scanner.errorTokens.forEach(err => console.error(`Unexpected token at ${err.offset}: ${err.lexeme}\nHint: ${err.additional}`));
 * } else {
 *     // process tokens
 * }
 * ```
 */
class Scanner {
    constructor() {
        this._input = '';
        this._start = 0;
        this._current = 0;
        this._tokens = [];
        this._errors = [];
        // u - unicode, y - sticky // TODO@ulugbekna: we accept double quotes as part of the string rather than as a delimiter (to preserve old parser's behavior)
        this.stringRe = /[a-zA-Z0-9_<>\-\./\\:\*\?\+\[\]\^,#@;"%\$\p{L}-]+/uy;
    }
    static getLexeme(token) {
        switch (token.type) {
            case 0 /* LParen */:
                return '(';
            case 1 /* RParen */:
                return ')';
            case 2 /* Neg */:
                return '!';
            case 3 /* Eq */:
                return token.isTripleEq ? '===' : '==';
            case 4 /* NotEq */:
                return token.isTripleEq ? '!==' : '!=';
            case 5 /* Lt */:
                return '<';
            case 6 /* LtEq */:
                return '<=';
            case 7 /* Gt */:
                return '>=';
            case 8 /* GtEq */:
                return '>=';
            case 9 /* RegexOp */:
                return '=~';
            case 10 /* RegexStr */:
                return token.lexeme;
            case 11 /* True */:
                return 'true';
            case 12 /* False */:
                return 'false';
            case 13 /* In */:
                return 'in';
            case 14 /* Not */:
                return 'not';
            case 15 /* And */:
                return '&&';
            case 16 /* Or */:
                return '||';
            case 17 /* Str */:
                return token.lexeme;
            case 18 /* QuotedStr */:
                return token.lexeme;
            case 19 /* Error */:
                return token.lexeme;
            case 20 /* EOF */:
                return 'EOF';
            default:
                throw new handlebars_1.Exception(`unhandled token type: ${JSON.stringify(token)}; have you forgotten to add a case?`);
        }
    }
    get errors() {
        return this._errors;
    }
    reset(value) {
        this._input = value;
        this._start = 0;
        this._current = 0;
        this._tokens = [];
        this._errors = [];
        return this;
    }
    scan() {
        while (!this._isAtEnd()) {
            this._start = this._current;
            const ch = this._advance();
            switch (ch) {
                case 40 /* OpenParen */:
                    this._addToken(0 /* LParen */);
                    break;
                case 41 /* CloseParen */:
                    this._addToken(1 /* RParen */);
                    break;
                case 33 /* ExclamationMark */:
                    if (this._match(61 /* Equals */)) {
                        const isTripleEq = this._match(61 /* Equals */); // eat last `=` if `!==`
                        this._tokens.push({ type: 4 /* NotEq */, offset: this._start, isTripleEq });
                    }
                    else {
                        this._addToken(2 /* Neg */);
                    }
                    break;
                case 39 /* SingleQuote */:
                    this._quotedString();
                    break;
                case 47 /* Slash */:
                    this._regex();
                    break;
                case 61 /* Equals */:
                    if (this._match(61 /* Equals */)) { // support `==`
                        const isTripleEq = this._match(61 /* Equals */); // eat last `=` if `===`
                        this._tokens.push({ type: 3 /* Eq */, offset: this._start, isTripleEq });
                    }
                    else if (this._match(126 /* Tilde */)) {
                        this._addToken(9 /* RegexOp */);
                    }
                    else {
                        this._error(hintDidYouMean('==', '=~'));
                    }
                    break;
                case 60 /* LessThan */:
                    this._addToken(this._match(61 /* Equals */) ? 6 /* LtEq */ : 5 /* Lt */);
                    break;
                case 62 /* GreaterThan */:
                    this._addToken(this._match(61 /* Equals */) ? 8 /* GtEq */ : 7 /* Gt */);
                    break;
                case 38 /* Ampersand */:
                    if (this._match(38 /* Ampersand */)) {
                        this._addToken(15 /* And */);
                    }
                    else {
                        this._error(hintDidYouMean('&&'));
                    }
                    break;
                case 124 /* Pipe */:
                    if (this._match(124 /* Pipe */)) {
                        this._addToken(16 /* Or */);
                    }
                    else {
                        this._error(hintDidYouMean('||'));
                    }
                    break;
                // TODO@ulugbekna: 1) rewrite using a regex 2) reconsider what characters are considered whitespace, including unicode, nbsp, etc.
                case 32 /* Space */:
                case 13 /* CarriageReturn */:
                case 9 /* Tab */:
                case 10 /* LineFeed */:
                case 160 /* NoBreakSpace */: // &nbsp
                    break;
                default:
                    this._string();
            }
        }
        this._start = this._current;
        this._addToken(20 /* EOF */);
        return Array.from(this._tokens);
    }
    _match(expected) {
        if (this._isAtEnd()) {
            return false;
        }
        if (this._input.charCodeAt(this._current) !== expected) {
            return false;
        }
        this._current++;
        return true;
    }
    _advance() {
        return this._input.charCodeAt(this._current++);
    }
    _peek() {
        return this._isAtEnd() ? 0 /* Null */ : this._input.charCodeAt(this._current);
    }
    _addToken(type) {
        this._tokens.push({ type, offset: this._start });
    }
    _error(additional) {
        const offset = this._start;
        const lexeme = this._input.substring(this._start, this._current);
        const errToken = { type: 19 /* Error */, offset: this._start, lexeme };
        this._errors.push({ offset, lexeme, additionalInfo: additional });
        this._tokens.push(errToken);
    }
    _string() {
        this.stringRe.lastIndex = this._start;
        const match = this.stringRe.exec(this._input);
        if (match) {
            this._current = this._start + match[0].length;
            const lexeme = this._input.substring(this._start, this._current);
            const keyword = Scanner._keywords.get(lexeme);
            if (keyword) {
                this._addToken(keyword);
            }
            else {
                this._tokens.push({ type: 17 /* Str */, lexeme, offset: this._start });
            }
        }
    }
    // captures the lexeme without the leading and trailing '
    _quotedString() {
        while (this._peek() !== 39 /* SingleQuote */ && !this._isAtEnd()) { // TODO@ulugbekna: add support for escaping ' ?
            this._advance();
        }
        if (this._isAtEnd()) {
            this._error(hintDidYouForgetToOpenOrCloseQuote);
            return;
        }
        // consume the closing '
        this._advance();
        this._tokens.push({ type: 18 /* QuotedStr */, lexeme: this._input.substring(this._start + 1, this._current - 1), offset: this._start + 1 });
    }
    /*
     * Lexing a regex expression: /.../[igsmyu]*
     * Based on https://github.com/microsoft/TypeScript/blob/9247ef115e617805983740ba795d7a8164babf89/src/compiler/scanner.ts#L2129-L2181
     *
     * Note that we want slashes within a regex to be escaped, e.g., /file:\\/\\/\\// should match `file:///`
     */
    _regex() {
        let p = this._current;
        let inEscape = false;
        let inCharacterClass = false;
        while (true) {
            if (p >= this._input.length) {
                this._current = p;
                this._error(hintDidYouForgetToEscapeSlash);
                return;
            }
            const ch = this._input.charCodeAt(p);
            if (inEscape) { // parsing an escape character
                inEscape = false;
            }
            else if (ch === 47 /* Slash */ && !inCharacterClass) { // end of regex
                p++;
                break;
            }
            else if (ch === 91 /* OpenSquareBracket */) {
                inCharacterClass = true;
            }
            else if (ch === 92 /* Backslash */) {
                inEscape = true;
            }
            else if (ch === 93 /* CloseSquareBracket */) {
                inCharacterClass = false;
            }
            p++;
        }
        // Consume flags // TODO@ulugbekna: use regex instead
        while (p < this._input.length && Scanner._regexFlags.has(this._input.charCodeAt(p))) {
            p++;
        }
        this._current = p;
        const lexeme = this._input.substring(this._start, this._current);
        this._tokens.push({ type: 10 /* RegexStr */, lexeme, offset: this._start });
    }
    _isAtEnd() {
        return this._current >= this._input.length;
    }
}
exports.Scanner = Scanner;
Scanner._regexFlags = new Set(['i', 'g', 's', 'm', 'y', 'u'].map(ch => ch.charCodeAt(0)));
Scanner._keywords = new Map([
    ['not', 14 /* Not */],
    ['in', 13 /* In */],
    ['false', 12 /* False */],
    ['true', 11 /* True */]
]);
/** allow register constant context keys that are known only after startup; requires running `substituteConstants` on the context key - https://github.com/microsoft/vscode/issues/174218#issuecomment-1437972127 */
function setConstant(key, value) {
    // if (CONSTANT_VALUES.get(key) !== undefined) { throw Exception('contextkey.setConstant(k, v) invoked with already set constant `k`'); }
    CONSTANT_VALUES.set(key, value);
}
exports.setConstant = setConstant;
const hasOwnProperty = Object.prototype.hasOwnProperty;
function isFalsyOrWhitespace(str) {
    if (!str || typeof str !== 'string') {
        return true;
    }
    return str.trim().length === 0;
}
exports.isFalsyOrWhitespace = isFalsyOrWhitespace;
const defaultConfig = {
    regexParsingWithErrorRecovery: true
};
const errorEmptyString = localize(5, null);
const hintEmptyString = localize(6, null);
const errorNoInAfterNot = localize(7, null);
const errorClosingParenthesis = localize(8, null);
const errorUnexpectedToken = localize(9, null);
const hintUnexpectedToken = localize(10, null);
const errorUnexpectedEOF = localize(11, null);
const hintUnexpectedEOF = localize(12, null);
/**
 * A parser for context key expressions.
 *
 * Example:
 * ```ts
 * const parser = new Parser();
 * const expr = parser.parse('foo == "bar" && baz == true');
 *
 * if (expr === undefined) {
 * 	// there were lexing or parsing errors
 * 	// process lexing errors with `parser.lexingErrors`
 *  // process parsing errors with `parser.parsingErrors`
 * } else {
 * 	// expr is a valid expression
 * }
 * ```
 */
class Parser {
    constructor(_config = defaultConfig) {
        this._config = _config;
        // lifetime note: `_scanner` lives as long as the parser does, i.e., is not reset between calls to `parse`
        this._scanner = new Scanner();
        // lifetime note: `_tokens`, `_current`, and `_parsingErrors` must be reset between calls to `parse`
        this._tokens = [];
        this._current = 0; // invariant: 0 <= this._current < this._tokens.length ; any incrementation of this value must first call `_isAtEnd`
        this._parsingErrors = [];
        this._flagsGYRe = /g|y/g;
    }
    get lexingErrors() {
        return this._scanner.errors;
    }
    get parsingErrors() {
        return this._parsingErrors;
    }
    /**
     * Parse a context key expression.
     *
     * @param input the expression to parse
     * @returns the parsed expression or `undefined` if there's an error - call `lexingErrors` and `parsingErrors` to see the errors
     */
    parse(input) {
        if (input === '') {
            this._parsingErrors.push({ message: errorEmptyString, offset: 0, lexeme: '', additionalInfo: hintEmptyString });
            return undefined;
        }
        this._tokens = this._scanner.reset(input).scan();
        // @ulugbekna: we do not stop parsing if there are lexing errors to be able to reconstruct regexes with unescaped slashes; TODO@ulugbekna: make this respect config option for recovery
        this._current = 0;
        this._parsingErrors = [];
        try {
            const expr = this._expr();
            if (!this._isAtEnd()) {
                const peek = this._peek();
                const additionalInfo = peek.type === 17 /* Str */ ? hintUnexpectedToken : undefined;
                this._parsingErrors.push({ message: errorUnexpectedToken, offset: peek.offset, lexeme: Scanner.getLexeme(peek), additionalInfo });
                throw Parser._parseError;
            }
            return expr;
        }
        catch (e) {
            if (!(e === Parser._parseError)) {
                throw e;
            }
            return undefined;
        }
    }
    _expr() {
        return this._or();
    }
    _or() {
        const expr = [this._and()];
        while (this._matchOne(16 /* Or */)) {
            const right = this._and();
            expr.push(right);
        }
        return expr.length === 1 ? expr[0] : ContextKeyExpr.or(...expr);
    }
    _and() {
        const expr = [this._term()];
        while (this._matchOne(15 /* And */)) {
            const right = this._term();
            expr.push(right);
        }
        return expr.length === 1 ? expr[0] : ContextKeyExpr.and(...expr);
    }
    _term() {
        if (this._matchOne(2 /* Neg */)) {
            const peek = this._peek();
            switch (peek.type) {
                case 11 /* True */:
                    this._advance();
                    return ContextKeyFalseExpr.INSTANCE;
                case 12 /* False */:
                    this._advance();
                    return ContextKeyTrueExpr.INSTANCE;
                case 0 /* LParen */: {
                    this._advance();
                    const expr = this._expr();
                    this._consume(1 /* RParen */, errorClosingParenthesis);
                    return expr === null || expr === void 0 ? void 0 : expr.negate();
                }
                case 17 /* Str */:
                    this._advance();
                    return ContextKeyNotExpr.create(peek.lexeme);
                default:
                    throw this._errExpectedButGot(`KEY | true | false | '(' expression ')'`, peek);
            }
        }
        return this._primary();
    }
    _primary() {
        const peek = this._peek();
        switch (peek.type) {
            case 11 /* True */:
                this._advance();
                return ContextKeyExpr.true();
            case 12 /* False */:
                this._advance();
                return ContextKeyExpr.false();
            case 0 /* LParen */: {
                this._advance();
                const expr = this._expr();
                this._consume(1 /* RParen */, errorClosingParenthesis);
                return expr;
            }
            case 17 /* Str */: {
                // KEY
                const key = peek.lexeme;
                this._advance();
                // =~ regex
                if (this._matchOne(9 /* RegexOp */)) {
                    // @ulugbekna: we need to reconstruct the regex from the tokens because some extensions use unescaped slashes in regexes
                    const expr = this._peek();
                    if (!this._config.regexParsingWithErrorRecovery) {
                        this._advance();
                        if (expr.type !== 10 /* RegexStr */) {
                            throw this._errExpectedButGot(`REGEX`, expr);
                        }
                        const regexLexeme = expr.lexeme;
                        const closingSlashIndex = regexLexeme.lastIndexOf('/');
                        const flags = closingSlashIndex === regexLexeme.length - 1 ? undefined : this._removeFlagsGY(regexLexeme.substring(closingSlashIndex + 1));
                        let regexp;
                        try {
                            regexp = new RegExp(regexLexeme.substring(1, closingSlashIndex), flags);
                        }
                        catch (e) {
                            throw this._errExpectedButGot(`REGEX`, expr);
                        }
                        return ContextKeyRegexExpr.create(key, regexp);
                    }
                    switch (expr.type) {
                        case 10 /* RegexStr */:
                        case 19 /* Error */: { // also handle an ErrorToken in case of smth such as /(/file)/
                            const lexemeReconstruction = [expr.lexeme]; // /REGEX/ or /REGEX/FLAGS
                            this._advance();
                            let followingToken = this._peek();
                            let parenBalance = 0;
                            for (let i = 0; i < expr.lexeme.length; i++) {
                                if (expr.lexeme.charCodeAt(i) === 40 /* OpenParen */) {
                                    parenBalance++;
                                }
                                else if (expr.lexeme.charCodeAt(i) === 41 /* CloseParen */) {
                                    parenBalance--;
                                }
                            }
                            while (!this._isAtEnd() && followingToken.type !== 15 /* And */ && followingToken.type !== 16 /* Or */) {
                                switch (followingToken.type) {
                                    case 0 /* LParen */:
                                        parenBalance++;
                                        break;
                                    case 1 /* RParen */:
                                        parenBalance--;
                                        break;
                                    case 10 /* RegexStr */:
                                    case 18 /* QuotedStr */:
                                        for (let i = 0; i < followingToken.lexeme.length; i++) {
                                            if (followingToken.lexeme.charCodeAt(i) === 40 /* OpenParen */) {
                                                parenBalance++;
                                            }
                                            else if (expr.lexeme.charCodeAt(i) === 41 /* CloseParen */) {
                                                parenBalance--;
                                            }
                                        }
                                }
                                if (parenBalance < 0) {
                                    break;
                                }
                                lexemeReconstruction.push(Scanner.getLexeme(followingToken));
                                this._advance();
                                followingToken = this._peek();
                            }
                            const regexLexeme = lexemeReconstruction.join('');
                            const closingSlashIndex = regexLexeme.lastIndexOf('/');
                            const flags = closingSlashIndex === regexLexeme.length - 1 ? undefined : this._removeFlagsGY(regexLexeme.substring(closingSlashIndex + 1));
                            let regexp;
                            try {
                                regexp = new RegExp(regexLexeme.substring(1, closingSlashIndex), flags);
                            }
                            catch (e) {
                                throw this._errExpectedButGot(`REGEX`, expr);
                            }
                            return ContextKeyExpr.regex(key, regexp);
                        }
                        case 18 /* QuotedStr */: {
                            const serializedValue = expr.lexeme;
                            this._advance();
                            // replicate old regex parsing behavior
                            let regex = null;
                            if (!isFalsyOrWhitespace(serializedValue)) {
                                const start = serializedValue.indexOf('/');
                                const end = serializedValue.lastIndexOf('/');
                                if (start !== end && start >= 0) {
                                    const value = serializedValue.slice(start + 1, end);
                                    const caseIgnoreFlag = serializedValue[end + 1] === 'i' ? 'i' : '';
                                    try {
                                        regex = new RegExp(value, caseIgnoreFlag);
                                    }
                                    catch (_e) {
                                        throw this._errExpectedButGot(`REGEX`, expr);
                                    }
                                }
                            }
                            if (regex === null) {
                                throw this._errExpectedButGot('REGEX', expr);
                            }
                            return ContextKeyRegexExpr.create(key, regex);
                        }
                        default:
                            throw this._errExpectedButGot('REGEX', this._peek());
                    }
                }
                // [ 'not' 'in' value ]
                if (this._matchOne(14 /* Not */)) {
                    this._consume(13 /* In */, errorNoInAfterNot);
                    const right = this._value();
                    return ContextKeyExpr.notIn(key, right);
                }
                // [ ('==' | '!=' | '<' | '<=' | '>' | '>=' | 'in') value ]
                const maybeOp = this._peek().type;
                switch (maybeOp) {
                    case 3 /* Eq */: {
                        this._advance();
                        const right = this._value();
                        if (this._previous().type === 18 /* QuotedStr */) { // to preserve old parser behavior: "foo == 'true'" is preserved as "foo == 'true'", but "foo == true" is optimized as "foo"
                            return ContextKeyExpr.equals(key, right);
                        }
                        switch (right) {
                            case 'true':
                                return ContextKeyExpr.has(key);
                            case 'false':
                                return ContextKeyExpr.not(key);
                            default:
                                return ContextKeyExpr.equals(key, right);
                        }
                    }
                    case 4 /* NotEq */: {
                        this._advance();
                        const right = this._value();
                        if (this._previous().type === 18 /* QuotedStr */) { // same as above with "foo != 'true'"
                            return ContextKeyExpr.notEquals(key, right);
                        }
                        switch (right) {
                            case 'true':
                                return ContextKeyExpr.not(key);
                            case 'false':
                                return ContextKeyExpr.has(key);
                            default:
                                return ContextKeyExpr.notEquals(key, right);
                        }
                    }
                    // TODO: ContextKeyExpr.smaller(key, right) accepts only `number` as `right` AND during eval of this node, we just eval to `false` if `right` is not a number
                    // consequently, package.json linter should _warn_ the user if they're passing undesired things to ops
                    case 5 /* Lt */:
                        this._advance();
                        return ContextKeySmallerExpr.create(key, this._value());
                    case 6 /* LtEq */:
                        this._advance();
                        return ContextKeySmallerEqualsExpr.create(key, this._value());
                    case 7 /* Gt */:
                        this._advance();
                        return ContextKeyGreaterExpr.create(key, this._value());
                    case 8 /* GtEq */:
                        this._advance();
                        return ContextKeyGreaterEqualsExpr.create(key, this._value());
                    case 13 /* In */:
                        this._advance();
                        return ContextKeyExpr.in(key, this._value());
                    default:
                        return ContextKeyExpr.has(key);
                }
            }
            case 20 /* EOF */:
                this._parsingErrors.push({ message: errorUnexpectedEOF, offset: peek.offset, lexeme: '', additionalInfo: hintUnexpectedEOF });
                throw Parser._parseError;
            default:
                throw this._errExpectedButGot(`true | false | KEY \n\t| KEY '=~' REGEX \n\t| KEY ('==' | '!=' | '<' | '<=' | '>' | '>=' | 'in' | 'not' 'in') value`, this._peek());
        }
    }
    _value() {
        const token = this._peek();
        switch (token.type) {
            case 17 /* Str */:
            case 18 /* QuotedStr */:
                this._advance();
                return token.lexeme;
            case 11 /* True */:
                this._advance();
                return 'true';
            case 12 /* False */:
                this._advance();
                return 'false';
            case 13 /* In */: // we support `in` as a value, e.g., "when": "languageId == in" - exists in existing extensions
                this._advance();
                return 'in';
            default:
                // this allows "when": "foo == " which's used by existing extensions
                // we do not call `_advance` on purpose - we don't want to eat unintended tokens
                return '';
        }
    }
    _removeFlagsGY(flags) {
        return flags.replace(this._flagsGYRe, '');
    }
    // careful: this can throw if current token is the initial one (ie index = 0)
    _previous() {
        return this._tokens[this._current - 1];
    }
    _matchOne(token) {
        if (this._check(token)) {
            this._advance();
            return true;
        }
        return false;
    }
    _advance() {
        if (!this._isAtEnd()) {
            this._current++;
        }
        return this._previous();
    }
    _consume(type, message) {
        if (this._check(type)) {
            return this._advance();
        }
        throw this._errExpectedButGot(message, this._peek());
    }
    _errExpectedButGot(expected, got, additionalInfo) {
        const message = localize(13, null, expected, Scanner.getLexeme(got));
        const offset = got.offset;
        const lexeme = Scanner.getLexeme(got);
        this._parsingErrors.push({ message, offset, lexeme, additionalInfo });
        return Parser._parseError;
    }
    _check(type) {
        return this._peek().type === type;
    }
    _peek() {
        return this._tokens[this._current];
    }
    _isAtEnd() {
        return this._peek().type === 20 /* EOF */;
    }
}
exports.Parser = Parser;
// Note: this doesn't produce an exact syntax tree but a normalized one
// ContextKeyExpression's that we use as AST nodes do not expose constructors that do not normalize
Parser._parseError = new Error();
class ContextKeyExpr {
    static false() {
        return ContextKeyFalseExpr.INSTANCE;
    }
    static true() {
        return ContextKeyTrueExpr.INSTANCE;
    }
    static has(key) {
        return ContextKeyDefinedExpr.create(key);
    }
    static equals(key, value) {
        return ContextKeyEqualsExpr.create(key, value);
    }
    static notEquals(key, value) {
        return ContextKeyNotEqualsExpr.create(key, value);
    }
    static regex(key, value) {
        return ContextKeyRegexExpr.create(key, value);
    }
    static in(key, value) {
        return ContextKeyInExpr.create(key, value);
    }
    static notIn(key, value) {
        return ContextKeyNotInExpr.create(key, value);
    }
    static not(key) {
        return ContextKeyNotExpr.create(key);
    }
    static and(...expr) {
        return ContextKeyAndExpr.create(expr, null, true);
    }
    static or(...expr) {
        return ContextKeyOrExpr.create(expr, null, true);
    }
    static greater(key, value) {
        return ContextKeyGreaterExpr.create(key, value);
    }
    static greaterEquals(key, value) {
        return ContextKeyGreaterEqualsExpr.create(key, value);
    }
    static smaller(key, value) {
        return ContextKeySmallerExpr.create(key, value);
    }
    static smallerEquals(key, value) {
        return ContextKeySmallerEqualsExpr.create(key, value);
    }
    static deserialize(serialized) {
        if (serialized === undefined || serialized === null) { // an empty string needs to be handled by the parser to get a corresponding parsing error reported
            return undefined;
        }
        const expr = this._parser.parse(serialized);
        return expr;
    }
}
exports.ContextKeyExpr = ContextKeyExpr;
ContextKeyExpr._parser = new Parser({ regexParsingWithErrorRecovery: false });
function validateWhenClauses(whenClauses) {
    const parser = new Parser({ regexParsingWithErrorRecovery: false }); // we run with no recovery to guide users to use correct regexes
    return whenClauses.map(whenClause => {
        parser.parse(whenClause);
        if (parser.lexingErrors.length > 0) {
            return parser.lexingErrors.map((se) => ({
                errorMessage: se.additionalInfo ?
                    localize(14, null, se.additionalInfo) :
                    localize(15, null),
                offset: se.offset,
                length: se.lexeme.length
            }));
        }
        else if (parser.parsingErrors.length > 0) {
            return parser.parsingErrors.map((pe) => ({
                errorMessage: pe.additionalInfo ? `${pe.message}. ${pe.additionalInfo}` : pe.message,
                offset: pe.offset,
                length: pe.lexeme.length
            }));
        }
        else {
            return [];
        }
    });
}
exports.validateWhenClauses = validateWhenClauses;
function expressionsAreEqualWithConstantSubstitution(a, b) {
    const aExpr = a ? a.substituteConstants() : undefined;
    const bExpr = b ? b.substituteConstants() : undefined;
    if (!aExpr && !bExpr) {
        return true;
    }
    if (!aExpr || !bExpr) {
        return false;
    }
    return aExpr.equals(bExpr);
}
exports.expressionsAreEqualWithConstantSubstitution = expressionsAreEqualWithConstantSubstitution;
function cmp(a, b) {
    return a.cmp(b);
}
class ContextKeyFalseExpr {
    constructor() {
        this.type = 0 /* False */;
    }
    cmp(other) {
        return this.type - other.type;
    }
    equals(other) {
        return (other.type === this.type);
    }
    substituteConstants() {
        return this;
    }
    evaluate(_context) {
        return false;
    }
    serialize() {
        return 'false';
    }
    keys() {
        return [];
    }
    map(_mapFnc) {
        return this;
    }
    negate() {
        return ContextKeyTrueExpr.INSTANCE;
    }
}
exports.ContextKeyFalseExpr = ContextKeyFalseExpr;
ContextKeyFalseExpr.INSTANCE = new ContextKeyFalseExpr();
class ContextKeyTrueExpr {
    constructor() {
        this.type = 1 /* True */;
    }
    cmp(other) {
        return this.type - other.type;
    }
    equals(other) {
        return (other.type === this.type);
    }
    substituteConstants() {
        return this;
    }
    evaluate(_context) {
        return true;
    }
    serialize() {
        return 'true';
    }
    keys() {
        return [];
    }
    map(_mapFnc) {
        return this;
    }
    negate() {
        return ContextKeyFalseExpr.INSTANCE;
    }
}
exports.ContextKeyTrueExpr = ContextKeyTrueExpr;
ContextKeyTrueExpr.INSTANCE = new ContextKeyTrueExpr();
class ContextKeyDefinedExpr {
    constructor(key, negated) {
        this.key = key;
        this.negated = negated;
        this.type = 2 /* Defined */;
    }
    static create(key, negated = null) {
        const constantValue = CONSTANT_VALUES.get(key);
        if (typeof constantValue === 'boolean') {
            return constantValue ? ContextKeyTrueExpr.INSTANCE : ContextKeyFalseExpr.INSTANCE;
        }
        return new ContextKeyDefinedExpr(key, negated);
    }
    cmp(other) {
        if (other.type !== this.type) {
            return this.type - other.type;
        }
        return cmp1(this.key, other.key);
    }
    equals(other) {
        if (other.type === this.type) {
            return (this.key === other.key);
        }
        return false;
    }
    substituteConstants() {
        const constantValue = CONSTANT_VALUES.get(this.key);
        if (typeof constantValue === 'boolean') {
            return constantValue ? ContextKeyTrueExpr.INSTANCE : ContextKeyFalseExpr.INSTANCE;
        }
        return this;
    }
    evaluate(context) {
        return (!!context.getValue(this.key));
    }
    serialize() {
        return this.key;
    }
    keys() {
        return [this.key];
    }
    map(mapFnc) {
        return mapFnc.mapDefined(this.key);
    }
    negate() {
        if (!this.negated) {
            this.negated = ContextKeyNotExpr.create(this.key, this);
        }
        return this.negated;
    }
}
exports.ContextKeyDefinedExpr = ContextKeyDefinedExpr;
class ContextKeyEqualsExpr {
    constructor(key, value, negated) {
        this.key = key;
        this.value = value;
        this.negated = negated;
        this.type = 4 /* Equals */;
    }
    static create(key, value, negated = null) {
        if (typeof value === 'boolean') {
            return (value ? ContextKeyDefinedExpr.create(key, negated) : ContextKeyNotExpr.create(key, negated));
        }
        const constantValue = CONSTANT_VALUES.get(key);
        if (typeof constantValue === 'boolean') {
            const trueValue = constantValue ? 'true' : 'false';
            return (value === trueValue ? ContextKeyTrueExpr.INSTANCE : ContextKeyFalseExpr.INSTANCE);
        }
        return new ContextKeyEqualsExpr(key, value, negated);
    }
    cmp(other) {
        if (other.type !== this.type) {
            return this.type - other.type;
        }
        return cmp2(this.key, this.value, other.key, other.value);
    }
    equals(other) {
        if (other.type === this.type) {
            return (this.key === other.key && this.value === other.value);
        }
        return false;
    }
    substituteConstants() {
        const constantValue = CONSTANT_VALUES.get(this.key);
        if (typeof constantValue === 'boolean') {
            const trueValue = constantValue ? 'true' : 'false';
            return (this.value === trueValue ? ContextKeyTrueExpr.INSTANCE : ContextKeyFalseExpr.INSTANCE);
        }
        return this;
    }
    evaluate(context) {
        // Intentional ==
        // eslint-disable-next-line eqeqeq
        return (context.getValue(this.key) == this.value);
    }
    serialize() {
        return `${this.key} == '${this.value}'`;
    }
    keys() {
        return [this.key];
    }
    map(mapFnc) {
        return mapFnc.mapEquals(this.key, this.value);
    }
    negate() {
        if (!this.negated) {
            this.negated = ContextKeyNotEqualsExpr.create(this.key, this.value, this);
        }
        return this.negated;
    }
}
exports.ContextKeyEqualsExpr = ContextKeyEqualsExpr;
class ContextKeyInExpr {
    constructor(key, valueKey) {
        this.key = key;
        this.valueKey = valueKey;
        this.type = 10 /* In */;
        this.negated = null;
    }
    static create(key, valueKey) {
        return new ContextKeyInExpr(key, valueKey);
    }
    cmp(other) {
        if (other.type !== this.type) {
            return this.type - other.type;
        }
        return cmp2(this.key, this.valueKey, other.key, other.valueKey);
    }
    equals(other) {
        if (other.type === this.type) {
            return (this.key === other.key && this.valueKey === other.valueKey);
        }
        return false;
    }
    substituteConstants() {
        return this;
    }
    evaluate(context) {
        const source = context.getValue(this.valueKey);
        const item = context.getValue(this.key);
        if (Array.isArray(source)) {
            return source.includes(item);
        }
        if (typeof item === 'string' && typeof source === 'object' && source !== null) {
            return hasOwnProperty.call(source, item);
        }
        return false;
    }
    serialize() {
        return `${this.key} in '${this.valueKey}'`;
    }
    keys() {
        return [this.key, this.valueKey];
    }
    map(mapFnc) {
        return mapFnc.mapIn(this.key, this.valueKey);
    }
    negate() {
        if (!this.negated) {
            this.negated = ContextKeyNotInExpr.create(this.key, this.valueKey);
        }
        return this.negated;
    }
}
exports.ContextKeyInExpr = ContextKeyInExpr;
class ContextKeyNotInExpr {
    constructor(key, valueKey) {
        this.key = key;
        this.valueKey = valueKey;
        this.type = 11 /* NotIn */;
        this._negated = ContextKeyInExpr.create(key, valueKey);
    }
    static create(key, valueKey) {
        return new ContextKeyNotInExpr(key, valueKey);
    }
    cmp(other) {
        if (other.type !== this.type) {
            return this.type - other.type;
        }
        return this._negated.cmp(other._negated);
    }
    equals(other) {
        if (other.type === this.type) {
            return this._negated.equals(other._negated);
        }
        return false;
    }
    substituteConstants() {
        return this;
    }
    evaluate(context) {
        return !this._negated.evaluate(context);
    }
    serialize() {
        return `${this.key} not in '${this.valueKey}'`;
    }
    keys() {
        return this._negated.keys();
    }
    map(mapFnc) {
        return mapFnc.mapNotIn(this.key, this.valueKey);
    }
    negate() {
        return this._negated;
    }
}
exports.ContextKeyNotInExpr = ContextKeyNotInExpr;
class ContextKeyNotEqualsExpr {
    constructor(key, value, negated) {
        this.key = key;
        this.value = value;
        this.negated = negated;
        this.type = 5 /* NotEquals */;
    }
    static create(key, value, negated = null) {
        if (typeof value === 'boolean') {
            if (value) {
                return ContextKeyNotExpr.create(key, negated);
            }
            return ContextKeyDefinedExpr.create(key, negated);
        }
        const constantValue = CONSTANT_VALUES.get(key);
        if (typeof constantValue === 'boolean') {
            const falseValue = constantValue ? 'true' : 'false';
            return (value === falseValue ? ContextKeyFalseExpr.INSTANCE : ContextKeyTrueExpr.INSTANCE);
        }
        return new ContextKeyNotEqualsExpr(key, value, negated);
    }
    cmp(other) {
        if (other.type !== this.type) {
            return this.type - other.type;
        }
        return cmp2(this.key, this.value, other.key, other.value);
    }
    equals(other) {
        if (other.type === this.type) {
            return (this.key === other.key && this.value === other.value);
        }
        return false;
    }
    substituteConstants() {
        const constantValue = CONSTANT_VALUES.get(this.key);
        if (typeof constantValue === 'boolean') {
            const falseValue = constantValue ? 'true' : 'false';
            return (this.value === falseValue ? ContextKeyFalseExpr.INSTANCE : ContextKeyTrueExpr.INSTANCE);
        }
        return this;
    }
    evaluate(context) {
        // Intentional !=
        // eslint-disable-next-line eqeqeq
        return (context.getValue(this.key) != this.value);
    }
    serialize() {
        return `${this.key} != '${this.value}'`;
    }
    keys() {
        return [this.key];
    }
    map(mapFnc) {
        return mapFnc.mapNotEquals(this.key, this.value);
    }
    negate() {
        if (!this.negated) {
            this.negated = ContextKeyEqualsExpr.create(this.key, this.value, this);
        }
        return this.negated;
    }
}
exports.ContextKeyNotEqualsExpr = ContextKeyNotEqualsExpr;
class ContextKeyNotExpr {
    constructor(key, negated) {
        this.key = key;
        this.negated = negated;
        this.type = 3 /* Not */;
    }
    static create(key, negated = null) {
        const constantValue = CONSTANT_VALUES.get(key);
        if (typeof constantValue === 'boolean') {
            return (constantValue ? ContextKeyFalseExpr.INSTANCE : ContextKeyTrueExpr.INSTANCE);
        }
        return new ContextKeyNotExpr(key, negated);
    }
    cmp(other) {
        if (other.type !== this.type) {
            return this.type - other.type;
        }
        return cmp1(this.key, other.key);
    }
    equals(other) {
        if (other.type === this.type) {
            return (this.key === other.key);
        }
        return false;
    }
    substituteConstants() {
        const constantValue = CONSTANT_VALUES.get(this.key);
        if (typeof constantValue === 'boolean') {
            return (constantValue ? ContextKeyFalseExpr.INSTANCE : ContextKeyTrueExpr.INSTANCE);
        }
        return this;
    }
    evaluate(context) {
        return (!context.getValue(this.key));
    }
    serialize() {
        return `!${this.key}`;
    }
    keys() {
        return [this.key];
    }
    map(mapFnc) {
        return mapFnc.mapNot(this.key);
    }
    negate() {
        if (!this.negated) {
            this.negated = ContextKeyDefinedExpr.create(this.key, this);
        }
        return this.negated;
    }
}
exports.ContextKeyNotExpr = ContextKeyNotExpr;
function withFloatOrStr(value, callback) {
    if (typeof value === 'string') {
        const n = parseFloat(value);
        if (!isNaN(n)) {
            value = n;
        }
    }
    if (typeof value === 'string' || typeof value === 'number') {
        return callback(value);
    }
    return ContextKeyFalseExpr.INSTANCE;
}
class ContextKeyGreaterExpr {
    constructor(key, value, negated) {
        this.key = key;
        this.value = value;
        this.negated = negated;
        this.type = 12 /* Greater */;
    }
    static create(key, _value, negated = null) {
        return withFloatOrStr(_value, (value) => new ContextKeyGreaterExpr(key, value, negated));
    }
    cmp(other) {
        if (other.type !== this.type) {
            return this.type - other.type;
        }
        return cmp2(this.key, this.value, other.key, other.value);
    }
    equals(other) {
        if (other.type === this.type) {
            return (this.key === other.key && this.value === other.value);
        }
        return false;
    }
    substituteConstants() {
        return this;
    }
    evaluate(context) {
        if (typeof this.value === 'string') {
            return false;
        }
        return (parseFloat(context.getValue(this.key)) > this.value);
    }
    serialize() {
        return `${this.key} > ${this.value}`;
    }
    keys() {
        return [this.key];
    }
    map(mapFnc) {
        return mapFnc.mapGreater(this.key, this.value);
    }
    negate() {
        if (!this.negated) {
            this.negated = ContextKeySmallerEqualsExpr.create(this.key, this.value, this);
        }
        return this.negated;
    }
}
exports.ContextKeyGreaterExpr = ContextKeyGreaterExpr;
class ContextKeyGreaterEqualsExpr {
    constructor(key, value, negated) {
        this.key = key;
        this.value = value;
        this.negated = negated;
        this.type = 13 /* GreaterEquals */;
    }
    static create(key, _value, negated = null) {
        return withFloatOrStr(_value, (value) => new ContextKeyGreaterEqualsExpr(key, value, negated));
    }
    cmp(other) {
        if (other.type !== this.type) {
            return this.type - other.type;
        }
        return cmp2(this.key, this.value, other.key, other.value);
    }
    equals(other) {
        if (other.type === this.type) {
            return (this.key === other.key && this.value === other.value);
        }
        return false;
    }
    substituteConstants() {
        return this;
    }
    evaluate(context) {
        if (typeof this.value === 'string') {
            return false;
        }
        return (parseFloat(context.getValue(this.key)) >= this.value);
    }
    serialize() {
        return `${this.key} >= ${this.value}`;
    }
    keys() {
        return [this.key];
    }
    map(mapFnc) {
        return mapFnc.mapGreaterEquals(this.key, this.value);
    }
    negate() {
        if (!this.negated) {
            this.negated = ContextKeySmallerExpr.create(this.key, this.value, this);
        }
        return this.negated;
    }
}
exports.ContextKeyGreaterEqualsExpr = ContextKeyGreaterEqualsExpr;
class ContextKeySmallerExpr {
    constructor(key, value, negated) {
        this.key = key;
        this.value = value;
        this.negated = negated;
        this.type = 14 /* Smaller */;
    }
    static create(key, _value, negated = null) {
        return withFloatOrStr(_value, (value) => new ContextKeySmallerExpr(key, value, negated));
    }
    cmp(other) {
        if (other.type !== this.type) {
            return this.type - other.type;
        }
        return cmp2(this.key, this.value, other.key, other.value);
    }
    equals(other) {
        if (other.type === this.type) {
            return (this.key === other.key && this.value === other.value);
        }
        return false;
    }
    substituteConstants() {
        return this;
    }
    evaluate(context) {
        if (typeof this.value === 'string') {
            return false;
        }
        return (parseFloat(context.getValue(this.key)) < this.value);
    }
    serialize() {
        return `${this.key} < ${this.value}`;
    }
    keys() {
        return [this.key];
    }
    map(mapFnc) {
        return mapFnc.mapSmaller(this.key, this.value);
    }
    negate() {
        if (!this.negated) {
            this.negated = ContextKeyGreaterEqualsExpr.create(this.key, this.value, this);
        }
        return this.negated;
    }
}
exports.ContextKeySmallerExpr = ContextKeySmallerExpr;
class ContextKeySmallerEqualsExpr {
    constructor(key, value, negated) {
        this.key = key;
        this.value = value;
        this.negated = negated;
        this.type = 15 /* SmallerEquals */;
    }
    static create(key, _value, negated = null) {
        return withFloatOrStr(_value, (value) => new ContextKeySmallerEqualsExpr(key, value, negated));
    }
    cmp(other) {
        if (other.type !== this.type) {
            return this.type - other.type;
        }
        return cmp2(this.key, this.value, other.key, other.value);
    }
    equals(other) {
        if (other.type === this.type) {
            return (this.key === other.key && this.value === other.value);
        }
        return false;
    }
    substituteConstants() {
        return this;
    }
    evaluate(context) {
        if (typeof this.value === 'string') {
            return false;
        }
        return (parseFloat(context.getValue(this.key)) <= this.value);
    }
    serialize() {
        return `${this.key} <= ${this.value}`;
    }
    keys() {
        return [this.key];
    }
    map(mapFnc) {
        return mapFnc.mapSmallerEquals(this.key, this.value);
    }
    negate() {
        if (!this.negated) {
            this.negated = ContextKeyGreaterExpr.create(this.key, this.value, this);
        }
        return this.negated;
    }
}
exports.ContextKeySmallerEqualsExpr = ContextKeySmallerEqualsExpr;
class ContextKeyRegexExpr {
    constructor(key, regexp) {
        this.key = key;
        this.regexp = regexp;
        this.type = 7 /* Regex */;
        this.negated = null;
        //
    }
    static create(key, regexp) {
        return new ContextKeyRegexExpr(key, regexp);
    }
    cmp(other) {
        if (other.type !== this.type) {
            return this.type - other.type;
        }
        if (this.key < other.key) {
            return -1;
        }
        if (this.key > other.key) {
            return 1;
        }
        const thisSource = this.regexp ? this.regexp.source : '';
        const otherSource = other.regexp ? other.regexp.source : '';
        if (thisSource < otherSource) {
            return -1;
        }
        if (thisSource > otherSource) {
            return 1;
        }
        return 0;
    }
    equals(other) {
        if (other.type === this.type) {
            const thisSource = this.regexp ? this.regexp.source : '';
            const otherSource = other.regexp ? other.regexp.source : '';
            return (this.key === other.key && thisSource === otherSource);
        }
        return false;
    }
    substituteConstants() {
        return this;
    }
    evaluate(context) {
        const value = context.getValue(this.key);
        return this.regexp ? this.regexp.test(value) : false;
    }
    serialize() {
        const value = this.regexp
            ? `/${this.regexp.source}/${this.regexp.flags}`
            : '/invalid/';
        return `${this.key} =~ ${value}`;
    }
    keys() {
        return [this.key];
    }
    map(mapFnc) {
        return mapFnc.mapRegex(this.key, this.regexp);
    }
    negate() {
        if (!this.negated) {
            this.negated = ContextKeyNotRegexExpr.create(this);
        }
        return this.negated;
    }
}
exports.ContextKeyRegexExpr = ContextKeyRegexExpr;
class ContextKeyNotRegexExpr {
    constructor(_actual) {
        this._actual = _actual;
        this.type = 8 /* NotRegex */;
        //
    }
    static create(actual) {
        return new ContextKeyNotRegexExpr(actual);
    }
    cmp(other) {
        if (other.type !== this.type) {
            return this.type - other.type;
        }
        return this._actual.cmp(other._actual);
    }
    equals(other) {
        if (other.type === this.type) {
            return this._actual.equals(other._actual);
        }
        return false;
    }
    substituteConstants() {
        return this;
    }
    evaluate(context) {
        return !this._actual.evaluate(context);
    }
    serialize() {
        return `!(${this._actual.serialize()})`;
    }
    keys() {
        return this._actual.keys();
    }
    map(mapFnc) {
        return new ContextKeyNotRegexExpr(this._actual.map(mapFnc));
    }
    negate() {
        return this._actual;
    }
}
exports.ContextKeyNotRegexExpr = ContextKeyNotRegexExpr;
/**
 * @returns the same instance if nothing changed.
 */
function eliminateConstantsInArray(arr) {
    // Allocate array only if there is a difference
    let newArr = null;
    for (let i = 0, len = arr.length; i < len; i++) {
        const newExpr = arr[i].substituteConstants();
        if (arr[i] !== newExpr) {
            // something has changed!
            // allocate array on first difference
            if (newArr === null) {
                newArr = [];
                for (let j = 0; j < i; j++) {
                    newArr[j] = arr[j];
                }
            }
        }
        if (newArr !== null) {
            newArr[i] = newExpr;
        }
    }
    if (newArr === null) {
        return arr;
    }
    return newArr;
}
class ContextKeyAndExpr {
    constructor(expr, negated) {
        this.expr = expr;
        this.negated = negated;
        this.type = 6 /* And */;
    }
    static create(_expr, negated, extraRedundantCheck) {
        return ContextKeyAndExpr._normalizeArr(_expr, negated, extraRedundantCheck);
    }
    cmp(other) {
        if (other.type !== this.type) {
            return this.type - other.type;
        }
        if (this.expr.length < other.expr.length) {
            return -1;
        }
        if (this.expr.length > other.expr.length) {
            return 1;
        }
        for (let i = 0, len = this.expr.length; i < len; i++) {
            const r = cmp(this.expr[i], other.expr[i]);
            if (r !== 0) {
                return r;
            }
        }
        return 0;
    }
    equals(other) {
        if (other.type === this.type) {
            if (this.expr.length !== other.expr.length) {
                return false;
            }
            for (let i = 0, len = this.expr.length; i < len; i++) {
                if (!this.expr[i].equals(other.expr[i])) {
                    return false;
                }
            }
            return true;
        }
        return false;
    }
    substituteConstants() {
        const exprArr = eliminateConstantsInArray(this.expr);
        if (exprArr === this.expr) {
            // no change
            return this;
        }
        return ContextKeyAndExpr.create(exprArr, this.negated, false);
    }
    evaluate(context) {
        for (let i = 0, len = this.expr.length; i < len; i++) {
            if (!this.expr[i].evaluate(context)) {
                return false;
            }
        }
        return true;
    }
    static _normalizeArr(arr, negated, extraRedundantCheck) {
        const expr = [];
        let hasTrue = false;
        for (const e of arr) {
            if (!e) {
                continue;
            }
            if (e.type === 1 /* True */) {
                // anything && true ==> anything
                hasTrue = true;
                continue;
            }
            if (e.type === 0 /* False */) {
                // anything && false ==> false
                return ContextKeyFalseExpr.INSTANCE;
            }
            if (e.type === 6 /* And */) {
                expr.push(...e.expr);
                continue;
            }
            expr.push(e);
        }
        if (expr.length === 0 && hasTrue) {
            return ContextKeyTrueExpr.INSTANCE;
        }
        if (expr.length === 0) {
            return undefined;
        }
        if (expr.length === 1) {
            return expr[0];
        }
        expr.sort(cmp);
        // eliminate duplicate terms
        for (let i = 1; i < expr.length; i++) {
            if (expr[i - 1].equals(expr[i])) {
                expr.splice(i, 1);
                i--;
            }
        }
        if (expr.length === 1) {
            return expr[0];
        }
        // We must distribute any OR expression because we don't support parens
        // OR extensions will be at the end (due to sorting rules)
        while (expr.length > 1) {
            const lastElement = expr[expr.length - 1];
            if (lastElement.type !== 9 /* Or */) {
                break;
            }
            // pop the last element
            expr.pop();
            // pop the second to last element
            const secondToLastElement = expr.pop();
            const isFinished = (expr.length === 0);
            // distribute `lastElement` over `secondToLastElement`
            const resultElement = ContextKeyOrExpr.create(lastElement.expr.map(el => ContextKeyAndExpr.create([el, secondToLastElement], null, extraRedundantCheck)), null, isFinished);
            if (resultElement) {
                expr.push(resultElement);
                expr.sort(cmp);
            }
        }
        if (expr.length === 1) {
            return expr[0];
        }
        // resolve false AND expressions
        if (extraRedundantCheck) {
            for (let i = 0; i < expr.length; i++) {
                for (let j = i + 1; j < expr.length; j++) {
                    if (expr[i].negate().equals(expr[j])) {
                        // A && !A case
                        return ContextKeyFalseExpr.INSTANCE;
                    }
                }
            }
            if (expr.length === 1) {
                return expr[0];
            }
        }
        return new ContextKeyAndExpr(expr, negated);
    }
    serialize() {
        return this.expr.map(e => e.serialize()).join(' && ');
    }
    keys() {
        const result = [];
        for (const expr of this.expr) {
            result.push(...expr.keys());
        }
        return result;
    }
    map(mapFnc) {
        return new ContextKeyAndExpr(this.expr.map(expr => expr.map(mapFnc)), null);
    }
    negate() {
        if (!this.negated) {
            const result = [];
            for (const expr of this.expr) {
                result.push(expr.negate());
            }
            this.negated = ContextKeyOrExpr.create(result, this, true);
        }
        return this.negated;
    }
}
exports.ContextKeyAndExpr = ContextKeyAndExpr;
class ContextKeyOrExpr {
    constructor(expr, negated) {
        this.expr = expr;
        this.negated = negated;
        this.type = 9 /* Or */;
    }
    static create(_expr, negated, extraRedundantCheck) {
        return ContextKeyOrExpr._normalizeArr(_expr, negated, extraRedundantCheck);
    }
    cmp(other) {
        if (other.type !== this.type) {
            return this.type - other.type;
        }
        if (this.expr.length < other.expr.length) {
            return -1;
        }
        if (this.expr.length > other.expr.length) {
            return 1;
        }
        for (let i = 0, len = this.expr.length; i < len; i++) {
            const r = cmp(this.expr[i], other.expr[i]);
            if (r !== 0) {
                return r;
            }
        }
        return 0;
    }
    equals(other) {
        if (other.type === this.type) {
            if (this.expr.length !== other.expr.length) {
                return false;
            }
            for (let i = 0, len = this.expr.length; i < len; i++) {
                if (!this.expr[i].equals(other.expr[i])) {
                    return false;
                }
            }
            return true;
        }
        return false;
    }
    substituteConstants() {
        const exprArr = eliminateConstantsInArray(this.expr);
        if (exprArr === this.expr) {
            // no change
            return this;
        }
        return ContextKeyOrExpr.create(exprArr, this.negated, false);
    }
    evaluate(context) {
        for (let i = 0, len = this.expr.length; i < len; i++) {
            if (this.expr[i].evaluate(context)) {
                return true;
            }
        }
        return false;
    }
    static _normalizeArr(arr, negated, extraRedundantCheck) {
        let expr = [];
        let hasFalse = false;
        if (arr) {
            for (let i = 0, len = arr.length; i < len; i++) {
                const e = arr[i];
                if (!e) {
                    continue;
                }
                if (e.type === 0 /* False */) {
                    // anything || false ==> anything
                    hasFalse = true;
                    continue;
                }
                if (e.type === 1 /* True */) {
                    // anything || true ==> true
                    return ContextKeyTrueExpr.INSTANCE;
                }
                if (e.type === 9 /* Or */) {
                    expr = expr.concat(e.expr);
                    continue;
                }
                expr.push(e);
            }
            if (expr.length === 0 && hasFalse) {
                return ContextKeyFalseExpr.INSTANCE;
            }
            expr.sort(cmp);
        }
        if (expr.length === 0) {
            return undefined;
        }
        if (expr.length === 1) {
            return expr[0];
        }
        // eliminate duplicate terms
        for (let i = 1; i < expr.length; i++) {
            if (expr[i - 1].equals(expr[i])) {
                expr.splice(i, 1);
                i--;
            }
        }
        if (expr.length === 1) {
            return expr[0];
        }
        // resolve true OR expressions
        if (extraRedundantCheck) {
            for (let i = 0; i < expr.length; i++) {
                for (let j = i + 1; j < expr.length; j++) {
                    if (expr[i].negate().equals(expr[j])) {
                        // A || !A case
                        return ContextKeyTrueExpr.INSTANCE;
                    }
                }
            }
            if (expr.length === 1) {
                return expr[0];
            }
        }
        return new ContextKeyOrExpr(expr, negated);
    }
    serialize() {
        return this.expr.map(e => e.serialize()).join(' || ');
    }
    keys() {
        const result = [];
        for (const expr of this.expr) {
            result.push(...expr.keys());
        }
        return result;
    }
    map(mapFnc) {
        return new ContextKeyOrExpr(this.expr.map(expr => expr.map(mapFnc)), null);
    }
    negate() {
        if (!this.negated) {
            const result = [];
            for (const expr of this.expr) {
                result.push(expr.negate());
            }
            // We don't support parens, so here we distribute the AND over the OR terminals
            // We always take the first 2 AND pairs and distribute them
            while (result.length > 1) {
                const LEFT = result.shift();
                const RIGHT = result.shift();
                const all = [];
                for (const left of getTerminals(LEFT)) {
                    for (const right of getTerminals(RIGHT)) {
                        all.push(ContextKeyAndExpr.create([left, right], null, false));
                    }
                }
                result.unshift(ContextKeyOrExpr.create(all, null, false));
            }
            this.negated = ContextKeyOrExpr.create(result, this, true);
        }
        return this.negated;
    }
}
exports.ContextKeyOrExpr = ContextKeyOrExpr;
function cmp1(key1, key2) {
    if (key1 < key2) {
        return -1;
    }
    if (key1 > key2) {
        return 1;
    }
    return 0;
}
function cmp2(key1, value1, key2, value2) {
    if (key1 < key2) {
        return -1;
    }
    if (key1 > key2) {
        return 1;
    }
    if (value1 < value2) {
        return -1;
    }
    if (value1 > value2) {
        return 1;
    }
    return 0;
}
/**
 * Returns true if it is provable `p` implies `q`.
 */
function implies(p, q) {
    if (p.type === 0 /* False */ || q.type === 1 /* True */) {
        // false implies anything
        // anything implies true
        return true;
    }
    if (p.type === 9 /* Or */) {
        if (q.type === 9 /* Or */) {
            // `a || b || c` can only imply something like `a || b || c || d`
            return allElementsIncluded(p.expr, q.expr);
        }
        return false;
    }
    if (q.type === 9 /* Or */) {
        for (const element of q.expr) {
            if (implies(p, element)) {
                return true;
            }
        }
        return false;
    }
    if (p.type === 6 /* And */) {
        if (q.type === 6 /* And */) {
            // `a && b && c` implies `a && c`
            return allElementsIncluded(q.expr, p.expr);
        }
        for (const element of p.expr) {
            if (implies(element, q)) {
                return true;
            }
        }
        return false;
    }
    return p.equals(q);
}
exports.implies = implies;
/**
 * Returns true if all elements in `p` are also present in `q`.
 * The two arrays are assumed to be sorted
 */
function allElementsIncluded(p, q) {
    let pIndex = 0;
    let qIndex = 0;
    while (pIndex < p.length && qIndex < q.length) {
        const cmp = p[pIndex].cmp(q[qIndex]);
        if (cmp < 0) {
            // an element from `p` is missing from `q`
            return false;
        }
        else if (cmp === 0) {
            pIndex++;
            qIndex++;
        }
        else {
            qIndex++;
        }
    }
    return (pIndex === p.length);
}
function getTerminals(node) {
    if (node.type === 9 /* Or */) {
        return node.expr;
    }
    return [node];
}


/***/ }),

/***/ 68441:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CPackDriver = void 0;
const vscode = __webpack_require__(89496);
const nls = __webpack_require__(33463);
const expand_1 = __webpack_require__(77504);
nls.config({ messageFormat: nls.MessageFormat.bundle, bundleFormat: nls.BundleFormat.standalone })((__webpack_require__(71017).join)(__dirname, 'src\\cpack.ts'));
const localize = nls.loadMessageBundle((__webpack_require__(71017).join)(__dirname, 'src\\cpack.ts'));
const logging = __webpack_require__(71067);
const log = logging.createLogger('cpack');
class CPackOutputLogger {
    output(line) {
        log.info(line);
    }
    error(line) {
        this.output(line);
    }
}
class CPackDriver {
    constructor(ws) {
        this.ws = ws;
        // TODO: evaluate whether files like CPackSourceConfig.cmake or CPackConfig.cmake should have any impact on the package presets functionality
        // same as CTestTestfile.cmake looks to have on test presets. Remove if not necessary and also review testingEnabled in ctest.ts
        // (it is set/unset according to some logic but never queried).
        this._packagingEnabled = false;
        this.packagingEnabledEmitter = new vscode.EventEmitter();
        this.onPackagingEnabledChanged = this.packagingEnabledEmitter.event;
    }
    get packagingEnabled() {
        return this._packagingEnabled;
    }
    set packagingEnabled(v) {
        this._packagingEnabled = v;
        this.packagingEnabledEmitter.fire(v);
    }
    dispose() {
        this.packagingEnabledEmitter.dispose();
    }
    async getCPackArgs(driver, packagePreset) {
        var _a, _b, _c, _d;
        let cpackArgs = [];
        if (!packagePreset && driver.packagePreset) {
            packagePreset = driver.packagePreset;
        }
        if (!driver.useCMakePresets || !packagePreset) {
            return undefined;
        }
        // Note: in CMake Tools, we don't run cmake or cpack with --preset argument. We generate the equivalent command line from all the properties
        cpackArgs = [];
        if (packagePreset.vendorName) {
            cpackArgs.push("--vendor", `${packagePreset.vendorName}`);
        }
        if ((_a = packagePreset.generators) === null || _a === void 0 ? void 0 : _a.length) {
            cpackArgs.push("-G", `${packagePreset.generators.join(";")}`);
        }
        if ((_b = packagePreset.configurations) === null || _b === void 0 ? void 0 : _b.length) {
            cpackArgs.push("-C", `${packagePreset.configurations.join(";")}`);
        }
        if (packagePreset.configFile) {
            cpackArgs.push("--config", `${packagePreset.configFile}`);
        }
        if ((_c = packagePreset.output) === null || _c === void 0 ? void 0 : _c.debug) {
            cpackArgs.push("--debug");
        }
        if ((_d = packagePreset.output) === null || _d === void 0 ? void 0 : _d.verbose) {
            cpackArgs.push("--verbose");
        }
        if (packagePreset.packageName) {
            cpackArgs.push("-P", `${packagePreset.packageName}`);
        }
        if (packagePreset.packageVersion) {
            cpackArgs.push("-R", `${packagePreset.packageVersion}`);
        }
        if (packagePreset.packageDirectory) {
            cpackArgs.push("-B", `${packagePreset.packageDirectory}`);
        }
        if (packagePreset.variables) {
            for (const varName in packagePreset.variables) {
                cpackArgs.push(`-D ${varName}=${packagePreset.variables[varName]}`);
            }
        }
        const opts = driver.expansionOptions;
        const args = [];
        for (const value of this.ws.config.cpackArgs) {
            args.push(await (0, expand_1.expandString)(value, opts));
        }
        cpackArgs = cpackArgs.concat(args);
        return cpackArgs;
    }
    async runCPack(driver, packagePreset, consumer) {
        var _a;
        const cpackpath = await this.ws.getCPackPath(driver.cmakePathFromPreset);
        if (cpackpath === null) {
            log.info(localize(0, null));
            return -2;
        }
        let cpackArgs;
        if (driver.useCMakePresets && !driver.packagePreset) {
            log.error(localize(1, null));
            return -3;
        }
        else {
            const opts = driver.expansionOptions;
            const args = [];
            for (const value of this.ws.config.cpackArgs) {
                args.push(await (0, expand_1.expandString)(value, opts));
            }
            const configuration = driver.currentBuildType;
            const configs = ((_a = packagePreset === null || packagePreset === void 0 ? void 0 : packagePreset.configurations) === null || _a === void 0 ? void 0 : _a.join(";")) || configuration;
            const presetArgs = await this.getCPackArgs(driver, packagePreset) || [];
            cpackArgs = [`-C`, configs].concat(presetArgs).concat(args);
        }
        const child = driver.executeCommand(cpackpath, cpackArgs, (consumer ? consumer : new CPackOutputLogger()), { environment: await driver.getCPackCommandEnvironment(), cwd: driver.binaryDir });
        const res = await child.result;
        if (res.retc === null) {
            log.info(localize(2, null));
            return -1;
        }
        else {
            log.info(localize(3, null, res.retc));
        }
        return res.retc;
    }
}
exports.CPackDriver = CPackDriver;


/***/ }),

/***/ 38431:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/**
 * Module for vscode-cpptools integration.
 *
 * This module uses the [vscode-cpptools API](https://www.npmjs.com/package/vscode-cpptools)
 * to provide that extension with per-file configuration information.
 */ /** */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CppConfigurationProvider = exports.getIntelliSenseMode = exports.parseCompileFlags = void 0;
const logging_1 = __webpack_require__(71067);
const rollbar_1 = __webpack_require__(58543);
const shlex = __webpack_require__(64913);
const util = __webpack_require__(16182);
const path = __webpack_require__(71017);
const vscode = __webpack_require__(89496);
const cpptools = __webpack_require__(3286);
const nls = __webpack_require__(33463);
nls.config({ messageFormat: nls.MessageFormat.bundle, bundleFormat: nls.BundleFormat.standalone })((__webpack_require__(71017).join)(__dirname, 'src\\cpptools.ts'));
const localize = nls.loadMessageBundle((__webpack_require__(71017).join)(__dirname, 'src\\cpptools.ts'));
const log = (0, logging_1.createLogger)('cpptools');
class MissingCompilerException extends Error {
}
function parseCppStandard(std, canUseGnu, canUseCxx23) {
    const isGnu = canUseGnu && std.startsWith('gnu');
    if (std.endsWith('++23') || std.endsWith('++2b') || std.endsWith('++latest')) {
        if (canUseCxx23) {
            return isGnu ? 'gnu++23' : 'c++23';
        }
        else {
            return isGnu ? 'gnu++20' : 'c++20';
        }
    }
    else if (std.endsWith('++20') || std.endsWith('++2a')) {
        return isGnu ? 'gnu++20' : 'c++20';
    }
    else if (std.endsWith('++17') || std.endsWith('++1z')) {
        return isGnu ? 'gnu++17' : 'c++17';
    }
    else if (std.endsWith('++14') || std.endsWith('++1y')) {
        return isGnu ? 'gnu++14' : 'c++14';
    }
    else if (std.endsWith('++11') || std.endsWith('++0x')) {
        return isGnu ? 'gnu++11' : 'c++11';
    }
    else if (std.endsWith('++03')) {
        return isGnu ? 'gnu++03' : 'c++03';
    }
    else if (std.endsWith('++98')) {
        return isGnu ? 'gnu++98' : 'c++98';
    }
    else {
        return undefined;
    }
}
function parseCStandard(std, canUseGnu) {
    // GNU options from: https://gcc.gnu.org/onlinedocs/gcc/C-Dialect-Options.html#C-Dialect-Options
    const isGnu = canUseGnu && std.startsWith('gnu');
    if (/(c|gnu)(90|89|iso9899:(1990|199409))/.test(std)) {
        return isGnu ? 'gnu89' : 'c89';
    }
    else if (/(c|gnu)(99|9x|iso9899:(1999|199x))/.test(std)) {
        return isGnu ? 'gnu99' : 'c99';
    }
    else if (/(c|gnu)(11|1x|iso9899:2011)/.test(std)) {
        return isGnu ? 'gnu11' : 'c11';
    }
    else if (/(c|gnu)(17|18|2x|iso9899:(2017|2018))/.test(std)) {
        if (canUseGnu) {
            // cpptools supports 'c17' in same version it supports GNU std.
            return isGnu ? 'gnu17' : 'c17';
        }
        else {
            return 'c11';
        }
    }
    else {
        return undefined;
    }
}
function parseTargetArch(target) {
    // Value of target param is lowercased.
    const isArm32 = value => {
        // ARM verions from https://en.wikipedia.org/wiki/ARM_architecture#Cores
        if (value.indexOf('armv8-r') >= 0 || value.indexOf('armv8-m') >= 0) {
            return true;
        }
        else {
            // Check if ARM version is 7 or earlier.
            const verStr = value.substr(5, 1);
            const verNum = +verStr;
            return verNum <= 7;
        }
    };
    switch (target) {
        case '-m32':
        case 'i686':
            return 'x86';
        case '-m64':
        case 'amd64':
        case 'x86_64':
            return 'x64';
        case 'aarch64':
        case 'arm64':
            return 'arm64';
        case 'arm':
            return 'arm';
    }
    // Check triple target value
    if (target.indexOf('aarch64') >= 0 || target.indexOf('arm64') >= 0
        || target.indexOf('armv8-a') >= 0 || target.indexOf('armv8.') >= 0) {
        return 'arm64';
    }
    else if (target.indexOf('arm') >= 0 || isArm32(target)) {
        return 'arm';
    }
    else if (target.indexOf('i686') >= 0) {
        return 'x86';
    }
    else if (target.indexOf('amd64') >= 0 || target.indexOf('x86_64') >= 0) {
        return 'x64';
    }
    // TODO: add an allow list of architecture values and add telemetry
    return undefined;
}
function parseCompileFlags(cptVersion, args, lang) {
    const requireStandardTarget = (cptVersion < cpptools.Version.v5);
    const canUseGnuStd = (cptVersion >= cpptools.Version.v4);
    const canUseCxx23 = (cptVersion >= cpptools.Version.v6);
    // No need to parse language standard for CppTools API v6 and above
    const extractStdFlag = (cptVersion < cpptools.Version.v6);
    const iter = args[Symbol.iterator]();
    const extraDefinitions = [];
    let standard;
    let targetArch;
    while (1) {
        const { done, value } = iter.next();
        if (done) {
            break;
        }
        const lower = value.toLowerCase();
        if (requireStandardTarget && (lower === '-m32' || lower === '-m64')) {
            targetArch = parseTargetArch(lower);
        }
        else if (requireStandardTarget && (lower.startsWith('-arch=') || lower.startsWith('/arch:'))) {
            const target = lower.substring(6);
            targetArch = parseTargetArch(target);
        }
        else if (requireStandardTarget && lower === '-arch') {
            const { done, value } = iter.next();
            if (done) {
                // TODO: add an allow list of architecture values and add telemetry
                continue;
            }
            targetArch = parseTargetArch(value.toLowerCase());
        }
        else if (requireStandardTarget && lower.startsWith('-march=')) {
            const target = lower.substring(7);
            targetArch = parseTargetArch(target);
        }
        else if (requireStandardTarget && lower.startsWith('--target=')) {
            const target = lower.substring(9);
            targetArch = parseTargetArch(target);
        }
        else if (requireStandardTarget && lower === '-target') {
            const { done, value } = iter.next();
            if (done) {
                // TODO: add an allow list of architecture values and add telemetry
                continue;
            }
            targetArch = parseTargetArch(value.toLowerCase());
        }
        else if (value === '-D' || value === '/D') {
            const { done, value } = iter.next();
            if (done) {
                rollbar_1.default.error(localize(0, null));
                continue;
            }
            extraDefinitions.push(value);
        }
        else if (value.startsWith('-D') || value.startsWith('/D')) {
            const def = value.substring(2);
            extraDefinitions.push(def);
        }
        else if (extractStdFlag && (value.startsWith('-std=') || lower.startsWith('-std:') || lower.startsWith('/std:'))) {
            const std = value.substring(5);
            if (lang === 'CXX' || lang === 'OBJCXX' || lang === 'CUDA') {
                const s = parseCppStandard(std, canUseGnuStd, canUseCxx23);
                if (!s) {
                    log.warning(localize(1, null, value));
                }
                else {
                    standard = s;
                }
            }
            else if (lang === 'C' || lang === 'OBJC') {
                const s = parseCStandard(std, canUseGnuStd);
                if (!s) {
                    log.warning(localize(2, null, value));
                }
                else {
                    standard = s;
                }
            }
            else if (lang === undefined) {
                let s = parseCppStandard(std, canUseGnuStd, canUseCxx23);
                if (!s) {
                    s = parseCStandard(std, canUseGnuStd);
                }
                if (!s) {
                    log.warning(localize(3, null, value));
                }
                else {
                    standard = s;
                }
            }
            else {
                log.warning(localize(4, null, lang));
            }
        }
    }
    if (!standard && requireStandardTarget && extractStdFlag) {
        standard = (lang === 'C') ? 'c11' : 'c++17';
    }
    return { extraDefinitions, standard, targetArch };
}
exports.parseCompileFlags = parseCompileFlags;
/**
 * Determine the IntelliSenseMode based on hints from compiler path
 * and target architecture parsed from compiler flags.
 */
function getIntelliSenseMode(cptVersion, compilerPath, targetArch) {
    if (cptVersion >= cpptools.Version.v5 && targetArch === undefined) {
        // IntelliSenseMode is optional for CppTools v5+ and is determined by CppTools.
        return undefined;
    }
    const canUseArm = (cptVersion >= cpptools.Version.v4);
    const compilerName = path.basename(compilerPath || "").toLocaleLowerCase();
    if (compilerName === 'cl.exe') {
        const clArch = path.basename(path.dirname(compilerPath)).toLocaleLowerCase();
        switch (clArch) {
            case 'arm64':
                return canUseArm ? 'msvc-arm64' : 'msvc-x64';
            case 'arm':
                return canUseArm ? 'msvc-arm' : 'msvc-x86';
            case 'x86':
                return 'msvc-x86';
            case 'x64':
            default:
                return 'msvc-x64';
        }
    }
    else if (compilerName.indexOf('armclang') >= 0) {
        switch (targetArch) {
            case 'arm64':
                return canUseArm ? 'clang-arm64' : 'clang-x64';
            case 'arm':
            default:
                return canUseArm ? 'clang-arm' : 'clang-x86';
        }
    }
    else if (compilerName.indexOf('clang') >= 0) {
        switch (targetArch) {
            case 'arm64':
                return canUseArm ? 'clang-arm64' : 'clang-x64';
            case 'arm':
                return canUseArm ? 'clang-arm' : 'clang-x86';
            case 'x86':
                return 'clang-x86';
            case 'x64':
            default:
                return 'clang-x64';
        }
    }
    else if (compilerName.indexOf('aarch64') >= 0) {
        // Compiler with 'aarch64' in its name may also have 'arm', so check for
        // aarch64 compilers before checking for ARM specific compilers.
        return canUseArm ? 'gcc-arm64' : 'gcc-x64';
    }
    else if (compilerName.indexOf('arm') >= 0) {
        return canUseArm ? 'gcc-arm' : 'gcc-x86';
    }
    else if (compilerName.indexOf('gcc') >= 0 || compilerName.indexOf('g++') >= 0) {
        switch (targetArch) {
            case 'x86':
                return 'gcc-x86';
            case 'x64':
                return 'gcc-x64';
            case 'arm64':
                return canUseArm ? 'gcc-arm64' : 'gcc-x64';
            case 'arm':
                return canUseArm ? 'gcc-arm' : 'gcc-x86';
            default:
                return 'gcc-x64';
        }
    }
    else {
        // unknown compiler; pick platform defaults.
        if (process.platform === 'win32') {
            return 'msvc-x64';
        }
        else if (process.platform === 'darwin') {
            return 'clang-x64';
        }
        else {
            return 'gcc-x64';
        }
    }
}
exports.getIntelliSenseMode = getIntelliSenseMode;
/**
 * The actual class that provides information to the cpptools extension. See
 * the `CustomConfigurationProvider` interface for information on how this class
 * should be used.
 */
class CppConfigurationProvider {
    constructor() {
        /** Our name visible to cpptools */
        this.name = 'CMake Tools';
        /** Our extension ID, visible to cpptools */
        this.extensionId = 'ms-vscode.cmake-tools';
        /**
         * This value determines if we need to show the user an error message about missing compilers. When an update succeeds
         * without missing any compilers, we set this to `true`, otherwise `false`.
         *
         * If an update fails and the value is `true`, we display the message. If an
         * update fails and the value is `false`, we do not display the message.
         *
         * This ensures that we only show the message the first time an update fails
         * within a sequence of failing updates.
         */
        this.lastUpdateSucceeded = true;
        this.workspaceBrowseConfiguration = { browsePath: [] };
        this.workspaceBrowseConfigurations = new Map();
        this.requests = new Set();
        this.responses = new Map();
        /**
         * Index of files to configurations, using the normalized path to the file
         * as the key to the <target,configuration>.
         */
        this.fileIndex = new Map();
        /**
         * If a source file configuration exists for the active target, we will prefer that one when asked.
         */
        this.activeTarget = null;
        this.activeBuildType = null;
        this.buildTypesSeen = new Set();
        /**
         * Version of Cpptools API
         */
        this.cpptoolsVersion = cpptools.Version.latest;
        this.targets = [];
        this.readyFlag = false;
    }
    /**
     * Get the SourceFileConfigurationItem from the index for the given URI
     * @param uri The configuration to get from the index
     */
    getConfiguration(uri) {
        const normalizedPath = util.platformNormalizePath(uri.fsPath);
        const configurations = this.fileIndex.get(normalizedPath);
        if (this.activeTarget && (configurations === null || configurations === void 0 ? void 0 : configurations.has(this.activeTarget))) {
            return configurations.get(this.activeTarget);
        }
        else {
            return configurations === null || configurations === void 0 ? void 0 : configurations.values().next().value; // Any value is fine if the target doesn't match
        }
    }
    /**
     * Test if we are able to provide a configuration for the given URI
     * @param uri The URI to look up
     */
    async canProvideConfiguration(uri) {
        this.requests.add(uri.toString());
        return !!this.getConfiguration(uri);
    }
    /**
     * Get the configurations for the given URIs. URIs for which we have no
     * configuration are simply ignored.
     * @param uris The file URIs to look up
     */
    async provideConfigurations(uris) {
        const configs = util.dropNulls(uris.map(u => this.getConfiguration(u)));
        configs.forEach(config => {
            this.responses.set(config.uri.toString(), config);
        });
        return configs;
    }
    /**
     * A request to determine whether this provider can provide a code browsing configuration for the workspace folder.
     * @param token (optional) The cancellation token.
     * @returns 'true' if this provider can provider a code browsing configuration for the workspace folder.
     */
    async canProvideBrowseConfiguration() {
        return true;
    }
    /**
     * A request to get the code browsing configuration for the workspace folder.
     * @returns A [WorkspaceBrowseConfiguration](#WorkspaceBrowseConfiguration) with the information required to
     * construct the equivalent of `browse.path` from `c_cpp_properties.json`.
     */
    async provideBrowseConfiguration() {
        return this.workspaceBrowseConfiguration;
    }
    async canProvideBrowseConfigurationsPerFolder() {
        return true;
    }
    async provideFolderBrowseConfiguration(uri) {
        var _a;
        return (_a = this.workspaceBrowseConfigurations.get(util.platformNormalizePath(uri.fsPath))) !== null && _a !== void 0 ? _a : null;
    }
    /** No-op */
    dispose() { }
    /**
     * Create a source file configuration for the given file group.
     * @param fileGroup The file group from the code model to create config data for
     * @param opts Index update options
     */
    buildConfigurationData(fileGroup, opts, target, sysroot) {
        var _a, _b, _c, _d;
        // For CppTools V6 and above, build the compilerFragments data, otherwise build compilerArgs data
        const useFragments = this.cpptoolsVersion >= cpptools.Version.v6;
        // If the file didn't have a language, default to C++
        const lang = fileGroup.language === "RC" ? undefined : fileGroup.language;
        // First try to get toolchain values directly reported by CMake. Check the
        // group's language compiler, then the C++ compiler, then the C compiler.
        let compilerToolchains;
        if ("toolchains" in opts.codeModelContent) {
            compilerToolchains = ((_a = opts.codeModelContent.toolchains) === null || _a === void 0 ? void 0 : _a.get(lang !== null && lang !== void 0 ? lang : ""))
                || ((_b = opts.codeModelContent.toolchains) === null || _b === void 0 ? void 0 : _b.get('CXX'))
                || ((_c = opts.codeModelContent.toolchains) === null || _c === void 0 ? void 0 : _c.get('C'));
        }
        // If none of those work, fall back to the same order, but in the cache.
        const compilerCache = opts.cache.get(`CMAKE_${lang}_COMPILER`)
            || opts.cache.get('CMAKE_CXX_COMPILER')
            || opts.cache.get('CMAKE_C_COMPILER');
        // Try to get the path to the compiler we want to use
        const compilerPath = compilerToolchains ? compilerToolchains.path : (compilerCache ? compilerCache.as() : opts.clCompilerPath);
        if (!compilerPath) {
            throw new MissingCompilerException();
        }
        const targetFromToolchains = compilerToolchains === null || compilerToolchains === void 0 ? void 0 : compilerToolchains.target;
        const targetArchFromToolchains = targetFromToolchains ? parseTargetArch(targetFromToolchains) : undefined;
        const normalizedCompilerPath = util.platformNormalizePath(compilerPath);
        let compileCommandFragments = useFragments ? (fileGroup.compileCommandFragments || target.compileCommandFragments) : [];
        const getAsFlags = (fragments) => {
            if (!fragments) {
                return [];
            }
            return [...util.flatMap(fragments, fragment => shlex.split(fragment))];
        };
        let flags = [];
        let extraDefinitions = [];
        let standard;
        let targetArch;
        let intelliSenseMode;
        let defines = (fileGroup.defines || target.defines || []);
        if (!useFragments) {
            // Send the intelliSenseMode and standard only for CppTools API v5 and below.
            flags = getAsFlags(fileGroup.compileCommandFragments || target.compileCommandFragments);
            ({ extraDefinitions, standard, targetArch } = parseCompileFlags(this.cpptoolsVersion, flags, lang));
            defines = defines.concat(extraDefinitions);
            intelliSenseMode = getIntelliSenseMode(this.cpptoolsVersion, compilerPath, targetArchFromToolchains !== null && targetArchFromToolchains !== void 0 ? targetArchFromToolchains : targetArch);
        }
        const frameworkPaths = Array.from(new Set(((_d = fileGroup.frameworks) !== null && _d !== void 0 ? _d : []).map(f => path.dirname(f.path))));
        const includePath = (fileGroup.includePath ? fileGroup.includePath.map(p => p.path) : target.includePath || []).concat(frameworkPaths);
        const normalizedIncludePath = includePath.map(p => util.platformNormalizePath(p));
        const newBrowsePath = this.workspaceBrowseConfiguration.browsePath;
        for (const includePathItem of normalizedIncludePath) {
            if (newBrowsePath.indexOf(includePathItem) < 0) {
                newBrowsePath.push(includePathItem);
            }
        }
        if (sysroot) {
            if (useFragments) {
                // Pass sysroot (without quote added) as the only compilerArgs for CppTools API V6 and above.
                flags.push(`--sysroot=${sysroot}`);
            }
            else {
                // Send sysroot with quoting for CppTools API V5 and below.
                flags.push(`--sysroot=${shlex.quote(sysroot)}`);
            }
        }
        if (targetFromToolchains) {
            if (useFragments) {
                compileCommandFragments = compileCommandFragments.slice(0);
                compileCommandFragments.push(`--target=${targetFromToolchains}`);
            }
            else {
                flags.push(`--target=${targetFromToolchains}`);
            }
        }
        this.workspaceBrowseConfiguration = {
            browsePath: newBrowsePath,
            compilerPath: normalizedCompilerPath || undefined,
            compilerArgs: flags,
            compilerFragments: useFragments ? compileCommandFragments : undefined,
            standard
            // windowsSdkVersion
        };
        this.workspaceBrowseConfigurations.set(util.platformNormalizePath(opts.folder), this.workspaceBrowseConfiguration);
        return {
            includePath: normalizedIncludePath,
            defines,
            intelliSenseMode,
            standard,
            // forcedInclude,
            compilerPath: normalizedCompilerPath || undefined,
            compilerArgs: flags,
            compilerFragments: useFragments ? compileCommandFragments : undefined
            // windowsSdkVersion
        };
    }
    /**
     * Update the configuration index for the files in the given file group
     * @param sourceDir The source directory where the file group was defined. Used to resolve
     * relative paths
     * @param fileGroup The file group
     * @param options Index update options
     */
    updateFileGroup(sourceDir, fileGroup, options, target, sysroot) {
        const configuration = this.buildConfigurationData(fileGroup, options, target, sysroot);
        for (const src of fileGroup.sources) {
            const absolutePath = path.isAbsolute(src) ? src : path.join(sourceDir, src);
            const normalizedAbsolutePath = util.platformNormalizePath(absolutePath);
            if (this.fileIndex.has(normalizedAbsolutePath)) {
                this.fileIndex.get(normalizedAbsolutePath).set(target.name, {
                    uri: vscode.Uri.file(absolutePath).toString(),
                    configuration
                });
            }
            else {
                const data = new Map();
                data.set(target.name, {
                    uri: vscode.Uri.file(absolutePath).toString(),
                    configuration
                });
                this.fileIndex.set(normalizedAbsolutePath, data);
            }
            const dir = path.dirname(normalizedAbsolutePath);
            if (this.workspaceBrowseConfiguration.browsePath.indexOf(dir) < 0) {
                this.workspaceBrowseConfiguration.browsePath.push(dir);
            }
        }
    }
    /**
     * Update the file index and code model
     * @param opts Update parameters
     */
    updateConfigurationData(opts) {
        // Reset the counters for diagnostics
        this.requests.clear();
        this.responses.clear();
        this.buildTypesSeen.clear();
        this.targets = [];
        let hadMissingCompilers = false;
        this.workspaceBrowseConfiguration = { browsePath: [] };
        this.activeTarget = opts.activeTarget;
        this.activeBuildType = opts.activeBuildTypeVariant;
        for (const config of opts.codeModelContent.configurations) {
            this.buildTypesSeen.add(config.name);
        }
        if (this.buildTypesSeen.size > 0 && !this.buildTypesSeen.has(opts.activeBuildTypeVariant || "")) {
            const configName = opts.codeModelContent.configurations[0].name;
            log.warning(localize(5, null, `"${configName}"`, `"${opts.activeBuildTypeVariant}"`));
            opts.activeBuildTypeVariant = configName;
        }
        for (const config of opts.codeModelContent.configurations) {
            // Update only the active build type variant.
            if (config.name === opts.activeBuildTypeVariant || (!opts.activeBuildTypeVariant && config.name === "")) {
                for (const project of config.projects) {
                    for (const target of project.targets) {
                        // Now some shenanigans since header files don't have config data:
                        // 1. Accumulate some "defaults" based on the set of all options for each file group
                        // 2. Pass these "defaults" down when rebuilding the config data
                        // 3. Any `fileGroup` that does not have the associated attribute will receive the `default`
                        const grps = target.fileGroups || [];
                        const includePath = [...new Set(util.flatMap(grps, grp => grp.includePath || []))].map(item => item.path);
                        const compileCommandFragments = [...util.first(grps, grp => grp.compileCommandFragments || [])];
                        const defines = [...new Set(util.flatMap(grps, grp => grp.defines || []))];
                        const sysroot = target.sysroot;
                        this.targets.push({ name: target.name, type: target.type });
                        for (const grp of target.fileGroups || []) {
                            try {
                                this.updateFileGroup(target.sourceDirectory || '', grp, opts, {
                                    name: target.name,
                                    compileCommandFragments,
                                    includePath,
                                    defines
                                }, sysroot);
                            }
                            catch (e) {
                                if (e instanceof MissingCompilerException) {
                                    hadMissingCompilers = true;
                                }
                                else {
                                    throw e;
                                }
                            }
                        }
                    }
                }
                break;
            }
        }
        if (hadMissingCompilers && this.lastUpdateSucceeded) {
            void vscode.window.showErrorMessage(localize(6, null));
        }
        this.lastUpdateSucceeded = !hadMissingCompilers;
    }
    get ready() {
        return this.readyFlag;
    }
    markAsReady() {
        this.readyFlag = true;
    }
    getDiagnostics() {
        const partialMatches = [];
        for (const request of this.requests) {
            const uri = vscode.Uri.parse(request);
            const configuration = this.getConfiguration(uri);
            if (!configuration) {
                const fileName = path.basename(uri.fsPath);
                const matches = [];
                for (const [key, _] of this.fileIndex) {
                    if (path.basename(key) === fileName) {
                        matches.push(key);
                    }
                }
                if (matches.length === 1) {
                    partialMatches.push({ request, matches: matches.toString() });
                }
                else if (matches.length > 1) {
                    partialMatches.push({ request, matches });
                }
            }
        }
        return {
            isReady: this.readyFlag,
            hasCodeModel: this.fileIndex.size > 0,
            activeBuildType: this.activeBuildType || "",
            buildTypesSeen: [...this.buildTypesSeen.values()],
            requests: [...this.requests.values()],
            responses: [...this.responses.values()],
            partialMatches,
            targetCount: this.targets.length,
            executablesCount: this.targets.reduce((acc, target) => target.type === 'EXECUTABLE' ? acc + 1 : acc, 0),
            librariesCount: this.targets.reduce((acc, target) => target.type.endsWith('LIBRARY') ? acc + 1 : acc, 0),
            targets: this.targets.length < 20 ? this.targets : []
        };
    }
}
exports.CppConfigurationProvider = CppConfigurationProvider;


/***/ }),

/***/ 98454:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.deIntegrateTestExplorer = exports.CTestDriver = exports.readTestResultsFile = void 0;
const path = __webpack_require__(71017);
const vscode = __webpack_require__(89496);
const xml2js = __webpack_require__(97493);
const zlib = __webpack_require__(59796);
const logging = __webpack_require__(71067);
const pr_1 = __webpack_require__(72502);
const util = __webpack_require__(16182);
const nls = __webpack_require__(33463);
const preset_1 = __webpack_require__(10739);
const expand_1 = __webpack_require__(77504);
const extension_1 = __webpack_require__(12406);
nls.config({ messageFormat: nls.MessageFormat.bundle, bundleFormat: nls.BundleFormat.standalone })((__webpack_require__(71017).join)(__dirname, 'src\\ctest.ts'));
const localize = nls.loadMessageBundle((__webpack_require__(71017).join)(__dirname, 'src\\ctest.ts'));
const log = logging.createLogger('ctest');
const magicKey = 'ctest.magic.key';
// Used as magic value
let sessionNum = 0;
// Placeholder in the test explorer when test preset is not selected
const testPresetRequired = '_test_preset_required_';
function parseXmlString(xml) {
    return new Promise((resolve, reject) => {
        xml2js.parseString(xml, (err, result) => {
            if (err) {
                reject(err);
            }
            else {
                resolve(result);
            }
        });
    });
}
function decodeOutputMeasurement(node) {
    if (typeof node === 'string') {
        return node;
    }
    let buffer = !!node.$.encoding ? Buffer.from(node._, node.$.encoding) : Buffer.from(node._, 'utf-8');
    if (!!node.$.compression) {
        buffer = zlib.unzipSync(buffer);
    }
    return buffer.toString('utf-8');
}
function cleanupResultsXml(messy) {
    const testingHead = messy.Site.Testing[0];
    if (testingHead.TestList.length === 1 && testingHead.TestList[0] === '') {
        // XML parsing is obnoxious. This condition means that there are no tests,
        // but CTest is still enabled.
        return {
            site: {
                $: messy.Site.$,
                testing: {
                    testList: [],
                    test: []
                }
            }
        };
    }
    return {
        site: {
            $: messy.Site.$,
            testing: {
                testList: testingHead.TestList[0].Test,
                test: testingHead.Test.map((test) => {
                    const measurements = new Map();
                    for (const namedMeasurement of test.Results[0].NamedMeasurement) {
                        measurements.set(namedMeasurement.$.name, {
                            type: namedMeasurement.$.type,
                            name: namedMeasurement.$.name,
                            value: decodeOutputMeasurement(namedMeasurement.Value[0])
                        });
                    }
                    return {
                        fullName: test.FullName[0],
                        fullCommandLine: test.FullCommandLine[0],
                        name: test.Name[0],
                        path: test.Path[0],
                        status: test.$.Status,
                        measurements,
                        output: decodeOutputMeasurement(test.Results[0].Measurement[0].Value[0])
                    };
                })
            }
        }
    };
}
async function readTestResultsFile(testXml) {
    try {
        const content = (await pr_1.fs.readFile(testXml)).toString();
        const data = await parseXmlString(content);
        const clean = cleanupResultsXml(data);
        return clean;
    }
    catch (_a) {
        return undefined;
    }
}
exports.readTestResultsFile = readTestResultsFile;
class CTestOutputLogger {
    output(line) {
        log.info(line);
    }
    error(line) {
        this.output(line);
    }
}
class CTestDriver {
    /**
     * @param projectController Required for test explorer to work properly. Setting as optional to avoid breaking tests.
     */
    constructor(ws, projectController) {
        this.ws = ws;
        this.projectController = projectController;
        this._testingEnabled = false;
        this.testingEnabledEmitter = new vscode.EventEmitter();
        this.onTestingEnabledChanged = this.testingEnabledEmitter.event;
        this.testsChangedEmitter = new vscode.EventEmitter();
        this.onTestsChanged = this.testsChangedEmitter.event;
    }
    get testingEnabled() {
        return this._testingEnabled;
    }
    set testingEnabled(v) {
        this._testingEnabled = v;
        this.testingEnabledEmitter.fire(v);
    }
    dispose() {
        this.testingEnabledEmitter.dispose();
        this.testsChangedEmitter.dispose();
    }
    get tests() {
        return this._tests;
    }
    set tests(v) {
        this._tests = v;
        this.testsChangedEmitter.fire(v);
    }
    testItemCollectionToArray(collection) {
        if (!collection) {
            return [];
        }
        const items = [];
        collection.forEach(item => items.push(item));
        return items;
    }
    ;
    async getCTestArgs(driver, customizedTask = false, testPreset) {
        let ctestArgs;
        const opts = driver.expansionOptions;
        const initialArgs = await Promise.all(this.ws.config.ctestDefaultArgs.map(async (value) => (0, expand_1.expandString)(value, driver.expansionOptions)));
        const additionalArgs = await Promise.all(this.ws.config.ctestArgs.map(async (value) => (0, expand_1.expandString)(value, driver.expansionOptions)));
        ctestArgs = initialArgs.slice(0);
        if (customizedTask && testPreset) {
            ctestArgs = ctestArgs.concat((0, preset_1.testArgs)(testPreset));
        }
        else if (!customizedTask && driver.useCMakePresets) {
            if (!driver.testPreset) {
                // Test explorer doesn't handle errors well, so we need to deal with them ourselves
                return undefined;
            }
            // Add a few more args so we can show the result in status bar
            ctestArgs = ctestArgs.concat((0, preset_1.testArgs)(driver.testPreset));
        }
        else {
            const configuration = driver.currentBuildType;
            const jobs = await (0, expand_1.expandString)(this.ws.config.numCTestJobs, opts);
            ctestArgs = [`-j${jobs}`, '-C', configuration].concat(ctestArgs);
        }
        ctestArgs = ctestArgs.concat(additionalArgs);
        return ctestArgs;
    }
    async runCTest(driver, customizedTask = false, testPreset, consumer) {
        if (!customizedTask) {
            // We don't want to focus on log channel when running tasks.
            log.showChannel();
        }
        if (this.ws.config.testExplorerIntegrationEnabled) {
            if (!testExplorer) {
                await this.refreshTests(driver);
            }
            if (!testExplorer) {
                log.info(localize(0, null));
                return -1;
            }
            if (!this.ws.config.ctestAllowParallelJobs) {
                const tests = this.testItemCollectionToArray(testExplorer.items);
                const run = testExplorer.createTestRun(new vscode.TestRunRequest());
                const ctestArgs = await this.getCTestArgs(driver, customizedTask, testPreset);
                const returnCode = await this.runCTestHelper(tests, run, driver, undefined, ctestArgs, undefined, customizedTask, consumer);
                run.end();
                return returnCode;
            }
            else {
                const retc = await this.runCTestDirectly(driver, customizedTask, testPreset, consumer);
                // not sure if direct comparison can be made to replace reloadTests with refreshTests
                await this.refreshTests(driver);
                return retc;
            }
        }
        else {
            return this.runCTestDirectly(driver, customizedTask, testPreset, consumer);
        }
    }
    async runCTestDirectly(driver, customizedTask = false, testPreset, consumer) {
        // below code taken from #3032 PR (before changes in how tests are run)
        const ctestpath = await this.ws.getCTestPath(driver.cmakePathFromPreset);
        if (ctestpath === null) {
            log.info(localize(1, null));
            return -2;
        }
        const ctestArgs = await this.getCTestArgs(driver, customizedTask, testPreset);
        if (!driver.testPreset && driver.useCMakePresets) {
            log.error('test.preset.not.set', 'Test preset is not set');
            return -3;
        }
        const child = driver.executeCommand(ctestpath, ctestArgs, ((customizedTask && consumer) ? consumer : new CTestOutputLogger()), { environment: await driver.getCTestCommandEnvironment(), cwd: driver.binaryDir });
        const res = await child.result;
        if (res.retc === null) {
            log.info(localize(2, null));
            return -1;
        }
        else {
            log.info(localize(3, null, res.retc));
        }
        return res.retc;
    }
    ctestsEnqueued(tests, run) {
        for (const test of tests) {
            if (test.children.size > 0) {
                const children = this.testItemCollectionToArray(test.children);
                this.ctestsEnqueued(children, run);
            }
            else {
                run.enqueued(test);
            }
        }
    }
    ctestErrored(test, run, message) {
        if (test.children.size > 0) {
            const children = this.testItemCollectionToArray(test.children);
            for (const child of children) {
                this.ctestErrored(child, run, message);
            }
        }
        else {
            if (test.uri && test.range) {
                message.location = new vscode.Location(test.uri, test.range);
            }
            else {
                log.error(message.message);
            }
            run.errored(test, message);
        }
    }
    ctestFailed(test, run, message, duration) {
        if (test.uri && test.range) {
            message.location = new vscode.Location(test.uri, test.range);
        }
        else {
            log.info(message);
        }
        run.failed(test, message, duration);
    }
    async runCTestHelper(tests, run, driver, ctestPath, ctestArgs, cancellation, customizedTask = false, consumer) {
        var _a, _b, _c, _d, _e;
        let returnCode = 0;
        for (const test of tests) {
            if (cancellation && cancellation.isCancellationRequested) {
                run.skipped(test);
                continue;
            }
            let _driver;
            if (driver) {
                _driver = driver;
            }
            else {
                const folder = test.parent ? test.parent.id : test.id;
                const project = await ((_a = this.projectController) === null || _a === void 0 ? void 0 : _a.getProjectForFolder(folder));
                if (!project) {
                    this.ctestErrored(test, run, { message: localize(4, null, folder) });
                    continue;
                }
                _driver = await project.getCMakeDriverInstance();
                if (!_driver) {
                    this.ctestErrored(test, run, { message: localize(5, null, folder) });
                    continue;
                }
            }
            let _ctestPath;
            if (ctestPath) {
                _ctestPath = ctestPath;
            }
            else {
                _ctestPath = await this.ws.getCTestPath(_driver.cmakePathFromPreset);
                if (_ctestPath === null) {
                    this.ctestErrored(test, run, { message: localize(6, null) });
                    continue;
                }
            }
            let _ctestArgs;
            if (ctestArgs) {
                _ctestArgs = ctestArgs;
            }
            else {
                _ctestArgs = await this.getCTestArgs(_driver, customizedTask);
            }
            if (!_ctestArgs) {
                this.ctestErrored(test, run, { message: localize(7, null) });
                continue;
            }
            if (test.children.size > 0) {
                // Shouldn't reach here now, but not hard to write so keeping it in case we want to have more complicated test hierarchies
                const children = this.testItemCollectionToArray(test.children);
                if (await this.runCTestHelper(children, run, _driver, _ctestPath, _ctestArgs, cancellation, customizedTask, consumer)) {
                    returnCode = -1;
                }
            }
            else {
                run.started(test);
                const testResults = await this.runCTestImpl(_driver, _ctestPath, _ctestArgs, test.id, customizedTask, consumer);
                let foundTestResult = false;
                // Only show the first failure
                let havefailures = false;
                let duration;
                if (testResults) {
                    for (let i = 0; i < testResults.site.testing.test.length; i++) {
                        const testName = testResults.site.testing.test[i].name;
                        if (testName === test.id) {
                            foundTestResult = true;
                            const durationStr = (_b = testResults.site.testing.test[i].measurements.get("Execution Time")) === null || _b === void 0 ? void 0 : _b.value;
                            duration = durationStr ? parseFloat(durationStr) * 1000 : undefined;
                        }
                        let output = testResults.site.testing.test[i].output;
                        if (process.platform === 'win32') {
                            output = output.replace(/\r?\n/g, '\r\n');
                        }
                        run.appendOutput(output);
                        if (testResults.site.testing.test[i].status !== 'passed' && !havefailures) {
                            const failureDurationStr = (_c = testResults.site.testing.test[i].measurements.get("Execution Time")) === null || _c === void 0 ? void 0 : _c.value;
                            const failureDuration = failureDurationStr ? parseFloat(failureDurationStr) * 1000 : undefined;
                            const exitCode = (_d = testResults.site.testing.test[i].measurements.get("Exit Value")) === null || _d === void 0 ? void 0 : _d.value;
                            const completionStatus = (_e = testResults.site.testing.test[i].measurements.get("Completion Status")) === null || _e === void 0 ? void 0 : _e.value;
                            if (exitCode !== undefined) {
                                this.ctestFailed(test, run, new vscode.TestMessage(localize(8, null, testName, exitCode)), failureDuration);
                            }
                            else if (completionStatus !== undefined) {
                                this.ctestErrored(test, run, new vscode.TestMessage(localize(9, null, testName, completionStatus)));
                            }
                            else {
                                this.ctestErrored(test, run, new vscode.TestMessage(localize(10, null, testName)));
                            }
                            havefailures = true;
                            returnCode = -1;
                        }
                    }
                }
                if (!foundTestResult && !havefailures) {
                    this.ctestFailed(test, run, new vscode.TestMessage(localize(11, null)));
                    havefailures = true;
                    returnCode = -1;
                }
                if (!havefailures) {
                    run.passed(test, duration);
                }
            }
        }
        return returnCode;
    }
    ;
    async runCTestImpl(driver, ctestPath, ctestArgs, testName, customizedTask = false, consumer) {
        const child = driver.executeCommand(ctestPath, ctestArgs.concat('-R', `^${util.escapeStringForRegex(testName)}\$`), ((customizedTask && consumer) ? consumer : new CTestOutputLogger()), { environment: await driver.getCTestCommandEnvironment(), cwd: driver.binaryDir });
        const res = await child.result;
        if (res.retc === null) {
            log.info(localize(12, null));
        }
        else {
            log.info(localize(13, null, res.retc));
        }
        const tagFile = path.join(driver.binaryDir, 'Testing', 'TAG');
        const tag = (await pr_1.fs.exists(tagFile)) ? (await pr_1.fs.readFile(tagFile)).toString().split('\n')[0].trim() : null;
        const tagDir = tag ? path.join(driver.binaryDir, 'Testing', tag) : null;
        const resultsFile = tagDir ? path.join(tagDir, 'Test.xml') : null;
        if (resultsFile && await pr_1.fs.exists(resultsFile)) {
            // TODO: Should we handle the case where resultsFiles doesn't exist?
            console.assert(tagDir);
            return readTestResultsFile(resultsFile);
        }
        return undefined;
    }
    /**
     * @brief Refresh the list of CTest tests
     * @returns 0 when successful
     */
    async refreshTests(driver) {
        var _a, _b, _c;
        // NOTE: If the cmake.ctest.testExplorerIntegrationEnabled is disabled, we should return early and not initialize
        // the testExplorer.
        if (!driver.config.testExplorerIntegrationEnabled) {
            // Test Explorer integration is disabled
            return -1;
        }
        if (util.isTestMode()) {
            // ProjectController can't be initialized in test mode, so we don't have a usable test explorer
            return 0;
        }
        const initializedTestExplorer = this.ensureTestExplorerInitialized();
        const sourceDir = util.platformNormalizePath(driver.sourceDir);
        const testExplorerRoot = initializedTestExplorer.items.get(sourceDir);
        if (!testExplorerRoot) {
            log.error(localize(14, null, sourceDir));
            return -1;
        }
        // Clear all children and re-add later
        testExplorerRoot.children.replace([]);
        // TODO: There's no way to mark tests as outdated now.
        const ctestFile = path.join(driver.binaryDir, 'CTestTestfile.cmake');
        if (!(await pr_1.fs.exists(ctestFile))) {
            this.testingEnabled = false;
            return -1;
        }
        this.testingEnabled = true;
        const ctestpath = await this.ws.getCTestPath(driver.cmakePathFromPreset);
        if (ctestpath === null) {
            log.info(localize(15, null));
            return -2;
        }
        const ctestArgs = await this.getCTestArgs(driver);
        if (!ctestArgs) {
            // Happens when testPreset is not selected
            const testItem = initializedTestExplorer.createTestItem(testPresetRequired, localize(16, null));
            testExplorerRoot.children.add(testItem);
            return 0;
        }
        if (!driver.cmake.version || util.versionLess(driver.cmake.version, { major: 3, minor: 14, patch: 0 })) {
            // ctest --show-only=json-v1 was added in CMake 3.14
            const result = await driver.executeCommand(ctestpath, ['-N', ...ctestArgs], undefined, { cwd: driver.binaryDir, silent: true }).result;
            if (result.retc !== 0) {
                // There was an error running CTest. Odd...
                log.error(localize(17, null));
                return result.retc || -3;
            }
            const tests = (_b = (_a = result.stdout) === null || _a === void 0 ? void 0 : _a.split('\n').map(l => l.trim()).filter(l => /^Test\s*#(\d+):\s(.*)/.test(l)).map(l => /^Test\s*#(\d+):\s(.*)/.exec(l)).map(([, id, tname]) => ({ id: parseInt(id), name: tname }))) !== null && _b !== void 0 ? _b : [];
            // Add tests to the test explorer
            for (const test of tests) {
                testExplorerRoot.children.add(initializedTestExplorer.createTestItem(test.name, test.name));
            }
        }
        else {
            const result = await driver.executeCommand(ctestpath, ['--show-only=json-v1', ...ctestArgs], undefined, { cwd: driver.binaryDir, silent: true }).result;
            if (result.retc !== 0) {
                // There was an error running CTest. Odd...
                log.error(localize(18, null));
                return result.retc || -3;
            }
            this.tests = (_c = JSON.parse(result.stdout)) !== null && _c !== void 0 ? _c : undefined;
            if (this.tests && this.tests.kind === 'ctestInfo') {
                this.tests.tests.forEach(test => {
                    let testItem;
                    if (test.backtrace !== undefined && this.tests.backtraceGraph.nodes[test.backtrace] !== undefined) {
                        const testDefFile = this.tests.backtraceGraph.files[this.tests.backtraceGraph.nodes[test.backtrace].file];
                        const testDefLine = this.tests.backtraceGraph.nodes[test.backtrace].line;
                        testItem = initializedTestExplorer.createTestItem(test.name, test.name, vscode.Uri.file(testDefFile));
                        if (testDefLine !== undefined) {
                            testItem.range = new vscode.Range(new vscode.Position(testDefLine - 1, 0), new vscode.Position(testDefLine - 1, 0));
                        }
                    }
                    else {
                        testItem = initializedTestExplorer.createTestItem(test.name, test.name);
                    }
                    const testTags = [];
                    if (test.properties) {
                        for (const property of test.properties) {
                            if (property.name === "LABELS") {
                                if (util.isString(property.value)) {
                                    testTags.push(new vscode.TestTag(property.value));
                                }
                                else {
                                    testTags.push(...property.value.map(v => new vscode.TestTag(v)));
                                }
                            }
                        }
                    }
                    if (testTags.length !== 0) {
                        testItem.tags = [...testItem.tags, ...testTags];
                    }
                    testExplorerRoot.children.add(testItem);
                });
            }
            ;
        }
        return 0;
    }
    clearTests(driver) {
        // NOTE: We expect the testExplorer to be undefined when the cmake.ctest.testExplorerIntegrationEnabled is disabled.
        if (!testExplorer) {
            return;
        }
        const sourceDir = util.platformNormalizePath(driver.sourceDir);
        const testExplorerRoot = testExplorer.items.get(sourceDir);
        if (!testExplorerRoot) {
            log.error(localize(19, null, sourceDir));
            return;
        }
        testExplorerRoot.children.replace([]);
    }
    /**
     * Filters out duplicate tests, i.e., both the parent and child are requested
     */
    uniqueTests(tests) {
        const parents = new Set();
        tests.forEach(t => {
            if (!t.parent) {
                parents.add(t.id);
            }
        });
        const uniqueTests = [];
        tests.forEach(t => {
            if (!t.parent || !parents.has(t.parent.id)) {
                uniqueTests.push(t);
            }
        });
        return uniqueTests;
    }
    /**
     * This function checks if tests require test presets already have a test preset selected.
     * Check is done by looking for magic test item testPresetRequired. When test preset is not selected, there will
     * be one and only one such test item under that folder.
     * When test preset is not selected, this function will prompt for test preset selection. Changing test preset triggers
     * test explorer refresh.
     *
     * Returns false if any test preset wasn't selected already. This means either test explorer is going to be refreshed,
     * or user cancelled the selection. So we shouldn't proceed in most cases.
     */
    async checkTestPreset(tests) {
        var _a;
        let presetMayChange = false;
        for (const test of tests) {
            if (test.id === testPresetRequired) {
                const folder = test.parent ? test.parent.id : test.id;
                const project = await ((_a = this.projectController) === null || _a === void 0 ? void 0 : _a.getProjectForFolder(folder));
                if (!project) {
                    log.error(localize(20, null, folder));
                    return false;
                }
                await vscode.commands.executeCommand('cmake.selectTestPreset', project.workspaceFolder);
                presetMayChange = true;
            }
        }
        if (presetMayChange) {
            return false;
        }
        return true;
    }
    async runTestHandler(request, cancellation) {
        // NOTE: We expect the testExplorer to be undefined when the cmake.ctest.testExplorerIntegrationEnabled is disabled.
        if (!testExplorer) {
            return;
        }
        const requestedTests = request.include || this.testItemCollectionToArray(testExplorer.items);
        const tests = this.uniqueTests(requestedTests);
        if (!await this.checkTestPreset(tests)) {
            return;
        }
        const run = testExplorer.createTestRun(request);
        this.ctestsEnqueued(tests, run);
        const buildSucceeded = await this.buildTests(tests, run);
        if (buildSucceeded) {
            await this.runCTestHelper(tests, run, undefined, undefined, undefined, cancellation);
        }
        else {
            log.info(localize(21, null));
        }
        run.end();
    }
    ;
    async debugCTestHelper(tests, run, cancellation) {
        var _a;
        let returnCode = 0;
        if (!await this.checkTestPreset(tests)) {
            return -2;
        }
        for (const test of tests) {
            if (cancellation && cancellation.isCancellationRequested) {
                run.skipped(test);
                continue;
            }
            const folder = test.parent ? test.parent.id : test.id;
            const project = await ((_a = this.projectController) === null || _a === void 0 ? void 0 : _a.getProjectForFolder(folder));
            if (!project) {
                this.ctestErrored(test, run, { message: localize(22, null, folder) });
                continue;
            }
            const workspaceFolder = project.workspaceFolder;
            if (test.children.size > 0) {
                // Shouldn't reach here now, but not hard to write so keeping it in case we want to have more complicated test hierarchies
                const children = this.testItemCollectionToArray(test.children);
                if (await this.debugCTestHelper(children, run, cancellation)) {
                    returnCode = -1;
                }
            }
            else {
                run.started(test);
                await this.debugCTestImpl(workspaceFolder, test.id, cancellation);
                // We have no way to get the result, so just mark it as skipped
                run.skipped(test);
            }
        }
        return returnCode;
    }
    async debugCTestImpl(workspaceFolder, testName, cancellation) {
        var _a, _b;
        const magicValue = sessionNum++;
        const launchConfig = vscode.workspace.getConfiguration('launch', workspaceFolder.uri);
        const workspaceLaunchConfig = vscode.workspace.workspaceFile ? vscode.workspace.getConfiguration('launch', vscode.workspace.workspaceFile) : undefined;
        const configs = (_a = launchConfig.get('configurations')) !== null && _a !== void 0 ? _a : [];
        const workspaceConfigs = (_b = workspaceLaunchConfig === null || workspaceLaunchConfig === void 0 ? void 0 : workspaceLaunchConfig.get('configurations')) !== null && _b !== void 0 ? _b : [];
        if (configs.length === 0 && workspaceConfigs.length === 0) {
            log.error(localize(23, null));
            return;
        }
        let allConfigItems = configs.map(config => ({ label: config.name, config, folder: workspaceFolder, detail: workspaceFolder.uri.fsPath }));
        allConfigItems = allConfigItems.concat(workspaceConfigs.map(config => ({ label: config.name, config, detail: vscode.workspace.workspaceFile.fsPath })));
        let chosenConfig;
        if (allConfigItems.length === 1) {
            chosenConfig = allConfigItems[0];
        }
        else {
            // TODO: we can remember the last choice once the CMake side panel work is done
            const chosen = await vscode.window.showQuickPick(allConfigItems, { placeHolder: localize(24, null) });
            if (chosen) {
                chosenConfig = chosen;
            }
            else {
                return;
            }
        }
        // Commands can't be used to replace array (i.e., args); and both test program and test args requires folder and
        // test name as parameters, which means one lauch config for each test. So replacing them here is a better way.
        chosenConfig.config = this.replaceAllInObject(chosenConfig.config, '${cmake.testProgram}', this.testProgram(testName));
        chosenConfig.config = this.replaceAllInObject(chosenConfig.config, '${cmake.testWorkingDirectory}', this.testWorkingDirectory(testName));
        // Replace cmake.testArgs wrapped in quotes, like `"${command:cmake.testArgs}"`, without any spaces in between,
        // since we need to repalce the quotes as well.
        chosenConfig.config = this.replaceArrayItems(chosenConfig.config, '${cmake.testArgs}', this.testArgs(testName));
        // Identify the session we started
        chosenConfig.config[magicKey] = magicValue;
        let onDidStartDebugSession;
        let onDidTerminateDebugSession;
        let sessionId;
        const started = new Promise(resolve => {
            onDidStartDebugSession = vscode.debug.onDidStartDebugSession((session) => {
                if (session.configuration[magicKey] === magicValue) {
                    sessionId = session.id;
                    resolve(session);
                }
            });
        });
        const terminated = new Promise(resolve => {
            onDidTerminateDebugSession = vscode.debug.onDidTerminateDebugSession((session) => {
                if (session.id === sessionId) {
                    resolve();
                }
            });
        }).finally(() => {
            log.info('debugSessionTerminated');
        });
        const debugStarted = await vscode.debug.startDebugging(chosenConfig.folder, chosenConfig.config);
        if (debugStarted) {
            const session = await started;
            if (session) {
                cancellation.onCancellationRequested(() => {
                    void vscode.debug.stopDebugging(session);
                });
            }
            await terminated;
            if (onDidStartDebugSession) {
                onDidStartDebugSession.dispose();
            }
            if (onDidTerminateDebugSession) {
                onDidTerminateDebugSession.dispose();
            }
        }
    }
    testProgram(testName) {
        if (this.tests) {
            for (const test of this.tests.tests) {
                if (test.name === testName) {
                    return test.command[0];
                }
            }
        }
        return '';
    }
    testWorkingDirectory(testName) {
        var _a, _b;
        const property = (_b = (_a = this.tests) === null || _a === void 0 ? void 0 : _a.tests.find(test => test.name === testName)) === null || _b === void 0 ? void 0 : _b.properties.find(prop => prop.name === 'WORKING_DIRECTORY');
        if (typeof (property === null || property === void 0 ? void 0 : property.value) === 'string') {
            return property.value;
        }
        return '';
    }
    testArgs(testName) {
        if (this.tests) {
            for (const test of this.tests.tests) {
                if (test.name === testName) {
                    return test.command.slice(1);
                }
            }
        }
        return [];
    }
    replaceAllInObject(obj, str, replace) {
        const regex = new RegExp(util.escapeStringForRegex(str), 'g');
        if (util.isString(obj)) {
            obj = obj.replace(regex, replace);
        }
        else if (util.isArray(obj)) {
            for (let i = 0; i < obj.length; i++) {
                obj[i] = this.replaceAllInObject(obj[i], str, replace);
            }
        }
        else if (typeof obj === 'object') {
            for (const key of Object.keys(obj)) {
                obj[key] = this.replaceAllInObject(obj[key], str, replace);
            }
        }
        return obj;
    }
    replaceArrayItems(obj, str, replace) {
        if (util.isArray(obj) && obj.length !== 0) {
            const result = [];
            for (let i = 0; i < obj.length; i++) {
                if (util.isArray(obj[i]) || typeof obj[i] === 'object') {
                    result.push(this.replaceArrayItems(obj[i], str, replace));
                }
                else if (util.isString(obj[i])) {
                    const replacedItem = this.replaceArrayItemsHelper(obj[i], str, replace);
                    if (util.isArray(replacedItem)) {
                        result.push(...replacedItem);
                    }
                    else {
                        result.push(replacedItem);
                    }
                }
                else {
                    result.push(obj[i]);
                }
            }
            return result;
        }
        if (typeof obj === 'object') {
            for (const key of Object.keys(obj)) {
                obj[key] = this.replaceArrayItems(obj[key], str, replace);
            }
            return obj;
        }
        return obj;
    }
    replaceArrayItemsHelper(orig, str, replace) {
        if (orig === str) {
            return replace;
        }
        return orig;
    }
    async debugTestHandler(request, cancellation) {
        // NOTE: We expect the testExplorer to be undefined when the cmake.ctest.testExplorerIntegrationEnabled is disabled.
        if (!testExplorer) {
            return;
        }
        const requestedTests = request.include || this.testItemCollectionToArray(testExplorer.items);
        const tests = this.uniqueTests(requestedTests);
        const run = testExplorer.createTestRun(request);
        this.ctestsEnqueued(tests, run);
        const buildSucceeded = await this.buildTests(tests, run);
        if (buildSucceeded) {
            await this.debugCTestHelper(tests, run, cancellation);
        }
        else {
            log.info(localize(25, null));
        }
        run.end();
    }
    ;
    async buildTests(tests, run) {
        var _a;
        // Folder => status
        const builtFolder = new Map();
        let status = 0;
        for (const test of tests) {
            const folder = test.parent ? test.parent.id : test.id;
            if (!builtFolder.has(folder)) {
                const project = await ((_a = this.projectController) === null || _a === void 0 ? void 0 : _a.getProjectForFolder(folder));
                if (!project) {
                    status = 1;
                }
                else {
                    try {
                        if (extension_1.extensionManager !== undefined && extension_1.extensionManager !== null) {
                            extension_1.extensionManager.cleanOutputChannel();
                        }
                        const buildResult = await project.build(undefined, false, false);
                        if (buildResult !== 0) {
                            status = 2;
                        }
                    }
                    catch (e) {
                        status = 2;
                    }
                }
            }
            builtFolder.set(folder, status);
            if (status === 1) {
                this.ctestErrored(test, run, { message: localize(26, null, folder) });
            }
            else if (status === 2) {
                this.ctestErrored(test, run, { message: localize(27, null) });
            }
        }
        return Array.from(builtFolder.values()).filter(v => v !== 0).length === 0;
    }
    /**
     * Initializes the VS Code Test Controller if it is not already initialized.
     * Should only be called by refreshTests since it adds tests to the controller.
     */
    ensureTestExplorerInitialized() {
        // NOTE: We expect the testExplorer to be undefined when the cmake.ctest.testExplorerIntegrationEnabled is disabled.
        if (!testExplorer) {
            testExplorer = vscode.tests.createTestController('cmake-tools.CTest', 'CTest');
            // Cast to any since this is not supported yet in the API we use.
            testExplorer.refreshHandler = () => vscode.commands.executeCommand('cmake.refreshTestsAll');
            if (this.projectController) {
                for (const project of this.projectController.getAllCMakeProjects()) {
                    const folderPath = util.platformNormalizePath(project.sourceDir);
                    const folderName = path.basename(project.sourceDir);
                    const testItem = testExplorer.createTestItem(folderPath, folderName);
                    testItem.description = folderPath;
                    testExplorer.items.add(testItem);
                }
            }
            testExplorer.createRunProfile('Run Tests', vscode.TestRunProfileKind.Run, (request, cancellation) => this.runTestHandler(request, cancellation), true);
            testExplorer.createRunProfile('Debug Tests', vscode.TestRunProfileKind.Debug, (request, cancellation) => this.debugTestHandler(request, cancellation));
        }
        return testExplorer;
    }
    addTestExplorerRoot(folder) {
        // NOTE: We expect the testExplorer to be undefined when the cmake.ctest.testExplorerIntegrationEnabled is disabled.
        if (!testExplorer) {
            return;
        }
        const normalizedFolder = util.platformNormalizePath(folder);
        testExplorer.items.add(testExplorer.createTestItem(normalizedFolder, normalizedFolder));
    }
    removeTestExplorerRoot(folder) {
        // NOTE: We expect the testExplorer to be undefined when the cmake.ctest.testExplorerIntegrationEnabled is disabled.
        if (!testExplorer) {
            return;
        }
        const normalizedFolder = util.platformNormalizePath(folder);
        testExplorer.items.delete(normalizedFolder);
    }
    /**
     * If returning false, the test explorer is not available, and refreshTests can be called to construct it.
     * Since there's no way to reveal the explorer itself, this function reveals the first test in the test explorer.
     */
    async revealTestExplorer() {
        // NOTE: We expect the testExplorer to be undefined when the cmake.ctest.testExplorerIntegrationEnabled is disabled.
        if (!testExplorer) {
            return false;
        }
        const tests = this.testItemCollectionToArray(testExplorer.items);
        if (tests.length === 0) {
            return false;
        }
        await vscode.commands.executeCommand('vscode.revealTestInExplorer', tests[0]);
        return true;
    }
}
exports.CTestDriver = CTestDriver;
// Only have one instance of the test controller
let testExplorer;
function deIntegrateTestExplorer() {
    if (testExplorer) {
        testExplorer.dispose();
        testExplorer = undefined;
    }
}
exports.deIntegrateTestExplorer = deIntegrateTestExplorer;


/***/ }),

/***/ 52563:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.logCMakeDebuggerTelemetry = exports.originatedFromLaunchConfiguration = void 0;
const telemetry = __webpack_require__(21818);
exports.originatedFromLaunchConfiguration = "launchConfiguration";
function logCMakeDebuggerTelemetry(origin, debugType) {
    telemetry.logEvent("cmakeDebugger", {
        origin,
        debugType
    });
}
exports.logCMakeDebuggerTelemetry = logCMakeDebuggerTelemetry;


/***/ }),

/***/ 15965:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DebugAdapterNamedPipeServerDescriptorFactory = void 0;
const extension_1 = __webpack_require__(12406);
const vscode = __webpack_require__(89496);
const debuggerConfigureDriver_1 = __webpack_require__(38129);
const debuggerScriptDriver_1 = __webpack_require__(21254);
const logging = __webpack_require__(71067);
const nls = __webpack_require__(33463);
const pr_1 = __webpack_require__(72502);
const cmakeDebuggerTelemetry_1 = __webpack_require__(52563);
nls.config({ messageFormat: nls.MessageFormat.bundle, bundleFormat: nls.BundleFormat.standalone })((__webpack_require__(71017).join)(__dirname, 'src\\debug\\debugAdapterNamedPipeServerDescriptorFactory.ts'));
const localize = nls.loadMessageBundle((__webpack_require__(71017).join)(__dirname, 'src\\debug\\debugAdapterNamedPipeServerDescriptorFactory.ts'));
const logger = logging.createLogger('debugger');
class DebugAdapterNamedPipeServerDescriptorFactory {
    async createDebugAdapterDescriptor(session, _executable) {
        var _a, _b, _c, _d;
        const pipeName = (_a = session.configuration.pipeName) !== null && _a !== void 0 ? _a : (0, debuggerConfigureDriver_1.getDebuggerPipeName)();
        // undocumented configuration field that lets us know if the session is being invoked from a command
        // This should only be used from inside the extension from a command that invokes the debugger.
        if (!session.configuration.fromCommand) {
            const debuggerInformation = {
                pipeName,
                dapLog: session.configuration.dapLog,
                debuggerIsReady: () => undefined
            };
            const cmakeDebugType = session.configuration.cmakeDebugType;
            if (cmakeDebugType === "configure" || cmakeDebugType === "script") {
                const promise = new Promise((resolve) => {
                    debuggerInformation.debuggerIsReady = resolve;
                });
                if (cmakeDebugType === "script") {
                    const script = session.configuration.scriptPath;
                    if (!pr_1.fs.existsSync(script)) {
                        throw new Error(localize(0, null, script));
                    }
                    const args = (_b = session.configuration.scriptArgs) !== null && _b !== void 0 ? _b : [];
                    const env = (_d = new Map((_c = session.configuration.scriptEnv) === null || _c === void 0 ? void 0 : _c.map((e) => [e.name, e.value]))) !== null && _d !== void 0 ? _d : new Map();
                    (0, cmakeDebuggerTelemetry_1.logCMakeDebuggerTelemetry)(cmakeDebuggerTelemetry_1.originatedFromLaunchConfiguration, cmakeDebugType);
                    void (0, debuggerScriptDriver_1.executeScriptWithDebugger)(script, args, env, debuggerInformation);
                }
                else {
                    (0, cmakeDebuggerTelemetry_1.logCMakeDebuggerTelemetry)(cmakeDebuggerTelemetry_1.originatedFromLaunchConfiguration, cmakeDebugType);
                    if (session.configuration.clean) {
                        if (session.configuration.configureAll) {
                            void (extension_1.extensionManager === null || extension_1.extensionManager === void 0 ? void 0 : extension_1.extensionManager.cleanConfigureAllWithDebuggerInternal(debuggerInformation));
                        }
                        else {
                            void (extension_1.extensionManager === null || extension_1.extensionManager === void 0 ? void 0 : extension_1.extensionManager.cleanConfigureWithDebuggerInternal(debuggerInformation));
                        }
                    }
                    else {
                        if (session.configuration.configureAll) {
                            void (extension_1.extensionManager === null || extension_1.extensionManager === void 0 ? void 0 : extension_1.extensionManager.configureAllWithDebuggerInternal(debuggerInformation));
                        }
                        else {
                            void (extension_1.extensionManager === null || extension_1.extensionManager === void 0 ? void 0 : extension_1.extensionManager.configureWithDebuggerInternal(debuggerInformation));
                        }
                    }
                }
                await promise;
            }
            else if (cmakeDebugType === "external") {
                (0, cmakeDebuggerTelemetry_1.logCMakeDebuggerTelemetry)(cmakeDebuggerTelemetry_1.originatedFromLaunchConfiguration, cmakeDebugType);
            }
        }
        logger.info(localize(1, null, pipeName));
        return new vscode.DebugAdapterNamedPipeServer(pipeName);
    }
}
exports.DebugAdapterNamedPipeServerDescriptorFactory = DebugAdapterNamedPipeServerDescriptorFactory;


/***/ }),

/***/ 1626:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DebugConfigurationProvider = exports.DynamicDebugConfigurationProvider = void 0;
const vscode = __webpack_require__(89496);
const nls = __webpack_require__(33463);
nls.config({ messageFormat: nls.MessageFormat.bundle, bundleFormat: nls.BundleFormat.standalone })((__webpack_require__(71017).join)(__dirname, 'src\\debug\\debugConfigurationProvider.ts'));
const localize = nls.loadMessageBundle((__webpack_require__(71017).join)(__dirname, 'src\\debug\\debugConfigurationProvider.ts'));
class DynamicDebugConfigurationProvider {
    provideDebugConfigurations(_folder, _token) {
        const providers = [];
        providers.push({
            name: 'CMake: CMake Script',
            type: "cmake",
            request: "launch",
            cmakeDebugType: "script",
            scriptPath: '${file}'
        });
        return providers;
    }
}
exports.DynamicDebugConfigurationProvider = DynamicDebugConfigurationProvider;
class DebugConfigurationProvider {
    resolveDebugConfiguration(_folder, debugConfiguration, _token) {
        var _a;
        if (!debugConfiguration.type && !debugConfiguration.request && !debugConfiguration.name) {
            const editor = vscode.window.activeTextEditor;
            if (editor && editor.document.fileName.endsWith(".cmake")) {
                debugConfiguration.type = "cmake";
                debugConfiguration.name = localize(0, null);
                debugConfiguration.request = "launch";
                debugConfiguration.cmakeDebugType = "script";
                debugConfiguration.scriptPath = editor.document.fileName;
            }
            else {
                throw new Error(localize(1, null));
            }
        }
        if (debugConfiguration.request !== "launch") {
            throw new Error(localize(2, null));
        }
        if (debugConfiguration.cmakeDebugType === undefined) {
            throw new Error(localize(3, null));
        }
        else {
            if (debugConfiguration.cmakeDebugType === "external" && debugConfiguration.pipeName === undefined) {
                throw new Error(localize(4, null));
            }
            else if (debugConfiguration.cmakeDebugType === "script" && !(debugConfiguration.scriptPath.endsWith(".cmake") || (debugConfiguration.scriptPath === "${file}" && ((_a = vscode.window.activeTextEditor) === null || _a === void 0 ? void 0 : _a.document.fileName.endsWith(".cmake"))))) {
                throw new Error(localize(5, null));
            }
        }
        return debugConfiguration;
    }
}
exports.DebugConfigurationProvider = DebugConfigurationProvider;


/***/ }),

/***/ 38129:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DebugTrackerFactory = exports.getDebuggerPipeName = void 0;
const uuid_1 = __webpack_require__(79815);
function getDebuggerPipeName() {
    if (process.platform === 'win32') {
        return `\\\\.\\\\pipe\\\\cmake-debugger-pipe\\\\${(0, uuid_1.v4)()}`;
    }
    else {
        return `/tmp/cmake-debugger-pipe-${(0, uuid_1.v4)()}`;
    }
}
exports.getDebuggerPipeName = getDebuggerPipeName;
class DebugTrackerFactory {
    constructor(
    // eslint-disable-next-line arrow-body-style
    onDisconnected = async () => {
        return;
    }) {
        this.onDisconnected = onDisconnected;
    }
    createDebugAdapterTracker(_session) {
        const onDisconnected = this.onDisconnected;
        return {
            async onDidSendMessage(message) {
                if (message.command === "disconnect") {
                    await onDisconnected();
                }
            }
        };
    }
}
exports.DebugTrackerFactory = DebugTrackerFactory;


/***/ }),

/***/ 21254:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.executeScriptWithDebugger = void 0;
const cmake_1 = __webpack_require__(95057);
const proc = __webpack_require__(3477);
const cmakeExecutable_1 = __webpack_require__(87630);
const extension_1 = __webpack_require__(12406);
const logging = __webpack_require__(71067);
const nls = __webpack_require__(33463);
const environmentVariables_1 = __webpack_require__(40085);
nls.config({ messageFormat: nls.MessageFormat.bundle, bundleFormat: nls.BundleFormat.standalone })((__webpack_require__(71017).join)(__dirname, 'src\\debug\\debuggerScriptDriver.ts'));
const localize = nls.loadMessageBundle((__webpack_require__(71017).join)(__dirname, 'src\\debug\\debuggerScriptDriver.ts'));
const cmakeLogger = logging.createLogger('cmake');
const scriptLogger = logging.createLogger('cmake-script');
async function executeScriptWithDebugger(scriptPath, scriptArgs, scriptEnv, debuggerInformation) {
    const outputConsumer = new cmake_1.CMakeOutputConsumer("", scriptLogger);
    // This is dependent on there being an active project. This feels reasonable since we're expecting them to be in a CMake project.
    // However, it could be safer to simply grab the cmake path directly from the settings.
    const cmakeProject = extension_1.extensionManager === null || extension_1.extensionManager === void 0 ? void 0 : extension_1.extensionManager.getActiveProject();
    const cmakePath = await (cmakeProject === null || cmakeProject === void 0 ? void 0 : cmakeProject.getCMakePathofProject());
    if (cmakeProject && cmakePath) {
        const cmakeExe = await (0, cmakeExecutable_1.getCMakeExecutableInformation)(cmakePath);
        if (cmakeExe.isDebuggerSupported) {
            const concreteArgs = ["-P", scriptPath];
            concreteArgs.push(...scriptArgs);
            concreteArgs.push("--debugger");
            concreteArgs.push("--debugger-pipe");
            concreteArgs.push(`${debuggerInformation.pipeName}`);
            if (debuggerInformation.dapLog) {
                concreteArgs.push("--debugger-dap-log");
                concreteArgs.push(debuggerInformation.dapLog);
            }
            cmakeLogger.info(localize(0, null, scriptPath));
            const env = environmentVariables_1.EnvironmentUtils.merge([process.env, environmentVariables_1.EnvironmentUtils.create(scriptEnv)]);
            const child = proc.execute(cmakeExe.path, concreteArgs, outputConsumer, { environment: env });
            while (!outputConsumer.stateMessages.includes(cmake_1.StateMessage.WaitingForDebuggerClient)) {
                await new Promise((resolve) => setTimeout(resolve, 50));
            }
            if (debuggerInformation.debuggerIsReady) {
                debuggerInformation.debuggerIsReady();
            }
            const result = await child.result;
            if (result.retc === 0) {
                cmakeLogger.info(localize(1, null, scriptPath));
            }
            else {
                cmakeLogger.info(localize(2, null, scriptPath));
                throw new Error("HEY");
            }
        }
        else {
            cmakeLogger.error(localize(3, null));
        }
    }
}
exports.executeScriptWithDebugger = executeScriptWithDebugger;


/***/ }),

/***/ 85304:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.checkDebugger = exports.getDebugConfigurationFromCache = exports.ConsoleTypes = exports.MIModes = void 0;
const proc = __webpack_require__(3477);
const logging_1 = __webpack_require__(71067);
const nls = __webpack_require__(33463);
const path = __webpack_require__(71017);
const vscode = __webpack_require__(89496);
const pr_1 = __webpack_require__(72502);
nls.config({ messageFormat: nls.MessageFormat.bundle, bundleFormat: nls.BundleFormat.standalone })((__webpack_require__(71017).join)(__dirname, 'src\\debugger.ts'));
const localize = nls.loadMessageBundle((__webpack_require__(71017).join)(__dirname, 'src\\debugger.ts'));
const log = (0, logging_1.createLogger)('debugger');
var MIModes;
(function (MIModes) {
    MIModes["lldb"] = "lldb";
    MIModes["gdb"] = "gdb";
})(MIModes = exports.MIModes || (exports.MIModes = {}));
var ConsoleTypes;
(function (ConsoleTypes) {
    ConsoleTypes["internalConsole"] = "internalConsole";
    ConsoleTypes["integratedTerminal"] = "integratedTerminal";
    ConsoleTypes["externalTerminal"] = "externalTerminal";
    ConsoleTypes["newExternalWindow"] = "newExternalWindow";
})(ConsoleTypes = exports.ConsoleTypes || (exports.ConsoleTypes = {}));
async function createGDBDebugConfiguration(debuggerPath, target) {
    if (!await checkDebugger(debuggerPath)) {
        debuggerPath = 'gdb';
        if (!await checkDebugger(debuggerPath)) {
            throw new Error(localize(0, null, debuggerPath));
        }
    }
    return {
        type: 'cppdbg',
        name: `Debug ${target.name}`,
        request: 'launch',
        cwd: path.dirname(target.path),
        args: [],
        MIMode: MIModes.gdb,
        miDebuggerPath: debuggerPath,
        setupCommands: [
            {
                description: localize(1, null),
                text: '-enable-pretty-printing',
                ignoreFailures: true
            }
        ],
        program: target.path
    };
}
async function createLLDBDebugConfiguration(debuggerPath, target) {
    if (!await checkDebugger(debuggerPath)) {
        throw new Error(localize(2, null, debuggerPath));
    }
    return {
        type: 'cppdbg',
        name: `Debug ${target.name}`,
        request: 'launch',
        cwd: path.dirname(target.path),
        args: [],
        MIMode: MIModes.lldb,
        miDebuggerPath: debuggerPath,
        program: target.path
    };
}
function createMsvcDebugConfiguration(target) {
    return {
        type: 'cppvsdbg',
        name: `Debug ${target.name}`,
        request: 'launch',
        cwd: path.dirname(target.path),
        args: [],
        program: target.path
    };
}
const debuggerGenerators = {
    gdb: {
        miMode: 'gdb',
        createConfig: createGDBDebugConfiguration
    },
    lldb: {
        miMode: 'lldb',
        createConfig: createLLDBDebugConfiguration
    }
};
function searchForCompilerPathInCache(cache) {
    const languages = ['CXX', 'C', 'CUDA'];
    for (const lang of languages) {
        const entry = cache.get(`CMAKE_${lang}_COMPILER`);
        if (!entry) {
            continue;
        }
        return entry.value;
    }
    return null;
}
async function getDebugConfigurationFromCache(cache, target, platform, modeOverride, debuggerPathOverride) {
    const entry = cache.get('CMAKE_LINKER');
    if (entry !== null && !modeOverride && !debuggerPathOverride) {
        const linker = entry.value;
        const isMsvcLinker = linker.endsWith('link.exe') || linker.endsWith('ld.lld.exe');
        if (isMsvcLinker) {
            return createMsvcDebugConfiguration(target);
        }
    }
    const debuggerName = modeOverride || (platform === 'darwin' ? 'lldb' : 'gdb');
    const description = debuggerGenerators[debuggerName];
    if (debuggerPathOverride) {
        if (path.isAbsolute(debuggerPathOverride) && await pr_1.fs.exists(debuggerPathOverride)) {
            return description.createConfig(debuggerPathOverride, target);
        }
        log.warning(localize(3, null, '"miDebuggerPath"', '"cmake.debugConfig"', `"${debuggerPathOverride}"`));
    }
    const compilerPath = searchForCompilerPathInCache(cache);
    if (compilerPath === null) {
        throw Error(localize(4, null)); // MSVC should be already found by CMAKE_LINKER
    }
    if (compilerPath.endsWith('cl.exe')) {
        return createMsvcDebugConfiguration(target);
    }
    // Look for a debugger, in the following order:
    // 1. LLDB-MI
    const clangCompilerRegex = /(clang[\+]{0,2})+(?!-cl)/gi;
    let miDebuggerPath = compilerPath.replace(clangCompilerRegex, 'lldb-mi');
    if (modeOverride !== MIModes.gdb) {
        const lldbMIReplaced = miDebuggerPath.search(new RegExp('lldb-mi')) !== -1;
        if (lldbMIReplaced) {
            // 1a. lldb-mi in the compiler path
            if (await checkDebugger(miDebuggerPath)) {
                return createLLDBDebugConfiguration(miDebuggerPath, target);
            }
        }
        if (modeOverride === MIModes.lldb || lldbMIReplaced) {
            // 1b. lldb-mi installed by CppTools
            const cppToolsExtension = vscode.extensions.getExtension('ms-vscode.cpptools');
            const cpptoolsDebuggerPath = cppToolsExtension ? path.join(cppToolsExtension.extensionPath, "debugAdapters", "lldb-mi", "bin", "lldb-mi") : undefined;
            if (cpptoolsDebuggerPath && await checkDebugger(cpptoolsDebuggerPath)) {
                return createLLDBDebugConfiguration(cpptoolsDebuggerPath, target);
            }
        }
    }
    // 2. gdb in the compiler path
    miDebuggerPath = compilerPath.replace(clangCompilerRegex, 'gdb');
    if (modeOverride !== MIModes.lldb && (miDebuggerPath.search(new RegExp('gdb')) !== -1) && await checkDebugger(miDebuggerPath)) {
        return createGDBDebugConfiguration(miDebuggerPath, target);
    }
    // 3. lldb in the compiler path
    miDebuggerPath = compilerPath.replace(clangCompilerRegex, 'lldb');
    if (modeOverride !== MIModes.gdb && (miDebuggerPath.search(new RegExp('lldb')) !== -1) && await checkDebugger(miDebuggerPath)) {
        return createLLDBDebugConfiguration(miDebuggerPath, target);
    }
    const gccCompilerRegex = /([cg]\+\+|g?cc)(?=[^\/\\]*$)/gi;
    let gdbDebuggerPath = compilerPath.replace(gccCompilerRegex, description.miMode);
    if (path.isAbsolute(gdbDebuggerPath) && !await pr_1.fs.exists(gdbDebuggerPath)) {
        gdbDebuggerPath = path.join(path.dirname(compilerPath), description.miMode);
        if (process.platform === 'win32') {
            gdbDebuggerPath = gdbDebuggerPath + '.exe';
        }
    }
    if (gdbDebuggerPath.search(new RegExp(description.miMode)) !== -1) {
        return description.createConfig(gdbDebuggerPath, target);
    }
    log.warning(localize(5, null, compilerPath));
    return null;
}
exports.getDebugConfigurationFromCache = getDebugConfigurationFromCache;
async function checkDebugger(debuggerPath) {
    const res = await proc.execute(debuggerPath, ['--version'], null, { shell: true }).result;
    return res.retc === 0;
}
exports.checkDebugger = checkDebugger;


/***/ }),

/***/ 42498:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/**
 * Module for handling build diagnostics (from the compiler/linker)
 */ /** */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CMakeBuildConsumer = exports.CompileOutputConsumer = exports.Compilers = void 0;
const util = __webpack_require__(16182);
const vscode = __webpack_require__(89496);
const gcc = __webpack_require__(20317);
const ghs = __webpack_require__(84577);
const diab = __webpack_require__(88241);
const gnu_ld = __webpack_require__(5455);
const mvsc = __webpack_require__(18951);
const iar = __webpack_require__(48254);
class Compilers {
    constructor() {
        this.gcc = new gcc.Parser();
        this.ghs = new ghs.Parser();
        this.diab = new diab.Parser();
        this.gnuLD = new gnu_ld.Parser();
        this.msvc = new mvsc.Parser();
        this.iar = new iar.Parser();
    }
}
exports.Compilers = Compilers;
class CompileOutputConsumer {
    constructor(config) {
        this.config = config;
        this.compilers = new Compilers();
    }
    // Defer all output to the `error` method
    output(line) {
        this.error(line);
    }
    error(line) {
        for (const cand in this.compilers) {
            if (this.compilers[cand].handleLine(line)) {
                break;
            }
        }
    }
    resolveDiagnostics(basePath) {
        const diags_by_file = new Map();
        const severity_of = (p) => {
            switch (p) {
                case 'warning':
                    return vscode.DiagnosticSeverity.Warning;
                case 'catastrophic error':
                case 'fatal error':
                case 'error':
                    return vscode.DiagnosticSeverity.Error;
                case 'note':
                case 'info':
                case 'remark':
                    return vscode.DiagnosticSeverity.Information;
            }
            // tslint:disable-next-line
            console.warn('Unknown diagnostic severity level: ' + p);
            return undefined;
        };
        const by_source = {
            GCC: this.compilers.gcc.diagnostics,
            MSVC: this.compilers.msvc.diagnostics,
            GHS: this.compilers.ghs.diagnostics,
            DIAB: this.compilers.diab.diagnostics,
            link: this.compilers.gnuLD.diagnostics,
            IAR: this.compilers.iar.diagnostics
        };
        const arrs = util.objectPairs(by_source)
            .filter(([source, _]) => { var _a, _b; return (_b = (_a = this.config.enableOutputParsers) === null || _a === void 0 ? void 0 : _a.includes(source.toLowerCase())) !== null && _b !== void 0 ? _b : false; })
            .map(([source, diags]) => diags.map(raw_diag => {
            const filepath = util.resolvePath(raw_diag.file, basePath);
            const severity = severity_of(raw_diag.severity);
            if (severity === undefined) {
                return undefined;
            }
            const diag = new vscode.Diagnostic(raw_diag.location, raw_diag.message, severity);
            diag.source = source;
            if (raw_diag.code) {
                diag.code = raw_diag.code;
            }
            if (!diags_by_file.has(filepath)) {
                diags_by_file.set(filepath, []);
            }
            diag.relatedInformation = [];
            for (const rel of raw_diag.related) {
                const relFilePath = vscode.Uri.file(util.resolvePath(rel.file, basePath));
                const related = new vscode.DiagnosticRelatedInformation(new vscode.Location(relFilePath, rel.location), rel.message);
                diag.relatedInformation.push(related);
            }
            diags_by_file.get(filepath).push(diag);
            return {
                filepath,
                diag
            };
        }).filter(e => e !== undefined));
        return [].concat(...arrs);
    }
}
exports.CompileOutputConsumer = CompileOutputConsumer;
/**
 * Class which consumes the output of a running build.
 *
 * This parses compiler errors, but also emits progress events when the build
 * tool writes a status message which can be parsed as containing a progress
 * indicator.
 */
class CMakeBuildConsumer {
    constructor(logger, config) {
        this.logger = logger;
        this._onProgressEmitter = new vscode.EventEmitter();
        this._percent_re = /\[.*?(\d+)\%.*?\]/;
        this.compileConsumer = new CompileOutputConsumer(config);
    }
    /**
     * Event fired when the progress changes
     */
    get onProgress() {
        return this._onProgressEmitter.event;
    }
    dispose() {
        this._onProgressEmitter.dispose();
    }
    error(line) {
        this.compileConsumer.error(line);
        if (this.logger) {
            this.logger.error(line);
        }
    }
    output(line) {
        this.compileConsumer.output(line);
        if (this.logger) {
            this.logger.info(line);
        }
        const progress = this._percent_re.exec(line);
        if (progress) {
            const percent = progress[1];
            this._onProgressEmitter.fire({
                minimum: 0,
                maximum: 100,
                value: Number.parseInt(percent)
            });
        }
    }
}
exports.CMakeBuildConsumer = CMakeBuildConsumer;


/***/ }),

/***/ 95057:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/**
 * Parsing of CMake configure diagnostics
 */ /** */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CMakeOutputConsumer = exports.StateMessage = void 0;
const util = __webpack_require__(16182);
const vscode = __webpack_require__(89496);
const util_1 = __webpack_require__(52919);
var StateMessage;
(function (StateMessage) {
    StateMessage["WaitingForDebuggerClient"] = "Waiting for debugger client to connect...";
})(StateMessage = exports.StateMessage || (exports.StateMessage = {}));
/**
 * Class which consumes output from CMake.
 *
 * This class is in charge of logging CMake's output, as well as parsing and
 * collecting warnings and errors from the configure step. It should be used
 * in conjunction with `proc.execute`.
 */
class CMakeOutputConsumer {
    constructor(sourceDir, logger) {
        this.sourceDir = sourceDir;
        this.logger = logger;
        this._diagnostics = [];
        this._stateMessages = [];
        /**
         * The state for the diagnostic parser. Implemented as a crude FSM
         */
        this._errorState = { state: 'init', diag: null, blankLines: 0 };
    }
    /**
     * The diagnostics that this consumer has accumulated. It will be populated
     * during calls to `output()` and `error()`
     */
    get diagnostics() {
        return this._diagnostics;
    }
    /**
     * The stateful messages that this consumer has accumulated. It will be populated
     * during calls to `output()` and `error()`.
     * An example of a "stateful" message is the message that indicates that it is
     * waiting for a debugger client to connect.
     */
    get stateMessages() {
        return this._stateMessages;
    }
    /**
     * Simply writes the line of output to the log
     * @param line Line of output
     */
    output(line) {
        if (this.logger) {
            this.logger.info(line);
        }
        this._parseDiags(line);
        this._parseStateMessages(line);
    }
    /**
     * Consume a line of stderr.
     * @param line The line from stderr
     */
    error(line) {
        // First, just log the line
        if (this.logger) {
            this.logger.error(line);
        }
        this._parseDiags(line);
    }
    _parseStateMessages(line) {
        if (line.includes("Waiting for debugger client to connect...")) {
            this.stateMessages.push(StateMessage.WaitingForDebuggerClient);
        }
    }
    _parseDiags(line) {
        // This line of output terminates an `AUTHOR_WARNING`
        const dev_warning_re = /^This warning is for project developers\./;
        // Switch on the state to implement our crude FSM
        switch (this._errorState.state) {
            case 'init': {
                const re = /CMake (.*?)(?: \(dev\))? at (.*?):(\d+) \((.*?)\):/;
                const result = re.exec(line);
                if (result) {
                    // We have encountered and error
                    const [full, level, filename, linestr, command] = result;
                    const lineno = (0, util_1.oneLess)(linestr);
                    const diagmap = {
                        'Deprecation Warning': vscode.DiagnosticSeverity.Warning,
                        Warning: vscode.DiagnosticSeverity.Warning,
                        Error: vscode.DiagnosticSeverity.Error
                    };
                    const vsdiag = new vscode.Diagnostic(new vscode.Range(lineno, 0, lineno, 9999), full, diagmap[level]);
                    vsdiag.source = `CMake (${command})`;
                    vsdiag.relatedInformation = [];
                    const filepath = util.resolvePath(filename, this.sourceDir);
                    this._errorState.diag = {
                        filepath,
                        diag: vsdiag
                    };
                    this._errorState.state = 'diag';
                    this._errorState.blankLines = 0;
                }
                break;
            }
            case 'diag': {
                console.assert(this._errorState.diag, 'No diagnostic?');
                const call_stack_re = /^Call Stack \(most recent call first\):$/;
                if (call_stack_re.test(line)) {
                    // We're in call stack mode!
                    this._errorState.state = 'stack';
                    this._errorState.blankLines = 0;
                    break;
                }
                if (line === '') {
                    // A blank line!
                    if (this._errorState.blankLines === 0) {
                        // First blank. Okay
                        this._errorState.blankLines++;
                        this._errorState.diag.diag.message += '\n';
                    }
                    else {
                        // Second blank line. Now we commit the diagnostic.
                        this._commitDiag();
                    }
                }
                else if (dev_warning_re.test(line)) {
                    this._commitDiag();
                }
                else {
                    // Reset blank line count
                    this._errorState.blankLines = 0;
                    // Add this line to the current diag accumulator
                    const trimmed = line.replace(/^  /, '');
                    this._errorState.diag.diag.message += trimmed + '\n';
                }
                break;
            }
            case 'stack': {
                // Meh... vscode doesn't really let us provide call stacks to diagnostics.
                // We can't really do anything...
                if (line.trim() === '') {
                    if (this._errorState.blankLines === 1) {
                        this._commitDiag();
                    }
                    else {
                        this._errorState.blankLines++;
                    }
                }
                else if (dev_warning_re.test(line)) {
                    this._commitDiag();
                }
                else {
                    const stackElemRe = /^  (.*):(\d+) \((\w+)\)$/;
                    const mat = stackElemRe.exec(line);
                    if (mat) {
                        const [, filepath, lineNoStr, command] = mat;
                        const fileUri = vscode.Uri.file(util.resolvePath(filepath, this.sourceDir));
                        const lineNo = parseInt(lineNoStr) - 1;
                        const related = new vscode.DiagnosticRelatedInformation(new vscode.Location(fileUri, new vscode.Range(lineNo, 0, lineNo, 999)), `In call to '${command}' here`);
                        console.assert(this._errorState.diag);
                        this._errorState.diag.diag.relatedInformation.push(related);
                    }
                }
                break;
            }
        }
    }
    /**
     * Commit the accumulated diagnostic and go back to `init` state.
     */
    _commitDiag() {
        const diag = this._errorState.diag;
        // Remove the final newline(s) from the message, for prettiness
        diag.diag.message = diag.diag.message.replace(/\n+$/, '');
        this._diagnostics.push(this._errorState.diag);
        this._errorState.diag = null;
        this._errorState.blankLines = 0;
        this._errorState.state = 'init';
    }
}
exports.CMakeOutputConsumer = CMakeOutputConsumer;


/***/ }),

/***/ 89158:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/**
 * Memoizes the creation of diagnostic collections
 */ /** */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.collections = void 0;
const vscode = __webpack_require__(89496);
/**
 * A lazily constructed diagnostic collection object
 */
class LazyCollection {
    constructor(name) {
        this.name = name;
    }
    /**
     * Get the collection
     */
    getOrCreate() {
        if (!this._collection) {
            this._collection = vscode.languages.createDiagnosticCollection(this.name);
        }
        return this._collection;
    }
    /**
     * Dispose of the collection
     */
    dispose() {
        if (this._collection) {
            this._collection.dispose();
        }
        this._collection = undefined;
    }
}
/**
 * Class stores the diagnostic collections used by CMakeTools
 */
class Collections {
    constructor() {
        this._cmake = new LazyCollection('cmake-configure-diags');
        this._build = new LazyCollection('cmake-build-diags');
    }
    /**
     * The `DiagnosticCollection` for the CMake configure diagnostics.
     */
    get cmake() {
        return this._cmake.getOrCreate();
    }
    /**
     * The `DiagnosticCollection` for build diagnostics
     */
    get build() {
        return this._build.getOrCreate();
    }
    reset() {
        this._cmake.dispose();
        this._build.dispose();
    }
}
exports.collections = new Collections();
exports["default"] = exports.collections;


/***/ }),

/***/ 88241:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/**
 * Module for parsing Wind River Diab diagnostics
 */ /** */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Parser = exports.REGEX = void 0;
const vscode = __webpack_require__(89496);
const util_1 = __webpack_require__(52919);
exports.REGEX = /^\"(.*)\",\s+(?:line\s+(\d+):\s+)?(info|warning|(?:|fatal |catastrophic )error)\s+\((.*)\):\s+(.*)$/;
class Parser extends util_1.RawDiagnosticParser {
    doHandleLine(line) {
        const mat = exports.REGEX.exec(line);
        if (!mat) {
            // Nothing to see on this line of output...
            return util_1.FeedLineResult.NotMine;
        }
        const [full, file, lineno = '1', severity, code, message] = mat;
        const column = '1';
        if (file && severity && message) {
            return {
                full,
                file,
                location: new vscode.Range((0, util_1.oneLess)(lineno), (0, util_1.oneLess)(column), (0, util_1.oneLess)(lineno), 999),
                severity,
                code,
                message,
                related: []
            };
        }
        return util_1.FeedLineResult.NotMine;
    }
}
exports.Parser = Parser;


/***/ }),

/***/ 20317:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/**
 * Module for handling GCC diagnostics
 */ /** */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Parser = exports.REGEX = void 0;
const vscode = __webpack_require__(89496);
const util_1 = __webpack_require__(52919);
exports.REGEX = /^(.*):(\d+):(\d+):\s+(?:fatal )?(\w*)(?:\sfatale)?\s?:\s+(.*)/;
class Parser extends util_1.RawDiagnosticParser {
    doHandleLine(line) {
        let mat = /(.*): (In instantiation of.+)/.exec(line);
        if (mat) {
            const [, , message] = mat;
            this._pendingTemplateError = {
                rootInstantiation: message,
                requiredFrom: []
            };
            return util_1.FeedLineResult.Ok;
        }
        if (this._pendingTemplateError) {
            mat = /(.*):(\d+):(\d+):(  +required from.+)/.exec(line);
            if (mat) {
                const [, file, linestr, column, message] = mat;
                const lineNo = (0, util_1.oneLess)(linestr);
                this._pendingTemplateError.requiredFrom.push({
                    file,
                    location: new vscode.Range(lineNo, parseInt(column), lineNo, 999),
                    message
                });
                return util_1.FeedLineResult.Ok;
            }
        }
        // Early-catch backtrace limit notes
        mat = /note: \((.*backtrace-limit.*)\)/.exec(line);
        if (mat && this._prevDiag && this._prevDiag.related.length !== 0) {
            const prevRelated = this._prevDiag.related[0];
            this._prevDiag.related.push({
                file: prevRelated.file,
                location: prevRelated.location,
                message: mat[1]
            });
            return util_1.FeedLineResult.Ok;
        }
        // Test if this is a diagnostic
        mat = exports.REGEX.exec(line);
        if (!mat) {
            // Nothing to see on this line of output...
            return util_1.FeedLineResult.NotMine;
        }
        else {
            const [full, file, lineno_, column_, severity, message] = mat;
            if (file && lineno_ && column_ && severity && message) {
                const lineno = (0, util_1.oneLess)(lineno_);
                const column = (0, util_1.oneLess)(column_);
                if (severity === 'note' && this._prevDiag) {
                    this._prevDiag.related.push({
                        file,
                        location: new vscode.Range(lineno, column, lineno, 999),
                        message
                    });
                    return util_1.FeedLineResult.Ok;
                }
                else {
                    const related = [];
                    const location = new vscode.Range(lineno, column, lineno, 999);
                    if (this._pendingTemplateError) {
                        related.push({
                            location,
                            file,
                            message: this._pendingTemplateError.rootInstantiation
                        });
                        related.push(...this._pendingTemplateError.requiredFrom);
                        this._pendingTemplateError = undefined;
                    }
                    return this._prevDiag = {
                        full,
                        file,
                        location,
                        severity,
                        message,
                        related
                    };
                }
            }
            return util_1.FeedLineResult.NotMine;
        }
    }
}
exports.Parser = Parser;


/***/ }),

/***/ 84577:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/**
 * Module for parsing GHS diagnostics
 */ /** */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Parser = exports.REGEX = void 0;
const vscode = __webpack_require__(89496);
const util_1 = __webpack_require__(52919);
exports.REGEX = /^\"(.*)\",\s+(?:(?:line\s+(\d+)\s+\(col\.\s+(\d+)\))|(?:At end of source)):\s+(?:fatal )?(remark|warning|error)\s+(.*)/;
class Parser extends util_1.RawDiagnosticParser {
    doHandleLine(line) {
        const mat = exports.REGEX.exec(line);
        if (!mat) {
            // Nothing to see on this line of output...
            return util_1.FeedLineResult.NotMine;
        }
        const [full, file, lineno = '1', column = '1', severity, message] = mat;
        if (file && severity && message) {
            return {
                full,
                file,
                location: new vscode.Range((0, util_1.oneLess)(lineno), (0, util_1.oneLess)(column), (0, util_1.oneLess)(lineno), 999),
                severity,
                message,
                related: []
            };
        }
        return util_1.FeedLineResult.NotMine;
    }
}
exports.Parser = Parser;


/***/ }),

/***/ 5455:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/**
 * Module for handling GNU linker diagnostics
 */ /** */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Parser = exports.REGEX = void 0;
const vscode = __webpack_require__(89496);
const util_1 = __webpack_require__(52919);
exports.REGEX = /^(.*):(\d+)\s?:\s+(.*[^\]])$/;
class Parser extends util_1.RawDiagnosticParser {
    doHandleLine(line) {
        // Try to parse for GNU ld
        if (line.startsWith('make')) {
            // This is a Make error. It may *look* like an LD error, so we abort early
            return util_1.FeedLineResult.NotMine;
        }
        const res = exports.REGEX.exec(line);
        if (!res) {
            return util_1.FeedLineResult.NotMine;
        }
        const [full, file, lineno_, message] = res;
        const lineno = (0, util_1.oneLess)(lineno_);
        if (file && lineno && message) {
            return {
                full,
                file,
                location: new vscode.Range(lineno, 0, lineno, 999),
                severity: 'error',
                message,
                related: []
            };
        }
        return util_1.FeedLineResult.NotMine;
    }
}
exports.Parser = Parser;


/***/ }),

/***/ 48254:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/**
 * Module for parsing IAR diagnostics
 */ /** */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Parser = void 0;
const vscode = __webpack_require__(89496);
const util_1 = __webpack_require__(52919);
const CODE_REGEX = /^\"(?<file>.*)\",(?<line>\d+)\s+(?<severity>[A-Za-z ]+)\[(?<code>[A-Za-z]+[0-9]+)\]:(?<message_start>.*)$/;
const POINTER_REGEX = /^( +)\^$/;
var ParserState;
(function (ParserState) {
    ParserState[ParserState["init"] = 0] = "init";
    ParserState[ParserState["pending_code"] = 1] = "pending_code";
    ParserState[ParserState["pending_message"] = 2] = "pending_message";
})(ParserState || (ParserState = {}));
class Parser extends util_1.RawDiagnosticParser {
    constructor() {
        super(...arguments);
        this.state = ParserState.init;
        this.pending_diagnostic = null;
        this.pending_column = null;
    }
    translateSeverity(iar_severity) {
        switch (iar_severity) {
            case 'Error':
            case 'Fatal error':
                return 'error';
            case 'Warning':
                return 'warning';
            default:
                return 'info';
        }
    }
    reset() {
        this.state = ParserState.init;
        this.pending_diagnostic = null;
        this.pending_column = null;
    }
    doHandleLine(line) {
        var _a;
        switch (this.state) {
            case ParserState.init: {
                const mat = POINTER_REGEX.exec(line);
                if (!mat) {
                    return util_1.FeedLineResult.NotMine;
                }
                this.pending_column = mat[1].length - 2;
                this.state = ParserState.pending_code;
                return util_1.FeedLineResult.Ok;
            }
            case ParserState.pending_code: {
                const mat = CODE_REGEX.exec(line);
                if (!mat) {
                    // unexpected, reset state
                    this.reset();
                    return util_1.FeedLineResult.NotMine;
                }
                const [full, file, lineno = '1', severity, code, message_start] = mat;
                if (file && severity) {
                    this.pending_diagnostic = {
                        full: full,
                        file: file,
                        location: new vscode.Range((0, util_1.oneLess)(lineno), (_a = this.pending_column) !== null && _a !== void 0 ? _a : 0, (0, util_1.oneLess)(lineno), 999),
                        severity: this.translateSeverity(severity),
                        message: message_start ? message_start + ' ' : '',
                        code: code,
                        related: []
                    };
                    this.state = ParserState.pending_message;
                    return util_1.FeedLineResult.Ok;
                }
                break;
            }
            case ParserState.pending_message: {
                const diagnostic = this.pending_diagnostic;
                if (line === '' || line[0] !== ' ') {
                    diagnostic.message = diagnostic.message.trim();
                    this.reset();
                    return diagnostic;
                }
                diagnostic.message += line.trim() + '\n';
                diagnostic.full += `\n${line}`;
                return util_1.FeedLineResult.Ok;
            }
        }
        return util_1.FeedLineResult.NotMine;
    }
}
exports.Parser = Parser;


/***/ }),

/***/ 18951:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/**
 * Module for handling MSVC diagnostics
 */ /** */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Parser = exports.REGEX = void 0;
const vscode = __webpack_require__(89496);
const util_1 = __webpack_require__(52919);
exports.REGEX = /^\s*(\d+>)?\s*([^\s>].*)\((\d+|\d+,\d+|\d+,\d+,\d+,\d+)\)\s*:\s+((?:fatal )?error|warning|info)\s*(\w{1,2}\d+)?\s*:\s*(.*)$/;
class Parser extends util_1.RawDiagnosticParser {
    doHandleLine(line) {
        const res = exports.REGEX.exec(line);
        if (!res) {
            return util_1.FeedLineResult.NotMine;
        }
        const [full, /* proc*/ , file, location, severity, code, message] = res;
        const range = (() => {
            const parts = location.split(',');
            const n0 = (0, util_1.oneLess)(parts[0]);
            if (parts.length === 1) {
                return new vscode.Range(n0, 0, n0, 999);
            }
            if (parts.length === 2) {
                const n1 = (0, util_1.oneLess)(parts[1]);
                return new vscode.Range(n0, n1, n0, n1);
            }
            if (parts.length === 4) {
                const n1 = (0, util_1.oneLess)(parts[1]);
                const n2 = (0, util_1.oneLess)(parts[2]);
                const n3 = (0, util_1.oneLess)(parts[3]);
                return new vscode.Range(n0, n1, n2, n3);
            }
            throw new Error('Unable to determine location of MSVC diagnostic');
        })();
        return {
            full,
            file,
            location: range,
            severity,
            message,
            code,
            related: []
        };
    }
}
exports.Parser = Parser;


/***/ }),

/***/ 52919:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/**
 * Types and utilities for diagnostic parsing and handling
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.RawDiagnosticParser = exports.populateCollection = exports.oneLess = exports.FeedLineResult = void 0;
const util_1 = __webpack_require__(16182);
const vscode = __webpack_require__(89496);
var FeedLineResult;
(function (FeedLineResult) {
    FeedLineResult[FeedLineResult["Ok"] = 0] = "Ok";
    FeedLineResult[FeedLineResult["NotMine"] = 1] = "NotMine";
})(FeedLineResult = exports.FeedLineResult || (exports.FeedLineResult = {}));
/**
 * Get one less than the given number of number-string.
 *
 * If the number is greater than zero, returns that number minus one. If
 * the number is less than one, returns zero.
 * @param num A number or string representing a number
 */
function oneLess(num) {
    if (typeof num === 'string') {
        return oneLess(parseInt(num));
    }
    else {
        return Math.max(0, num - 1);
    }
}
exports.oneLess = oneLess;
/**
 * Inserts a list of `FileDiagnostic` instances into a diagnostic collection.
 * @param coll The `vscode.DiagnosticCollecion` to populate.
 * @param fdiags The `FileDiagnostic` objects to insert into the collection
 *
 * @note The `coll` collection will be cleared of all previous contents
 */
function populateCollection(coll, fdiags) {
    // Clear the collection
    coll.clear();
    // Collect the diagnostics and associate them with their respective files
    const diags_by_file = (0, util_1.reduce)(fdiags, new Map(), (by_file, fdiag) => {
        if (!by_file.has(fdiag.filepath)) {
            by_file.set(fdiag.filepath, []);
        }
        by_file.get(fdiag.filepath).push(fdiag.diag);
        return by_file;
    });
    // Insert the diags into the collection
    diags_by_file.forEach((diags, filepath) => {
        coll.set(vscode.Uri.file(filepath), diags);
    });
}
exports.populateCollection = populateCollection;
/**
 * Base class for parsing raw diagnostic information on a line-by-line basis
 */
class RawDiagnosticParser {
    constructor() {
        this._diagnostics = [];
    }
    /**
     * Get the diagnostics which have been parsed by this object
     */
    get diagnostics() {
        return this._diagnostics;
    }
    /**
     * Push another line into the parser
     * @param line Another line to parse
     */
    handleLine(line) {
        const result = this.doHandleLine(line);
        if (result === FeedLineResult.Ok) {
            return true;
        }
        else if (result === FeedLineResult.NotMine) {
            return false;
        }
        else {
            this._diagnostics.push(result);
            return true;
        }
    }
}
exports.RawDiagnosticParser = RawDiagnosticParser;


/***/ }),

/***/ 86945:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/**
 * A module for doing very primitive dirty-checking
 */ /** */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.InputFileSet = exports.InputFile = void 0;
const pr_1 = __webpack_require__(72502);
const util = __webpack_require__(16182);
const path = __webpack_require__(71017);
const logging_1 = __webpack_require__(71067);
const logger = (0, logging_1.createLogger)('dirty');
class InputFile {
    constructor(filePath, mtime) {
        this.filePath = filePath;
        this.mtime = mtime;
    }
    async checkOutOfDate() {
        if (this.mtime === null) {
            return true;
        }
        let stat;
        try {
            stat = await pr_1.fs.stat(this.filePath);
        }
        catch (error) {
            logger.debug(error);
            // Failed to stat: Treat the file as out-of-date
            return true;
        }
        return stat.mtime.valueOf() > this.mtime.valueOf();
    }
    static async create(filePath) {
        let stat;
        try {
            stat = await pr_1.fs.stat(filePath);
        }
        catch (_) {
            return new InputFile(filePath, null);
        }
        return new InputFile(filePath, stat.mtime);
    }
}
exports.InputFile = InputFile;
class InputFileSet {
    constructor(inputFiles) {
        this.inputFiles = inputFiles;
    }
    async checkOutOfDate() {
        for (const input of this.inputFiles) {
            if (await input.checkOutOfDate()) {
                return true;
            }
        }
        return false;
    }
    static async create(cmakeInputs) {
        const inputFiles = await Promise.all(util.map(util.flatMap(cmakeInputs.buildFiles, entry => entry.sources), src => {
            // Map input file paths to files relative to the source directory
            if (!path.isAbsolute(src)) {
                src = util.platformNormalizePath(path.join(cmakeInputs.sourceDirectory, src));
            }
            return InputFile.create(src);
        }));
        return new InputFileSet(inputFiles);
    }
    static createEmpty() {
        return new InputFileSet([]);
    }
}
exports.InputFileSet = InputFileSet;


/***/ }),

/***/ 16647:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/**
 * Defines base class for CMake drivers
 */ /** */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CMakeDriver = exports.ConfigureResultType = exports.CMakePreconditionProblems = exports.NoGeneratorError = void 0;
const path = __webpack_require__(71017);
const vscode = __webpack_require__(89496);
const codepages = __webpack_require__(54955);
const cmakeProject_1 = __webpack_require__(37874);
const config_1 = __webpack_require__(62498);
const build_1 = __webpack_require__(42498);
const cmake_1 = __webpack_require__(95057);
const expand = __webpack_require__(77504);
const kit_1 = __webpack_require__(18679);
const logging = __webpack_require__(71067);
const paths_1 = __webpack_require__(86640);
const pr_1 = __webpack_require__(72502);
const proc = __webpack_require__(3477);
const rollbar_1 = __webpack_require__(58543);
const telemetry = __webpack_require__(21818);
const util = __webpack_require__(16182);
const nls = __webpack_require__(33463);
const triple_1 = __webpack_require__(94208);
const preset = __webpack_require__(10739);
const environmentVariables_1 = __webpack_require__(40085);
const cmakeTaskProvider_1 = __webpack_require__(81337);
const preset_1 = __webpack_require__(10739);
const cmakeBuildRunner_1 = __webpack_require__(25239);
const util_1 = __webpack_require__(9011);
nls.config({ messageFormat: nls.MessageFormat.bundle, bundleFormat: nls.BundleFormat.standalone })((__webpack_require__(71017).join)(__dirname, 'src\\drivers\\cmakeDriver.ts'));
const localize = nls.loadMessageBundle((__webpack_require__(71017).join)(__dirname, 'src\\drivers\\cmakeDriver.ts'));
const log = logging.createLogger('driver');
class NoGeneratorError extends Error {
    constructor() {
        super(...arguments);
        this.message = localize(0, null);
    }
}
exports.NoGeneratorError = NoGeneratorError;
var CMakePreconditionProblems;
(function (CMakePreconditionProblems) {
    CMakePreconditionProblems[CMakePreconditionProblems["ConfigureIsAlreadyRunning"] = 0] = "ConfigureIsAlreadyRunning";
    CMakePreconditionProblems[CMakePreconditionProblems["BuildIsAlreadyRunning"] = 1] = "BuildIsAlreadyRunning";
    CMakePreconditionProblems[CMakePreconditionProblems["NoSourceDirectoryFound"] = 2] = "NoSourceDirectoryFound";
    CMakePreconditionProblems[CMakePreconditionProblems["MissingCMakeListsFile"] = 3] = "MissingCMakeListsFile";
})(CMakePreconditionProblems = exports.CMakePreconditionProblems || (exports.CMakePreconditionProblems = {}));
var ConfigureResultType;
(function (ConfigureResultType) {
    ConfigureResultType[ConfigureResultType["NormalOperation"] = 0] = "NormalOperation";
    ConfigureResultType[ConfigureResultType["ForcedCancel"] = 1] = "ForcedCancel";
    ConfigureResultType[ConfigureResultType["ConfigureInProgress"] = 2] = "ConfigureInProgress";
    ConfigureResultType[ConfigureResultType["BuildInProgress"] = 3] = "BuildInProgress";
    ConfigureResultType[ConfigureResultType["NoCache"] = 4] = "NoCache";
    ConfigureResultType[ConfigureResultType["NoConfigurePreset"] = 5] = "NoConfigurePreset";
    ConfigureResultType[ConfigureResultType["Other"] = 6] = "Other";
})(ConfigureResultType = exports.ConfigureResultType || (exports.ConfigureResultType = {}));
function nullableValueToString(arg) {
    return arg === null ? 'empty' : arg;
}
/**
 * Base class for CMake drivers.
 *
 * CMake drivers are separated because different CMake version warrant different
 * communication methods. Older CMake versions need to be driven by the command
 * line, but newer versions may be controlled via CMake server, which provides
 * a much richer interface.
 *
 * This class defines the basis for what a driver must implement to work.
 */
class CMakeDriver {
    /**
     * Construct the driver. Concrete instances should provide their own creation
     * routines.
     */
    constructor(cmake, config, sourceDirUnexpanded, // The un-expanded original source directory path, where the CMakeLists.txt exists.
    isMultiProject, __workspaceFolder, preconditionHandler) {
        this.cmake = cmake;
        this.config = config;
        this.sourceDirUnexpanded = sourceDirUnexpanded;
        this.isMultiProject = isMultiProject;
        this.__workspaceFolder = __workspaceFolder;
        this.preconditionHandler = preconditionHandler;
        this._isConfiguredAtLeastOnce = false;
        /**
         * The source directory, where the root CMakeLists.txt lives.
         *
         * @note This is distinct from the config values, since we do variable
         * substitution.
         */
        this.__sourceDir = '';
        /**
         * The environment variables required by the current kit
         */
        this._kitEnvironmentVariables = environmentVariables_1.EnvironmentUtils.create();
        /**
         * The current Kit. Starts out `null`, but once set, is never `null` again.
         * We do some separation here to protect ourselves: The `_baseKit` property
         * is `private`, so derived classes cannot change it, except via
         * `_setBaseKit`, which only allows non-null kits. This prevents the derived
         * classes from resetting the kit back to `null`.
         */
        this._kit = null;
        this._kitDetect = null;
        this._useCMakePresets = true;
        this._configurePreset = null;
        this._buildPreset = null;
        this._testPreset = null;
        this._packagePreset = null;
        this._workflowPreset = null;
        this.variantKeywordSettings = null;
        /**
         * File compilation terminals. This is a map, rather than a single terminal
         * instance for two reasons:
         *
         * 1. Different compile commands may require different environment variables.
         * 2. Different compile commands may require different working directories.
         *
         * The key of each terminal is generated deterministically in `runCompileCommand()`
         * based on the CWD and environment of the compile command.
         */
        this._compileTerms = new Map();
        this._generator = null;
        /**
         * The CMAKE_BUILD_TYPE to use
         */
        this._variantBuildType = 'Debug';
        /**
         * The arguments to pass to CMake during a configuration according to the current variant
         */
        this._variantConfigureSettings = {};
        /**
         * Determine if we set BUILD_SHARED_LIBS to TRUE or FALSE
         */
        this._variantLinkage = null;
        /**
         * Environment variables defined by the current variant
         */
        this._variantEnv = environmentVariables_1.EnvironmentUtils.create();
        this._binaryDir = '';
        this._installDir = null;
        this._isMultiConfig = false;
        this.isConfigInProgress = false;
        this.compilerAllowList = [
            // Most common version output (gcc and family):
            //     gcc -v: gcc version 9.3.0 (Ubuntu 9.3.0-17ubuntu1~20.04)
            {
                name: "gcc",
                versionSwitch: "-v",
                versionOutputRegexp: "version ([^\\s]+)",
                captureGroup: 1
            },
            {
                name: "cc",
                versionSwitch: "-v",
                versionOutputRegexp: "version ([^\\s]+)",
                captureGroup: 1
            },
            {
                name: "g++",
                versionSwitch: "-v",
                versionOutputRegexp: "version ([^\\s]+)",
                captureGroup: 1
            },
            {
                name: "cpp",
                versionSwitch: "-v",
                versionOutputRegexp: "version ([^\\s]+)",
                captureGroup: 1
            },
            {
                name: "c++",
                versionSwitch: "-v",
                versionOutputRegexp: "version ([^\\s]+)",
                captureGroup: 1
            },
            {
                name: "dcc",
                versionSwitch: "-v",
                versionOutputRegexp: "version ([^\\s]+)",
                captureGroup: 1
            },
            {
                name: "eccp",
                versionSwitch: "-v",
                versionOutputRegexp: "version ([^\\s]+)",
                captureGroup: 1
            },
            {
                name: "edgcpfe",
                versionSwitch: "-v",
                versionOutputRegexp: "version ([^\\s]+)",
                captureGroup: 1
            },
            {
                name: "mcc",
                versionSwitch: "-v",
                versionOutputRegexp: "version ([^\\s]+)",
                captureGroup: 1
            },
            {
                name: "tcc",
                versionSwitch: "-v",
                versionOutputRegexp: "version ([^\\s]+)",
                captureGroup: 1
            },
            // cl does not have a version switch but it outputs the compiler version on stderr
            // when no source files arguments are given
            {
                name: "cl",
                versionSwitch: undefined,
                versionOutputRegexp: ".* Compiler Version (.*) for .*",
                captureGroup: 1
            },
            // gpp --version: gpp 2.25
            {
                name: "gpp",
                versionSwitch: "--version",
                versionOutputRegexp: "gpp ([^\\s]+)",
                captureGroup: 1
            },
            {
                name: "icc",
                versionSwitch: "-V",
                versionOutputRegexp: "version ([^\\s]+)",
                captureGroup: 1
            },
            {
                name: "kcc",
                versionSwitch: "-V",
                versionOutputRegexp: "version ([^\\s]+)",
                captureGroup: 1
            },
            {
                name: "pgc++",
                versionSwitch: "-V",
                versionOutputRegexp: "version ([^\\s]+)",
                captureGroup: 1
            },
            {
                name: "aCC",
                versionSwitch: "-V",
                versionOutputRegexp: "version ([^\\s]+)",
                captureGroup: 1
            },
            {
                name: "armcc",
                versionSwitch: "--version_number",
                versionOutputRegexp: ".*",
                captureGroup: 1
            },
            {
                name: "bcc32",
                versionSwitch: "--version",
                versionOutputRegexp: ".* C\\+\\+ ([^\\s]+) for .*",
                captureGroup: 1
            },
            {
                name: "bcc32c",
                versionSwitch: "--version",
                versionOutputRegexp: ".* C\\+\\+ ([^\\s]+) for .*",
                captureGroup: 1
            },
            {
                name: "bcc64",
                versionSwitch: "--version",
                versionOutputRegexp: ".* C\\+\\+ ([^\\s]+) for .*",
                captureGroup: 1
            },
            {
                name: "bcca",
                versionSwitch: "--version",
                versionOutputRegexp: ".* C\\+\\+ ([^\\s]+) for .*",
                captureGroup: 1
            },
            {
                name: "bccios",
                versionSwitch: "--version",
                versionOutputRegexp: ".* C\\+\\+ ([^\\s]+) for .*",
                captureGroup: 1
            },
            {
                name: "bccosx",
                versionSwitch: "--version",
                versionOutputRegexp: ".* C\\+\\+ ([^\\s]+) for .*",
                captureGroup: 1
            },
            // clang -v: clang version 10.0.0-4ubuntu1
            // or        clang version 5.0.0 (tags/RELEASE_500/final)
            {
                name: "clang",
                versionSwitch: "-v",
                versionOutputRegexp: "(Apple LLVM|clang) version ([^\\s-]+)",
                captureGroup: 2
            },
            {
                name: "clang-cl",
                versionSwitch: "-v",
                versionOutputRegexp: "(Apple LLVM|clang) version ([^\\s-]+)",
                captureGroup: 2
            },
            {
                name: "clang++",
                versionSwitch: "-v",
                versionOutputRegexp: "(Apple LLVM|clang) version ([^\\s-]+)",
                captureGroup: 2
            },
            {
                name: "armclang",
                versionSwitch: "-v",
                versionOutputRegexp: "(Apple LLVM|clang) version ([^\\s-]+)",
                captureGroup: 2
            },
            {
                name: "openCC",
                versionSwitch: "--version",
                versionOutputRegexp: "version ([^\\s]+)",
                captureGroup: 1
            },
            {
                name: "pathCC",
                versionSwitch: "--version",
                versionOutputRegexp: "version ([^\\s]+)",
                captureGroup: 1
            },
            // We don't know of version switches for the following compilers so define only the compiler name
            {
                name: "dmc",
                versionSwitch: undefined,
                versionOutputRegexp: undefined
            },
            {
                name: "tpp",
                versionSwitch: undefined,
                versionOutputRegexp: undefined
            },
            {
                name: "vac++",
                versionSwitch: undefined,
                versionOutputRegexp: undefined
            },
            {
                name: "xlc++",
                versionSwitch: undefined,
                versionOutputRegexp: undefined
            }
        ];
        /**
         * The list of generators CMake supports as of 3.21
         */
        this.cmakeGenerators = [
            "Visual Studio 17 2022",
            "Visual Studio 16 2019",
            "Visual Studio 15 2017",
            "Visual Studio 14 2015",
            "Visual Studio 12 2013",
            "Visual Studio 11 2012",
            "Visual Studio 10 2010",
            "Visual Studio 9 2008",
            "Borland Makefiles",
            "NMake Makefiles",
            "NMake Makefiles JOM",
            "MSYS Makefiles",
            "MinGW Makefiles",
            "Green Hills MULTI",
            "Unix Makefiles",
            "Ninja",
            "Ninja Multi-Config",
            "Watcom WMake",
            "CodeBlocks - MinGW Makefiles",
            "CodeBlocks - NMake Makefiles",
            "CodeBlocks - NMake Makefiles JOM",
            "CodeBlocks - Ninja",
            "CodeBlocks - Unix Makefiles",
            "CodeLite - MinGW Makefiles",
            "CodeLite - NMake Makefiles",
            "CodeLite - Ninja",
            "CodeLite - Unix Makefiles",
            "Eclipse CDT4 - NMake Makefiles",
            "Eclipse CDT4 - MinGW Makefiles",
            "Eclipse CDT4 - Ninja",
            "Eclipse CDT4 - Unix Makefiles",
            "Kate - MinGW Makefiles",
            "Kate - NMake Makefiles",
            "Kate - Ninja",
            "Kate - Unix Makefiles",
            "Sublime Text 2 - MinGW Makefiles",
            "Sublime Text 2 - NMake Makefiles",
            "Sublime Text 2 - Ninja",
            "Sublime Text 2 - Unix Makefiles"
        ];
        /**g
         * Subscribe to changes that affect the CMake configuration
         */
        this._settingsSub = this.config.onChange('configureSettings', async () => this.doConfigureSettingsChange());
        this._argsSub = this.config.onChange('configureArgs', async () => this.doConfigureSettingsChange());
        this._envSub = this.config.onChange('configureEnvironment', async () => this.doConfigureSettingsChange());
        this._buildArgsSub = this.config.onChange('buildArgs', async () => {
            await (0, util_1.onBuildSettingsChange)();
        });
        this._buildEnvSub = this.config.onChange('buildEnvironment', async () => {
            await (0, util_1.onBuildSettingsChange)();
        });
        this._testArgsSub = this.config.onChange('ctestArgs', async () => {
            await (0, util_1.onTestSettingsChange)();
        });
        this._testEnvSub = this.config.onChange('testEnvironment', async () => {
            await (0, util_1.onTestSettingsChange)();
        });
        this._packEnvSub = this.config.onChange('cpackEnvironment', async () => {
            await (0, util_1.onPackageSettingsChange)();
        });
        this._generalEnvSub = this.config.onChange('environment', async () => {
            await this.doConfigureSettingsChange();
            await (0, util_1.onBuildSettingsChange)();
            await (0, util_1.onTestSettingsChange)();
        });
        this.cmakeBuildRunner = new cmakeBuildRunner_1.CMakeBuildRunner();
        this.configureProcess = null;
        this.m_stop_process = false;
        this.sourceDir = this.sourceDirUnexpanded;
        // We have a cache of file-compilation terminals. Wipe them out when the
        // user closes those terminals.
        vscode.window.onDidCloseTerminal(closed => {
            for (const [key, term] of this._compileTerms) {
                if (term === closed) {
                    log.debug(localize(1, null));
                    this._compileTerms.delete(key);
                    break;
                }
            }
        });
    }
    get isConfiguredAtLeastOnce() {
        return this._isConfiguredAtLeastOnce;
    }
    async doPreCleanConfigure() {
        return Promise.resolve();
    }
    doPreBuild() {
        return Promise.resolve(true);
    }
    doPostBuild() {
        return Promise.resolve(true);
    }
    get sourceDir() {
        return this.__sourceDir;
    }
    set sourceDir(value) {
        this.__sourceDir = value;
    }
    /**
     * Dispose the driver. This disposes some things synchronously, but also
     * calls the `asyncDispose()` method to start any asynchronous shutdown.
     */
    dispose() {
        log.debug(localize(2, null));
        for (const term of this._compileTerms.values()) {
            term.dispose();
        }
        for (const sub of [this._settingsSub, this._argsSub, this._envSub, this._buildArgsSub, this._buildEnvSub, this._testArgsSub, this._testEnvSub, this._packEnvSub, this._generalEnvSub]) {
            sub.dispose();
        }
        rollbar_1.default.invokeAsync(localize(3, null), () => this.asyncDispose());
    }
    /**
     * Compute the environment variables that apply with substitutions by expansionOptions
     */
    async computeExpandedEnvironment(toExpand, expanded) {
        const env = environmentVariables_1.EnvironmentUtils.create();
        const opts = this.expansionOptions;
        for (const entry of Object.entries(toExpand)) {
            env[entry[0]] = await expand.expandString(entry[1], Object.assign(Object.assign({}, opts), { envOverride: expanded }));
        }
        return env;
    }
    /**
     * Get the environment variables that should be set at CMake-configure time.
     */
    async getConfigureEnvironment(configurePreset, extraEnvironmentVariables) {
        var _a;
        let envs;
        if (this.useCMakePresets) {
            envs = environmentVariables_1.EnvironmentUtils.create(configurePreset ? configurePreset.environment : (_a = this._configurePreset) === null || _a === void 0 ? void 0 : _a.environment);
            envs = environmentVariables_1.EnvironmentUtils.merge([envs, await this.computeExpandedEnvironment(this.config.environment, envs)]);
            envs = environmentVariables_1.EnvironmentUtils.merge([envs, await this.computeExpandedEnvironment(this.config.configureEnvironment, envs)]);
        }
        else {
            envs = this._kitEnvironmentVariables;
            /* NOTE: By mergeEnvironment one by one to enable expanding self containd variable such as PATH properly */
            /* If configureEnvironment and environment both configured different PATH, doing this will preserve them all */
            envs = environmentVariables_1.EnvironmentUtils.merge([envs, await this.computeExpandedEnvironment(this.config.environment, envs)]);
            envs = environmentVariables_1.EnvironmentUtils.merge([envs, await this.computeExpandedEnvironment(this.config.configureEnvironment, envs)]);
            envs = environmentVariables_1.EnvironmentUtils.merge([envs, await this.computeExpandedEnvironment(this._variantEnv, envs)]);
        }
        if (extraEnvironmentVariables) {
            envs = environmentVariables_1.EnvironmentUtils.merge([envs, await this.computeExpandedEnvironment(extraEnvironmentVariables, envs)]);
        }
        return envs;
    }
    /**
     * Get the environment variables that should be set at CMake-build time.
     */
    async getCMakeBuildCommandEnvironment(in_env) {
        var _a;
        if (this.useCMakePresets) {
            let envs = environmentVariables_1.EnvironmentUtils.merge([in_env, (_a = this._buildPreset) === null || _a === void 0 ? void 0 : _a.environment]);
            envs = environmentVariables_1.EnvironmentUtils.merge([envs, await this.computeExpandedEnvironment(this.config.environment, envs)]);
            envs = environmentVariables_1.EnvironmentUtils.merge([envs, await this.computeExpandedEnvironment(this.config.buildEnvironment, envs)]);
            return envs;
        }
        else {
            let envs = environmentVariables_1.EnvironmentUtils.merge([in_env, this._kitEnvironmentVariables]);
            envs = environmentVariables_1.EnvironmentUtils.merge([envs, await this.computeExpandedEnvironment(this.config.environment, envs)]);
            envs = environmentVariables_1.EnvironmentUtils.merge([envs, await this.computeExpandedEnvironment(this.config.buildEnvironment, envs)]);
            envs = environmentVariables_1.EnvironmentUtils.merge([envs, await this.computeExpandedEnvironment(this._variantEnv, envs)]);
            return envs;
        }
    }
    /**
     * Get the environment variables that should be set at CTest and running program time.
     */
    async getCTestCommandEnvironment() {
        var _a, _b;
        if (this.useCMakePresets) {
            let envs = environmentVariables_1.EnvironmentUtils.create((_a = this._testPreset) === null || _a === void 0 ? void 0 : _a.environment);
            envs = environmentVariables_1.EnvironmentUtils.merge([envs, await this.computeExpandedEnvironment(this.config.environment, envs)]);
            envs = environmentVariables_1.EnvironmentUtils.merge([envs, await this.computeExpandedEnvironment(this.config.testEnvironment, envs)]);
            if (this.useCMakePresets && this.testPreset !== null && (0, config_1.checkTestOverridesPresent)(this.config)) {
                log.info(localize(4, null, (_b = this.testPreset.displayName) !== null && _b !== void 0 ? _b : this.testPreset.name));
            }
            return envs;
        }
        else {
            let envs = this._kitEnvironmentVariables;
            envs = environmentVariables_1.EnvironmentUtils.merge([envs, await this.computeExpandedEnvironment(this.config.environment, envs)]);
            envs = environmentVariables_1.EnvironmentUtils.merge([envs, await this.computeExpandedEnvironment(this.config.testEnvironment, envs)]);
            envs = environmentVariables_1.EnvironmentUtils.merge([envs, await this.computeExpandedEnvironment(this._variantEnv, envs)]);
            return envs;
        }
    }
    /**
     * Get the environment variables that should be set at CPack and packaging time.
     */
    async getCPackCommandEnvironment() {
        var _a, _b;
        if (this.useCMakePresets) {
            let envs = environmentVariables_1.EnvironmentUtils.create((_a = this._packagePreset) === null || _a === void 0 ? void 0 : _a.environment);
            envs = environmentVariables_1.EnvironmentUtils.merge([envs, await this.computeExpandedEnvironment(this.config.environment, envs)]);
            envs = environmentVariables_1.EnvironmentUtils.merge([envs, await this.computeExpandedEnvironment(this.config.cpackEnvironment, envs)]);
            if (this.useCMakePresets && this.packagePreset !== null && (0, config_1.checkPackageOverridesPresent)(this.config)) {
                log.info(localize(5, null, (_b = this.packagePreset.displayName) !== null && _b !== void 0 ? _b : this.packagePreset.name));
            }
            return envs;
        }
        else {
            return {};
        }
    }
    get onProgress() {
        return (_cb) => new util.DummyDisposable();
    }
    get useCMakePresets() {
        return this._useCMakePresets;
    }
    get testPreset() {
        return this._testPreset;
    }
    get packagePreset() {
        return this._packagePreset;
    }
    get workflowPreset() {
        return this._workflowPreset;
    }
    /**
     * Get the vscode root workspace folder.
     *
     * @returns Returns the vscode root workspace folder. Returns `null` if no folder is open or the folder uri is not a
     * `file://` scheme.
     */
    get workspaceFolder() {
        return this.__workspaceFolder;
    }
    /**
     * The options that will be passed to `expand.expandString` for this driver.
     */
    get expansionOptions() {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
        const ws_root = util.lightNormalizePath(this.workspaceFolder || '.');
        const target = (_c = (0, triple_1.parseTargetTriple)((_b = (_a = this._kitDetect) === null || _a === void 0 ? void 0 : _a.triple) !== null && _b !== void 0 ? _b : '')) !== null && _c !== void 0 ? _c : {};
        const version = (_e = (_d = this._kitDetect) === null || _d === void 0 ? void 0 : _d.version) !== null && _e !== void 0 ? _e : '0.0';
        // Fill in default replacements
        const vars = {
            buildKit: this._kit ? this._kit.name : '__unknownkit__',
            buildType: this.currentBuildType,
            generator: this.generatorName || 'null',
            workspaceFolder: ws_root,
            workspaceFolderBasename: path.basename(ws_root),
            workspaceHash: util.makeHashString(ws_root),
            workspaceRoot: ws_root,
            workspaceRootFolderName: path.basename(ws_root),
            userHome: paths_1.default.userHome,
            buildKitVendor: (_g = (_f = this._kitDetect) === null || _f === void 0 ? void 0 : _f.vendor) !== null && _g !== void 0 ? _g : '__unknow_vendor__',
            buildKitTriple: (_j = (_h = this._kitDetect) === null || _h === void 0 ? void 0 : _h.triple) !== null && _j !== void 0 ? _j : '__unknow_triple__',
            buildKitVersion: version,
            buildKitHostOs: process.platform,
            buildKitTargetOs: (_k = target.targetOs) !== null && _k !== void 0 ? _k : '__unknow_target_os__',
            buildKitTargetArch: (_l = target.targetArch) !== null && _l !== void 0 ? _l : '__unknow_target_arch__',
            buildKitVersionMajor: (0, triple_1.majorVersionSemver)(version),
            buildKitVersionMinor: (0, triple_1.minorVersionSemver)(version),
            sourceDir: this.sourceDir,
            // DEPRECATED EXPANSION: Remove this in the future:
            projectName: 'ProjectName'
        };
        // Update Variant replacements
        const variantVars = {};
        if (this.variantKeywordSettings) {
            // allows to expansion of variant option keyword and replace it by the variant option short name
            this.variantKeywordSettings.forEach((value, key) => variantVars[key] = value);
        }
        return { vars, variantVars };
    }
    static sourceDirExpansionOptions(workspaceFolderFspath) {
        const ws_root = util.lightNormalizePath(workspaceFolderFspath || '.');
        // Fill in default replacements
        const vars = {
            generator: 'generator',
            workspaceFolder: ws_root,
            workspaceFolderBasename: path.basename(ws_root),
            sourceDir: '${sourceDir}',
            workspaceHash: util.makeHashString(ws_root),
            workspaceRoot: ws_root,
            workspaceRootFolderName: path.basename(ws_root),
            userHome: paths_1.default.userHome
        };
        return { vars };
    }
    getEffectiveSubprocessEnvironment(opts) {
        const cur_env = process.env;
        const kit_env = (this.config.ignoreKitEnv) ? environmentVariables_1.EnvironmentUtils.create() : this._kitEnvironmentVariables;
        return environmentVariables_1.EnvironmentUtils.merge([cur_env, kit_env, opts === null || opts === void 0 ? void 0 : opts.environment]);
    }
    executeCommand(command, args, consumer, options) {
        const environment = this.getEffectiveSubprocessEnvironment(options);
        const exec_options = Object.assign(Object.assign({}, options), { environment });
        return proc.execute(command, args, consumer, exec_options);
    }
    /**
     * Launch the given compilation command in an embedded terminal.
     * @param cmd The compilation command from a compilation database to run
     */
    async runCompileCommand(cmd) {
        var _a;
        const env = await this.getCMakeBuildCommandEnvironment();
        if (this.useCMakePresets && this._buildPreset && (0, config_1.checkBuildOverridesPresent)(this.config)) {
            log.info(localize(6, null, (_a = this._buildPreset.displayName) !== null && _a !== void 0 ? _a : this._buildPreset.name));
        }
        const key = `${cmd.directory}${JSON.stringify(env)}`;
        let existing = this._compileTerms.get(key);
        if (existing && this.config.clearOutputBeforeBuild) {
            this._compileTerms.delete(key);
            existing.dispose();
            existing = undefined;
        }
        if (!existing) {
            const shellPath = process.platform === 'win32' ? 'cmd.exe' : undefined;
            const term = vscode.window.createTerminal({
                name: localize(7, null),
                cwd: cmd.directory,
                env,
                shellPath
            });
            this._compileTerms.set(key, term);
            existing = term;
        }
        existing.show();
        existing.sendText(cmd.command + '\r\n');
        return existing;
    }
    /**
     * Remove the prior CMake configuration files.
     */
    async _cleanPriorConfiguration() {
        const build_dir = this.binaryDir;
        const cache = this.cachePath;
        const cmake_files = path.join(build_dir, 'CMakeFiles');
        if (await pr_1.fs.exists(cache)) {
            log.info(localize(8, null, cache));
            try {
                await pr_1.fs.unlink(cache);
            }
            catch (_a) {
                log.error(localize(9, null, this.cachePath));
            }
        }
        if (await pr_1.fs.exists(cmake_files)) {
            log.info(localize(10, null, cmake_files));
            await pr_1.fs.rmdir(cmake_files);
        }
    }
    /**
     * Change the current configure preset. This lets the driver reload, if necessary.
     * @param configurePreset The new configure preset
     */
    async setConfigurePreset(configurePreset) {
        if (configurePreset) {
            log.info(localize(11, null, configurePreset.name));
            const newBinaryDir = configurePreset.binaryDir;
            const needs_clean = this.binaryDir === newBinaryDir && preset.configurePresetChangeNeedsClean(configurePreset, this._configurePreset);
            await this.doSetConfigurePreset(needs_clean, async () => {
                await this._setConfigurePreset(configurePreset);
            });
        }
        else {
            log.info(localize(12, null));
            await this.doSetConfigurePreset(false, async () => {
                await this._setConfigurePreset(configurePreset);
            });
        }
    }
    async _setConfigurePreset(configurePreset) {
        this._configurePreset = configurePreset;
        log.debug(localize(13, null, (configurePreset === null || configurePreset === void 0 ? void 0 : configurePreset.name) || null));
        this._binaryDir = (configurePreset === null || configurePreset === void 0 ? void 0 : configurePreset.binaryDir) || '';
        if (configurePreset) {
            if (configurePreset.generator) {
                this._generator = {
                    name: configurePreset.generator,
                    platform: configurePreset.architecture ? (0, preset_1.getValue)(configurePreset.architecture) : undefined,
                    toolset: configurePreset.toolset ? (0, preset_1.getValue)(configurePreset.toolset) : undefined
                };
            }
            else {
                log.debug(localize(14, null));
            }
        }
        else {
            this._generator = null;
        }
    }
    /**
     * Change the current build preset
     * @param buildPreset The new build preset
     */
    async setBuildPreset(buildPreset) {
        if (buildPreset) {
            log.info(localize(15, null, buildPreset.name));
        }
        else {
            log.info(localize(16, null));
        }
        await this.doSetBuildPreset(async () => {
            await this._setBuildPreset(buildPreset);
        });
    }
    async _setBuildPreset(buildPreset) {
        this._buildPreset = buildPreset;
        log.debug(localize(17, null, (buildPreset === null || buildPreset === void 0 ? void 0 : buildPreset.name) || null));
    }
    /**
     * Change the current test preset
     * @param testPreset The new test preset
     */
    async setTestPreset(testPreset) {
        if (testPreset) {
            log.info(localize(18, null, testPreset.name));
        }
        else {
            log.info(localize(19, null));
        }
        await this.doSetTestPreset(async () => {
            await this._setTestPreset(testPreset);
        });
    }
    async _setTestPreset(testPreset) {
        this._testPreset = testPreset;
        log.debug(localize(20, null, (testPreset === null || testPreset === void 0 ? void 0 : testPreset.name) || null));
    }
    /**
     * Change the current package preset
     * @param packagePreset The new package preset
     */
    async setPackagePreset(packagePreset) {
        if (packagePreset) {
            log.info(localize(21, null, packagePreset.name));
        }
        else {
            log.info(localize(22, null));
        }
        await this.doSetPackagePreset(async () => {
            await this._setPackagePreset(packagePreset);
        });
    }
    async _setPackagePreset(packagePreset) {
        this._packagePreset = packagePreset;
        log.debug(localize(23, null, (packagePreset === null || packagePreset === void 0 ? void 0 : packagePreset.name) || null));
    }
    /**
     * Change the current workflow preset
     * @param workflowPreset The new workflow preset
     */
    async setWorkflowPreset(workflowPreset) {
        if (workflowPreset) {
            log.info(localize(24, null, workflowPreset.name));
        }
        else {
            log.info(localize(25, null));
        }
        await this.doSetWorkflowPreset(async () => {
            await this._setWorkflowPreset(workflowPreset);
        });
    }
    async _setWorkflowPreset(workflowPreset) {
        this._workflowPreset = workflowPreset;
        log.debug(localize(26, null, (workflowPreset === null || workflowPreset === void 0 ? void 0 : workflowPreset.name) || null));
    }
    /**
     * Ensure that variables are up to date (e.g. sourceDirectory, buildDirectory, env, installDirectory)
     */
    async refreshSettings() {
        await this._refreshExpansions();
    }
    /**
     * Change the current kit. This lets the driver reload, if necessary.
     * @param kit The new kit
     */
    async setKit(kit, preferredGenerators) {
        if (this.useCMakePresets) {
            log.info(localize(27, null, kit.name));
            return;
        }
        log.info(localize(28, null, kit.name));
        const oldBinaryDir = this.binaryDir;
        const needsCleanIfKitChange = (0, kit_1.kitChangeNeedsClean)(kit, this._kit);
        await this.doSetKit(async () => {
            await this._setKit(kit, preferredGenerators);
            await this._refreshExpansions();
            const scope = this.workspaceFolder ? vscode.Uri.file(this.workspaceFolder) : undefined;
            const newBinaryDir = util.lightNormalizePath(await expand.expandString(this.config.buildDirectory(this.isMultiProject, scope), this.expansionOptions));
            if (needsCleanIfKitChange && (newBinaryDir === oldBinaryDir)) {
                await this._cleanPriorConfiguration();
            }
        });
    }
    async _setKit(kit, preferredGenerators) {
        this._kit = Object.seal(Object.assign({}, kit));
        this._kitDetect = await (0, kit_1.getKitDetect)(this._kit);
        log.debug(localize(29, null, kit.name));
        this._kitEnvironmentVariables = await (0, kit_1.effectiveKitEnvironment)(kit, this.expansionOptions);
        if (kit.preferredGenerator) {
            preferredGenerators.push(kit.preferredGenerator);
        }
        // If no preferred generator is defined by the current kit or the user settings,
        // it's time to consider the defaults.
        if (preferredGenerators.length === 0) {
            preferredGenerators.push({ name: "Ninja" });
            preferredGenerators.push({ name: "Unix Makefiles" });
        }
        // Use the "best generator" selection logic only if the user did not define already
        // in settings (via "cmake.generator") a particular generator to be used.
        if (this.config.generator) {
            this._generator = {
                name: this.config.generator,
                platform: this.config.platform || undefined,
                toolset: this.config.toolset || undefined
            };
        }
        else {
            this._generator = await this.findBestGenerator(preferredGenerators);
        }
    }
    get generator() {
        return this._generator;
    }
    /**
     * Change the current options from the variant.
     * @param opts The new options
     * @param keywordSetting Variant Keywords for identification of a variant option
     */
    async setVariant(opts, keywordSetting) {
        log.debug(localize(30, null, opts.short || '(Unnamed)'));
        this._variantBuildType = opts.buildType || this._variantBuildType;
        this._variantConfigureSettings = opts.settings || this._variantConfigureSettings;
        this._variantLinkage = opts.linkage || null;
        this._variantEnv = environmentVariables_1.EnvironmentUtils.create(opts.env);
        this.variantKeywordSettings = keywordSetting || null;
        await this._refreshExpansions();
    }
    doRefreshExpansions(cb) {
        return cb();
    }
    async _refreshExpansions(configurePreset) {
        return this.doRefreshExpansions(async () => {
            this.sourceDir = await util.normalizeAndVerifySourceDir(this.sourceDirUnexpanded, CMakeDriver.sourceDirExpansionOptions(this.workspaceFolder));
            const opts = this.expansionOptions;
            opts.envOverride = await this.getConfigureEnvironment(configurePreset);
            if (!this.useCMakePresets) {
                const scope = this.workspaceFolder ? vscode.Uri.file(this.workspaceFolder) : undefined;
                this._binaryDir = util.lightNormalizePath(await expand.expandString(this.config.buildDirectory(this.isMultiProject, scope), opts));
                const installPrefix = this.config.installPrefix;
                if (installPrefix) {
                    this._installDir = util.lightNormalizePath(await expand.expandString(installPrefix, opts));
                }
            }
        });
    }
    /**
     * Path to where the root CMakeLists.txt file should be
     */
    get mainListFile() {
        const file = path.join(this.sourceDir, 'CMakeLists.txt');
        return util.lightNormalizePath(file);
    }
    /**
     * Directory where build output is stored.
     */
    get binaryDir() {
        return this._binaryDir;
    }
    /**
     * Directory where the targets will be installed.
     */
    get installDir() {
        return this._installDir;
    }
    /**
     * @brief Get the path to the CMakeCache file in the build directory
     */
    get cachePath() {
        // TODO: Cache path can change if build dir changes at runtime
        const file = path.join(this.binaryDir, 'CMakeCache.txt');
        return util.lightNormalizePath(file);
    }
    /**
     * Get the current build type, according to the current selected variant.
     *
     * This is the value passed to CMAKE_BUILD_TYPE or --config for multiconf
     */
    get currentBuildType() {
        var _a, _b, _c;
        if (this.useCMakePresets) {
            if ((this.isMultiConfig || this.isMultiConfFast) && ((_a = this._buildPreset) === null || _a === void 0 ? void 0 : _a.configuration)) {
                return this._buildPreset.configuration;
            }
            const buildType = (_c = (_b = this._configurePreset) === null || _b === void 0 ? void 0 : _b.cacheVariables) === null || _c === void 0 ? void 0 : _c['CMAKE_BUILD_TYPE'];
            if (util.isString(buildType)) {
                return buildType;
            }
            else if (buildType && typeof buildType === 'object' && util.isString(buildType.value)) {
                return buildType.value;
            }
            return 'Debug'; // Default to debug
        }
        else {
            return this._variantBuildType;
        }
    }
    get isMultiConfig() {
        return this._isMultiConfig;
    }
    set isMultiConfig(v) {
        this._isMultiConfig = v;
    }
    get isMultiConfFast() {
        return this.generatorName ? util.isMultiConfGeneratorFast(this.generatorName) : false;
    }
    get allTargetName() {
        const gen = this.generatorName;
        if (gen && (gen.includes('Visual Studio') || gen.toLowerCase().includes('xcode'))) {
            return 'ALL_BUILD';
        }
        else {
            return 'all';
        }
    }
    /**
     * The ID of the current compiler, as best we can tell
     */
    get compilerID() {
        const entries = this.cmakeCacheEntries;
        const languages = ['CXX', 'C', 'CUDA'];
        for (const lang of languages) {
            const entry = entries.get(`CMAKE_${lang}_COMPILER`);
            if (!entry) {
                continue;
            }
            const compiler = entry.value;
            if (compiler.endsWith('cl.exe')) {
                return 'MSVC';
            }
            else if (/g(cc|\+\+)/.test(compiler)) {
                return 'GNU';
            }
            else if (/clang(\+\+)?[^/]*/.test(compiler)) {
                return 'Clang';
            }
        }
        return null;
    }
    get linkerID() {
        const entries = this.cmakeCacheEntries;
        const entry = entries.get('CMAKE_LINKER');
        if (!entry) {
            return null;
        }
        const linker = entry.value;
        if (linker.endsWith('link.exe')) {
            return 'MSVC';
        }
        else if (linker.endsWith('ld')) {
            return 'GNU';
        }
        return null;
    }
    get cmakePathFromPreset() {
        var _a;
        if (!this.useCMakePresets) {
            return;
        }
        return (_a = this._configurePreset) === null || _a === void 0 ? void 0 : _a.cmakeExecutable;
    }
    async testHaveCommand(program, args = ['--version']) {
        const child = this.executeCommand(program, args, undefined, { silent: true });
        try {
            const result = await child.result;
            log.trace(localize(31, null, `"${program} ${args.join(' ')}"`, nullableValueToString(result.retc)));
            return result.retc === 0;
        }
        catch (e) {
            const e2 = e;
            log.debug(localize(32, null, `"${program} ${args.join(' ')}"`, nullableValueToString(e2.code)));
            if (e2.code === 'ENOENT') {
                return false;
            }
            throw e;
        }
    }
    isCommonGenerator(genName) {
        return genName === 'Ninja' || genName === 'Ninja Multi-Config' ||
            genName === 'MinGW Makefiles' || genName === 'NMake Makefiles' ||
            genName === 'Unix Makefiles' || genName === 'MSYS Makefiles';
    }
    /**
     * Picks the best generator to use on the current system
     */
    async findBestGenerator(preferredGenerators) {
        log.debug(localize(33, null));
        const platform = process.platform;
        for (const gen of preferredGenerators) {
            const gen_name = gen.name;
            const generator_present = await (async () => {
                if (gen_name === 'Ninja' || gen_name === 'Ninja Multi-Config') {
                    return await this.testHaveCommand('ninja') || this.testHaveCommand('ninja-build');
                }
                if (gen_name === 'MinGW Makefiles') {
                    return platform === 'win32' && this.testHaveCommand('mingw32-make');
                }
                if (gen_name === 'NMake Makefiles') {
                    return platform === 'win32' && this.testHaveCommand('nmake', ['/?']);
                }
                if (gen_name === 'Unix Makefiles') {
                    return this.testHaveCommand('make');
                }
                if (gen_name === 'MSYS Makefiles') {
                    return platform === 'win32' && this.testHaveCommand('make');
                }
                return false;
            })();
            if (!generator_present) {
                const vsMatch = /^(Visual Studio \d{2} \d{4})($|\sWin64$|\sARM$)/.exec(gen.name);
                if (platform === 'win32' && vsMatch) {
                    return {
                        name: vsMatch[1],
                        platform: gen.platform || vsMatch[2],
                        toolset: gen.toolset
                    };
                }
                if (gen.name.toLowerCase().startsWith('xcode') && platform === 'darwin') {
                    return gen;
                }
                // If it is not a common generator that we can find, but it is a known cmake generator (cmakeGenerators), return it.
                if (this.cmakeGenerators.indexOf(gen.name) >= 0 && !this.isCommonGenerator(gen.name)) {
                    return gen;
                }
                continue;
            }
            else {
                return gen;
            }
        }
        return null;
    }
    configOrBuildInProgress() {
        return this.configInProgress() || this.cmakeBuildRunner.isBuildInProgress();
    }
    configInProgress() {
        return this.isConfigInProgress;
    }
    /**
     * Perform a clean configure. Deletes cached files before running the config
     * @param consumer The output consumer
     */
    async cleanConfigure(trigger, extra_args, consumer, debuggerInformation) {
        if (this.isConfigInProgress) {
            await this.preconditionHandler(CMakePreconditionProblems.ConfigureIsAlreadyRunning);
            return { result: -1, resultType: ConfigureResultType.ForcedCancel };
        }
        if (this.cmakeBuildRunner.isBuildInProgress()) {
            await this.preconditionHandler(CMakePreconditionProblems.BuildIsAlreadyRunning);
            return { result: -1, resultType: ConfigureResultType.ConfigureInProgress };
        }
        this.isConfigInProgress = true;
        await this.doPreCleanConfigure();
        this.isConfigInProgress = false;
        return this.configure(trigger, extra_args, consumer, debuggerInformation);
    }
    async testCompilerVersion(program, cwd, arg, regexp, captureGroup) {
        const args = [];
        if (arg) {
            args.push(arg);
        }
        const child = this.executeCommand(program, args, undefined, { silent: true, cwd });
        try {
            const result = await child.result;
            log.trace(localize(34, null, `"${program} ${arg}"`, nullableValueToString(result.retc)));
            // Various compilers will output into stdout, others in stderr.
            // It's safe to concat them into one string to search in, since it's enough to analyze
            // the first match (stderr can't print a different version than stdout).
            const versionLine = result.stderr.concat(result.stdout);
            const match = regexp.exec(versionLine);
            // Make sure that all the regexp in compilerAllowList are written in a way that match[2] is the indeed the version.
            // This number may change in future as we add more cases and index 2 might be difficult to ensure for all of them.
            return match ? match[captureGroup] : "error";
        }
        catch (e) {
            const e2 = e;
            log.debug(localize(35, null, `"${program} ${arg}"`, nullableValueToString(e2.code)));
            return "error";
        }
    }
    async getCompilerVersion(compilerPath) {
        // Compiler name and path as coming from the kit.
        const compilerName = path.parse(compilerPath).name;
        const compilerDir = path.parse(compilerPath).dir;
        // Find an equivalent in the compilers allowed list.
        // To avoid finding "cl" instead of "clang" or "g++" instead of "clang++",
        // sort the array from lengthier to shorter, so that the find operation
        // would return the most precise match.
        // The find condition must be "includes" instead of "equals"
        // (which wouldn't otherwise need the sort) to avoid implementing separate handling
        // for compiler file name prefixes and suffixes related to targeted architecture.
        const sortedCompilerAllowList = this.compilerAllowList.sort((a, b) => b.name.length - a.name.length);
        const compiler = sortedCompilerAllowList.find(comp => compilerName.includes(comp.name));
        // Mask any unrecognized compiler as "other" to hide private information
        let allowedCompilerName = compiler ? compiler.name : "other";
        // If we recognize the compiler or not, we can still include information about triplet names cross compilers
        if (compilerName.includes("aarch64")) {
            allowedCompilerName += "-aarch64";
        }
        else if (compilerName.includes("arm64")) {
            allowedCompilerName += "-arm64";
        }
        else if (compilerName.includes("arm")) {
            allowedCompilerName += "-arm";
        }
        if (compilerName.includes("eabi")) {
            allowedCompilerName += "-eabi";
        }
        // If we don't have a regexp, we can't obtain the compiler version information.
        // With an undefined switch we still can get the version information (if regexp is defined),
        // since some compilers can output their version without a specific switch.
        let version;
        if (compiler === null || compiler === void 0 ? void 0 : compiler.versionOutputRegexp) {
            version = await this.testCompilerVersion(compilerName, compilerDir, compiler === null || compiler === void 0 ? void 0 : compiler.versionSwitch, RegExp(compiler.versionOutputRegexp, "mgi"), compiler.captureGroup) || "unknown";
        }
        else {
            version = "unknown";
        }
        return { name: allowedCompilerName, version };
    }
    getGeneratorNameForTelemetry(generator = this.generatorName) {
        var _a;
        if (generator) {
            return (_a = this.cmakeGenerators.find(g => generator.startsWith(g))) !== null && _a !== void 0 ? _a : 'other';
        }
        return 'other';
    }
    countHiddenPresets(presets) {
        let count = 0;
        for (const p of presets) {
            if (p.hidden) {
                count++;
            }
        }
        return count;
    }
    shouldUseCachedConfiguration(trigger) {
        return (this.isCacheConfigSupported && !this.isConfiguredAtLeastOnce &&
            trigger === cmakeProject_1.ConfigureTrigger.configureWithCache && !this.config.configureOnOpen) ?
            true : false;
    }
    async generateConfigArgsFromPreset(configPreset) {
        // Cache flags will construct the command line for cmake.
        const init_cache_flags = this.generateInitCacheFlags();
        // Make sure that we expand the config.configureArgs. Right now, preset args are expanded upon switching to the preset.
        return init_cache_flags.concat(preset.configureArgs(configPreset), await Promise.all(this.config.configureArgs.map(async (value) => expand.expandString(value, Object.assign(Object.assign({}, this.expansionOptions), { envOverride: await this.getConfigureEnvironment() })))));
    }
    async generateConfigArgsFromSettings(extra_args = [], withoutCmakeSettings = false) {
        // Cache flags will construct the command line for cmake.
        const init_cache_flags = this.generateInitCacheFlags();
        const common_flags = ['--no-warn-unused-cli'].concat(extra_args, this.config.configureArgs);
        const define_flags = withoutCmakeSettings ? [] : this.generateCMakeSettingsFlags();
        const final_flags = common_flags.concat(define_flags, init_cache_flags);
        // Get expanded configure environment
        const expanded_configure_env = await this.getConfigureEnvironment();
        // Expand all flags
        const opts = this.expansionOptions;
        const expanded_flags_promises = final_flags.map(async (value) => expand.expandString(value, Object.assign(Object.assign({}, opts), { envOverride: expanded_configure_env })));
        return Promise.all(expanded_flags_promises);
    }
    async configure(trigger, extra_args, consumer, debuggerInformation, withoutCmakeSettings = false, showCommandOnly, presetOverride, options) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j;
        // Check if the configuration is using cache in the first configuration and adjust the logging messages based on that.
        const shouldUseCachedConfiguration = this.shouldUseCachedConfiguration(trigger);
        if (trigger === cmakeProject_1.ConfigureTrigger.configureWithCache && !shouldUseCachedConfiguration) {
            log.debug(localize(36, null));
            return { result: -2, resultType: ConfigureResultType.NoCache };
        }
        if (this.isConfigInProgress) {
            await this.preconditionHandler(CMakePreconditionProblems.ConfigureIsAlreadyRunning);
            return { result: -1, resultType: ConfigureResultType.ConfigureInProgress };
        }
        if (this.cmakeBuildRunner.isBuildInProgress()) {
            await this.preconditionHandler(CMakePreconditionProblems.BuildIsAlreadyRunning);
            return { result: -1, resultType: ConfigureResultType.BuildInProgress };
        }
        this.isConfigInProgress = true;
        try {
            // _beforeConfigureOrBuild needs to refresh expansions early because it reads various settings
            // (example: cmake.sourceDirectory).
            await this._refreshExpansions(presetOverride);
            if (!showCommandOnly) {
                if (!shouldUseCachedConfiguration) {
                    log.debug(localize(37, null), extra_args);
                }
                else {
                    log.debug(localize(38, null), extra_args);
                }
            }
            const pre_check_ok = await this._beforeConfigureOrBuild(showCommandOnly);
            if (!pre_check_ok) {
                return { result: -2, resultType: ConfigureResultType.Other };
            }
            let expanded_flags;
            let defaultPresetName;
            if (this.useCMakePresets) {
                defaultPresetName = (_a = this._configurePreset) === null || _a === void 0 ? void 0 : _a.name;
                const configurePreset = (trigger === cmakeProject_1.ConfigureTrigger.taskProvider) ? presetOverride : this._configurePreset;
                if (!configurePreset) {
                    log.debug(localize(39, null));
                    return { result: -3, resultType: ConfigureResultType.NoConfigurePreset };
                }
                // For now, fields in presets are expanded when the preset is selected
                expanded_flags = await this.generateConfigArgsFromPreset(configurePreset);
                if (!showCommandOnly && !shouldUseCachedConfiguration && (0, config_1.checkConfigureOverridesPresent)(this.config)) {
                    log.info(localize(40, null, (_b = configurePreset.displayName) !== null && _b !== void 0 ? _b : configurePreset.name));
                }
            }
            else {
                expanded_flags = await this.generateConfigArgsFromSettings(extra_args, withoutCmakeSettings);
            }
            if (!shouldUseCachedConfiguration) {
                log.trace(localize(41, null, JSON.stringify(expanded_flags)));
            }
            // A more complete round of expansions
            await this._refreshExpansions(presetOverride);
            const timeStart = new Date().getTime();
            let retc;
            if (shouldUseCachedConfiguration) {
                retc = await this.doCacheConfigure();
                this._isConfiguredAtLeastOnce = true;
                return { result: retc, resultType: ConfigureResultType.NormalOperation };
            }
            else {
                retc = await this.doConfigure(expanded_flags, trigger, consumer, showCommandOnly, defaultPresetName, presetOverride, options, debuggerInformation);
                this._isConfiguredAtLeastOnce = true;
            }
            const timeEnd = new Date().getTime();
            const cmakeVersion = this.cmake.version;
            let telemetryProperties;
            if (this.useCMakePresets) {
                telemetryProperties = {
                    CMakeExecutableVersion: cmakeVersion ? util.versionToString(cmakeVersion) : '',
                    CMakeGenerator: this.getGeneratorNameForTelemetry((presetOverride === null || presetOverride === void 0 ? void 0 : presetOverride.generator) || this.generatorName),
                    Preset: this.useCMakePresets ? 'true' : 'false',
                    Trigger: trigger,
                    ShowCommandOnly: showCommandOnly ? 'true' : 'false'
                };
            }
            else {
                telemetryProperties = {
                    CMakeExecutableVersion: cmakeVersion ? util.versionToString(cmakeVersion) : '',
                    CMakeGenerator: this.getGeneratorNameForTelemetry(),
                    ConfigType: this.isMultiConfFast ? 'MultiConf' : this.currentBuildType || '',
                    Toolchain: ((_c = this._kit) === null || _c === void 0 ? void 0 : _c.toolchainFile) ? 'true' : 'false',
                    Trigger: trigger,
                    ShowCommandOnly: showCommandOnly ? 'true' : 'false'
                };
            }
            if ((_d = this._kit) === null || _d === void 0 ? void 0 : _d.compilers) {
                let cCompilerVersion;
                let cppCompilerVersion;
                if (this._kit.compilers["C"]) {
                    cCompilerVersion = await this.getCompilerVersion(this._kit.compilers["C"]);
                }
                if (this._kit.compilers["CXX"]) {
                    cppCompilerVersion = await this.getCompilerVersion(this._kit.compilers["CXX"]);
                }
                if (cCompilerVersion) {
                    telemetryProperties.CCompilerName = cCompilerVersion.name;
                    telemetryProperties.CCompilerVersion = cCompilerVersion.version;
                }
                if (cppCompilerVersion) {
                    telemetryProperties.CppCompilerName = cppCompilerVersion.name;
                    telemetryProperties.CppCompilerVersion = cppCompilerVersion.version;
                }
            }
            else if (((_e = this._kit) === null || _e === void 0 ? void 0 : _e.visualStudio) && this._kit.visualStudioArchitecture) {
                const env = await (0, kit_1.getVSKitEnvironment)(this._kit);
                const dirs = (_g = (_f = env === null || env === void 0 ? void 0 : env['Path']) === null || _f === void 0 ? void 0 : _f.split(';')) !== null && _g !== void 0 ? _g : [];
                let compilerPath = '';
                for (const dir of dirs) {
                    if (dir.indexOf('MSVC') > 0) {
                        compilerPath = path.join(dir, 'cl.exe');
                        break;
                    }
                }
                if (compilerPath) {
                    const compiler = await this.getCompilerVersion(compilerPath);
                    telemetryProperties.CCompilerVersion = compiler.version;
                    telemetryProperties.CppCompilerVersion = compiler.version;
                }
                else {
                    telemetryProperties.CCompilerVersion = 'unknown';
                    telemetryProperties.CppCompilerVersion = 'unknown';
                }
                telemetryProperties.CCompilerName = 'cl';
                telemetryProperties.CppCompilerName = 'cl';
            }
            if ((_h = this._kit) === null || _h === void 0 ? void 0 : _h.visualStudioArchitecture) {
                telemetryProperties.VisualStudioArchitecture = (_j = this._kit) === null || _j === void 0 ? void 0 : _j.visualStudioArchitecture;
            }
            const telemetryMeasures = {
                Duration: timeEnd - timeStart
            };
            if (this.useCMakePresets && this.workspaceFolder) {
                const configurePresets = preset.configurePresets(this.workspaceFolder);
                const userConfigurePresets = preset.userConfigurePresets(this.workspaceFolder);
                const buildPresets = preset.buildPresets(this.workspaceFolder);
                const userBuildPresets = preset.userBuildPresets(this.workspaceFolder);
                const testPresets = preset.testPresets(this.workspaceFolder);
                const userTestPresets = preset.userTestPresets(this.workspaceFolder);
                const packagePresets = preset.packagePresets(this.workspaceFolder);
                const userPackagePresets = preset.userPackagePresets(this.workspaceFolder);
                const workflowPresets = preset.workflowPresets(this.workspaceFolder);
                const userWorkflowPresets = preset.userWorkflowPresets(this.workspaceFolder);
                telemetryMeasures['ConfigurePresets'] = configurePresets.length;
                telemetryMeasures['HiddenConfigurePresets'] = this.countHiddenPresets(configurePresets);
                telemetryMeasures['UserConfigurePresets'] = userConfigurePresets.length;
                telemetryMeasures['HiddenUserConfigurePresets'] = this.countHiddenPresets(userConfigurePresets);
                telemetryMeasures['BuildPresets'] = buildPresets.length;
                telemetryMeasures['HiddenBuildPresets'] = this.countHiddenPresets(buildPresets);
                telemetryMeasures['UserBuildPresets'] = userBuildPresets.length;
                telemetryMeasures['HiddenUserBuildPresets'] = this.countHiddenPresets(userBuildPresets);
                telemetryMeasures['TestPresets'] = testPresets.length;
                telemetryMeasures['HiddenTestPresets'] = this.countHiddenPresets(testPresets);
                telemetryMeasures['UserTestPresets'] = userTestPresets.length;
                telemetryMeasures['HiddenUserTestPresets'] = this.countHiddenPresets(userTestPresets);
                telemetryMeasures['PackagePresets'] = packagePresets.length;
                telemetryMeasures['HiddenPackagePresets'] = this.countHiddenPresets(packagePresets);
                telemetryMeasures['UserPackagePresets'] = userPackagePresets.length;
                telemetryMeasures['HiddenUserPackagePresets'] = this.countHiddenPresets(userPackagePresets);
                telemetryMeasures['WorkflowPresets'] = workflowPresets.length;
                telemetryMeasures['HiddenWorkflowPresets'] = this.countHiddenPresets(workflowPresets);
                telemetryMeasures['UserWorkflowPresets'] = userWorkflowPresets.length;
                telemetryMeasures['HiddenUserWorkflowPresets'] = this.countHiddenPresets(userWorkflowPresets);
            }
            if (consumer) {
                if (consumer instanceof cmake_1.CMakeOutputConsumer) {
                    let errorCount = 0;
                    let warningCount = 0;
                    consumer.diagnostics.forEach(v => {
                        if (v.diag.severity === 0) {
                            errorCount++;
                        }
                        else if (v.diag.severity === 1) {
                            warningCount++;
                        }
                    });
                    telemetryMeasures['ErrorCount'] = errorCount;
                    telemetryMeasures['WarningCount'] = warningCount;
                }
                else if (!(consumer instanceof cmakeTaskProvider_1.CustomBuildTaskTerminal)) {
                    // Wrong type: shouldn't get here, just in case
                    rollbar_1.default.error('Wrong build result type.');
                    telemetryMeasures['ErrorCount'] = retc ? 1 : 0;
                }
            }
            telemetry.logEvent('configure', telemetryProperties, telemetryMeasures);
            return { result: retc, resultType: ConfigureResultType.NormalOperation };
        }
        catch (_k) {
            log.info(localize(42, null));
            return { result: -1, resultType: ConfigureResultType.NormalOperation };
        }
        finally {
            this.isConfigInProgress = false;
        }
    }
    generateInitCacheFlags() {
        const cache_init_conf = this.config.cacheInit;
        let cache_init = [];
        if (cache_init_conf === null) {
            // Do nothing
        }
        else if (util.isString(cache_init_conf)) {
            cache_init = [cache_init_conf];
        }
        else {
            cache_init = cache_init_conf;
        }
        const flags = [];
        for (let init of cache_init) {
            if (!path.isAbsolute(init)) {
                init = path.join(this.sourceDir, init);
            }
            flags.push('-C', init);
        }
        return flags;
    }
    generateCMakeSettingsFlags() {
        const settingMap = {};
        if (this._variantLinkage !== null) {
            settingMap.BUILD_SHARED_LIBS = util.cmakeify(this._variantLinkage === 'shared');
        }
        const configurationScope = this.workspaceFolder ? vscode.Uri.file(this.workspaceFolder) : null;
        const config = vscode.workspace.getConfiguration("cmake", configurationScope);
        const allowBuildTypeOnMultiConfig = config.get("setBuildTypeOnMultiConfig") || false;
        if (!this.isMultiConfFast || (this.isMultiConfFast && allowBuildTypeOnMultiConfig)) {
            // Mutliconf generators do not need the CMAKE_BUILD_TYPE property
            settingMap.CMAKE_BUILD_TYPE = util.cmakeify(this.currentBuildType);
        }
        // Only use the installPrefix config if the user didn't
        // provide one via configureSettings
        if (!settingMap.CMAKE_INSTALL_PREFIX && this.installDir) {
            settingMap.CMAKE_INSTALL_PREFIX = util.cmakeify(this.installDir);
        }
        try {
            util.objectPairs(this.config.configureSettings).forEach(([key, value]) => settingMap[key] = util.cmakeify(value));
        }
        catch (e) {
            log.error(e.message);
            throw e;
        }
        util.objectPairs(this._variantConfigureSettings).forEach(([key, value]) => settingMap[key] = util.cmakeify(value));
        // Export compile_commands.json
        const exportCompileCommandsSetting = config.get("exportCompileCommandsFile");
        const exportCompileCommandsFile = exportCompileCommandsSetting === undefined ? true : (exportCompileCommandsSetting || false);
        settingMap.CMAKE_EXPORT_COMPILE_COMMANDS = util.cmakeify(exportCompileCommandsFile);
        console.assert(!!this._kit);
        if (!this._kit) {
            throw new Error(localize(43, null));
        }
        if (this._kit.compilers) {
            log.debug(localize(44, null, this._kit.name));
            for (const lang in this._kit.compilers) {
                const compiler = this._kit.compilers[lang];
                settingMap[`CMAKE_${lang}_COMPILER`] = { type: 'FILEPATH', value: compiler };
            }
        }
        if (this._kit.toolchainFile) {
            log.debug(localize(45, null, this._kit.name));
            settingMap.CMAKE_TOOLCHAIN_FILE = { type: 'FILEPATH', value: this._kit.toolchainFile };
        }
        if (this._kit.cmakeSettings) {
            util.objectPairs(this._kit.cmakeSettings)
                .forEach(([key, value]) => settingMap[key] = util.cmakeify(value));
        }
        return util.objectPairs(settingMap).map(([key, value]) => {
            switch (value.type) {
                case 'UNKNOWN':
                case '':
                    return `-D${key}=${value.value}`;
                default:
                    return `-D${key}:${value.type}=${value.value}`;
            }
        });
    }
    async build(targets, consumer, isBuildCommand) {
        log.debug(localize(46, null), (targets === null || targets === void 0 ? void 0 : targets.join(', ')) || '');
        if (this.isConfigInProgress) {
            await this.preconditionHandler(CMakePreconditionProblems.ConfigureIsAlreadyRunning);
            return -1;
        }
        if (this.cmakeBuildRunner.isBuildInProgress()) {
            await this.preconditionHandler(CMakePreconditionProblems.BuildIsAlreadyRunning);
            return -1;
        }
        this.cmakeBuildRunner.setBuildInProgress(true);
        const pre_build_ok = await this.doPreBuild();
        if (!pre_build_ok) {
            this.cmakeBuildRunner.setBuildInProgress(false);
            return -1;
        }
        const timeStart = new Date().getTime();
        const child = await this._doCMakeBuild(targets, consumer, isBuildCommand);
        const timeEnd = new Date().getTime();
        const duration = timeEnd - timeStart;
        log.info(localize(47, null, util.msToString(duration)));
        const telemetryProperties = this.useCMakePresets ? undefined : {
            ConfigType: this.isMultiConfFast ? 'MultiConf' : this.currentBuildType || ''
        };
        const telemetryMeasures = {
            Duration: duration
        };
        if (child) {
            if (consumer) {
                if (consumer instanceof build_1.CMakeBuildConsumer &&
                    consumer.compileConsumer instanceof build_1.CompileOutputConsumer) {
                    let errorCount = 0;
                    let warningCount = 0;
                    for (const compiler in consumer.compileConsumer.compilers) {
                        const parser = consumer.compileConsumer.compilers[compiler];
                        parser.diagnostics.forEach(v => {
                            if (v.severity === 'error' || v.severity === 'fatal error') {
                                errorCount++;
                            }
                            else if (v.severity === 'warning') {
                                warningCount++;
                            }
                        });
                    }
                    telemetryMeasures['ErrorCount'] = errorCount;
                    telemetryMeasures['WarningCount'] = warningCount;
                }
                else if (!(consumer instanceof cmakeTaskProvider_1.CustomBuildTaskTerminal)) {
                    // Wrong type: shouldn't get here, just in case
                    rollbar_1.default.error('Wrong build result type.');
                    telemetryMeasures['ErrorCount'] = (await child.result).retc ? 1 : 0;
                }
            }
            telemetry.logEvent('build', telemetryProperties, telemetryMeasures);
        }
        else {
            // Not sure what happened but there's an error...
            telemetryMeasures['ErrorCount'] = 1;
            telemetry.logEvent('build', telemetryProperties, telemetryMeasures);
            this.cmakeBuildRunner.setBuildInProgress(false);
            return -1;
        }
        if (!this.m_stop_process) {
            const post_build_ok = await this.doPostBuild();
            if (!post_build_ok) {
                this.cmakeBuildRunner.setBuildInProgress(false);
                return -1;
            }
        }
        if (!this.m_stop_process) {
            await this._refreshExpansions();
        }
        return (await child.result.finally(() => {
            this.cmakeBuildRunner.setBuildInProgress(false);
        })).retc;
    }
    /**
     * Execute pre-configure/build tasks to check if we are ready to run a full
     * configure. This should be called by a derived driver before any
     * configuration tasks are run
     */
    async _beforeConfigureOrBuild(showCommandOnly) {
        if (!showCommandOnly) {
            log.debug(localize(48, null));
        }
        if (!this.sourceDir) {
            log.debug(localize(49, null), this.sourceDir);
            await this.preconditionHandler(CMakePreconditionProblems.NoSourceDirectoryFound);
            return false;
        }
        const cmake_list = this.mainListFile;
        if (!await pr_1.fs.exists(cmake_list)) {
            log.debug(localize(50, null, cmake_list));
            await this.preconditionHandler(CMakePreconditionProblems.MissingCMakeListsFile, this.config);
            return false;
        }
        return true;
    }
    correctAllTargetName(targetnames) {
        for (let i = 0; i < targetnames.length; i++) {
            if (targetnames[i] === 'all' || targetnames[i] === 'ALL_BUILD') {
                targetnames[i] = this.allTargetName;
            }
        }
        return targetnames;
    }
    getCMakeCommand() {
        return this.cmake.path ? this.cmake.path : "cmake";
    }
    // Create a command for a given build preset.
    async generateBuildCommandFromPreset(buildPreset, targets) {
        var _a;
        if (targets && targets.length > 0) {
            buildPreset.__targets = targets;
        }
        else {
            buildPreset.__targets = buildPreset.targets;
        }
        const args = preset.buildArgs(buildPreset, this.config.buildArgs, this.config.buildToolArgs);
        const initialEnvironment = environmentVariables_1.EnvironmentUtils.create(buildPreset.environment);
        const build_env = await this.getCMakeBuildCommandEnvironment(initialEnvironment);
        const expanded_args_promises = args.map(async (value) => expand.expandString(value, Object.assign(Object.assign({}, this.expansionOptions), { envOverride: build_env })));
        const expanded_args = await Promise.all(expanded_args_promises);
        log.trace(localize(51, null, JSON.stringify(args)));
        if ((0, config_1.checkBuildOverridesPresent)(this.config)) {
            log.info(localize(52, null, (_a = buildPreset.displayName) !== null && _a !== void 0 ? _a : buildPreset.name));
        }
        return { command: this.cmake.path, args: expanded_args, build_env };
    }
    async generateBuildCommandFromSettings(targets) {
        if (!targets || targets.length === 0) {
            return null;
        }
        const gen = this.generatorName;
        targets = this.correctAllTargetName(targets);
        const buildArgs = this.config.buildArgs.slice(0);
        const buildToolArgs = ['--'].concat(this.config.buildToolArgs);
        const configurationScope = this.workspaceFolder ? vscode.Uri.file(this.workspaceFolder) : null;
        const parallelJobsSetting = vscode.workspace.getConfiguration("cmake", configurationScope).inspect('parallelJobs');
        let numJobs = ((parallelJobsSetting === null || parallelJobsSetting === void 0 ? void 0 : parallelJobsSetting.workspaceFolderLanguageValue) || (parallelJobsSetting === null || parallelJobsSetting === void 0 ? void 0 : parallelJobsSetting.workspaceFolderValue) || (parallelJobsSetting === null || parallelJobsSetting === void 0 ? void 0 : parallelJobsSetting.globalValue));
        // for Ninja generator, don't '-j' argument if user didn't define number of jobs
        // let numJobs: number | undefined = this.config.numJobs;
        if (numJobs === undefined && gen && !/Ninja/.test(gen)) {
            numJobs = (0, config_1.defaultNumJobs)();
        }
        // for msbuild generators, only add '-j' argument if parallelJobs > 1
        if (numJobs && ((gen && !/Visual Studio/.test(gen)) || numJobs > 1)) {
            // Prefer using CMake's build options to set parallelism over tool-specific switches.
            // The feature is not available until version 3.14.
            if (this.cmake.version && util.versionGreaterOrEquals(this.cmake.version, util.parseVersion('3.14.0'))) {
                buildArgs.push('-j');
                if (numJobs) {
                    buildArgs.push(numJobs.toString());
                }
            }
            else {
                if (gen) {
                    if (/(Unix|MinGW) Makefiles|Ninja/.test(gen) && targets.length === 1 && targets[0] !== 'clean') {
                        buildToolArgs.push('-j', numJobs.toString());
                    }
                    else if (/Visual Studio/.test(gen) && targets.length === 1 && targets[0] !== 'clean') {
                        buildToolArgs.push('/maxcpucount:' + numJobs.toString());
                    }
                }
            }
        }
        const ninja_env = environmentVariables_1.EnvironmentUtils.create();
        ninja_env['NINJA_STATUS'] = '[%s/%t %p :: %e] ';
        const build_env = await this.getCMakeBuildCommandEnvironment(ninja_env);
        const args = ['--build', this.binaryDir, '--config', this.currentBuildType, '--target', ...targets]
            .concat(buildArgs, buildToolArgs);
        const opts = this.expansionOptions;
        const expanded_args_promises = args.map(async (value) => expand.expandString(value, Object.assign(Object.assign({}, opts), { envOverride: build_env })));
        const expanded_args = await Promise.all(expanded_args_promises);
        log.trace(localize(53, null, JSON.stringify(expanded_args)));
        return { command: this.cmake.path, args: expanded_args, build_env };
    }
    async getCMakeBuildCommand(targets) {
        if (this.useCMakePresets) {
            if (!this._buildPreset) {
                log.debug(localize(54, null));
                return null;
            }
            return this.generateBuildCommandFromPreset(this._buildPreset, targets);
        }
        else {
            return this.generateBuildCommandFromSettings(targets);
        }
    }
    async _doCMakeBuild(targets, consumer, isBuildCommand) {
        var _a;
        const buildcmd = await this.getCMakeBuildCommand(targets);
        if (buildcmd) {
            let outputEnc = this.config.outputLogEncoding;
            if (outputEnc === 'auto') {
                if (process.platform === 'win32') {
                    outputEnc = await codepages.getWindowsCodepage();
                }
                else {
                    outputEnc = 'utf8';
                }
            }
            const useBuildTask = this.config.buildTask && isBuildCommand === true;
            if (useBuildTask) {
                const task = await cmakeTaskProvider_1.CMakeTaskProvider.findBuildTask((_a = this._buildPreset) === null || _a === void 0 ? void 0 : _a.name, targets, this.expansionOptions);
                if (task) {
                    const resolvedTask = await cmakeTaskProvider_1.CMakeTaskProvider.resolveInternalTask(task);
                    if (resolvedTask) {
                        await this.cmakeBuildRunner.setBuildProcessForTask(await vscode.tasks.executeTask(resolvedTask));
                    }
                }
            }
            else {
                const exeOpt = { environment: buildcmd.build_env, outputEncoding: outputEnc };
                this.cmakeBuildRunner.setBuildProcess(this.executeCommand(buildcmd.command, buildcmd.args, consumer, exeOpt));
            }
            const result = await this.cmakeBuildRunner.getResult();
            return result ? result : null;
        }
        else {
            return null;
        }
    }
    /**
     * If called then the current process should be stopped.
     * This could be the configuration or the build process.
     */
    async onStop() { }
    /**
     * Stops the currently running process at user request
     */
    async stopCurrentProcess() {
        this.m_stop_process = true;
        if (this.configureProcess && this.configureProcess.child) {
            await util.termProc(this.configureProcess.child);
            this.configureProcess = null;
        }
        if (this.cmakeBuildRunner) {
            await this.cmakeBuildRunner.stop();
        }
        await this.onStop();
    }
    async _baseInit(useCMakePresets, kit, configurePreset, buildPreset, testPreset, packagePreset, workflowPreset, preferredGenerators) {
        this._useCMakePresets = useCMakePresets;
        const initBaseDriverWithPresetLoc = localize(55, null);
        const initBaseDriverWithKitLoc = localize(56, null);
        log.debug(`${useCMakePresets ? initBaseDriverWithPresetLoc : initBaseDriverWithKitLoc}`);
        // Load up kit or presets before starting any drivers.
        if (useCMakePresets) {
            if (configurePreset) {
                await this._setConfigurePreset(configurePreset);
            }
            if (buildPreset) {
                await this._setBuildPreset(buildPreset);
            }
            if (testPreset) {
                await this._setTestPreset(testPreset);
            }
            if (packagePreset) {
                await this._setPackagePreset(packagePreset);
            }
            if (workflowPreset) {
                await this._setWorkflowPreset(workflowPreset);
            }
        }
        else if (kit) {
            await this._setKit(kit, preferredGenerators);
        }
        await this._refreshExpansions();
        await this.doInit();
    }
    /**
     * Asynchronous initialization. Should be called by base classes during
     * their initialization.
     */
    static async createDerived(inst, useCMakePresets, kit, configurePreset, buildPreset, testPreset, packagePreset, workflowPreset, preferredGenerators) {
        await inst._baseInit(useCMakePresets, kit, configurePreset, buildPreset, testPreset, packagePreset, workflowPreset, preferredGenerators);
        return inst;
    }
    getDiagnostics() {
        var _a, _b;
        return {
            folder: this.workspaceFolder || '',
            cmakeVersion: this.cmake.version ? util.versionToString(this.cmake.version) : '',
            configured: this._isConfiguredAtLeastOnce,
            generator: this.generatorName || '',
            usesPresets: this.useCMakePresets,
            compilers: {
                C: (_a = this.cmakeCacheEntries.get('CMAKE_C_COMPILER')) === null || _a === void 0 ? void 0 : _a.value,
                CXX: (_b = this.cmakeCacheEntries.get('CMAKE_CXX_COMPILER')) === null || _b === void 0 ? void 0 : _b.value
            }
        };
    }
}
exports.CMakeDriver = CMakeDriver;


/***/ }),

/***/ 50540:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/**
 * This module defines the cmake file API for typescript. This makes the use of
 * the FileAPI simpler to use.
 *
 * For details see (cmake-file-api(7))[https://cmake.org/cmake/help/v3.15/manual/cmake-file-api.7.html].
 * This file implements only the new required structures.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.loadToolchains = exports.loadExtCodeModelContent = exports.loadConfig = exports.loadProject = exports.loadConfigurationTargetMap = exports.loadAllTargetsForBuildTypeConfiguration = exports.loadTargetObject = exports.loadCodeModelContent = exports.loadCMakeFiles = exports.loadCacheContent = exports.loadIndexFile = exports.createQueryFileForApi = void 0;
const cache = __webpack_require__(78510);
const logging = __webpack_require__(71067);
const pr_1 = __webpack_require__(72502);
const path = __webpack_require__(71017);
const nls = __webpack_require__(33463);
const rollbar_1 = __webpack_require__(58543);
const util_1 = __webpack_require__(16182);
nls.config({ messageFormat: nls.MessageFormat.bundle, bundleFormat: nls.BundleFormat.standalone })((__webpack_require__(71017).join)(__dirname, 'src\\drivers\\cmakeFileApi.ts'));
const localize = nls.loadMessageBundle((__webpack_require__(71017).join)(__dirname, 'src\\drivers\\cmakeFileApi.ts'));
const log = logging.createLogger('cmakefileapi-parser');
/**
 * Attempt to read from a file path. Log a message if it's not readable.
 */
async function tryReadFile(file) {
    const fileInfo = await pr_1.fs.stat(file);
    if (fileInfo.isFile()) {
        return pr_1.fs.readFile(file);
    }
    else {
        log.debug(localize(0, null, `"${file}"`));
        return undefined;
    }
}
async function createQueryFileForApi(apiPath) {
    const queryPath = path.join(apiPath, 'query', 'client-vscode');
    const queryFilePath = path.join(queryPath, 'query.json');
    const requests = {
        requests: [
            { kind: 'cache', version: 2 },
            { kind: 'codemodel', version: 2 },
            { kind: 'toolchains', version: 1 },
            { kind: 'cmakeFiles', version: 1 }
        ]
    };
    try {
        await pr_1.fs.mkdir_p(queryPath);
        await pr_1.fs.writeFile(queryFilePath, JSON.stringify(requests));
    }
    catch (e) {
        rollbar_1.default.exception(localize(1, null, queryFilePath), e);
        throw e;
    }
    return queryFilePath;
}
exports.createQueryFileForApi = createQueryFileForApi;
async function loadIndexFile(replyPath) {
    log.debug(`Read reply folder: ${replyPath}`);
    if (!await pr_1.fs.exists(replyPath)) {
        return null;
    }
    const files = await pr_1.fs.readdir(replyPath);
    log.debug(`Found index files: ${JSON.stringify(files)}`);
    const indexFiles = files.filter(filename => filename.startsWith('index-')).sort();
    if (indexFiles.length === 0) {
        throw Error('No index file found.');
    }
    const indexFilePath = path.join(replyPath, indexFiles[indexFiles.length - 1]);
    const fileContent = await tryReadFile(indexFilePath);
    if (!fileContent) {
        return null;
    }
    return JSON.parse(fileContent.toString());
}
exports.loadIndexFile = loadIndexFile;
async function loadCacheContent(filename) {
    const fileContent = await tryReadFile(filename);
    if (!fileContent) {
        return new Map();
    }
    const cmakeCacheContent = JSON.parse(fileContent.toString());
    const expectedVersion = { major: 2, minor: 0 };
    const detectedVersion = cmakeCacheContent.version;
    if (detectedVersion.major !== expectedVersion.major || detectedVersion.minor < expectedVersion.minor) {
        log.warning(localize(2, null, detectedVersion.major, detectedVersion.minor, expectedVersion.major, expectedVersion.minor));
    }
    return convertFileApiCacheToExtensionCache(cmakeCacheContent);
}
exports.loadCacheContent = loadCacheContent;
async function loadCMakeFiles(filename) {
    const fileContent = await tryReadFile(filename);
    if (!fileContent) {
        return [];
    }
    const cmakeFilesContent = JSON.parse(fileContent.toString());
    const expectedVersion = { major: 1, minor: 0 };
    const detectedVersion = cmakeFilesContent.version;
    if (detectedVersion.major !== expectedVersion.major || detectedVersion.minor < expectedVersion.minor) {
        log.warning(localize(3, null, detectedVersion.major, detectedVersion.minor, expectedVersion.major, expectedVersion.minor));
        return [];
    }
    return cmakeFilesContent.inputs.map(input => input.path);
}
exports.loadCMakeFiles = loadCMakeFiles;
function findPropertyValue(cacheElement, name) {
    const propertyElement = cacheElement.properties.find(prop => prop.name === name);
    return propertyElement ? propertyElement.value : '';
}
function convertFileApiCacheToExtensionCache(cmakeCacheContent) {
    return cmakeCacheContent.entries.reduce((acc, el) => {
        const fileApiToExtensionCacheMap = {
            BOOL: cache.CacheEntryType.Bool,
            STRING: cache.CacheEntryType.String,
            PATH: cache.CacheEntryType.Path,
            FILEPATH: cache.CacheEntryType.FilePath,
            INTERNAL: cache.CacheEntryType.Internal,
            UNINITIALIZED: cache.CacheEntryType.Uninitialized,
            STATIC: cache.CacheEntryType.Static
        };
        const type = fileApiToExtensionCacheMap[el.type];
        if (type === undefined) {
            log.warning(localize(4, null, el.type));
            return acc;
        }
        const helpString = findPropertyValue(el, 'HELPSTRING');
        const advanced = findPropertyValue(el, 'ADVANCED');
        acc.set(el.name, new cache.CacheEntry(el.name, el.value, type, helpString, advanced === '1'));
        return acc;
    }, new Map());
}
async function loadCodeModelContent(filename) {
    const fileContent = await tryReadFile(filename);
    if (!fileContent) {
        return null;
    }
    const codemodel = JSON.parse(fileContent.toString());
    const expectedVersion = { major: 2, minor: 0 };
    const detectedVersion = codemodel.version;
    if (detectedVersion.major !== expectedVersion.major || detectedVersion.minor < expectedVersion.minor) {
        log.warning(localize(5, null, detectedVersion.major, detectedVersion.minor, expectedVersion.major, expectedVersion.minor));
    }
    return codemodel;
}
exports.loadCodeModelContent = loadCodeModelContent;
async function loadTargetObject(filename) {
    const fileContent = await tryReadFile(filename);
    if (!fileContent) {
        return null;
    }
    return JSON.parse(fileContent.toString());
}
exports.loadTargetObject = loadTargetObject;
async function convertTargetObjectFileToExtensionTarget(buildDirectory, filePath) {
    const targetObject = await loadTargetObject(filePath);
    if (!targetObject) {
        return null;
    }
    let executablePath;
    if (targetObject.artifacts) {
        executablePath = targetObject.artifacts.find(artifact => artifact.path.endsWith(targetObject.nameOnDisk));
        if (executablePath) {
            executablePath = convertToAbsolutePath(executablePath.path, buildDirectory);
        }
    }
    return {
        name: targetObject.name,
        filepath: executablePath,
        targetType: targetObject.type,
        type: 'rich'
    };
}
async function loadAllTargetsForBuildTypeConfiguration(replyPath, buildDirectory, configuration) {
    const metaTargets = [];
    if (configuration.directories[0].hasInstallRule) {
        metaTargets.push({
            type: 'rich',
            name: 'install',
            filepath: localize(6, null),
            targetType: 'META'
        });
    }
    const targetsList = await Promise.all(configuration.targets.map(t => convertTargetObjectFileToExtensionTarget(buildDirectory, path.join(replyPath, t.jsonFile))));
    return {
        name: configuration.name,
        targets: [...metaTargets, ...(0, util_1.removeEmpty)(targetsList)]
    };
}
exports.loadAllTargetsForBuildTypeConfiguration = loadAllTargetsForBuildTypeConfiguration;
async function loadConfigurationTargetMap(replyPath, codeModelFileName) {
    const codeModelContent = await loadCodeModelContent(path.join(replyPath, codeModelFileName));
    if (!codeModelContent) {
        return new Map();
    }
    const buildDirectory = codeModelContent.paths.build;
    const targets = await Promise.all(codeModelContent.configurations.map(config => loadAllTargetsForBuildTypeConfiguration(replyPath, buildDirectory, config)));
    return targets.reduce((acc, el) => {
        acc.set(el.name, el.targets);
        return acc;
    }, new Map());
}
exports.loadConfigurationTargetMap = loadConfigurationTargetMap;
function convertToAbsolutePath(inputPath, basePath) {
    // Prepend the base path to the input path if the input path is relative.
    const absolutePath = path.isAbsolute(inputPath) ? inputPath : path.join(basePath, inputPath);
    return path.normalize(absolutePath);
}
function convertToExtCodeModelFileGroup(targetObject, rootPaths) {
    const fileGroup = !targetObject.compileGroups ? [] : targetObject.compileGroups.map(group => {
        const compileCommandFragments = group.compileCommandFragments ? group.compileCommandFragments.map(frag => frag.fragment) : [];
        return {
            isGenerated: false,
            sources: [],
            language: group.language,
            includePath: group.includes ? group.includes : [],
            compileCommandFragments,
            defines: group.defines ? group.defines.map(define => define.define) : [],
            frameworks: group.frameworks
        };
    });
    // Collection all without compilegroup like headers
    const defaultIndex = fileGroup.push({ sources: [], isGenerated: false }) - 1;
    const targetRootSource = convertToAbsolutePath(targetObject.paths.source, rootPaths.source);
    targetObject.sources.forEach(sourceFile => {
        const fileAbsolutePath = convertToAbsolutePath(sourceFile.path, rootPaths.source);
        const fileRelativePath = path.relative(targetRootSource, fileAbsolutePath).replace('\\', '/');
        if (sourceFile.compileGroupIndex !== undefined) {
            fileGroup[sourceFile.compileGroupIndex].sources.push(fileRelativePath);
        }
        else {
            fileGroup[defaultIndex].sources.push(fileRelativePath);
            if (!!sourceFile.isGenerated) {
                fileGroup[defaultIndex].isGenerated = sourceFile.isGenerated;
            }
        }
    });
    return fileGroup;
}
async function loadCodeModelTarget(rootPaths, jsonFile) {
    const targetObject = await loadTargetObject(jsonFile);
    if (!targetObject) {
        return null;
    }
    const fileGroups = convertToExtCodeModelFileGroup(targetObject, rootPaths);
    // This implementation expects that there is only one sysroot in a target.
    // The ServerAPI only has provided one sysroot. In the FileAPI,
    // each compileGroup has its separate sysroot.
    let sysroot;
    if (targetObject.compileGroups) {
        const allSysroots = (0, util_1.removeEmpty)(targetObject.compileGroups.map(x => !!x.sysroot ? x.sysroot.path : undefined));
        sysroot = allSysroots.length !== 0 ? allSysroots[0] : undefined;
    }
    return {
        name: targetObject.name,
        type: targetObject.type,
        sourceDirectory: convertToAbsolutePath(targetObject.paths.source, rootPaths.source),
        fullName: targetObject.nameOnDisk,
        artifacts: targetObject.artifacts ? targetObject.artifacts.map(a => convertToAbsolutePath(path.join(targetObject.paths.build, a.path), rootPaths.build))
            : [],
        fileGroups,
        sysroot
    };
}
async function loadProject(rootPaths, replyPath, projectIndex, configuration) {
    const project = configuration.projects[projectIndex];
    const projectPaths = {
        build: project.directoryIndexes
            ? path.join(rootPaths.build, configuration.directories[project.directoryIndexes[0]].build)
            : rootPaths.build,
        source: project.directoryIndexes
            ? path.join(rootPaths.source, configuration.directories[project.directoryIndexes[0]].source)
            : rootPaths.source
    };
    const targets = await Promise.all((project.targetIndexes || []).map(targetIndex => loadCodeModelTarget(rootPaths, path.join(replyPath, configuration.targets[targetIndex].jsonFile))));
    return { name: project.name, targets, sourceDirectory: projectPaths.source };
}
exports.loadProject = loadProject;
async function loadConfig(paths, replyPath, configuration) {
    const projects = await Promise.all((configuration.projects).map((_, index) => loadProject(paths, replyPath, index, configuration)));
    return { name: configuration.name, projects };
}
exports.loadConfig = loadConfig;
async function loadExtCodeModelContent(replyPath, codeModelFileName) {
    const codeModelContent = await loadCodeModelContent(path.join(replyPath, codeModelFileName));
    if (!codeModelContent) {
        return null;
    }
    const configurations = await Promise.all(codeModelContent.configurations.map(config_element => loadConfig(codeModelContent.paths, replyPath, config_element)));
    return { configurations };
}
exports.loadExtCodeModelContent = loadExtCodeModelContent;
async function loadToolchains(filename) {
    const fileContent = await tryReadFile(filename);
    if (!fileContent) {
        return new Map();
    }
    const toolchains = JSON.parse(fileContent.toString());
    const expectedVersion = { major: 1, minor: 0 };
    const detectedVersion = toolchains.version;
    if (detectedVersion.major !== expectedVersion.major || detectedVersion.minor < expectedVersion.minor) {
        log.warning(localize(7, null, detectedVersion.major, detectedVersion.minor, expectedVersion.major, expectedVersion.minor));
    }
    return toolchains.toolchains.reduce((acc, el) => {
        if (el.compiler.path) {
            if (el.compiler.target) {
                acc.set(el.language, { path: el.compiler.path, target: el.compiler.target });
            }
            else {
                acc.set(el.language, { path: el.compiler.path });
            }
        }
        return acc;
    }, new Map());
}
exports.loadToolchains = loadToolchains;


/***/ }),

/***/ 59535:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CMakeFileApiDriver = void 0;
const cache_1 = __webpack_require__(78510);
const drivers_1 = __webpack_require__(70271);
const logging = __webpack_require__(71067);
const pr_1 = __webpack_require__(72502);
const proc = __webpack_require__(3477);
const rollbar_1 = __webpack_require__(58543);
const util = __webpack_require__(16182);
const path = __webpack_require__(71017);
const vscode = __webpack_require__(89496);
const preset_1 = __webpack_require__(10739);
const nls = __webpack_require__(33463);
const cmake_1 = __webpack_require__(95057);
const cmakeDebuggerTelemetry_1 = __webpack_require__(52563);
const util_1 = __webpack_require__(9011);
nls.config({ messageFormat: nls.MessageFormat.bundle, bundleFormat: nls.BundleFormat.standalone })((__webpack_require__(71017).join)(__dirname, 'src\\drivers\\cmakeFileApiDriver.ts'));
const localize = nls.loadMessageBundle((__webpack_require__(71017).join)(__dirname, 'src\\drivers\\cmakeFileApiDriver.ts'));
const log = logging.createLogger('cmakefileapi-driver');
/**
 * The CMake driver with FileApi of CMake >= 3.15.0
 */
class CMakeFileApiDriver extends drivers_1.CMakeDriver {
    constructor(cmake, config, sourceDir, isMultiProject, workspaceRootPath, preconditionHandler) {
        super(cmake, config, sourceDir, isMultiProject, workspaceRootPath, preconditionHandler);
        this.config = config;
        this._needsReconfigure = true;
        /**
         * Watcher for the CMake cache file on disk.
         */
        this._cacheWatcher = vscode.workspace.createFileSystemWatcher(this.cachePath);
        // Information from cmake file api
        this._cache = new Map();
        this._cmakeFiles = null;
        this._generatorInformation = null;
        this._target_map = new Map();
        this.toolchainWarningProvided = false;
        this._codeModelContent = null;
        this._codeModelChanged = new vscode.EventEmitter();
    }
    get isCacheConfigSupported() {
        return pr_1.fs.existsSync(this.getCMakeFileApiPath());
    }
    static async create(cmake, config, sourceDir, isMultiProject, useCMakePresets, kit, configurePreset, buildPreset, testPreset, packagePreset, workflowPreset, workspaceRootPath, preconditionHandler, preferredGenerators) {
        log.debug(localize(0, null, "CMakeFileApiDriver"));
        return this.createDerived(new CMakeFileApiDriver(cmake, config, sourceDir, isMultiProject, workspaceRootPath, preconditionHandler), useCMakePresets, kit, configurePreset, buildPreset, testPreset, packagePreset, workflowPreset, preferredGenerators);
    }
    async getGeneratorFromCache(cache_file_path) {
        var _a;
        const cache = await cache_1.CMakeCache.fromPath(cache_file_path);
        return (_a = cache.get('CMAKE_GENERATOR')) === null || _a === void 0 ? void 0 : _a.value;
    }
    async loadGeneratorInformationFromCache(cache_file_path) {
        var _a, _b, _c, _d, _e;
        const cache = await cache_1.CMakeCache.fromPath(cache_file_path);
        this._generator = {
            name: (_a = cache.get('CMAKE_GENERATOR')) === null || _a === void 0 ? void 0 : _a.value,
            platform: (_b = cache.get('CMAKE_GENERATOR_PLATFORM')) === null || _b === void 0 ? void 0 : _b.value,
            toolset: (_c = cache.get('CMAKE_GENERATOR_TOOLSET')) === null || _c === void 0 ? void 0 : _c.value
        };
        this._generatorInformation = {
            name: (_d = cache.get('CMAKE_GENERATOR')) === null || _d === void 0 ? void 0 : _d.value,
            platform: (_e = cache.get('CMAKE_GENERATOR_PLATFORM')) === null || _e === void 0 ? void 0 : _e.value
        };
    }
    async doInit() {
        var _a;
        // The seems to be a difference between server mode and fileapi on load of a existing project
        // If the existing project is not generated by the IDE then the fileapi queries are missing.
        // but the generator information are needed to get the code model, cache and cmake files.
        // This workaround load the information from cache.
        // Make an exception when the current deduced generator differs from the one saved in cache.
        // We need to treat this case as if the cache is not present and let a reconfigure
        // refresh the cache information.
        const cacheExists = await pr_1.fs.exists(this.cachePath);
        if (cacheExists && ((_a = this.generator) === null || _a === void 0 ? void 0 : _a.name) === await this.getGeneratorFromCache(this.cachePath)) {
            await this.loadGeneratorInformationFromCache(this.cachePath);
            const code_model_exist = await this.updateCodeModel();
            if (!code_model_exist && this.config.configureOnOpen === true) {
                await this.doConfigure([], undefined, undefined);
            }
        }
        else {
            // Do not delete the cache if configureOnOpen is false, which signals a project that may be
            // expected to be configured from outside VSCode and deleting the cache breaks that scenario.
            // Since this setting will prevent configure anyway (until a configure command is invoked
            // or build/test will trigger automatic configuring), there is no need to delete the cache now
            // even if this is not a project configured from outside VSCode.
            if (cacheExists && this.config.configureOnOpen !== false) {
                // No need to remove the other CMake files for the generator change to work properly
                log.info(localize(1, null, this.cachePath));
                try {
                    await pr_1.fs.unlink(this.cachePath);
                }
                catch (_b) {
                    log.warning(localize(2, null, this.cachePath));
                }
            }
            this._generatorInformation = this.generator;
        }
        if (!this.generator && !this.useCMakePresets) {
            throw new drivers_1.NoGeneratorError();
        }
        this._cacheWatcher.onDidChange(() => {
            log.debug(`Reload CMake cache: ${this.cachePath} changed`);
            rollbar_1.default.invokeAsync('Reloading CMake Cache', () => this.updateCodeModel());
        });
    }
    async doConfigureSettingsChange() {
        this._needsReconfigure = true;
        await (0, util_1.onConfigureSettingsChange)();
    }
    async checkNeedsReconfigure() {
        return this._needsReconfigure;
    }
    async doSetKit(cb) {
        this._needsReconfigure = true;
        await cb();
        if (!this.generator) {
            throw new drivers_1.NoGeneratorError();
        }
    }
    async doSetConfigurePreset(need_clean, cb) {
        this._needsReconfigure = true;
        if (need_clean) {
            await this._cleanPriorConfiguration();
        }
        await cb();
    }
    doSetBuildPreset(cb) {
        return cb();
    }
    doSetTestPreset(cb) {
        return cb();
    }
    doSetPackagePreset(cb) {
        return cb();
    }
    doSetWorkflowPreset(cb) {
        return cb();
    }
    async asyncDispose() {
        this._codeModelChanged.dispose();
        this._cacheWatcher.dispose();
    }
    async doPreCleanConfigure() {
        await this._cleanPriorConfiguration();
    }
    async doCacheConfigure() {
        this._needsReconfigure = true;
        await this.updateCodeModel();
        return 0;
    }
    async doConfigure(args_, trigger, outputConsumer, showCommandOnly, defaultConfigurePresetName, configurePreset, options, debuggerInformation) {
        var _a, _b;
        const binaryDir = (_a = configurePreset === null || configurePreset === void 0 ? void 0 : configurePreset.binaryDir) !== null && _a !== void 0 ? _a : this.binaryDir;
        const api_path = this.getCMakeFileApiPath(binaryDir);
        await (0, drivers_1.createQueryFileForApi)(api_path);
        // Dup args so we can modify them
        const args = Array.from(args_);
        let has_gen = false;
        for (const arg of args) {
            if (arg.startsWith("-DCMAKE_GENERATOR:STRING=")) {
                has_gen = true;
            }
        }
        // -S and -B were introduced in CMake 3.13 and this driver assumes CMake >= 3.15
        args.push(`-S${util.lightNormalizePath(this.sourceDir)}`);
        args.push(`-B${util.lightNormalizePath(binaryDir)}`);
        if (!has_gen) {
            const generator = (configurePreset) ? {
                name: configurePreset.generator,
                platform: configurePreset.architecture ? (0, preset_1.getValue)(configurePreset.architecture) : undefined,
                toolset: configurePreset.toolset ? (0, preset_1.getValue)(configurePreset.toolset) : undefined
            } : this.generator;
            if (generator) {
                if (generator.name) {
                    args.push('-G');
                    args.push(generator.name);
                }
                if (generator.toolset) {
                    args.push('-T');
                    args.push(generator.toolset);
                }
                if (generator.platform) {
                    args.push('-A');
                    args.push(generator.platform);
                }
            }
        }
        const cmake = this.cmake.path;
        if (debuggerInformation) {
            args.push("--debugger");
            args.push("--debugger-pipe");
            args.push(`${debuggerInformation.pipeName}`);
            if (debuggerInformation.dapLog) {
                args.push("--debugger-dap-log");
                args.push(debuggerInformation.dapLog);
            }
        }
        if (showCommandOnly) {
            log.showChannel();
            log.info(proc.buildCmdStr(this.cmake.path, args));
            return 0;
        }
        else {
            log.debug(`Configuring using ${this.useCMakePresets ? 'preset' : 'kit'}`);
            log.debug('Invoking CMake', cmake, 'with arguments', JSON.stringify(args));
            const env = await this.getConfigureEnvironment(configurePreset, options === null || options === void 0 ? void 0 : options.environment);
            const child = this.executeCommand(cmake, args, outputConsumer, {
                environment: env,
                cwd: (_b = options === null || options === void 0 ? void 0 : options.cwd) !== null && _b !== void 0 ? _b : binaryDir
            });
            this.configureProcess = child;
            if (debuggerInformation) {
                if (outputConsumer instanceof cmake_1.CMakeOutputConsumer) {
                    while (!outputConsumer.stateMessages.includes(cmake_1.StateMessage.WaitingForDebuggerClient)) {
                        await new Promise(resolve => setTimeout(resolve, 50));
                    }
                    // if there isn't a `debuggerIsReady` callback provided, this means that this invocation was
                    // started by a command, rather than by a launch configuration, and the debug session will start from here.
                    if (debuggerInformation.debuggerIsReady) {
                        // This cmake debug invocation came from a launch configuration. All telemetry is handled in the createDebugAdapterDescriptor handler.
                        debuggerInformation.debuggerIsReady();
                    }
                    else {
                        const cmakeDebugType = "configure";
                        (0, cmakeDebuggerTelemetry_1.logCMakeDebuggerTelemetry)(trigger !== null && trigger !== void 0 ? trigger : "", cmakeDebugType);
                        await vscode.debug.startDebugging(undefined, {
                            name: localize(3, null),
                            request: "launch",
                            type: "cmake",
                            cmakeDebugType,
                            pipeName: debuggerInformation.pipeName,
                            fromCommand: true
                        });
                    }
                }
            }
            const result = await child.result;
            this.configureProcess = null;
            log.trace(result.stderr);
            log.trace(result.stdout);
            if (result.retc === 0) {
                if (!configurePreset || (configurePreset && defaultConfigurePresetName && configurePreset.name === defaultConfigurePresetName)) {
                    this._needsReconfigure = false;
                }
                await this.updateCodeModel(binaryDir);
            }
            return result.retc === null ? -1 : result.retc;
        }
    }
    async doPostBuild() {
        await this.updateCodeModel();
        return true;
    }
    getCMakeFileApiPath(binaryDir) {
        return path.join(binaryDir !== null && binaryDir !== void 0 ? binaryDir : this.binaryDir, '.cmake', 'api', 'v1');
    }
    getCMakeReplyPath(binaryDir) {
        const api_path = this.getCMakeFileApiPath(binaryDir);
        return path.join(api_path, 'reply');
    }
    async updateCodeModel(binaryDir) {
        const reply_path = this.getCMakeReplyPath(binaryDir);
        const indexFile = await (0, drivers_1.loadIndexFile)(reply_path);
        if (indexFile) {
            this._generatorInformation = indexFile.cmake.generator;
            // load cache
            const cache_obj = indexFile.objects.find((value) => value.kind === 'cache');
            if (!cache_obj) {
                throw Error('No cache object found');
            }
            this._cache = await (0, drivers_1.loadCacheContent)(path.join(reply_path, cache_obj.jsonFile));
            // load targets
            const codemodel_obj = indexFile.objects.find((value) => value.kind === 'codemodel');
            if (!codemodel_obj) {
                throw Error('No code model object found');
            }
            this._target_map = await (0, drivers_1.loadConfigurationTargetMap)(reply_path, codemodel_obj.jsonFile);
            this._codeModelContent = await (0, drivers_1.loadExtCodeModelContent)(reply_path, codemodel_obj.jsonFile);
            // load toolchains
            const toolchains_obj = indexFile.objects.find((value) => value.kind === 'toolchains');
            // The "toolchains" object kind wasn't introduced until CMake 3.20, so
            // it's not fatal if it's missing in the response.
            if (!toolchains_obj) {
                if (!this.toolchainWarningProvided) {
                    this.toolchainWarningProvided = true;
                    log.info(localize(4, null));
                }
            }
            else {
                if (this._codeModelContent) {
                    this._codeModelContent.toolchains = await (0, drivers_1.loadToolchains)(path.join(reply_path, toolchains_obj.jsonFile));
                }
            }
            // load cmake files if available
            const cmakefiles_obj = indexFile.objects.find((value) => value.kind === 'cmakeFiles');
            if (cmakefiles_obj) {
                this._cmakeFiles = await (0, drivers_1.loadCMakeFiles)(path.join(reply_path, cmakefiles_obj.jsonFile));
            }
            else {
                this._cmakeFiles = [];
            }
            this._codeModelChanged.fire(this._codeModelContent);
        }
        return indexFile !== null;
    }
    get codeModelContent() {
        return this._codeModelContent;
    }
    get cmakeCacheEntries() {
        return this._cache;
    }
    get generatorName() {
        return this._generatorInformation ? this._generatorInformation.name : null;
    }
    get targets() {
        const targets = this._target_map.get(this.currentBuildType);
        if (targets) {
            const metaTargets = [{
                    type: 'rich',
                    name: this.allTargetName,
                    filepath: localize(5, null),
                    targetType: 'META'
                }];
            return [...metaTargets, ...targets].filter((value, idx, self) => self.findIndex(e => value.name === e.name) === idx);
        }
        else {
            return [];
        }
    }
    /**
     * List of unique targets known to CMake
     */
    get uniqueTargets() {
        return this.targets.reduce(targetReducer, []);
    }
    get executableTargets() {
        return this.uniqueTargets.filter(t => t.type === 'rich' && t.targetType === 'EXECUTABLE')
            .map(t => ({
            name: t.name,
            path: t.filepath
        }));
    }
    get cmakeFiles() {
        return this._cmakeFiles || [];
    }
    get onCodeModelChanged() {
        return this._codeModelChanged.event;
    }
}
exports.CMakeFileApiDriver = CMakeFileApiDriver;
/**
 * Helper function for Array.reduce
 *
 * @param set the accumulator
 * @t the RichTarget currently being examined.
 */
function targetReducer(set, t) {
    if (!set.find(t2 => compareTargets(t, t2))) {
        set.push(t);
    }
    return set;
}
function compareTargets(a, b) {
    let same = false;
    if (a.type === b.type) {
        same = a.name === b.name;
        if (a.type === 'rich' && b.type === 'rich') {
            same = same && (a.filepath === b.filepath);
            same = same && (a.targetType === b.targetType);
        }
    }
    return same;
}


/***/ }),

/***/ 50164:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/**
 * Module for the legacy driver. Talks to pre-CMake Server versions of CMake.
 * Can also talk to newer versions of CMake via the command line.
 */ /** */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CMakeLegacyDriver = void 0;
const vscode = __webpack_require__(89496);
const cache_1 = __webpack_require__(78510);
const drivers_1 = __webpack_require__(70271);
const logging = __webpack_require__(71067);
const pr_1 = __webpack_require__(72502);
const proc = __webpack_require__(3477);
const rollbar_1 = __webpack_require__(58543);
const util = __webpack_require__(16182);
const nls = __webpack_require__(33463);
const preset_1 = __webpack_require__(10739);
const util_1 = __webpack_require__(9011);
nls.config({ messageFormat: nls.MessageFormat.bundle, bundleFormat: nls.BundleFormat.standalone })((__webpack_require__(71017).join)(__dirname, 'src\\drivers\\cmakeLegacyDriver.ts'));
const localize = nls.loadMessageBundle((__webpack_require__(71017).join)(__dirname, 'src\\drivers\\cmakeLegacyDriver.ts'));
const log = logging.createLogger('legacy-driver');
/**
 * The legacy driver.
 */
class CMakeLegacyDriver extends drivers_1.CMakeDriver {
    constructor(cmake, config, sourceDir, isMultiProject, workspaceFolder, preconditionHandler) {
        super(cmake, config, sourceDir, isMultiProject, workspaceFolder, preconditionHandler);
        this.config = config;
        this._needsReconfigure = true;
        /**
         * Watcher for the CMake cache file on disk.
         */
        this._cacheWatcher = vscode.workspace.createFileSystemWatcher(this.cachePath);
        this._cmakeCache = null;
    }
    get isCacheConfigSupported() {
        return false;
    }
    async doCacheConfigure() {
        throw new Error('Method not implemented.');
    }
    async doConfigureSettingsChange() {
        this._needsReconfigure = true;
        await (0, util_1.onConfigureSettingsChange)();
    }
    async checkNeedsReconfigure() {
        return this._needsReconfigure;
    }
    async doSetKit(cb) {
        this._needsReconfigure = true;
        await cb();
    }
    async doSetConfigurePreset(need_clean, cb) {
        this._needsReconfigure = true;
        if (need_clean) {
            await this._cleanPriorConfiguration();
        }
        await cb();
    }
    doSetBuildPreset(cb) {
        return cb();
    }
    doSetTestPreset(cb) {
        return cb();
    }
    doSetPackagePreset(cb) {
        return cb();
    }
    doSetWorkflowPreset(cb) {
        return cb();
    }
    // Legacy disposal does nothing
    async asyncDispose() {
        this._cacheWatcher.dispose();
    }
    async doConfigure(args_, _trigger, outputConsumer, showCommandOnly, defaultConfigurePresetName, configurePreset, options) {
        var _a, _b;
        // Ensure the binary directory exists
        const binaryDir = (_a = configurePreset === null || configurePreset === void 0 ? void 0 : configurePreset.binaryDir) !== null && _a !== void 0 ? _a : this.binaryDir;
        await pr_1.fs.mkdir_p(binaryDir);
        // Dup args so we can modify them
        const args = Array.from(args_);
        args.push(util.lightNormalizePath(this.sourceDir));
        const generator = (configurePreset) ? {
            name: configurePreset.generator,
            platform: configurePreset.architecture ? (0, preset_1.getValue)(configurePreset.architecture) : undefined,
            toolset: configurePreset.toolset ? (0, preset_1.getValue)(configurePreset.toolset) : undefined
        } : this.generator;
        if (generator) {
            if (generator.name) {
                args.push('-G');
                args.push(generator.name);
            }
            if (generator.toolset) {
                args.push('-T');
                args.push(generator.toolset);
            }
            if (generator.platform) {
                args.push('-A');
                args.push(generator.platform);
            }
        }
        const cmake = this.cmake.path;
        if (showCommandOnly) {
            log.showChannel();
            log.info(proc.buildCmdStr(this.cmake.path, args));
            return 0;
        }
        else {
            log.debug(localize(0, null, cmake, JSON.stringify(args)));
            const child = this.executeCommand(cmake, args, outputConsumer, {
                environment: await this.getConfigureEnvironment(configurePreset, options === null || options === void 0 ? void 0 : options.environment),
                cwd: (_b = options === null || options === void 0 ? void 0 : options.cwd) !== null && _b !== void 0 ? _b : binaryDir
            });
            this.configureProcess = child;
            const result = await child.result;
            this.configureProcess = null;
            log.trace(result.stderr);
            log.trace(result.stdout);
            if (result.retc === 0 && (!configurePreset || (configurePreset && defaultConfigurePresetName && configurePreset.name === defaultConfigurePresetName))) {
                this._needsReconfigure = false;
            }
            if (!configurePreset) {
                await this._reloadPostConfigure();
            }
            return result.retc === null ? -1 : result.retc;
        }
    }
    async doPreCleanConfigure() {
        await this._cleanPriorConfiguration();
    }
    async doPostBuild() {
        await this._reloadPostConfigure();
        return true;
    }
    async doInit() {
        if (await pr_1.fs.exists(this.cachePath)) {
            await this._reloadPostConfigure();
        }
        this._cacheWatcher.onDidChange(() => {
            log.debug(localize(1, null, this.cachePath));
            rollbar_1.default.invokeAsync(localize(2, null), () => this._reloadPostConfigure());
        });
    }
    static async create(cmake, config, sourceDir, isMultiProject, useCMakePresets, kit, configurePreset, buildPreset, testPreset, packagePreset, workflowPreset, workspaceFolder, preconditionHandler, preferredGenerators) {
        log.debug(localize(3, null, "LegacyCMakeDriver"));
        return this.createDerived(new CMakeLegacyDriver(cmake, config, sourceDir, isMultiProject, workspaceFolder, preconditionHandler), useCMakePresets, kit, configurePreset, buildPreset, testPreset, packagePreset, workflowPreset, preferredGenerators);
    }
    get targets() {
        return [];
    }
    get executableTargets() {
        return [];
    }
    get uniqueTargets() {
        return [];
    }
    get cmakeFiles() {
        return [];
    }
    get cmakeCache() {
        return this._cmakeCache;
    }
    async _reloadPostConfigure() {
        // Force await here so that any errors are thrown into rollbar
        const new_cache = await cache_1.CMakeCache.fromPath(this.cachePath);
        this._cmakeCache = new_cache;
    }
    get cmakeCacheEntries() {
        let ret = new Map();
        if (this.cmakeCache) {
            ret = util.reduce(this.cmakeCache.allEntries, ret, (acc, entry) => acc.set(entry.key, entry));
        }
        return ret;
    }
    get generatorName() {
        if (!this.cmakeCache) {
            return null;
        }
        const gen = this.cmakeCache.get('CMAKE_GENERATOR');
        return gen ? gen.as() : null;
    }
    get codeModelContent() {
        return null;
    }
    get onCodeModelChanged() {
        return new vscode.EventEmitter().event;
    }
}
exports.CMakeLegacyDriver = CMakeLegacyDriver;


/***/ }),

/***/ 43365:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CMakeServerClient = exports.BadHomeDirectoryError = exports.ServerError = void 0;
const childProc = __webpack_require__(32081);
const net = __webpack_require__(41808);
const path = __webpack_require__(71017);
const cache = __webpack_require__(78510);
const logging_1 = __webpack_require__(71067);
const pr_1 = __webpack_require__(72502);
const rollbar_1 = __webpack_require__(58543);
const util = __webpack_require__(16182);
const nls = __webpack_require__(33463);
const environmentVariables_1 = __webpack_require__(40085);
nls.config({ messageFormat: nls.MessageFormat.bundle, bundleFormat: nls.BundleFormat.standalone })((__webpack_require__(71017).join)(__dirname, 'src\\drivers\\cmakeServerClient.ts'));
const localize = nls.loadMessageBundle((__webpack_require__(71017).join)(__dirname, 'src\\drivers\\cmakeServerClient.ts'));
const log = (0, logging_1.createLogger)('cms-client');
const enableCMakeServerDebugProtocol = false;
const messageWrapperRegEx = /\[== "CMake Server" ==\[([^]*?)\]== "CMake Server" ==\]\s*([^]*)/;
class ServerError extends Error {
    constructor(e, errorMessage = e.errorMessage, cookie = e.cookie, inReplyTo = e.inReplyTo) {
        super(e.errorMessage);
        this.errorMessage = errorMessage;
        this.cookie = cookie;
        this.inReplyTo = inReplyTo;
        this.type = 'error';
    }
    toString() {
        return `[cmake-server] ${this.errorMessage}`;
    }
}
exports.ServerError = ServerError;
class BadHomeDirectoryError extends Error {
    constructor(cached, expecting, badCachePath) {
        super();
        this.cached = cached;
        this.expecting = expecting;
        this.badCachePath = badCachePath;
    }
}
exports.BadHomeDirectoryError = BadHomeDirectoryError;
class CMakeServerClient {
    constructor(params) {
        this.accInput = '';
        this.promisesResolvers = new Map();
        this.serverProcess = null;
        this.shutDownFlag = false;
        this.params = params;
        let pipeFile = path.join(params.tmpdir, '.cmserver-pipe');
        if (process.platform === 'win32') {
            pipeFile = '\\\\?\\pipe\\' + pipeFile;
        }
        else {
            pipeFile = `/tmp/cmake-server-${Math.random()}`;
        }
        this.pipeFilePath = pipeFile;
        const finalEnv = environmentVariables_1.EnvironmentUtils.merge([process.env, params.environment]);
        const child = childProc.spawn(params.cmakePath, ['-E', 'server', '--experimental', `--pipe=${pipeFile}`], {
            env: finalEnv,
            cwd: params.binaryDir
        });
        this.serverProcess = child;
        log.debug(localize(0, null, child.pid));
        child.stdout.on('data', data => {
            void this.params.onOtherOutput(data.toLocaleString());
        });
        child.stderr.on('data', data => {
            void this.params.onOtherOutput(data.toLocaleString());
        });
        child.on('close', (retc, signal) => {
            if (retc !== 0) {
                log.error(localize(1, null));
                log.error(localize(2, null, retc, signal));
                params.onCrash(retc, signal).catch(e => {
                    log.error(localize(3, null, 'onCrash'), e);
                });
            }
        });
        setTimeout(() => {
            const endPromise = new Promise((resolve, reject) => {
                const pipe = this.pipe = net.createConnection(pipeFile);
                pipe.on('data', this.onMoreData.bind(this));
                pipe.on('error', e => {
                    pipe.end();
                    if (!this.shutDownFlag) {
                        debugger;
                        rollbar_1.default.takePromise(localize(4, null), { pipe: pipeFile }, params.onPipeError(e));
                        reject(e);
                    }
                    else {
                        resolve();
                    }
                });
                pipe.on('end', () => {
                    pipe.end();
                    resolve();
                });
            });
            const exitPromise = new Promise(resolve => {
                child.on('exit', () => resolve());
            });
            this.endPromise = Promise.all([endPromise, exitPromise]).then(() => { });
        }, 1000);
    }
    onMoreData(data) {
        const str = data.toString();
        this.accInput += str;
        while (1) {
            const input = this.accInput;
            const mat = messageWrapperRegEx.exec(input);
            if (!mat) {
                break;
            }
            if (mat.length !== 3) {
                debugger;
                throw new global.Error(localize(5, null, input));
            }
            this.accInput = mat[2];
            if (enableCMakeServerDebugProtocol) {
                log.debug(localize(6, null, mat[1]));
            }
            const message = JSON.parse(mat[1]);
            this.onMessage(message);
        }
    }
    takePromiseForCookie(cookie) {
        const item = this.promisesResolvers.get(cookie);
        if (!item) {
            throw new global.Error(localize(7, null, cookie));
        }
        this.promisesResolvers.delete(cookie);
        return item;
    }
    onMessage(some) {
        if ('cookie' in some) {
            const cookied = some;
            switch (some.type) {
                case 'reply': {
                    const reply = cookied;
                    const pr = this.takePromiseForCookie(cookied.cookie);
                    if (pr) {
                        pr.resolve(reply);
                    }
                    else {
                        log.error(localize(8, null, `"${cookied.cookie}"`));
                    }
                    return;
                }
                case 'error': {
                    const err = new ServerError(cookied);
                    const pr = this.takePromiseForCookie(cookied.cookie);
                    if (pr) {
                        pr.reject(err);
                    }
                    else {
                        log.error(localize(9, null, `"${cookied.cookie}"`));
                    }
                    return;
                }
                case 'progress': {
                    const prog = cookied;
                    this.params.onProgress(prog).catch(e => {
                        log.error(localize(10, null, 'onProgress'), e);
                    });
                    return;
                }
            }
        }
        switch (some.type) {
            case 'hello': {
                const unlinkPromise = pr_1.fs.exists(this.pipeFilePath).then(async (exists) => {
                    if (exists && process.platform !== 'win32') {
                        await pr_1.fs.unlink(this.pipeFilePath);
                    }
                });
                rollbar_1.default.takePromise('Unlink pipe', { pipe: this.pipeFilePath }, unlinkPromise);
                this.params.onHello(some).catch(e => {
                    log.error(localize(11, null, 'onHello'), e);
                });
                return;
            }
            case 'message': {
                this.params.onMessage(some).catch(e => {
                    log.error(localize(12, null, 'onMessage'), e);
                });
                return;
            }
            case 'signal': {
                const sig = some;
                switch (sig.name) {
                    case 'dirty': {
                        this.params.onDirty().catch(e => {
                            log.error(localize(13, null, 'onDirty'), e);
                        });
                        return;
                    }
                    case 'fileChange': {
                        return;
                    }
                }
            }
        }
        debugger;
        log.warning(localize(14, null, some.type));
    }
    sendRequest(type, params = {}) {
        const cookiedMessage = Object.assign({ type }, params);
        const cookie = cookiedMessage.cookie = Math.random().toString();
        const promise = new Promise((resolve, reject) => this.promisesResolvers.set(cookie, { resolve, reject }));
        const jsonMessage = JSON.stringify(cookiedMessage);
        if (enableCMakeServerDebugProtocol) {
            log.debug(localize(15, null, jsonMessage));
        }
        this.pipe.write('\n[== "CMake Server" ==[\n');
        this.pipe.write(jsonMessage);
        this.pipe.write('\n]== "CMake Server" ==]\n');
        return promise;
    }
    /**
     * CMake server requests:
     */
    setGlobalSettings(params) {
        return this.sendRequest('setGlobalSettings', params);
    }
    handshake(params) {
        return this.sendRequest('handshake', params);
    }
    getCMakeCacheContent() {
        return this.sendRequest('cache');
    }
    getGlobalSettings() {
        return this.sendRequest('globalSettings');
    }
    configure(params) {
        return this.sendRequest('configure', params);
    }
    compute(params) {
        return this.sendRequest('compute', params);
    }
    codemodel(params) {
        return this.sendRequest('codemodel', params);
    }
    cmakeInputs(params) {
        return this.sendRequest('cmakeInputs', params);
    }
    shutdownServer() {
        if (this.serverProcess) {
            this.serverProcess.kill();
        }
    }
    async shutdownAsync() {
        this.shutDownFlag = true;
        this.pipe.end();
        await this.endPromise;
    }
    static async start(params) {
        let resolved = false;
        // Ensure the binary directory exists
        await pr_1.fs.mkdir_p(params.binaryDir);
        return new Promise((resolve, reject) => {
            const client = new CMakeServerClient({
                tmpdir: params.tmpdir,
                sourceDir: params.sourceDir,
                binaryDir: params.binaryDir,
                onMessage: params.onMessage,
                onOtherOutput: other => params.onOtherOutput(other),
                cmakePath: params.cmakePath,
                environment: params.environment,
                onProgress: params.onProgress,
                onDirty: params.onDirty,
                generator: params.generator,
                onCrash: async (_retc) => {
                    if (!resolved) {
                        reject(new global.Error(localize(16, null)));
                    }
                },
                onPipeError: async (e) => {
                    if (!resolved) {
                        reject(e);
                    }
                },
                onHello: async (msg) => {
                    // We've gotten the hello message. We need to commense handshake
                    try {
                        const hsparams = { buildDirectory: params.binaryDir, protocolVersion: msg.supportedProtocolVersions[0] };
                        const cachePath = path.join(params.binaryDir, 'CMakeCache.txt');
                        const haveCache = await pr_1.fs.exists(cachePath);
                        if (haveCache) {
                            // Work-around: CMake Server checks that CMAKE_HOME_DIRECTORY
                            // in the cmake cache is the same as what we provide when we
                            // set up the connection. Because CMake may normalize the
                            // path differently than we would, we should make sure that
                            // we pass the value that is specified in the cache exactly
                            // to avoid causing CMake server to spuriously fail.
                            // While trying to fix issue above CMake broke ability to run
                            // with an empty sourceDir, so workaround because necessary for
                            // different CMake versions.
                            // See
                            // https://gitlab.kitware.com/cmake/cmake/issues/16948
                            // https://gitlab.kitware.com/cmake/cmake/issues/16736
                            const tempCache = await cache.CMakeCache.fromPath(cachePath);
                            const srcDir = tempCache.get('CMAKE_HOME_DIRECTORY');
                            if (srcDir) {
                                const cachedDir = srcDir.as();
                                if (!util.platformPathEquivalent(cachedDir, params.sourceDir)) {
                                    // If srcDir is different, clean configure is required as CMake won't accept it anyways.
                                    throw new BadHomeDirectoryError(cachedDir, params.sourceDir, cachePath);
                                }
                                hsparams.sourceDirectory = cachedDir;
                            }
                        }
                        else {
                            // Do clean configure, all parameters are required.
                            const generator = params.generator;
                            hsparams.sourceDirectory = params.sourceDir;
                            hsparams.generator = generator.name;
                            hsparams.platform = generator.platform;
                            hsparams.toolset = generator.toolset;
                            const configureMessage = localize(17, null, `"${hsparams.generator}"`);
                            const extraMessage = hsparams.platform || hsparams.toolset ?
                                localize(18, null, `"${hsparams.platform}"`, JSON.stringify(`"${hsparams.toolset}"` || {})) :
                                "";
                            log.info(configureMessage + extraMessage);
                        }
                        await client.handshake(hsparams);
                        resolved = true;
                        resolve(client);
                    }
                    catch (e) {
                        await client.shutdownAsync();
                        resolved = true;
                        reject(e);
                    }
                }
            });
        });
    }
}
exports.CMakeServerClient = CMakeServerClient;


/***/ }),

/***/ 54369:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CMakeServerDriver = void 0;
const dirty_1 = __webpack_require__(86945);
const path = __webpack_require__(71017);
const vscode = __webpack_require__(89496);
const cache = __webpack_require__(78510);
const drivers_1 = __webpack_require__(70271);
const logging_1 = __webpack_require__(71067);
const proc = __webpack_require__(3477);
const rollbar_1 = __webpack_require__(58543);
const util_1 = __webpack_require__(16182);
const nls = __webpack_require__(33463);
const util_2 = __webpack_require__(9011);
nls.config({ messageFormat: nls.MessageFormat.bundle, bundleFormat: nls.BundleFormat.standalone })((__webpack_require__(71017).join)(__dirname, 'src\\drivers\\cmakeServerDriver.ts'));
const localize = nls.loadMessageBundle((__webpack_require__(71017).join)(__dirname, 'src\\drivers\\cmakeServerDriver.ts'));
const log = (0, logging_1.createLogger)('cms-driver');
class CMakeServerDriver extends drivers_1.CMakeDriver {
    constructor(cmake, config, sourceDir, isMultiProject, workspaceFolder, preconditionHandler) {
        super(cmake, config, sourceDir, isMultiProject, workspaceFolder, preconditionHandler);
        this.config = config;
        this._cmsClient = Promise.resolve(null);
        this._clientChangeInProgress = Promise.resolve();
        this._cacheEntries = new Map();
        this._cmakeInputFileSet = dirty_1.InputFileSet.createEmpty();
        this._progressEmitter = new vscode.EventEmitter();
        /**
         * The previous configuration environment. Used to detect when we need to
         * restart cmake-server
         */
        this._prevConfigureEnv = 'null';
        this.codeModel = null;
        this._codeModelChanged = new vscode.EventEmitter();
        /**
         * Track if the user changes the settings of the configure via settings.json
         */
        this._hadConfigurationChanged = true;
        this._onMessageEmitter = new vscode.EventEmitter();
        this.config.onChange('environment', () => this._restartClient());
        this.config.onChange('configureEnvironment', () => this._restartClient());
    }
    get isCacheConfigSupported() {
        return false;
    }
    async doCacheConfigure() {
        throw new Error('Method not implemented.');
    }
    get onProgress() {
        return this._progressEmitter.event;
    }
    convertServerCodeModel(serverCodeModel) {
        if (serverCodeModel) {
            const codeModel = { configurations: [] };
            for (const config of serverCodeModel.configurations) {
                const newConfig = { name: config.name, projects: [] };
                for (const project of config.projects) {
                    const newProject = {
                        name: project.name,
                        sourceDirectory: project.sourceDirectory,
                        hasInstallRule: project.hasInstallRule,
                        targets: []
                    };
                    for (const target of project.targets) {
                        const newTarget = {
                            name: target.name,
                            type: target.type,
                            sourceDirectory: target.sourceDirectory,
                            fullName: target.fullName,
                            artifacts: target.artifacts,
                            sysroot: target.sysroot,
                            fileGroups: []
                        };
                        const linkLanguageFlags = target.linkLanguageFlags;
                        if (target.fileGroups) {
                            newTarget.fileGroups = [];
                            for (const group of target.fileGroups) {
                                const newGroup = {
                                    sources: group.sources,
                                    language: group.language,
                                    includePath: group.includePath,
                                    defines: group.defines,
                                    isGenerated: group.isGenerated,
                                    compileCommandFragments: group.compileFlags ? [group.compileFlags] : (linkLanguageFlags ? [linkLanguageFlags] : [])
                                };
                                newTarget.fileGroups.push(newGroup);
                            }
                        }
                        newProject.targets.push(newTarget);
                    }
                    newConfig.projects.push(newProject);
                }
                codeModel.configurations.push(newConfig);
            }
            return codeModel;
        }
        return null;
    }
    get onCodeModelChanged() {
        return this._codeModelChanged.event;
    }
    async asyncDispose() {
        this._codeModelChanged.dispose();
        this._progressEmitter.dispose();
        await this.shutdownClient();
    }
    async shutdownClient() {
        const cl = await this._cmsClient;
        if (cl) {
            await cl.shutdownAsync();
        }
    }
    async getClient() {
        if (!(await this._cmsClient)) {
            this._cmsClient = this._startNewClient();
        }
        const client_started = await this._cmsClient;
        if (!(client_started)) {
            throw Error('Unable to start cms client');
        }
        else {
            return client_started;
        }
    }
    async doPreCleanConfigure() {
        const old_cl = await this._cmsClient;
        this._cmsClient = (async () => {
            // Stop the server before we try to rip out any old files
            if (old_cl) {
                await old_cl.shutdownAsync();
            }
            await this._cleanPriorConfiguration();
            return this._startNewClient();
        })();
    }
    async doConfigure(args, _trigger, consumer, showCommandOnly, _defaultConfigurePresetName, configurePreset, _options) {
        await this._clientChangeInProgress;
        const cl = await this.getClient();
        const sub = this.onMessage(msg => {
            if (consumer) {
                for (const line of msg.split('\n')) {
                    consumer.output(line);
                }
            }
        });
        if (showCommandOnly) {
            log.showChannel();
            log.info(proc.buildCmdStr(this.cmake.path, args));
        }
        else {
            try {
                if (!configurePreset) {
                    this._hadConfigurationChanged = false;
                }
                await cl.configure({ cacheArguments: args });
                await cl.compute();
            }
            catch (e) {
                if (e instanceof drivers_1.ServerError) {
                    log.error(localize(0, null, (0, util_1.errorToString)(e)));
                    return 1;
                }
                else {
                    throw e;
                }
            }
            finally {
                sub.dispose();
            }
            await this._refreshPostConfigure();
        }
        return 0;
    }
    async doPreBuild() {
        return true;
    }
    async doPostBuild() {
        await this._refreshPostConfigure();
        return true;
    }
    async _refreshPostConfigure() {
        const client = await this.getClient();
        const cmake_inputs = await client.cmakeInputs(); // <-- 1. This line generates the error
        // Scan all the CMake inputs and capture their mtime so we can check for
        // out-of-dateness later
        this._cmakeInputFileSet = await dirty_1.InputFileSet.create(cmake_inputs);
        const clcache = await client.getCMakeCacheContent();
        this._cacheEntries = clcache.cache.reduce((acc, el) => {
            const entry_map = {
                BOOL: cache.CacheEntryType.Bool,
                STRING: cache.CacheEntryType.String,
                PATH: cache.CacheEntryType.Path,
                FILEPATH: cache.CacheEntryType.FilePath,
                INTERNAL: cache.CacheEntryType.Internal,
                UNINITIALIZED: cache.CacheEntryType.Uninitialized,
                STATIC: cache.CacheEntryType.Static
            };
            const type = entry_map[el.type];
            if (type === undefined) {
                rollbar_1.default.error(localize(1, null, el.type));
                return acc;
            }
            acc.set(el.key, new cache.CacheEntry(el.key, el.value, type, el.properties.HELPSTRING, el.properties.ADVANCED === '1'));
            return acc;
        }, new Map());
        // Convert ServerCodeModel to general CodeModel.
        this.codeModel = this.convertServerCodeModel(await client.codemodel());
        this._codeModelChanged.fire(this.codeModel);
    }
    async doRefreshExpansions(cb) {
        log.debug('Run doRefreshExpansions');
        const bindir_before = this.binaryDir;
        const srcdir_before = this.sourceDir;
        await cb();
        if (!bindir_before.length || !srcdir_before.length) {
            return;
        }
        const new_env = JSON.stringify(await this.getConfigureEnvironment());
        if (bindir_before !== this.binaryDir || srcdir_before !== this.sourceDir || new_env !== this._prevConfigureEnv) {
            // Directories changed. We need to restart the driver
            await this._restartClient();
        }
        this._prevConfigureEnv = new_env;
    }
    get targets() {
        if (!this.codeModel) {
            return [];
        }
        const build_config = this.codeModel.configurations.find(conf => conf.name === this.currentBuildType);
        if (!build_config) {
            log.error(localize(2, null));
            return [];
        }
        const metaTargets = [{
                type: 'rich',
                name: this.allTargetName,
                filepath: localize(3, null),
                targetType: 'META'
            }];
        if (build_config.projects.some(project => (project.hasInstallRule) ? project.hasInstallRule : false)) {
            metaTargets.push({
                type: 'rich',
                name: 'install',
                filepath: localize(4, null),
                targetType: 'META'
            });
        }
        return build_config.projects.reduce((acc, project) => acc.concat(project.targets.map(t => ({
            type: 'rich',
            name: t.name,
            filepath: t.artifacts && t.artifacts.length
                ? path.normalize(t.artifacts[0])
                : localize(5, null),
            targetType: t.type
        }))), metaTargets);
    }
    get executableTargets() {
        return this.targets.filter(t => t.targetType === 'EXECUTABLE')
            .reduce(targetReducer, [])
            .map(t => ({ name: t.name, path: t.filepath }));
    }
    get uniqueTargets() {
        return this.targets.reduce(targetReducer, []);
    }
    get cmakeFiles() {
        return this._cmakeInputFileSet.inputFiles.map(file => file.filePath);
    }
    get generatorName() {
        return this._globalSettings ? this._globalSettings.generator : null;
    }
    async doConfigureSettingsChange() {
        this._hadConfigurationChanged = true;
        await (0, util_2.onConfigureSettingsChange)();
    }
    async checkNeedsReconfigure() {
        if (this._hadConfigurationChanged) {
            return this._hadConfigurationChanged;
        }
        // If we have no input files, we probably haven't configured yet
        if (this._cmakeInputFileSet.inputFiles.length === 0) {
            return true;
        }
        return this._cmakeInputFileSet.checkOutOfDate();
    }
    get cmakeCacheEntries() {
        return this._cacheEntries;
    }
    async _setKitAndRestart(need_clean, cb) {
        this._cmakeInputFileSet = dirty_1.InputFileSet.createEmpty();
        const client = await this._cmsClient;
        if (client) {
            await client.shutdownAsync();
        }
        if (need_clean) {
            await this._cleanPriorConfiguration();
        }
        await cb();
        if (!this.generator) {
            throw new drivers_1.NoGeneratorError();
        }
        await this._restartClient();
    }
    doSetKit(cb) {
        this._clientChangeInProgress = this._setKitAndRestart(false, cb);
        return this._clientChangeInProgress;
    }
    doSetConfigurePreset(need_clean, cb) {
        this._clientChangeInProgress = this._setKitAndRestart(need_clean, cb);
        return this._clientChangeInProgress;
    }
    doSetBuildPreset(cb) {
        return cb();
    }
    doSetTestPreset(cb) {
        return cb();
    }
    doSetPackagePreset(cb) {
        return cb();
    }
    doSetWorkflowPreset(cb) {
        return cb();
    }
    async _restartClient() {
        this._cmsClient = this._doRestartClient();
        const client = await this.getClient();
        this._globalSettings = await client.getGlobalSettings();
    }
    async _doRestartClient() {
        const old_client = await this._cmsClient;
        if (old_client) {
            await old_client.shutdownAsync();
        }
        return this._startNewClient();
    }
    async _startNewClient() {
        if (!this.generator) {
            throw new drivers_1.NoGeneratorError();
        }
        return drivers_1.CMakeServerClient.start({
            tmpdir: path.join(this.workspaceFolder, '.vscode'),
            binaryDir: this.binaryDir,
            sourceDir: this.sourceDir,
            cmakePath: this.cmake.path,
            environment: await this.getConfigureEnvironment(),
            onDirty: async () => {
                // cmake-server has dirty check issues, so we implement our own dirty
                // checking. Maybe in the future this can be useful for auto-configuring
                // on file changes?
            },
            onOtherOutput: async (msg) => this._onMessageEmitter.fire(msg),
            onMessage: async (msg) => {
                this._onMessageEmitter.fire(msg.message);
            },
            onProgress: async (prog) => {
                this._progressEmitter.fire(prog);
            },
            generator: this.generator
        });
    }
    get onMessage() {
        return this._onMessageEmitter.event;
    }
    async onStop() {
        const client = await this._cmsClient;
        if (client) {
            if (this.configInProgress()) {
                client.shutdownServer();
            }
            await client.shutdownAsync();
            this._cmsClient = Promise.resolve(null);
        }
    }
    async doInit() {
        await this._restartClient();
    }
    get codeModelContent() {
        return null;
    }
    static async create(cmake, config, sourceDir, isMultiProject, useCMakePresets, kit, configurePreset, buildPreset, testPreset, packagePreset, workflowPreset, workspaceFolder, preconditionHandler, preferredGenerators) {
        return this.createDerived(new CMakeServerDriver(cmake, config, sourceDir, isMultiProject, workspaceFolder, preconditionHandler), useCMakePresets, kit, configurePreset, buildPreset, testPreset, packagePreset, workflowPreset, preferredGenerators);
    }
}
exports.CMakeServerDriver = CMakeServerDriver;
/**
 * Helper function for Array.reduce
 *
 * @param set the accumulator
 * @t the RichTarget currently being examined.
 */
function targetReducer(set, t) {
    if (!set.find(t2 => t.name === t2.name && t.filepath === t2.filepath && t.targetType === t2.targetType)) {
        set.push(t);
    }
    return set;
}


/***/ }),

/***/ 70271:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
__exportStar(__webpack_require__(16647), exports);
__exportStar(__webpack_require__(50540), exports);
__exportStar(__webpack_require__(59535), exports);
__exportStar(__webpack_require__(50164), exports);
__exportStar(__webpack_require__(43365), exports);
__exportStar(__webpack_require__(54369), exports);


/***/ }),

/***/ 40085:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.EnvironmentUtils = void 0;
const os = __webpack_require__(22037);
const util = __webpack_require__(73837);
const inspect = util.inspect.custom;
const envProperty = Symbol('envProperty');
const filter = /\$\{.+?\}/;
/**
 * EnvironmentPrivate is proxied because we need
 * mantain compatiable with NodeJS.ProcessEnv.
 * For example, supporse we have a env named with `get`, if we using
 * typescript `Index Signatures`, then what's the result of env.get will have
 * two meaning:
 *   * call the function `get`
 *   * get the environment variable `get`
 * But for environment variable, access any member with `name` should return the expeted
 * environment variable for that  `name`
 */
class EnvironmentPrivate {
    constructor(options) {
        this.keyMapping = new Map();
        this[envProperty] = {};
        this.options = {
            preserveNull: options === null || options === void 0 ? void 0 : options.preserveNull,
            isWin32: options === null || options === void 0 ? void 0 : options.isWin32
        };
        if (this.options.preserveNull === undefined) {
            this.options.preserveNull = false;
        }
        if (this.options.isWin32 === undefined) {
            this.options.isWin32 = os.platform() === 'win32';
        }
    }
    getKey(key, updateKey) {
        if (this.options.isWin32) {
            const normalizedKey = key.toUpperCase();
            let resultKey = this.keyMapping.get(normalizedKey);
            if (resultKey === undefined) {
                resultKey = key;
                if (updateKey) {
                    this.keyMapping.set(normalizedKey, resultKey);
                }
            }
            return resultKey;
        }
        return key;
    }
    get(key) {
        return this[envProperty][this.getKey(key, false)];
    }
    set(key, value, receiver) {
        if (typeof key === 'string') {
            let deleteKey = false;
            if (value === undefined) {
                deleteKey = true;
            }
            else if (value === null) {
                if (!this.options.preserveNull) {
                    deleteKey = true;
                }
            }
            else if (key.match(filter)) {
                deleteKey = true;
            }
            else if (typeof value !== 'string') {
                value = '' + value;
            }
            const existKey = this.getKey(key, true);
            if (deleteKey) {
                return Reflect.deleteProperty(this[envProperty], existKey);
            }
            else {
                return Reflect.set(this[envProperty], existKey, value, receiver);
            }
        }
        return false;
    }
    [inspect]() {
        return util.inspect(this[envProperty]);
    }
    toString() {
        return this[envProperty].toString();
    }
}
class EnvironmentUtils {
    static create(from, options) {
        const env = new EnvironmentPrivate(options);
        const p = new Proxy(env, {
            defineProperty: (target, p, attributes) => Reflect.defineProperty(target[envProperty], p, attributes),
            deleteProperty: (target, p) => Reflect.deleteProperty(target[envProperty], p),
            get: (target, p) => {
                if (typeof p === 'string') {
                    return target.get(p);
                }
                return Reflect.get(target, p);
            },
            getOwnPropertyDescriptor: (target, p) => {
                if (typeof p === 'string') {
                    return Reflect.getOwnPropertyDescriptor(target[envProperty], target.getKey(p, false));
                }
                else {
                    return Reflect.getOwnPropertyDescriptor(target, p);
                }
            },
            has: (target, p) => {
                if (typeof p === 'string') {
                    return Reflect.has(target[envProperty], target.getKey(p, false));
                }
                else {
                    return Reflect.has(target, p);
                }
            },
            ownKeys: (target) => Reflect.ownKeys(target[envProperty]),
            set: (target, p, value, receiver) => target.set(p, value, receiver)
        });
        if (from !== undefined && from !== null) {
            if (from instanceof Map) {
                for (const [key, value] of from.entries()) {
                    p[key] = value;
                }
            }
            else {
                Object.assign(p, from);
            }
        }
        return p;
    }
    static createPreserveNull(from) {
        return EnvironmentUtils.create(from, { preserveNull: true });
    }
    static merge(envs, options) {
        const newEnv = EnvironmentUtils.create(undefined, options);
        for (const env of envs) {
            if (env !== undefined && env !== null) {
                Object.assign(newEnv, env);
            }
        }
        return newEnv;
    }
    static mergePreserveNull(envs) {
        return EnvironmentUtils.merge(envs, { preserveNull: true });
    }
}
exports.EnvironmentUtils = EnvironmentUtils;


/***/ }),

/***/ 77504:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/**
 * Module for working with and performing expansion of template strings
 * with `${var}`-style variable template expressions.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getParentEnvSubstitutions = exports.substituteAll = exports.expandStrings = exports.expandString = exports.envDelimiter = void 0;
const vscode = __webpack_require__(89496);
const logging_1 = __webpack_require__(71067);
const util_1 = __webpack_require__(16182);
const nls = __webpack_require__(33463);
const environmentVariables_1 = __webpack_require__(40085);
const matchAll = __webpack_require__(39138);
nls.config({ messageFormat: nls.MessageFormat.bundle, bundleFormat: nls.BundleFormat.standalone })((__webpack_require__(71017).join)(__dirname, 'src\\expand.ts'));
const localize = nls.loadMessageBundle((__webpack_require__(71017).join)(__dirname, 'src\\expand.ts'));
const log = (0, logging_1.createLogger)('expand');
exports.envDelimiter = (process.platform === 'win32') ? ";" : ":";
/**
 * Replace ${variable} references in the given string with their corresponding
 * values.
 * @param input The input string
 * @param opts Options for the expansion process
 * @returns A string with the variable references replaced
 */
async function expandString(input, opts) {
    if (typeof input !== 'string') {
        return input;
    }
    const inputString = input;
    try {
        const maxRecursion = 10;
        let result = inputString;
        let didReplacement = false;
        let circularReference;
        let i = 0;
        do {
            // TODO: consider a full circular reference check?
            const expansion = await expandStringHelper(result, opts);
            result = expansion.result;
            didReplacement = expansion.didReplacement;
            circularReference = expansion.circularReference;
            i++;
        } while (i < maxRecursion && opts.recursive && didReplacement && !circularReference);
        if (circularReference) {
            log.warning(localize(0, null, circularReference));
        }
        else if (i === maxRecursion) {
            log.error(localize(1, null));
        }
        return (0, util_1.replaceAll)(result, '${dollar}', '$');
    }
    catch (e) {
        log.warning(localize(2, null, inputString, (0, util_1.errorToString)(e)));
    }
    return input;
}
exports.expandString = expandString;
// Regular expression for variable value (between the variable suffix and the next ending curly bracket):
// .+? matches any character (except line terminators) between one and unlimited times,
// as few times as possible, expanding as needed (lazy)
const varValueRegexp = ".+?";
async function expandStringHelper(input, opts) {
    log.debug(localize(3, null, input));
    const envPreNormalize = opts.envOverride ? opts.envOverride : process.env;
    const env = environmentVariables_1.EnvironmentUtils.create(envPreNormalize);
    const replacements = opts.vars;
    replacements.sourceDirectory = replacements.sourceDir;
    let circularReference;
    // We accumulate a list of substitutions that we need to make, preventing
    // recursively expanding or looping forever on bad replacements
    const subs = new Map();
    const varRegex = /\$\{(\w+)\}/g;
    for (const mat of matchAll(input, varRegex)) {
        const full = mat[0];
        const key = mat[1];
        if (key !== 'dollar') {
            // Replace dollar sign at the very end of the expanding process
            const replacement = replacements[key];
            if (!replacement) {
                log.warning(localize(4, null, full, input));
            }
            else {
                subs.set(full, replacement);
            }
        }
    }
    const envRegex1 = RegExp(`\\$\\{env:(${varValueRegexp})\\}`, "g");
    for (const mat of matchAll(input, envRegex1)) {
        const full = mat[0];
        const varName = mat[1];
        const replacement = (0, util_1.fixPaths)(env[varName]) || '';
        subs.set(full, replacement);
    }
    const envRegex2 = RegExp(`\\$\\{env\\.(${varValueRegexp})\\}`, "g");
    for (const mat of matchAll(input, envRegex2)) {
        const full = mat[0];
        const varName = mat[1];
        const replacement = (0, util_1.fixPaths)(env[varName]) || '';
        subs.set(full, replacement);
    }
    const envRegex3 = RegExp(`\\$env\\{(${varValueRegexp})\\}`, "g");
    for (const mat of matchAll(input, envRegex3)) {
        const full = mat[0];
        const varName = mat[1];
        const replacement = (0, util_1.fixPaths)(env[varName]) || '';
        // Avoid replacing an env variable by itself, e.g. PATH:env{PATH}.
        const envRegex4 = RegExp(`\\$env\\{(${varValueRegexp})\\}`, "g");
        const mat2 = envRegex4.exec(replacement);
        const varNameReplacement = mat2 ? mat2[1] : undefined;
        if (varNameReplacement && varNameReplacement === varName) {
            circularReference = `\"${varName}\" : \"${input}\"`;
            break;
        }
        subs.set(full, replacement);
    }
    getParentEnvSubstitutions(input, subs);
    if (vscode.workspace.workspaceFolders && vscode.workspace.workspaceFolders.length > 0) {
        const folderRegex = RegExp(`\\$\\{workspaceFolder:(${varValueRegexp})\\}`, "g");
        for (const mat of matchAll(input, folderRegex)) {
            const full = mat[0];
            const folderName = mat[1];
            const f = vscode.workspace.workspaceFolders.find(folder => folder.name.toLocaleLowerCase() === folderName.toLocaleLowerCase());
            if (f) {
                subs.set(full, f.uri.fsPath);
            }
        }
    }
    if (opts.variantVars) {
        const variants = opts.variantVars;
        const variantRegex = RegExp(`\\$\\{variant:(${varValueRegexp})\\}`, "g");
        for (const mat of matchAll(input, variantRegex)) {
            const full = mat[0];
            const varName = mat[1];
            const replacement = variants[varName] || '';
            subs.set(full, replacement);
        }
    }
    const commandRegex = RegExp(`\\$\\{command:(${varValueRegexp})\\}`, "g");
    for (const mat of matchAll(input, commandRegex)) {
        if (opts.doNotSupportCommands) {
            log.warning(localize(5, null, input));
            break;
        }
        const full = mat[0];
        const command = mat[1];
        if (subs.has(full)) {
            continue; // Don't execute commands more than once per string
        }
        try {
            const result = await vscode.commands.executeCommand(command, opts.vars.workspaceFolder);
            subs.set(full, `${result}`);
        }
        catch (e) {
            log.warning(localize(6, null, command, input, (0, util_1.errorToString)(e)));
        }
    }
    return Object.assign(Object.assign({}, substituteAll(input, subs)), { circularReference });
}
async function expandStrings(inputs, opts) {
    const expandedInputs = [];
    for (const input of inputs) {
        const expandedInput = await expandString(input, opts);
        expandedInputs.push(expandedInput);
    }
    return expandedInputs;
}
exports.expandStrings = expandStrings;
function substituteAll(input, subs) {
    let finalString = input;
    let didReplacement = false;
    subs.forEach((value, key) => {
        if (value !== key) {
            finalString = (0, util_1.replaceAll)(finalString, key, value);
            didReplacement = true;
        }
    });
    return { result: finalString, didReplacement };
}
exports.substituteAll = substituteAll;
function getParentEnvSubstitutions(input, subs) {
    const parentEnvRegex = RegExp(`\\$penv\\{(${varValueRegexp})\\}`, "g");
    for (const mat of matchAll(input, parentEnvRegex)) {
        const full = mat[0];
        const varName = mat[1];
        const replacement = (0, util_1.fixPaths)(process.env[varName]) || '';
        subs.set(full, replacement);
    }
    return subs;
}
exports.getParentEnvSubstitutions = getParentEnvSubstitutions;


/***/ }),

/***/ 12406:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
/* eslint-disable no-unused-expressions */
/**
 * Extension startup/teardown
 */

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getStatusBar = exports.deactivate = exports.updateFullFeatureSet = exports.onExtensionActiveCommandsChanged = exports.getExtensionLocalizedStrings = exports.getExtensionActiveCommands = exports.setContextAndStore = exports.getActiveProject = exports.enableFullFeatureSet = exports.activate = exports.ExtensionManager = exports.extensionManager = exports.hideBuildCommandKey = exports.hideDebugCommandKey = exports.hideLaunchCommandKey = void 0;
const chokidar = __webpack_require__(88643);
const path = __webpack_require__(71017);
const vscode = __webpack_require__(89496);
const cpt = __webpack_require__(3286);
const nls = __webpack_require__(33463);
const api = __webpack_require__(77081);
const cache_1 = __webpack_require__(78510);
const cmakeProject_1 = __webpack_require__(37874);
const config_1 = __webpack_require__(62498);
const cpptools_1 = __webpack_require__(38431);
const projectController_1 = __webpack_require__(99854);
const kit_1 = __webpack_require__(18679);
const kitsController_1 = __webpack_require__(61145);
const logging = __webpack_require__(71067);
const pr_1 = __webpack_require__(72502);
const prop_1 = __webpack_require__(88822);
const rollbar_1 = __webpack_require__(58543);
const state_1 = __webpack_require__(57053);
const cmakeTaskProvider_1 = __webpack_require__(81337);
const telemetry = __webpack_require__(21818);
const projectOutline_1 = __webpack_require__(19981);
const util = __webpack_require__(16182);
const util_1 = __webpack_require__(16182);
const variant_1 = __webpack_require__(89987);
const expand_1 = __webpack_require__(77504);
const paths_1 = __webpack_require__(86640);
const cmakeDriver_1 = __webpack_require__(16647);
const os_1 = __webpack_require__(22037);
const api_1 = __webpack_require__(15905);
const workspace_1 = __webpack_require__(67810);
const projectStatus_1 = __webpack_require__(42398);
const pinnedCommands_1 = __webpack_require__(21610);
const status_1 = __webpack_require__(63827);
const debugAdapterNamedPipeServerDescriptorFactory_1 = __webpack_require__(15965);
const cmakeExecutable_1 = __webpack_require__(87630);
const debuggerConfigureDriver_1 = __webpack_require__(38129);
const debugConfigurationProvider_1 = __webpack_require__(1626);
const ctest_1 = __webpack_require__(98454);
nls.config({ messageFormat: nls.MessageFormat.bundle, bundleFormat: nls.BundleFormat.standalone })((__webpack_require__(71017).join)(__dirname, 'src\\extension.ts'));
const localize = nls.loadMessageBundle((__webpack_require__(71017).join)(__dirname, 'src\\extension.ts'));
let taskProvider;
let pinnedCommands;
const log = logging.createLogger('extension');
const multiProjectModeKey = 'cmake:multiProject';
exports.hideLaunchCommandKey = 'cmake:hideLaunchCommand';
exports.hideDebugCommandKey = 'cmake:hideDebugCommand';
exports.hideBuildCommandKey = 'cmake:hideBuildCommand';
/**
 * The global extension manager. There is only one of these, even if multiple
 * backends.
 */
exports.extensionManager = null;
/**
 * A class to manage the extension.
 * This is the true "singleton" of the extension. It acts as the glue between
 * the lower layers and the VSCode UX. When a user presses a button to
 * necessitate user input, this class acts as intermediary and will send
 * important information down to the lower layers.
 */
class ExtensionManager {
    constructor(extensionContext) {
        this.extensionContext = extensionContext;
        this.contextValues = {};
        this.extensionActiveCommandsInfo = null;
        this.localizedStrings = {};
        this.onDidChangeActiveTextEditorSub = new util_1.DummyDisposable();
        this.extensionActiveCommandsEmitter = new vscode.EventEmitter();
        this.workspaceConfig = config_1.ConfigurationReader.create();
        /**
         * The project status view controller
         */
        this.projectStatus = new projectStatus_1.ProjectStatus();
        // NOTE: (from sidebar) The project controller manages all the projects in the workspace
        this.projectController = new projectController_1.ProjectController(this.extensionContext, this.projectStatus);
        /**
         * The status bar controller
         */
        this.statusBar = new status_1.StatusBar(this.workspaceConfig);
        // Subscriptions for status bar items:
        this.statusMessageSub = new util_1.DummyDisposable();
        this.targetNameSub = new util_1.DummyDisposable();
        this.buildTypeSub = new util_1.DummyDisposable();
        this.launchTargetSub = new util_1.DummyDisposable();
        this.projectSubscriptions = [
            this.targetNameSub,
            this.launchTargetSub
        ];
        this.ctestEnabledSub = new util_1.DummyDisposable();
        this.isBusySub = new util_1.DummyDisposable();
        this.activeConfigurePresetSub = new util_1.DummyDisposable();
        this.activeBuildPresetSub = new util_1.DummyDisposable();
        this.activeTestPresetSub = new util_1.DummyDisposable();
        this.activePackagePresetSub = new util_1.DummyDisposable();
        this.activeWorkflowPresetSub = new util_1.DummyDisposable();
        // Watch the code model so that we may update the tree view
        // <fspath, sub>
        this.codeModelUpdateSubs = new Map();
        /**
         * The project outline tree data provider
         */
        this.projectOutline = new projectOutline_1.ProjectOutline();
        this.projectOutlineTreeView = vscode.window.createTreeView('cmake.outline', {
            treeDataProvider: this.projectOutline,
            showCollapseAll: true
        });
        /**
         * CppTools project configuration provider. Tells cpptools how to search for
         * includes, preprocessor defs, etc.
         */
        this.configProvider = new cpptools_1.CppConfigurationProvider();
        this.configProviderRegistered = false;
        /**
         * Ensure that there is an active build preset for the current CMakeProject.
         * We pass this in function calls so make it an lambda instead of a function.
         *
         * @returns `false` if there is not active CMakeProject, or it has no active preset
         * and the user cancelled the preset selection dialog.
         */
        this.ensureActiveBuildPreset = async (project) => {
            if (!project) {
                project = this.getActiveProject();
            }
            if (!project) {
                // No CMakeProject. Probably no workspace open.
                return false;
            }
            if (project.useCMakePresets) {
                if (project.buildPreset) {
                    return true;
                }
                const didChoosePreset = await this.selectBuildPreset(project.workspaceFolder);
                if (!didChoosePreset && !project.buildPreset) {
                    return false;
                }
                return !!project.buildPreset;
            }
            return true;
        };
        this.ensureActiveTestPreset = async (project) => {
            if (!project) {
                project = this.getActiveProject();
            }
            if (!project) {
                // No CMakeProject. Probably no workspace open.
                return false;
            }
            if (project.useCMakePresets) {
                if (project.testPreset) {
                    return true;
                }
                const didChoosePreset = await this.selectTestPreset(project.workspaceFolder);
                if (!didChoosePreset && !project.testPreset) {
                    return false;
                }
                return !!project.testPreset;
            }
            return true;
        };
        this.ensureActivePackagePreset = async (project) => {
            if (!project) {
                project = this.getActiveProject();
            }
            if (!project) {
                // No CMakeProject. Probably no workspace open.
                return false;
            }
            if (project.useCMakePresets) {
                if (project.packagePreset) {
                    return true;
                }
                const didChoosePreset = await this.selectPackagePreset(project.workspaceFolder);
                if (!didChoosePreset && !project.packagePreset) {
                    return false;
                }
                return !!project.packagePreset;
            }
            return true;
        };
        this.ensureActiveWorkflowPreset = async (project) => {
            if (!project) {
                project = this.getActiveProject();
            }
            if (!project) {
                // No CMakeProject. Probably no workspace open.
                return false;
            }
            if (project.useCMakePresets) {
                if (project.workflowPreset) {
                    return true;
                }
                const didChoosePreset = await this.selectWorkflowPreset(project.workspaceFolder);
                if (!didChoosePreset && !project.workflowPreset) {
                    return false;
                }
                return !!project.workflowPreset;
            }
            return true;
        };
        /**
         * Watches for changes to the kits file
         */
        this.kitsWatcher = util.chokidarOnAnyChange(chokidar.watch(kit_1.USER_KITS_FILEPATH, { ignoreInitial: true }), _ => rollbar_1.default.takePromise(localize(0, null), {}, kitsController_1.KitsController.readUserKits(this.getActiveProject())));
        this.onBuildTargetChangedEmitter = new vscode.EventEmitter();
        this.onLaunchTargetChangedEmitter = new vscode.EventEmitter();
        this.onActiveProjectChangedEmitter = new vscode.EventEmitter();
        telemetry.activate(extensionContext);
        this.api = new api_1.CMakeToolsApiImpl(this);
    }
    updateTouchBarVisibility(config) {
        var _a, _b, _c, _d;
        const touchBarVisible = config.visibility === "default";
        void setContextAndStore("cmake:enableTouchBar", touchBarVisible);
        void setContextAndStore("cmake:enableTouchBar.build", touchBarVisible && !(((_a = config.advanced) === null || _a === void 0 ? void 0 : _a.build) === "hidden"));
        void setContextAndStore("cmake:enableTouchBar.configure", touchBarVisible && !(((_b = config.advanced) === null || _b === void 0 ? void 0 : _b.configure) === "hidden"));
        void setContextAndStore("cmake:enableTouchBar.debug", touchBarVisible && !(((_c = config.advanced) === null || _c === void 0 ? void 0 : _c.debug) === "hidden"));
        void setContextAndStore("cmake:enableTouchBar.launch", touchBarVisible && !(((_d = config.advanced) === null || _d === void 0 ? void 0 : _d.launch) === "hidden"));
    }
    /**
     * Second-phase async init
     */
    async init() {
        this.updateTouchBarVisibility(this.workspaceConfig.touchbar);
        this.workspaceConfig.onChange('touchbar', config => this.updateTouchBarVisibility(config));
        // initialize the state of the cmake exe
        await (0, cmakeExecutable_1.getCMakeExecutableInformation)(this.workspaceConfig.rawCMakePath);
        await util.setContextValue("cmake:testExplorerIntegrationEnabled", this.workspaceConfig.testExplorerIntegrationEnabled);
        this.workspaceConfig.onChange("ctest", async (value) => {
            var _a;
            await util.setContextValue("cmake:testExplorerIntegrationEnabled", value.testExplorerIntegrationEnabled);
            if (!value.testExplorerIntegrationEnabled) {
                // Dynamically de-integrate the test explorer.
                (0, ctest_1.deIntegrateTestExplorer)();
            }
            else {
                // Attempt to refresh the tests when dynamically re-integrating the test explorer.
                await ((_a = getActiveProject()) === null || _a === void 0 ? void 0 : _a.refreshTests());
            }
        });
        this.onDidChangeActiveTextEditorSub = vscode.window.onDidChangeActiveTextEditor(e => this.onDidChangeActiveTextEditor(e), this);
        this.projectController.onAfterAddFolder(async (folderProjectMap) => {
            var _a;
            const folder = folderProjectMap.folder;
            if (this.projectController.numOfWorkspaceFolders === 1) {
                // First folder added
                await this.updateActiveProject(folder);
            }
            else {
                await this.initActiveProject();
            }
            await setContextAndStore(multiProjectModeKey, this.projectController.hasMultipleProjects);
            this.projectOutline.addFolder(folder);
            if (this.codeModelUpdateSubs.get(folder.uri.fsPath)) {
                (_a = this.codeModelUpdateSubs.get(folder.uri.fsPath)) === null || _a === void 0 ? void 0 : _a.forEach(sub => sub.dispose());
                this.codeModelUpdateSubs.delete(folder.uri.fsPath);
            }
            const subs = [];
            for (const project of folderProjectMap.projects) {
                subs.push(project.onCodeModelChanged(prop_1.FireLate, () => this.updateCodeModel(project)));
                subs.push(project.onTargetNameChanged(prop_1.FireLate, () => this.updateCodeModel(project)));
                subs.push(project.onLaunchTargetNameChanged(prop_1.FireLate, () => this.updateCodeModel(project)));
                subs.push(project.onActiveBuildPresetChanged(prop_1.FireLate, () => this.updateCodeModel(project)));
                this.codeModelUpdateSubs.set(project.folderPath, subs);
                rollbar_1.default.takePromise('Post-folder-open', { folder: folder, project: project }, this.postWorkspaceOpen(project));
            }
        });
        this.projectController.onBeforeRemoveFolder(async (projects) => {
            for (const project of projects) {
                project.removeTestExplorerRoot(project.folderPath);
            }
        });
        this.projectController.onAfterRemoveFolder(async (folder) => {
            var _a, _b;
            console.assert((vscode.workspace.workspaceFolders === undefined && this.projectController.numOfWorkspaceFolders === 0) ||
                (vscode.workspace.workspaceFolders !== undefined && vscode.workspace.workspaceFolders.length === this.projectController.numOfWorkspaceFolders));
            (_a = this.codeModelUpdateSubs.get(folder.uri.fsPath)) === null || _a === void 0 ? void 0 : _a.forEach(sub => sub.dispose());
            this.codeModelUpdateSubs.delete(folder.uri.fsPath);
            if (!((_b = vscode.workspace.workspaceFolders) === null || _b === void 0 ? void 0 : _b.length)) {
                await this.updateActiveProject(undefined);
            }
            else {
                if (this.activeFolderPath() === folder.uri.fsPath) {
                    await this.updateActiveProject(vscode.workspace.workspaceFolders[0]);
                }
                else {
                    this.setupSubscriptions();
                }
                await setContextAndStore(multiProjectModeKey, this.projectController.hasMultipleProjects);
                // Update the full/partial view of the workspace by verifying if after the folder removal
                // it still has at least one CMake project.
                await enableFullFeatureSet(this.workspaceHasAtLeastOneProject());
            }
            this.projectOutline.removeFolder(folder);
        });
        this.workspaceConfig.onChange('autoSelectActiveFolder', v => {
            if (this.projectController.hasMultipleProjects) {
                telemetry.logEvent('configChanged.autoSelectActiveFolder', { autoSelectActiveFolder: `${v}` });
            }
            this.statusBar.setAutoSelectActiveProject(v);
        });
        this.workspaceConfig.onChange('options', v => {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53;
            telemetry.logEvent('configChanged.options', {
                statusBarVisibility: `${v.statusBarVisibility}`,
                advanced_configure_projectStatusVisibility: `${(_b = (_a = v.advanced) === null || _a === void 0 ? void 0 : _a.configure) === null || _b === void 0 ? void 0 : _b.projectStatusVisibility}`,
                advanced_configurePreset_statusBarVisibility: `${(_d = (_c = v.advanced) === null || _c === void 0 ? void 0 : _c.configurePreset) === null || _d === void 0 ? void 0 : _d.statusBarVisibility}`,
                advanced_configurePreset_statusBarLength: `${(_f = (_e = v.advanced) === null || _e === void 0 ? void 0 : _e.configurePreset) === null || _f === void 0 ? void 0 : _f.statusBarLength}`,
                advanced_buildPreset_statusBarVisibility: `${(_h = (_g = v.advanced) === null || _g === void 0 ? void 0 : _g.buildPreset) === null || _h === void 0 ? void 0 : _h.statusBarVisibility}`,
                advanced_buildPreset_statusBarLength: `${(_k = (_j = v.advanced) === null || _j === void 0 ? void 0 : _j.buildPreset) === null || _k === void 0 ? void 0 : _k.statusBarLength}`,
                advanced_testPreset_statusBarVisibility: `${(_m = (_l = v.advanced) === null || _l === void 0 ? void 0 : _l.testPreset) === null || _m === void 0 ? void 0 : _m.statusBarVisibility}`,
                advanced_testPreset_statusBarLength: `${(_p = (_o = v.advanced) === null || _o === void 0 ? void 0 : _o.testPreset) === null || _p === void 0 ? void 0 : _p.statusBarLength}`,
                advanced_packagePreset_statusBarVisibility: `${(_r = (_q = v.advanced) === null || _q === void 0 ? void 0 : _q.packagePreset) === null || _r === void 0 ? void 0 : _r.statusBarVisibility}`,
                advanced_packagePreset_statusBarLength: `${(_t = (_s = v.advanced) === null || _s === void 0 ? void 0 : _s.packagePreset) === null || _t === void 0 ? void 0 : _t.statusBarLength}`,
                advanced_workflowPreset_statusBarVisibility: `${(_v = (_u = v.advanced) === null || _u === void 0 ? void 0 : _u.workflowPreset) === null || _v === void 0 ? void 0 : _v.statusBarVisibility}`,
                advanced_workflowPreset_statusBarLength: `${(_x = (_w = v.advanced) === null || _w === void 0 ? void 0 : _w.workflowPreset) === null || _x === void 0 ? void 0 : _x.statusBarLength}`,
                advanced_kit_statusBarVisibility: `${(_z = (_y = v.advanced) === null || _y === void 0 ? void 0 : _y.kit) === null || _z === void 0 ? void 0 : _z.statusBarVisibility}`,
                advanced_kit_statusBarLength: `${(_1 = (_0 = v.advanced) === null || _0 === void 0 ? void 0 : _0.kit) === null || _1 === void 0 ? void 0 : _1.statusBarLength}`,
                advanced_variant_statusBarVisibility: `${(_3 = (_2 = v.advanced) === null || _2 === void 0 ? void 0 : _2.variant) === null || _3 === void 0 ? void 0 : _3.statusBarVisibility}`,
                advanced_folder_statusBarVisibility: `${(_5 = (_4 = v.advanced) === null || _4 === void 0 ? void 0 : _4.folder) === null || _5 === void 0 ? void 0 : _5.statusBarVisibility}`,
                advanced_folder_statusBarLength: `${(_7 = (_6 = v.advanced) === null || _6 === void 0 ? void 0 : _6.folder) === null || _7 === void 0 ? void 0 : _7.statusBarLength}`,
                advanced_folder_projectStatusVisibility: `${(_9 = (_8 = v.advanced) === null || _8 === void 0 ? void 0 : _8.folder) === null || _9 === void 0 ? void 0 : _9.projectStatusVisibility}`,
                advanced_buildTarget_statusBarVisibility: `${(_11 = (_10 = v.advanced) === null || _10 === void 0 ? void 0 : _10.buildTarget) === null || _11 === void 0 ? void 0 : _11.statusBarVisibility}`,
                advanced_buildTarget_statusBarLength: `${(_13 = (_12 = v.advanced) === null || _12 === void 0 ? void 0 : _12.buildTarget) === null || _13 === void 0 ? void 0 : _13.statusBarLength}`,
                advanced_build_statusBarVisibility: `${(_15 = (_14 = v.advanced) === null || _14 === void 0 ? void 0 : _14.build) === null || _15 === void 0 ? void 0 : _15.statusBarVisibility}`,
                advanced_build_projectStatusVisibility: `${(_17 = (_16 = v.advanced) === null || _16 === void 0 ? void 0 : _16.build) === null || _17 === void 0 ? void 0 : _17.projectStatusVisibility}`,
                advanced_launchTarget_statusBarVisibility: `${(_19 = (_18 = v.advanced) === null || _18 === void 0 ? void 0 : _18.launchTarget) === null || _19 === void 0 ? void 0 : _19.statusBarVisibility}`,
                advanced_launchTarget_statusBarLength: `${(_21 = (_20 = v.advanced) === null || _20 === void 0 ? void 0 : _20.launchTarget) === null || _21 === void 0 ? void 0 : _21.statusBarLength}`,
                advanced_debug_statusBarVisibility: `${(_23 = (_22 = v.advanced) === null || _22 === void 0 ? void 0 : _22.debug) === null || _23 === void 0 ? void 0 : _23.statusBarVisibility}`,
                advanced_debug_projectStatusVisibility: `${(_25 = (_24 = v.advanced) === null || _24 === void 0 ? void 0 : _24.debug) === null || _25 === void 0 ? void 0 : _25.projectStatusVisibility}`,
                advanced_launch_statusBarVisibility: `${(_27 = (_26 = v.advanced) === null || _26 === void 0 ? void 0 : _26.launch) === null || _27 === void 0 ? void 0 : _27.statusBarVisibility}`,
                advanced_launch_projectStatusVisibility: `${(_29 = (_28 = v.advanced) === null || _28 === void 0 ? void 0 : _28.launch) === null || _29 === void 0 ? void 0 : _29.projectStatusVisibility}`,
                advanced_ctest_statusBarVisibility: `${(_31 = (_30 = v.advanced) === null || _30 === void 0 ? void 0 : _30.ctest) === null || _31 === void 0 ? void 0 : _31.statusBarVisibility}`,
                advanced_ctest_statusBarLength: `${(_33 = (_32 = v.advanced) === null || _32 === void 0 ? void 0 : _32.ctest) === null || _33 === void 0 ? void 0 : _33.statusBarLength}`,
                advanced_ctest_color: `${(_35 = (_34 = v.advanced) === null || _34 === void 0 ? void 0 : _34.ctest) === null || _35 === void 0 ? void 0 : _35.color}`,
                advanced_ctest_projectStatusVisibility: `${(_37 = (_36 = v.advanced) === null || _36 === void 0 ? void 0 : _36.ctest) === null || _37 === void 0 ? void 0 : _37.projectStatusVisibility}`,
                advanced_cpack_statusBarVisibility: `${(_39 = (_38 = v.advanced) === null || _38 === void 0 ? void 0 : _38.cpack) === null || _39 === void 0 ? void 0 : _39.statusBarVisibility}`,
                advanced_cpack_statusBarLength: `${(_41 = (_40 = v.advanced) === null || _40 === void 0 ? void 0 : _40.cpack) === null || _41 === void 0 ? void 0 : _41.statusBarLength}`,
                advanced_cpack_color: `${(_43 = (_42 = v.advanced) === null || _42 === void 0 ? void 0 : _42.cpack) === null || _43 === void 0 ? void 0 : _43.color}`,
                advanced_cpack_projectStatusVisibility: `${(_45 = (_44 = v.advanced) === null || _44 === void 0 ? void 0 : _44.cpack) === null || _45 === void 0 ? void 0 : _45.projectStatusVisibility}`,
                advanced_workflow_statusBarVisibility: `${(_47 = (_46 = v.advanced) === null || _46 === void 0 ? void 0 : _46.workflow) === null || _47 === void 0 ? void 0 : _47.statusBarVisibility}`,
                advanced_workflow_statusBarLength: `${(_49 = (_48 = v.advanced) === null || _48 === void 0 ? void 0 : _48.workflow) === null || _49 === void 0 ? void 0 : _49.statusBarLength}`,
                advanced_workflow_color: `${(_51 = (_50 = v.advanced) === null || _50 === void 0 ? void 0 : _50.workflow) === null || _51 === void 0 ? void 0 : _51.color}`,
                advanced_workflow_projectStatusVisibility: `${(_53 = (_52 = v.advanced) === null || _52 === void 0 ? void 0 : _52.workflow) === null || _53 === void 0 ? void 0 : _53.projectStatusVisibility}`
            });
        });
        this.workspaceConfig.onChange('additionalCompilerSearchDirs', async (_) => {
            kitsController_1.KitsController.additionalCompilerSearchDirs = await this.getAdditionalCompilerDirs();
        });
        this.workspaceConfig.onChange('mingwSearchDirs', async (_) => {
            kitsController_1.KitsController.additionalCompilerSearchDirs = await this.getAdditionalCompilerDirs();
        });
        kitsController_1.KitsController.additionalCompilerSearchDirs = await this.getAdditionalCompilerDirs();
        let isMultiProject = false;
        if (vscode.workspace.workspaceFolders) {
            await this.projectController.loadAllProjects();
            isMultiProject = this.projectController.hasMultipleProjects;
            await setContextAndStore(multiProjectModeKey, isMultiProject);
            this.projectOutline.addAllCurrentFolders();
            if (this.workspaceConfig.autoSelectActiveFolder && isMultiProject) {
                this.statusBar.setAutoSelectActiveProject(true);
            }
            await this.initActiveProject();
        }
        const isFullyActivated = this.workspaceHasAtLeastOneProject();
        await enableFullFeatureSet(isFullyActivated);
        const telemetryProperties = {
            isMultiRoot: `${this.projectController.hasMultipleRoots}`,
            hasMultiProject: `${this.projectController.hasMultipleProjectsInOneFolder}`,
            isFullyActivated: `${isFullyActivated}`
        };
        if (isMultiProject) {
            telemetryProperties['autoSelectActiveFolder'] = `${this.workspaceConfig.autoSelectActiveFolder}`;
        }
        telemetry.sendOpenTelemetry(telemetryProperties);
        // do these last
        this.localizedStrings = await util.getExtensionLocalizedPackageJson();
        this.setExtensionActiveCommands();
    }
    getWorkspaceConfig() {
        return this.workspaceConfig;
    }
    updateContextValues(key, value) {
        this.contextValues[key] = value;
        // contextvalues have changed so update active extension commands.
        if (this.extensionActiveCommandsInfo && (!this.extensionActiveCommandsInfo.contextUsed.hasOwnProperty(key) || this.extensionActiveCommandsInfo.contextUsed[key] !== value)) {
            this.setExtensionActiveCommands();
            this.extensionActiveCommandsEmitter.fire();
        }
    }
    onExtensionActiveCommandsChanged(listener, thisObject) {
        this.extensionActiveCommandsEmitter.event(listener, thisObject);
    }
    get extensionActiveCommands() {
        return this.extensionActiveCommandsInfo ? this.extensionActiveCommandsInfo.extensionActiveCommands : [];
    }
    get extensionLocalizedStrings() {
        return this.localizedStrings;
    }
    setExtensionActiveCommands() {
        this.extensionActiveCommandsInfo = { contextUsed: this.contextValues ? Object.assign({}, this.contextValues) : {}, extensionActiveCommands: this.contextValues ? util.thisExtensionActiveCommands(this.contextValues) : [] };
    }
    getFolderContext(folder) {
        return new state_1.StateManager(this.extensionContext, folder);
    }
    showStatusBar(fullFeatureSet) {
        this.statusBar.setVisible(fullFeatureSet);
    }
    getStatusBar() {
        return this.statusBar;
    }
    /**
     * Create a new extension manager instance. There must only be one!
     * @param ctx The extension context
     */
    static async create(ctx) {
        const inst = new ExtensionManager(ctx);
        return inst;
    }
    getProjectsForWorkspaceFolder(folder) {
        folder = this.getWorkspaceFolder(folder);
        return this.projectController.getProjectsForWorkspaceFolder(folder);
    }
    getWorkspaceFolder(folder) {
        if (vscode.workspace.workspaceFolders && vscode.workspace.workspaceFolders.length === 1) {
            // We don't want to break existing setup for single root projects.
            return vscode.workspace.workspaceFolders[0];
        }
        if (util.isString(folder)) {
            // Expected schema is file...
            return vscode.workspace.getWorkspaceFolder(vscode.Uri.file(folder));
        }
        const workspaceFolder = folder;
        if (util.isNullOrUndefined(folder) || util.isNullOrUndefined(workspaceFolder.uri)) {
            return this.activeCMakeWorkspaceFolder();
        }
        return workspaceFolder;
    }
    /**
     * Ensure that there is an active kit or configure preset for the current CMakeProject.
     *
     * @returns `false` if there is not active CMakeProject, or it has no active kit
     * and the user cancelled the kit selection dialog.
     */
    async ensureActiveConfigurePresetOrKit(cmakeProject) {
        if (!cmakeProject) {
            cmakeProject = this.getActiveProject();
        }
        if (!cmakeProject) {
            // No CMakeProject. Probably no workspace open.
            return false;
        }
        if (cmakeProject.useCMakePresets) {
            if (cmakeProject.configurePreset) {
                return true;
            }
            const didChoosePreset = await this.selectConfigurePreset(cmakeProject.workspaceFolder);
            if (!didChoosePreset && !cmakeProject.configurePreset) {
                return false;
            }
            return !!cmakeProject.configurePreset;
        }
        else {
            if (cmakeProject.activeKit) {
                // We have an active kit. We're good.
                return true;
            }
            // No kit? Ask the user what they want.
            const didChooseKit = await this.selectKit(cmakeProject.workspaceFolder);
            if (!didChooseKit && !cmakeProject.activeKit) {
                // The user did not choose a kit and kit isn't set in other way such as setKitByName
                return false;
            }
            // Return whether we have an active kit defined.
            return !!cmakeProject.activeKit;
        }
    }
    /**
     * Dispose of the CMake Tools extension.
     *
     * If you can, prefer to call `asyncDispose`, which awaits on the children.
     */
    dispose() {
        rollbar_1.default.invokeAsync(localize(1, null), () => this.asyncDispose());
    }
    /**
     * Asynchronously dispose of all the child objects.
     */
    async asyncDispose() {
        this.disposeSubs();
        this.codeModelUpdateSubs.forEach(subs => subs.forEach(sub => sub.dispose()));
        this.onDidChangeActiveTextEditorSub.dispose();
        void this.kitsWatcher.close();
        this.projectOutlineTreeView.dispose();
        this.extensionActiveCommandsEmitter.dispose();
        pinnedCommands.dispose();
        if (this.cppToolsAPI) {
            this.cppToolsAPI.dispose();
        }
        if (this.projectStatus) {
            this.projectStatus.dispose();
        }
        await this.projectController.dispose();
        await telemetry.deactivate();
    }
    async configureExtensionInternal(trigger, project) {
        if (trigger !== cmakeProject_1.ConfigureTrigger.configureWithCache && !await this.ensureActiveConfigurePresetOrKit(project)) {
            return;
        }
        await project.configureInternal(trigger, [], cmakeProject_1.ConfigureType.Normal);
    }
    async postWorkspaceOpen(project) {
        if (!project) {
            return;
        }
        const rootFolder = project.workspaceFolder;
        project.addTestExplorerRoot(project.folderPath);
        // Scan for kits even under presets mode, so we can create presets from compilers.
        // Silent re-scan when detecting a breaking change in the kits definition.
        // Do this only for the first folder, to avoid multiple rescans taking place in a multi-root workspace.
        const silentScanForKitsNeeded = vscode.workspace.workspaceFolders !== undefined &&
            vscode.workspace.workspaceFolders[0] === rootFolder &&
            await (0, kit_1.scanForKitsIfNeeded)(project);
        let shouldConfigure = project === null || project === void 0 ? void 0 : project.workspaceContext.config.configureOnOpen;
        if (shouldConfigure === null && !util.isTestMode()) {
            const chosen = await vscode.window.showInformationMessage(localize(2, null, `"${rootFolder.name}"`), {}, { title: localize(3, null), doConfigure: true }, { title: localize(4, null), doConfigure: false });
            if (!chosen) {
                // User cancelled.
                shouldConfigure = null;
            }
            else {
                const persistMessage = chosen.doConfigure ?
                    localize(5, null) :
                    localize(6, null);
                const buttonMessages = chosen.doConfigure ?
                    [localize(7, null), localize(8, null)] :
                    [localize(9, null), localize(10, null)];
                // Try to persist the user's selection to a `settings.json`
                const prompt = vscode.window.showInformationMessage(persistMessage, {}, { title: buttonMessages[0], persistMode: 'user' }, { title: buttonMessages[1], persistMode: 'workspace' })
                    .then(async (choice) => {
                    if (!choice) {
                        // Use cancelled. Do nothing.
                        return;
                    }
                    const config = vscode.workspace.getConfiguration(undefined, rootFolder.uri);
                    let configTarget = vscode.ConfigurationTarget.Global;
                    if (choice.persistMode === 'workspace') {
                        configTarget = vscode.ConfigurationTarget.WorkspaceFolder;
                    }
                    await config.update('cmake.configureOnOpen', chosen.doConfigure, configTarget);
                });
                rollbar_1.default.takePromise(localize(11, null), {}, prompt);
                shouldConfigure = chosen.doConfigure;
            }
        }
        if (!project.hasCMakeLists()) {
            if (shouldConfigure === true) {
                await project.cmakePreConditionProblemHandler(cmakeDriver_1.CMakePreconditionProblems.MissingCMakeListsFile, false, this.workspaceConfig);
            }
        }
        else {
            if (shouldConfigure === true) {
                // We've opened a new workspace folder, and the user wants us to
                // configure it now.
                log.debug(localize(12, null, project.folderPath));
                await this.configureExtensionInternal(cmakeProject_1.ConfigureTrigger.configureOnOpen, project);
            }
            else {
                const configureButtonMessage = localize(13, null);
                let result;
                if (silentScanForKitsNeeded) {
                    // This popup will show up the first time after deciding not to configure, if a version change has been detected
                    // in the kits definition. This may happen during a CMake Tools extension upgrade.
                    // The warning is emitted only once because scanForKitsIfNeeded returns true only once after such change,
                    // being tied to a global state variable.
                    result = await vscode.window.showWarningMessage(localize(14, null), configureButtonMessage);
                }
                if (result === configureButtonMessage) {
                    await this.configureExtensionInternal(cmakeProject_1.ConfigureTrigger.buttonNewKitsDefinition, project);
                }
                else {
                    log.debug(localize(15, null, rootFolder.uri.toString()));
                    await this.configureExtensionInternal(cmakeProject_1.ConfigureTrigger.configureWithCache, project);
                }
            }
        }
    }
    async onDidChangeActiveTextEditor(editor) {
        if (this.workspaceConfig.autoSelectActiveFolder && this.projectController.hasMultipleProjects && vscode.workspace.workspaceFolders) {
            let folder;
            if (editor) {
                folder = vscode.workspace.getWorkspaceFolder(editor.document.uri);
            }
            if (folder) {
                if (!this.activeCMakeWorkspaceFolder() || folder.uri.fsPath !== this.activeFolderPath()) {
                    // active folder changed.
                    await this.updateActiveProject(folder, editor);
                }
            }
            else if (!folder && !this.activeCMakeWorkspaceFolder() && vscode.workspace.workspaceFolders.length >= 1) {
                await this.updateActiveProject(vscode.workspace.workspaceFolders[0], editor);
            }
            else if (!folder) {
                // When adding a folder but the focus is on somewhere else
                // Do nothing but make sure we are showing the active folder correctly
                this.statusBar.update();
            }
        }
    }
    /**
     * Show UI to allow the user to select an active project
     */
    async selectActiveFolder(project) {
        var _a;
        let selection;
        if (project instanceof cmakeProject_1.CMakeProject) {
            selection = project;
        }
        else if (Array.isArray(project) && project.length > 0 && typeof project[0] === "string") {
            const projects = this.projectController.getAllCMakeProjects();
            if (projects.length !== 0) {
                selection = projects.find(proj => proj.folderName === project[0]);
            }
        }
        else if ((_a = vscode.workspace.workspaceFolders) === null || _a === void 0 ? void 0 : _a.length) {
            selection = await this.pickCMakeProject();
        }
        if (selection) {
            // Ignore if user cancelled
            await this.setActiveProject(selection);
            telemetry.logEvent("selectactivefolder");
            const currentActiveFolderPath = this.activeFolderPath();
            await this.extensionContext.workspaceState.update('activeFolder', currentActiveFolderPath);
        }
    }
    async initActiveProject() {
        let folder;
        if (vscode.workspace.workspaceFolders && vscode.window.activeTextEditor && this.workspaceConfig.autoSelectActiveFolder) {
            folder = vscode.workspace.getWorkspaceFolder(vscode.window.activeTextEditor.document.uri);
            await this.updateActiveProject(folder !== null && folder !== void 0 ? folder : vscode.workspace.workspaceFolders[0], folder ? vscode.window.activeTextEditor : undefined);
            return this.getActiveProject();
        }
        const activeFolder = this.extensionContext.workspaceState.get('activeFolder');
        if (activeFolder) {
            folder = vscode.workspace.getWorkspaceFolder(vscode.Uri.parse(activeFolder));
        }
        if (!folder) {
            folder = vscode.workspace.workspaceFolders[0];
        }
        await this.updateActiveProject(folder, vscode.window.activeTextEditor);
        return this.getActiveProject();
    }
    // Update the active project
    async updateActiveProject(workspaceFolder, editor) {
        await this.projectController.updateActiveProject(workspaceFolder, editor, this.workspaceConfig.options);
        await this.postUpdateActiveProject();
    }
    // Update the active project from the staus bar
    async setActiveProject(project) {
        await this.projectController.setActiveProject(project);
        await this.postUpdateActiveProject();
    }
    async updateStatusBarForActiveProjectChange() {
        await this.postUpdateActiveProject();
    }
    async postUpdateActiveProject() {
        var _a;
        const activeProject = this.getActiveProject();
        if (activeProject) {
            this.statusBar.setActiveProjectName(activeProject.folderName, this.projectController.hasMultipleProjects);
            const useCMakePresets = (activeProject === null || activeProject === void 0 ? void 0 : activeProject.useCMakePresets) || false;
            this.statusBar.useCMakePresets(useCMakePresets);
            if (!useCMakePresets) {
                this.statusBar.setActiveKitName(((_a = activeProject.activeKit) === null || _a === void 0 ? void 0 : _a.name) || '');
            }
            this.projectOutline.setActiveFolder(activeProject.folderPath);
            this.setupSubscriptions();
            this.onActiveProjectChangedEmitter.fire(vscode.Uri.file(activeProject.folderPath));
            const currentActiveFolderPath = this.activeFolderPath();
            await this.extensionContext.workspaceState.update('activeFolder', currentActiveFolderPath);
        }
    }
    disposeSubs() {
        util.disposeAll(this.projectSubscriptions);
        for (const sub of [this.statusMessageSub, this.targetNameSub, this.buildTypeSub, this.launchTargetSub, this.ctestEnabledSub, this.isBusySub, this.activeConfigurePresetSub, this.activeBuildPresetSub, this.activeTestPresetSub, this.activePackagePresetSub, this.activeWorkflowPresetSub]) {
            sub.dispose();
        }
    }
    updateCodeModel(cmakeProject) {
        if (!cmakeProject) {
            return;
        }
        const folder = cmakeProject.workspaceFolder;
        this.projectOutline.updateCodeModel(cmakeProject, cmakeProject.codeModelContent);
        rollbar_1.default.invokeAsync(localize(16, null), {}, async () => {
            var _a;
            if (((_a = vscode.workspace.getConfiguration('C_Cpp', folder.uri).get('intelliSenseEngine')) === null || _a === void 0 ? void 0 : _a.toLocaleLowerCase()) === 'disabled') {
                log.debug(localize(17, null, '"C_Cpp.intelliSenseEngine"', '"Disabled"'));
                return;
            }
            if (!this.cppToolsAPI && !util.isTestMode()) {
                try {
                    this.cppToolsAPI = await cpt.getCppToolsApi(cpt.Version.latest);
                }
                catch (err) {
                    log.debug(localize(18, null));
                }
            }
            if (this.cppToolsAPI && (cmakeProject.activeKit || cmakeProject.configurePreset)) {
                const cpptools = this.cppToolsAPI;
                let cache;
                try {
                    cache = await cache_1.CMakeCache.fromPath(await cmakeProject.cachePath);
                }
                catch (e) {
                    rollbar_1.default.exception(localize(19, null), e);
                    return;
                }
                const drv = await cmakeProject.getCMakeDriverInstance();
                const configureEnv = await (drv === null || drv === void 0 ? void 0 : drv.getConfigureEnvironment());
                const configurationTypes = cache.get('CMAKE_CONFIGURATION_TYPES');
                const isMultiConfig = !!configurationTypes;
                if (drv) {
                    drv.isMultiConfig = isMultiConfig;
                }
                const actualBuildType = await cmakeProject.currentBuildType();
                const clCompilerPath = await (0, kit_1.findCLCompilerPath)(configureEnv);
                this.configProvider.cpptoolsVersion = cpptools.getVersion();
                let codeModelContent;
                if (cmakeProject.codeModelContent) {
                    codeModelContent = cmakeProject.codeModelContent;
                    this.configProvider.updateConfigurationData({ cache, codeModelContent, clCompilerPath, activeTarget: cmakeProject.defaultBuildTarget, activeBuildTypeVariant: actualBuildType, folder: cmakeProject.folderPath });
                }
                else if (drv && drv.codeModelContent) {
                    codeModelContent = drv.codeModelContent;
                    this.configProvider.updateConfigurationData({ cache, codeModelContent, clCompilerPath, activeTarget: cmakeProject.defaultBuildTarget, activeBuildTypeVariant: actualBuildType, folder: cmakeProject.folderPath });
                    this.projectOutline.updateCodeModel(cmakeProject, codeModelContent);
                }
                // Inform cpptools that custom CppConfigurationProvider will be able to service the current workspace.
                this.ensureCppToolsProviderRegistered();
                if (this.configProvider.ready) {
                    // TODO: Make this smarter and only notify when there are changes to files that have been requested by cpptools already.
                    cpptools.didChangeCustomBrowseConfiguration(this.configProvider);
                    cpptools.didChangeCustomConfiguration(this.configProvider);
                }
                else {
                    // we should only initialize and call the cpptools notifyReady if we actually have content.
                    if (codeModelContent) {
                        this.configProvider.markAsReady();
                        if (cpptools.notifyReady) {
                            // Notify cpptools that the provider is ready to provide IntelliSense configurations.
                            cpptools.notifyReady(this.configProvider);
                        }
                        else {
                            cpptools.didChangeCustomBrowseConfiguration(this.configProvider);
                            cpptools.didChangeCustomConfiguration(this.configProvider);
                        }
                    }
                }
            }
        });
    }
    setupSubscriptions() {
        this.disposeSubs();
        const cmakeProject = this.getActiveProject();
        // Note: No package nor workflow preset info in the status bar
        if (!cmakeProject) {
            this.statusBar.setVisible(false);
            this.statusMessageSub = new util_1.DummyDisposable();
            this.targetNameSub = new util_1.DummyDisposable();
            this.buildTypeSub = new util_1.DummyDisposable();
            this.launchTargetSub = new util_1.DummyDisposable();
            this.ctestEnabledSub = new util_1.DummyDisposable();
            this.isBusySub = new util_1.DummyDisposable();
            this.activeConfigurePresetSub = new util_1.DummyDisposable();
            this.activeBuildPresetSub = new util_1.DummyDisposable();
            this.activeTestPresetSub = new util_1.DummyDisposable();
            this.activePackagePresetSub = new util_1.DummyDisposable();
            this.activeWorkflowPresetSub = new util_1.DummyDisposable();
            this.statusBar.setActiveKitName('');
            this.statusBar.setConfigurePresetName('');
            this.statusBar.setBuildPresetName('');
            this.statusBar.setTestPresetName('');
            this.statusBar.setPackagePresetName('');
            this.statusBar.setWorkflowPresetName('');
        }
        else {
            this.statusMessageSub = cmakeProject.onStatusMessageChanged(prop_1.FireNow, s => this.statusBar.setStatusMessage(s));
            this.targetNameSub = cmakeProject.onTargetNameChanged(prop_1.FireNow, t => {
                this.statusBar.setBuildTargetName(t);
                this.onBuildTargetChangedEmitter.fire(t);
            });
            this.buildTypeSub = cmakeProject.onActiveVariantNameChanged(prop_1.FireNow, bt => this.statusBar.setVariantLabel(bt));
            this.launchTargetSub = cmakeProject.onLaunchTargetNameChanged(prop_1.FireNow, t => {
                this.statusBar.setLaunchTargetName(t || '');
                this.onLaunchTargetChangedEmitter.fire(t || '');
            });
            this.ctestEnabledSub = cmakeProject.onCTestEnabledChanged(prop_1.FireNow, e => this.statusBar.setCTestEnabled(e));
            this.isBusySub = cmakeProject.onIsBusyChanged(prop_1.FireNow, b => this.statusBar.setIsBusy(b));
            this.statusBar.setActiveKitName(cmakeProject.activeKit ? cmakeProject.activeKit.name : '');
            this.activeConfigurePresetSub = cmakeProject.onActiveConfigurePresetChanged(prop_1.FireNow, p => {
                this.statusBar.setConfigurePresetName((p === null || p === void 0 ? void 0 : p.displayName) || (p === null || p === void 0 ? void 0 : p.name) || '');
            });
            this.activeBuildPresetSub = cmakeProject.onActiveBuildPresetChanged(prop_1.FireNow, p => {
                this.statusBar.setBuildPresetName((p === null || p === void 0 ? void 0 : p.displayName) || (p === null || p === void 0 ? void 0 : p.name) || '');
            });
            this.activeTestPresetSub = cmakeProject.onActiveTestPresetChanged(prop_1.FireNow, p => {
                this.statusBar.setTestPresetName((p === null || p === void 0 ? void 0 : p.displayName) || (p === null || p === void 0 ? void 0 : p.name) || '');
            });
            this.activePackagePresetSub = cmakeProject.onActivePackagePresetChanged(prop_1.FireNow, p => {
                this.statusBar.setPackagePresetName((p === null || p === void 0 ? void 0 : p.displayName) || (p === null || p === void 0 ? void 0 : p.name) || '');
            });
            this.activeWorkflowPresetSub = cmakeProject.onActiveWorkflowPresetChanged(prop_1.FireNow, p => {
                this.statusBar.setWorkflowPresetName((p === null || p === void 0 ? void 0 : p.displayName) || (p === null || p === void 0 ? void 0 : p.name) || '');
            });
        }
    }
    /**
     * Opens a text editor with the user-local `cmake-kits.json` file.
     */
    async editKits() {
        log.debug(localize(20, null, kit_1.USER_KITS_FILEPATH));
        if (!await pr_1.fs.exists(kit_1.USER_KITS_FILEPATH)) {
            const chosen = await vscode.window.showInformationMessage(localize(21, null), { modal: true }, {
                title: localize(22, null),
                action: 'scan'
            }, {
                title: localize(23, null),
                isCloseAffordance: true,
                action: 'cancel'
            });
            if (!chosen || chosen.action === 'cancel') {
                return null;
            }
            else {
                await this.scanForKits();
                return this.editKits();
            }
        }
        const doc = await vscode.workspace.openTextDocument(kit_1.USER_KITS_FILEPATH);
        return vscode.window.showTextDocument(doc);
    }
    async scanForCompilers() {
        var _a;
        await this.scanForKits();
        await ((_a = this.getActiveProject()) === null || _a === void 0 ? void 0 : _a.presetsController.reapplyPresets());
    }
    async scanForKits() {
        kitsController_1.KitsController.additionalCompilerSearchDirs = await this.getAdditionalCompilerDirs();
        if (!vscode.workspace.workspaceFolders || vscode.workspace.workspaceFolders.length < 1) {
            return;
        }
        const workspaceContext = workspace_1.DirectoryContext.createForDirectory(vscode.workspace.workspaceFolders[0], new state_1.StateManager(this.extensionContext, vscode.workspace.workspaceFolders[0]));
        const cmakePath = await workspaceContext.getCMakePath() || '';
        const duplicateRemoved = await kitsController_1.KitsController.scanForKits(cmakePath);
        if (duplicateRemoved) {
            // Check each project. If there is an active kit set and if it is of the old definition, unset the kit.
            for (const project of this.projectController.getAllCMakeProjects()) {
                const activeKit = project.activeKit;
                if (activeKit) {
                    const definition = activeKit.visualStudio;
                    if (definition && (definition.startsWith("VisualStudio.15") || definition.startsWith("VisualStudio.16"))) {
                        await project.kitsController.setFolderActiveKit(null);
                    }
                }
            }
        }
    }
    /**
     * Get the current additional compiler search directories, like MinGW directories
     */
    async getAdditionalCompilerDirs() {
        const optsVars = {
            userHome: paths_1.default.userHome,
            // This is called during scanning for kits, which is an operation that happens
            // outside the scope of a project folder, so it doesn't need the below variables.
            buildKit: "",
            buildType: "",
            generator: "",
            workspaceFolder: "",
            workspaceFolderBasename: "",
            workspaceHash: "",
            workspaceRoot: "",
            workspaceRootFolderName: "",
            buildKitVendor: "",
            buildKitTriple: "",
            buildKitVersion: "",
            buildKitHostOs: "",
            buildKitTargetOs: "",
            buildKitTargetArch: "",
            buildKitVersionMajor: "",
            buildKitVersionMinor: "",
            projectName: "",
            sourceDir: ""
        };
        const result = new Set();
        for (const dir of this.workspaceConfig.additionalCompilerSearchDirs) {
            const expandedDir = util.lightNormalizePath(await (0, expand_1.expandString)(dir, { vars: optsVars }));
            result.add(expandedDir);
        }
        return Array.from(result);
    }
    /**
     * Show UI to allow the user to select an active kit
     */
    async selectKit(folder) {
        if (util.isTestMode()) {
            log.trace(localize(24, null));
            return false;
        }
        const cmakeProject = this.getProjectsForWorkspaceFolder(folder);
        if (!cmakeProject) {
            return false;
        }
        const activeProject = this.getActiveProject();
        const kitSelected = await (activeProject === null || activeProject === void 0 ? void 0 : activeProject.kitsController.selectKit());
        let kitSelectionType;
        const activeKit = activeProject === null || activeProject === void 0 ? void 0 : activeProject.activeKit;
        if (activeKit) {
            this.statusBar.setActiveKitName(activeKit.name);
            if (activeKit.name === "__unspec__") {
                kitSelectionType = "unspecified";
            }
            else {
                if (activeKit.visualStudio ||
                    activeKit.visualStudioArchitecture) {
                    kitSelectionType = "vsInstall";
                }
                else {
                    kitSelectionType = "compilerSet";
                }
            }
        }
        if (kitSelectionType) {
            const telemetryProperties = {
                type: kitSelectionType
            };
            telemetry.logEvent('kitSelection', telemetryProperties);
        }
        if (kitSelected) {
            return true;
        }
        return false;
    }
    /**
     * Set the current kit used in the specified folder by name of the kit
     * For backward compatibility, apply kitName to all folders if folder is undefined
     */
    async setKitByName(kitName, folder) {
        var _a;
        const projects = folder ? this.projectController.getProjectsForWorkspaceFolder(folder) : this.projectController.getAllCMakeProjects();
        for (const project of projects || []) {
            await project.kitsController.setKitByName(kitName);
        }
        const activeKit = (_a = this.getActiveProject()) === null || _a === void 0 ? void 0 : _a.activeKit;
        if (activeKit) {
            this.statusBar.setActiveKitName(activeKit.name);
        }
    }
    /**
     * Set the current preset used in the specified folder by name of the preset
     * For backward compatibility, apply preset to all folders if folder is undefined
     */
    async setConfigurePreset(presetName, folder) {
        var _a;
        if (folder) {
            if (!this.useCMakePresets(folder)) {
                log.info(localize(25, null, presetName));
                return;
            }
            await ((_a = this.getActiveProject()) === null || _a === void 0 ? void 0 : _a.presetsController.setConfigurePreset(presetName));
        }
        else {
            for (const project of this.projectController.getAllCMakeProjects()) {
                if (!project.useCMakePresets) {
                    log.info(localize(26, null, presetName));
                    return;
                }
                await project.presetsController.setConfigurePreset(presetName);
            }
        }
    }
    async setBuildPreset(presetName, folder) {
        var _a;
        if (folder) {
            if (!this.useCMakePresets(folder)) {
                log.info(localize(27, null, presetName));
                return;
            }
            await ((_a = this.getActiveProject()) === null || _a === void 0 ? void 0 : _a.presetsController.setBuildPreset(presetName));
        }
        else {
            for (const project of this.projectController.getAllCMakeProjects()) {
                if (!project.useCMakePresets) {
                    log.info(localize(28, null, presetName));
                    return;
                }
                await project.presetsController.setBuildPreset(presetName);
            }
        }
    }
    async setTestPreset(presetName, folder) {
        var _a;
        if (folder) {
            if (!this.useCMakePresets(folder)) {
                log.info(localize(29, null, presetName));
                return;
            }
            await ((_a = this.getActiveProject()) === null || _a === void 0 ? void 0 : _a.presetsController.setTestPreset(presetName));
        }
        else {
            for (const project of this.projectController.getAllCMakeProjects()) {
                if (!project.useCMakePresets) {
                    log.info(localize(30, null, presetName));
                    return;
                }
                await project.presetsController.setTestPreset(presetName);
            }
        }
    }
    async setPackagePreset(presetName, folder) {
        var _a;
        if (folder) {
            if (!this.useCMakePresets(folder)) {
                log.info(localize(31, null, presetName));
                return;
            }
            await ((_a = this.getActiveProject()) === null || _a === void 0 ? void 0 : _a.presetsController.setPackagePreset(presetName));
        }
        else {
            for (const project of this.projectController.getAllCMakeProjects()) {
                if (!project.useCMakePresets) {
                    log.info(localize(32, null, presetName));
                    return;
                }
                await project.presetsController.setPackagePreset(presetName);
            }
        }
    }
    async setWorkflowPreset(presetName, folder) {
        var _a;
        if (folder) {
            if (!this.useCMakePresets(folder)) {
                log.info(localize(33, null, presetName));
                return;
            }
            await ((_a = this.getActiveProject()) === null || _a === void 0 ? void 0 : _a.presetsController.setWorkflowPreset(presetName));
        }
        else {
            for (const project of this.projectController.getAllCMakeProjects()) {
                if (!project.useCMakePresets) {
                    log.info(localize(34, null, presetName));
                    return;
                }
                await project.presetsController.setWorkflowPreset(presetName);
            }
        }
    }
    useCMakePresets(folder) {
        return this.projectController.useCMakePresetsForFolder(folder);
    }
    ensureCppToolsProviderRegistered() {
        if (!this.configProviderRegistered) {
            this.doRegisterCppTools();
            this.configProviderRegistered = true;
        }
    }
    doRegisterCppTools() {
        if (this.cppToolsAPI) {
            this.cppToolsAPI.registerCustomConfigurationProvider(this.configProvider);
        }
    }
    cleanOutputChannel() {
        if (this.workspaceConfig.clearOutputBeforeBuild) {
            log.clearOutputChannel();
        }
    }
    // The below functions are all wrappers around the backend.
    async runCMakeCommandForProject(command, cmakeProject = this.getActiveProject(), precheck) {
        if (!cmakeProject) {
            rollbar_1.default.error(localize(35, null));
            return -2;
        }
        if (!await this.ensureActiveConfigurePresetOrKit(cmakeProject)) {
            return -1;
        }
        if (precheck && !await precheck(cmakeProject)) {
            return -100;
        }
        return command(cmakeProject);
    }
    async runCMakeCommandForAll(command, precheck, cleanOutputChannel) {
        if (cleanOutputChannel) {
            this.cleanOutputChannel();
        }
        const projects = this.projectController.getAllCMakeProjects();
        for (const project of projects) {
            if (!await this.ensureActiveConfigurePresetOrKit(project)) {
                return -1;
            }
            if (precheck && !await precheck(project)) {
                return -100;
            }
            const retc = await command(project);
            if (retc) {
                return retc;
            }
        }
        // Succeeded
        return 0;
    }
    getProjectFromFolder(folder, sourceDir) {
        var _a, _b;
        const workspaceFolder = this.getWorkspaceFolder(folder);
        if (workspaceFolder) {
            const activeProject = this.getActiveProject();
            const projects = this.projectController.getProjectsForWorkspaceFolder(workspaceFolder);
            if (!projects || projects.length === 0) {
                return activeProject;
            }
            else {
                // Choose project by corresponding source directory
                return (_b = (_a = projects.find(project => sourceDir && (path.normalize(sourceDir) === path.normalize(project.folderPath)))) !== null && _a !== void 0 ? _a : projects.find(project => (activeProject === null || activeProject === void 0 ? void 0 : activeProject.folderPath) === project.folderPath)) !== null && _b !== void 0 ? _b : projects[0];
            }
        }
        return undefined;
    }
    runCMakeCommand(command, folder, precheck, cleanOutputChannel, sourceDir) {
        if (cleanOutputChannel) {
            this.cleanOutputChannel();
        }
        const project = this.getProjectFromFolder(folder, sourceDir);
        if (project) {
            return this.runCMakeCommandForProject(command, project, precheck);
        }
        rollbar_1.default.error(localize(36, null));
        return this.runCMakeCommandForProject(command, project, precheck);
    }
    queryCMakeProject(query, folder) {
        const project = this.getProjectFromFolder(folder);
        if (project) {
            return query(project);
        }
        rollbar_1.default.error(localize(37, null));
        return Promise.resolve(null);
    }
    cleanConfigure(folder) {
        telemetry.logEvent("deleteCacheAndReconfigure");
        return this.runCMakeCommand(cmakeProject => cmakeProject.cleanConfigure(cmakeProject_1.ConfigureTrigger.commandCleanConfigure), folder, undefined, true);
    }
    cleanConfigureWithDebugger(folder) {
        return this.cleanConfigureWithDebuggerInternal({ pipeName: (0, debuggerConfigureDriver_1.getDebuggerPipeName)() }, folder);
    }
    cleanConfigureWithDebuggerInternal(debuggerInformation, folder) {
        telemetry.logEvent("deleteCacheAndReconfigureWithDebugger");
        return this.runCMakeCommand(cmakeProject => cmakeProject.cleanConfigureWithDebugger(cmakeProject_1.ConfigureTrigger.commandCleanConfigureWithDebugger, debuggerInformation), folder, undefined, true);
    }
    cleanConfigureAll() {
        telemetry.logEvent("deleteCacheAndReconfigure");
        return this.runCMakeCommandForAll(cmakeProject => cmakeProject.cleanConfigure(cmakeProject_1.ConfigureTrigger.commandCleanConfigureAll), undefined, true);
    }
    cleanConfigureAllWithDebugger(trigger) {
        return this.cleanConfigureAllWithDebuggerInternal({ pipeName: (0, debuggerConfigureDriver_1.getDebuggerPipeName)() }, trigger);
    }
    cleanConfigureAllWithDebuggerInternal(debuggerInformation, trigger) {
        telemetry.logEvent("deleteCacheAndReconfigureWithDebugger");
        return this.runCMakeCommandForAll(cmakeProject => cmakeProject.cleanConfigureWithDebugger(trigger !== null && trigger !== void 0 ? trigger : cmakeProject_1.ConfigureTrigger.commandCleanConfigureAllWithDebugger, debuggerInformation), undefined, true);
    }
    configure(folder, showCommandOnly, sourceDir) {
        telemetry.logEvent("configure", { all: "false", debug: "false" });
        return this.runCMakeCommand(async (cmakeProject) => (await cmakeProject.configureInternal(cmakeProject_1.ConfigureTrigger.commandConfigure, [], showCommandOnly ? cmakeProject_1.ConfigureType.ShowCommandOnly : cmakeProject_1.ConfigureType.Normal)).result, folder, undefined, true, sourceDir);
    }
    configureWithDebugger(folder, sourceDir, trigger) {
        return this.configureWithDebuggerInternal({ pipeName: (0, debuggerConfigureDriver_1.getDebuggerPipeName)() }, folder, undefined, sourceDir, trigger);
    }
    configureWithDebuggerInternal(debuggerInformation, folder, showCommandOnly, sourceDir, trigger) {
        telemetry.logEvent("configure", { all: "false", debug: "true" });
        return this.runCMakeCommand(async (cmakeProject) => (await cmakeProject.configureInternal(trigger !== null && trigger !== void 0 ? trigger : cmakeProject_1.ConfigureTrigger.commandConfigureWithDebugger, [], showCommandOnly ? cmakeProject_1.ConfigureType.ShowCommandOnly : cmakeProject_1.ConfigureType.NormalWithDebugger, debuggerInformation)).result, folder, undefined, true, sourceDir);
    }
    showConfigureCommand(folder) {
        return this.configure(folder, true, undefined);
    }
    configureAll() {
        telemetry.logEvent("configure", { all: "true", debug: "false" });
        return this.runCMakeCommandForAll(async (cmakeProject) => ((await cmakeProject.configureInternal(cmakeProject_1.ConfigureTrigger.commandCleanConfigureAll, [], cmakeProject_1.ConfigureType.Normal)).result), undefined, true);
    }
    configureAllWithDebugger(trigger) {
        return this.configureAllWithDebuggerInternal({ pipeName: (0, debuggerConfigureDriver_1.getDebuggerPipeName)() }, trigger);
    }
    configureAllWithDebuggerInternal(debuggerInformation, trigger) {
        // I need to add ConfigureTriggers that account for coming from the project status view or project outline.
        telemetry.logEvent("configure", { all: "true", debug: "true" });
        return this.runCMakeCommandForAll(async (cmakeProject) => (await cmakeProject.configureInternal(trigger !== null && trigger !== void 0 ? trigger : cmakeProject_1.ConfigureTrigger.commandConfigureAllWithDebugger, [], cmakeProject_1.ConfigureType.NormalWithDebugger, debuggerInformation)).result, undefined, true);
    }
    editCacheUI() {
        telemetry.logEvent("editCMakeCache", { command: "editCMakeCacheUI" });
        return this.runCMakeCommand(cmakeProject => cmakeProject.editCacheUI());
    }
    build(folder, name, sourceDir, showCommandOnly, isBuildCommand) {
        telemetry.logEvent("build", { all: "false" });
        return this.runCMakeCommand(cmakeProject => {
            const targets = name ? [name] : undefined;
            return cmakeProject.build(targets, showCommandOnly, (isBuildCommand === undefined) ? true : isBuildCommand);
        }, folder, this.ensureActiveBuildPreset, true, sourceDir);
    }
    showBuildCommand(folder, name) {
        return this.build(folder, name, undefined, true, false);
    }
    buildAll(name) {
        telemetry.logEvent("build", { all: "true" });
        return this.runCMakeCommandForAll(cmakeProject => {
            const targets = util.isArrayOfString(name) ? name : util.isString(name) ? [name] : undefined;
            return cmakeProject.build(targets);
        }, this.ensureActiveBuildPreset, true);
    }
    setDefaultTarget(folder, name, sourceDir) {
        return this.runCMakeCommand(cmakeProject => cmakeProject.setDefaultTarget(name), folder, undefined, undefined, sourceDir);
    }
    setVariant(folder, name) {
        return this.runCMakeCommand(cmakeProject => cmakeProject.setVariant(name), folder);
    }
    async setVariantAll() {
        // Only supports default variants for now
        const variantItems = [];
        const choices = variant_1.DEFAULT_VARIANTS.buildType.choices;
        for (const key in choices) {
            variantItems.push({
                label: choices[key].short,
                description: choices[key].long
            });
        }
        const choice = await vscode.window.showQuickPick(variantItems);
        if (choice) {
            return this.runCMakeCommandForAll(cmakeProject => cmakeProject.setVariant(choice.label));
        }
        return false;
    }
    install(folder) {
        telemetry.logEvent("install", { all: "false" });
        return this.runCMakeCommand(cmakeProject => cmakeProject.install(), folder, undefined, true);
    }
    installAll() {
        telemetry.logEvent("install", { all: "true" });
        return this.runCMakeCommandForAll(cmakeProject => cmakeProject.install(), undefined, true);
    }
    editCache(folder) {
        telemetry.logEvent("editCMakeCache", { command: "editCMakeCache" });
        return this.runCMakeCommand(cmakeProject => cmakeProject.editCache(), folder);
    }
    clean(folder) {
        telemetry.logEvent("clean", { all: "false" });
        return this.build(folder, 'clean', undefined, undefined, false);
    }
    cleanAll() {
        telemetry.logEvent("clean", { all: "true" });
        return this.buildAll(['clean']);
    }
    cleanRebuild(folder) {
        telemetry.logEvent("cleanRebuild", { all: "false" });
        return this.runCMakeCommand(cmakeProject => cmakeProject.cleanRebuild(), folder, this.ensureActiveBuildPreset, true);
    }
    cleanRebuildAll() {
        telemetry.logEvent("cleanRebuild", { all: "true" });
        return this.runCMakeCommandForAll(cmakeProject => cmakeProject.cleanRebuild(), this.ensureActiveBuildPreset, true);
    }
    async buildWithTarget() {
        telemetry.logEvent("build", { command: "buildWithTarget", all: "false" });
        this.cleanOutputChannel();
        let activeProject = this.getActiveProject();
        if (!activeProject) {
            activeProject = await this.pickCMakeProject();
            if (!activeProject) {
                return; // Error or nothing is opened
            }
        }
        else {
            return activeProject.buildWithTarget();
        }
    }
    async pickCMakeProject() {
        const projects = this.projectController.getAllCMakeProjects();
        if (projects.length === 0) {
            return undefined;
        }
        const items = projects.map(project => {
            const item = {
                label: project.folderName,
                cmakeProject: project,
                description: project.folderPath
            };
            return item;
        });
        const selection = await vscode.window.showQuickPick(items, { placeHolder: localize(38, null) });
        if (selection) {
            console.assert(selection.cmakeProject.folderName, 'Project not found in project controller.');
            return selection.cmakeProject;
        }
    }
    /**
     * Compile a single source file.
     * @param file The file to compile. Either a file path or the URI to the file.
     * If not provided, compiles the file in the active text editor.
     */
    async compileFile(file) {
        this.cleanOutputChannel();
        if (file instanceof vscode.Uri) {
            file = file.fsPath;
        }
        if (!file) {
            const editor = vscode.window.activeTextEditor;
            if (!editor) {
                return null;
            }
            file = editor.document.uri.fsPath;
        }
        for (const project of this.projectController.getAllCMakeProjects()) {
            const term = await project.tryCompileFile(file);
            if (term) {
                return term;
            }
        }
        void vscode.window.showErrorMessage(localize(39, null));
    }
    async selectWorkspace(folder) {
        if (!folder) {
            return;
        }
        await this.updateActiveProject(folder);
    }
    ctest(folder) {
        telemetry.logEvent("runTests", { all: "false" });
        return this.runCMakeCommand(cmakeProject => cmakeProject.ctest(), folder, this.ensureActiveTestPreset);
    }
    ctestAll() {
        telemetry.logEvent("runTests", { all: "true" });
        return this.runCMakeCommandForAll(cmakeProject => cmakeProject.ctest(), this.ensureActiveTestPreset);
    }
    cpack(folder) {
        telemetry.logEvent("runCPack", { all: "false" });
        return this.runCMakeCommand(cmakeProject => cmakeProject.cpack(), folder, this.ensureActivePackagePreset);
    }
    cpackAll() {
        telemetry.logEvent("runCPack", { all: "true" });
        return this.runCMakeCommandForAll(cmakeProject => cmakeProject.cpack(), this.ensureActivePackagePreset);
    }
    workflow(folder) {
        telemetry.logEvent("runWorkflow", { all: "false" });
        return this.runCMakeCommand(cmakeProject => cmakeProject.workflow(), folder, this.ensureActiveWorkflowPreset);
    }
    workflowAll() {
        telemetry.logEvent("runWorkflow", { all: "true" });
        return this.runCMakeCommandForAll(cmakeProject => cmakeProject.workflow(), this.ensureActiveWorkflowPreset);
    }
    revealTestExplorer(folder) {
        return this.runCMakeCommand(cmakeProject => cmakeProject.revealTestExplorer(), folder, this.ensureActiveTestPreset);
    }
    refreshTests(folder) {
        return this.runCMakeCommand(cmakeProject => cmakeProject.refreshTests(), folder);
    }
    refreshTestsAll() {
        return this.runCMakeCommandForAll(cmakeProject => cmakeProject.refreshTests());
    }
    stop(folder) {
        return this.runCMakeCommand(cmakeProject => cmakeProject.stop(), folder);
    }
    stopAll() {
        return this.runCMakeCommandForAll(cmakeProject => cmakeProject.stop());
    }
    quickStart(folder) {
        telemetry.logEvent("quickStart");
        return this.runCMakeCommandForProject(cmakeProject => cmakeProject.quickStart(folder));
    }
    resolveFolderTargetNameArgs(args) {
        let folder;
        let targetName;
        if (args === undefined) {
            folder = undefined;
            targetName = undefined;
        }
        else if (util.isString(args) || util.isWorkspaceFolder(args)) {
            folder = args;
            targetName = undefined;
        }
        else {
            folder = args.folder;
            targetName = args.targetName;
        }
        return [folder, targetName];
    }
    launchTargetPath(args) {
        const [folder, targetName] = this.resolveFolderTargetNameArgs(args);
        telemetry.logEvent("substitution", { command: "launchTargetPath" });
        return this.queryCMakeProject(async (cmakeProject) => {
            if (targetName !== undefined && targetName !== null) {
                await cmakeProject.setLaunchTargetByName(targetName);
            }
            const targetPath = await cmakeProject.launchTargetPath();
            return targetPath;
        }, folder);
    }
    launchTargetDirectory(args) {
        const [folder, targetName] = this.resolveFolderTargetNameArgs(args);
        telemetry.logEvent("substitution", { command: "launchTargetDirectory" });
        return this.queryCMakeProject(async (cmakeProject) => {
            if (targetName !== undefined && targetName !== null) {
                await cmakeProject.setLaunchTargetByName(targetName);
            }
            const targetDirectory = await cmakeProject.launchTargetDirectory();
            return targetDirectory;
        }, folder);
    }
    launchTargetFilename(args) {
        const [folder, targetName] = this.resolveFolderTargetNameArgs(args);
        telemetry.logEvent("substitution", { command: "launchTargetFilename" });
        return this.queryCMakeProject(async (cmakeProject) => {
            if (targetName !== undefined && targetName !== null) {
                await cmakeProject.setLaunchTargetByName(targetName);
            }
            const targetFilename = await cmakeProject.launchTargetFilename();
            return targetFilename;
        }, folder);
    }
    getLaunchTargetPath(args) {
        const [folder, targetName] = this.resolveFolderTargetNameArgs(args);
        telemetry.logEvent("substitution", { command: "getLaunchTargetPath" });
        return this.queryCMakeProject(async (cmakeProject) => {
            if (targetName !== undefined && targetName !== null) {
                await cmakeProject.setLaunchTargetByName(targetName);
            }
            const targetPath = await cmakeProject.getLaunchTargetPath();
            return targetPath;
        }, folder);
    }
    getLaunchTargetDirectory(args) {
        const [folder, targetName] = this.resolveFolderTargetNameArgs(args);
        telemetry.logEvent("substitution", { command: "getLaunchTargetDirectory" });
        return this.queryCMakeProject(async (cmakeProject) => {
            if (targetName !== undefined && targetName !== null) {
                await cmakeProject.setLaunchTargetByName(targetName);
            }
            const targetDirectory = await cmakeProject.getLaunchTargetDirectory();
            return targetDirectory;
        }, folder);
    }
    getLaunchTargetFilename(args) {
        const [folder, targetName] = this.resolveFolderTargetNameArgs(args);
        telemetry.logEvent("substitution", { command: "getLaunchTargetFilename" });
        return this.queryCMakeProject(async (cmakeProject) => {
            if (targetName !== undefined && targetName !== null) {
                await cmakeProject.setLaunchTargetByName(targetName);
            }
            const targetFilename = await cmakeProject.getLaunchTargetFilename();
            return targetFilename;
        }, folder);
    }
    buildTargetName(folder) {
        telemetry.logEvent("substitution", { command: "buildTargetName" });
        return this.queryCMakeProject(cmakeProject => cmakeProject.buildTargetName(), folder);
    }
    buildType(folder) {
        telemetry.logEvent("substitution", { command: "buildType" });
        return this.queryCMakeProject(cmakeProject => cmakeProject.currentBuildType(), folder);
    }
    buildDirectory(folder) {
        telemetry.logEvent("substitution", { command: "buildDirectory" });
        return this.queryCMakeProject(cmakeProject => cmakeProject.buildDirectory(), folder);
    }
    buildKit(folder) {
        telemetry.logEvent("substitution", { command: "buildKit" });
        return this.queryCMakeProject(cmakeProject => cmakeProject.buildKit(), folder);
    }
    executableTargets(folder) {
        telemetry.logEvent("substitution", { command: "executableTargets" });
        return this.queryCMakeProject(async (cmakeProject) => (await cmakeProject.executableTargets).map(target => target.name), folder);
    }
    tasksBuildCommand(folder) {
        telemetry.logEvent("substitution", { command: "tasksBuildCommand" });
        return this.queryCMakeProject(cmakeProject => cmakeProject.tasksBuildCommand(), folder);
    }
    debugTarget(folder, name, sourceDir) {
        telemetry.logEvent("debug", { all: "false" });
        return this.runCMakeCommand(cmakeProject => cmakeProject.debugTarget(name), folder, undefined, true, sourceDir);
    }
    async debugTargetAll() {
        telemetry.logEvent("debug", { all: "true" });
        const debugSessions = [];
        for (const cmakeProject of this.projectController.getAllCMakeProjects()) {
            debugSessions.push(await this.runCMakeCommandForProject(cmakeProject => cmakeProject.debugTarget(), cmakeProject));
        }
        return debugSessions;
    }
    launchTarget(folder, name, sourceDir) {
        telemetry.logEvent("launch", { all: "false" });
        return this.runCMakeCommand(cmakeProject => cmakeProject.launchTarget(name), folder, undefined, true, sourceDir);
    }
    async launchTargetAll() {
        telemetry.logEvent("launch", { all: "true" });
        const terminals = [];
        for (const cmakeProject of this.projectController.getAllCMakeProjects()) {
            terminals.push(await this.runCMakeCommandForProject(cmakeProject => cmakeProject.launchTarget(), cmakeProject));
        }
        return terminals;
    }
    selectLaunchTarget(folder, name, sourceDir) {
        return this.runCMakeCommand(cmakeProject => cmakeProject.selectLaunchTarget(name), folder, undefined, undefined, sourceDir);
    }
    async resetState(folder) {
        telemetry.logEvent("resetExtension");
        if (folder) {
            await this.runCMakeCommand(cmakeProject => cmakeProject.resetState(), folder);
        }
        else {
            await this.runCMakeCommandForAll(cmakeProject => cmakeProject.resetState());
        }
        void vscode.commands.executeCommand('workbench.action.reloadWindow');
    }
    openSettings() {
        void vscode.commands.executeCommand('workbench.action.openSettings', '@ext:ms-vscode.cmake-tools');
    }
    async viewLog() {
        telemetry.logEvent("openLogFile");
        await logging.showLogFile();
    }
    async logDiagnostics() {
        telemetry.logEvent("logDiagnostics");
        const configurations = [];
        const settings = [];
        for (const project of this.projectController.getAllCMakeProjects()) {
            configurations.push(await project.getDiagnostics());
            settings.push(await project.getSettingsDiagnostics());
        }
        const result = {
            os: (0, os_1.platform)(),
            vscodeVersion: vscode.version,
            cmtVersion: util.thisExtensionPackage().version,
            configurations,
            cpptoolsIntegration: this.configProvider.getDiagnostics(),
            settings
        };
        const output = logging.channelManager.get("CMake Diagnostics");
        output.clear();
        output.appendLine(JSON.stringify(result, null, 2));
        output.show();
    }
    activeCMakeWorkspaceFolder() {
        var _a;
        return (_a = this.getActiveProject()) === null || _a === void 0 ? void 0 : _a.workspaceFolder;
    }
    activeFolderName() {
        return this.projectController.activeFolderName || '';
    }
    activeFolderPath() {
        return this.projectController.activeFolderPath || '';
    }
    getActiveProject() {
        return this.projectController.getActiveCMakeProject();
    }
    async hideLaunchCommand(shouldHide = true) {
        // Don't hide command selectLaunchTarget here since the target can still be useful, one example is ${command:cmake.launchTargetPath} in launch.json
        // await this.projectController.hideLaunchButton(shouldHide);
        this.statusBar.hideLaunchButton(shouldHide);
        await this.projectStatus.hideLaunchButton(shouldHide);
        await setContextAndStore(exports.hideLaunchCommandKey, shouldHide);
    }
    async hideDebugCommand(shouldHide = true) {
        // Don't hide command selectLaunchTarget here since the target can still be useful, one example is ${command:cmake.launchTargetPath} in launch.json
        // await this.projectController.hideDebugButton(shouldHide);
        this.statusBar.hideDebugButton(shouldHide);
        await this.projectStatus.hideDebugButton(shouldHide);
        await setContextAndStore(exports.hideDebugCommandKey, shouldHide);
    }
    async hideBuildCommand(shouldHide = true) {
        // await this.projectController.hideBuildButton(shouldHide);
        this.statusBar.hideBuildButton(shouldHide);
        await this.projectStatus.hideBuildButton(shouldHide);
        await setContextAndStore(exports.hideBuildCommandKey, shouldHide);
    }
    // Answers whether the workspace contains at least one project folder that is CMake based,
    // without recalculating the valid states of CMakeLists.txt.
    workspaceHasAtLeastOneProject() {
        const projects = this.projectController.getAllCMakeProjects();
        if (!projects || projects.length === 0) {
            return false;
        }
        return projects.some(project => project.hasCMakeLists());
    }
    activeConfigurePresetName() {
        var _a, _b;
        telemetry.logEvent("substitution", { command: "activeConfigurePresetName" });
        return ((_b = (_a = this.getActiveProject()) === null || _a === void 0 ? void 0 : _a.configurePreset) === null || _b === void 0 ? void 0 : _b.name) || '';
    }
    activeBuildPresetName() {
        var _a, _b;
        telemetry.logEvent("substitution", { command: "activeBuildPresetName" });
        return ((_b = (_a = this.getActiveProject()) === null || _a === void 0 ? void 0 : _a.buildPreset) === null || _b === void 0 ? void 0 : _b.name) || '';
    }
    activeTestPresetName() {
        var _a, _b;
        telemetry.logEvent("substitution", { command: "activeTestPresetName" });
        return ((_b = (_a = this.getActiveProject()) === null || _a === void 0 ? void 0 : _a.testPreset) === null || _b === void 0 ? void 0 : _b.name) || '';
    }
    activePackagePresetName() {
        var _a, _b;
        telemetry.logEvent("substitution", { command: "activePackagePresetName" });
        return ((_b = (_a = this.getActiveProject()) === null || _a === void 0 ? void 0 : _a.packagePreset) === null || _b === void 0 ? void 0 : _b.name) || '';
    }
    activeWorkflowPresetName() {
        var _a, _b;
        telemetry.logEvent("substitution", { command: "activeWorkflowPresetName" });
        return ((_b = (_a = this.getActiveProject()) === null || _a === void 0 ? void 0 : _a.workflowPreset) === null || _b === void 0 ? void 0 : _b.name) || '';
    }
    /**
     * Opens CMakePresets.json at the root of the project. Creates one if it does not exist.
     */
    async openCMakePresets() {
        var _a;
        await ((_a = this.getActiveProject()) === null || _a === void 0 ? void 0 : _a.presetsController.openCMakePresets());
    }
    /**
     * Show UI to allow the user to add an active configure preset
     */
    async addConfigurePreset(folder) {
        if (util.isTestMode()) {
            log.trace(localize(40, null));
            return false;
        }
        const cmakeProject = this.getProjectFromFolder(folder);
        if (!cmakeProject) {
            return false;
        }
        return cmakeProject.presetsController.addConfigurePreset();
    }
    /**
     * Show UI to allow the user to add an active build preset
     */
    async addBuildPreset(folder) {
        if (util.isTestMode()) {
            log.trace(localize(41, null));
            return false;
        }
        const cmakeProject = this.getProjectFromFolder(folder);
        if (!cmakeProject) {
            return false;
        }
        return cmakeProject.presetsController.addBuildPreset();
    }
    /**
     * Show UI to allow the user to add an active test preset
     */
    async addTestPreset(folder) {
        if (util.isTestMode()) {
            log.trace(localize(42, null));
            return false;
        }
        const cmakeProject = this.getProjectFromFolder(folder);
        if (!cmakeProject) {
            return false;
        }
        return cmakeProject.presetsController.addTestPreset();
    }
    /**
     * Show UI to allow the user to add an active package preset
     */
    async addPackagePreset(folder) {
        if (util.isTestMode()) {
            log.trace(localize(43, null));
            return false;
        }
        const cmakeProject = this.getProjectFromFolder(folder);
        if (!cmakeProject) {
            return false;
        }
        return cmakeProject.presetsController.addPackagePreset();
    }
    /**
     * Show UI to allow the user to add an active test preset
     */
    async addWorkflowPreset(folder) {
        if (util.isTestMode()) {
            log.trace(localize(44, null));
            return false;
        }
        const cmakeProject = this.getProjectFromFolder(folder);
        if (!cmakeProject) {
            return false;
        }
        return cmakeProject.presetsController.addWorkflowPreset();
    }
    // Referred in presetsController.ts
    /**
     * Show UI to allow the user to select an active configure preset
     */
    async selectConfigurePreset(folder) {
        if (util.isTestMode()) {
            log.trace(localize(45, null));
            return false;
        }
        const project = this.getProjectFromFolder(folder);
        if (!project) {
            return false;
        }
        if (!project.useCMakePresets) {
            log.info(localize(46, null));
            return false;
        }
        const presetSelected = await project.presetsController.selectConfigurePreset();
        const configurePreset = project.configurePreset;
        this.statusBar.setConfigurePresetName((configurePreset === null || configurePreset === void 0 ? void 0 : configurePreset.displayName) || (configurePreset === null || configurePreset === void 0 ? void 0 : configurePreset.name) || '');
        // Reset build and test presets since they might not be used with the selected configure preset
        const buildPreset = project.buildPreset;
        this.statusBar.setBuildPresetName((buildPreset === null || buildPreset === void 0 ? void 0 : buildPreset.displayName) || (buildPreset === null || buildPreset === void 0 ? void 0 : buildPreset.name) || '');
        const testPreset = project.testPreset;
        this.statusBar.setTestPresetName((testPreset === null || testPreset === void 0 ? void 0 : testPreset.displayName) || (testPreset === null || testPreset === void 0 ? void 0 : testPreset.name) || '');
        return presetSelected;
    }
    viewConfigureSettings() {
        void vscode.commands.executeCommand('workbench.action.openSettings', '@id:cmake.configureArgs, @id:cmake.configureEnvironment, @id:cmake.environment');
    }
    /**
     * Show UI to allow the user to select an active build preset
     */
    async selectBuildPreset(folder) {
        if (util.isTestMode()) {
            log.trace(localize(47, null));
            return false;
        }
        const project = this.getProjectFromFolder(folder);
        if (!project) {
            return false;
        }
        if (!project.useCMakePresets) {
            log.info(localize(48, null));
            return false;
        }
        const presetSelected = await project.presetsController.selectBuildPreset();
        const buildPreset = project.buildPreset;
        this.statusBar.setBuildPresetName((buildPreset === null || buildPreset === void 0 ? void 0 : buildPreset.displayName) || (buildPreset === null || buildPreset === void 0 ? void 0 : buildPreset.name) || '');
        return presetSelected;
    }
    viewBuildSettings() {
        void vscode.commands.executeCommand('workbench.action.openSettings', '@id:cmake.buildArgs, @id:cmake.buildToolArgs @id:cmake.buildEnvironment @id:cmake.environment');
    }
    /**
     * Show UI to allow the user to select an active test preset
     */
    async selectTestPreset(folder) {
        if (util.isTestMode()) {
            log.trace(localize(49, null));
            return false;
        }
        const project = this.getProjectFromFolder(folder);
        if (!project) {
            return false;
        }
        if (!project.useCMakePresets) {
            log.info(localize(50, null));
            return false;
        }
        const presetSelected = await project.presetsController.selectTestPreset();
        const testPreset = project.testPreset;
        this.statusBar.setTestPresetName((testPreset === null || testPreset === void 0 ? void 0 : testPreset.displayName) || (testPreset === null || testPreset === void 0 ? void 0 : testPreset.name) || '');
        return presetSelected;
    }
    viewTestSettings() {
        void vscode.commands.executeCommand('workbench.action.openSettings', '@id:cmake.ctestArgs, @id:cmake.testEnvironment, @id:cmake.environment');
    }
    /**
     * Show UI to allow the user to select an active package preset
     */
    async selectPackagePreset(folder) {
        if (util.isTestMode()) {
            log.trace(localize(51, null));
            return false;
        }
        const project = this.getProjectFromFolder(folder);
        if (!project) {
            return false;
        }
        if (!project.useCMakePresets) {
            log.info(localize(52, null));
            return false;
        }
        const presetSelected = await project.presetsController.selectPackagePreset();
        const packagePreset = project.packagePreset;
        this.statusBar.setPackagePresetName((packagePreset === null || packagePreset === void 0 ? void 0 : packagePreset.displayName) || (packagePreset === null || packagePreset === void 0 ? void 0 : packagePreset.name) || '');
        return presetSelected;
    }
    /**
     * Show UI to allow the user to select an active workflow preset
     */
    async selectWorkflowPreset(folder) {
        if (util.isTestMode()) {
            log.trace(localize(53, null));
            return false;
        }
        const project = this.getProjectFromFolder(folder);
        if (!project) {
            return false;
        }
        if (!project.useCMakePresets) {
            log.info(localize(54, null));
            return false;
        }
        const presetSelected = await project.presetsController.selectWorkflowPreset();
        const workflowPreset = project.workflowPreset;
        this.statusBar.setWorkflowPresetName((workflowPreset === null || workflowPreset === void 0 ? void 0 : workflowPreset.displayName) || (workflowPreset === null || workflowPreset === void 0 ? void 0 : workflowPreset.name) || '');
        return presetSelected;
    }
    get onBuildTargetChanged() {
        return this.onBuildTargetChangedEmitter.event;
    }
    get onLaunchTargetChanged() {
        return this.onLaunchTargetChangedEmitter.event;
    }
    get onActiveProjectChanged() {
        return this.onActiveProjectChangedEmitter.event;
    }
}
exports.ExtensionManager = ExtensionManager;
async function setup(context, progress) {
    (0, util_1.reportProgress)(localize(55, null), progress);
    const ext = exports.extensionManager;
    // A register function that helps us bind the commands to the extension
    function register(name) {
        return vscode.commands.registerCommand(`cmake.${name}`, (...args) => {
            // Generate a unqiue ID that can be correlated in the log file.
            const id = util.randint(1000, 10000);
            // Create a promise that resolves with the command.
            const pr = (async () => {
                // Debug when the commands start/stop
                log.debug(`[${id}]`, `cmake.${name}`, localize(56, null));
                // Bind the method
                const command = ext[name].bind(ext);
                // Call the method
                const ret = await command(...args);
                try {
                    // Log the result of the command.
                    log.debug(localize(57, null, `[${id}] cmake.${name}`, JSON.stringify(ret)));
                }
                catch (e) {
                    // Log, but don't try to serialize the return value.
                    log.debug(localize(58, null, `[${id}] cmake.${name}`));
                }
                // Return the result of the command.
                return ret;
            })();
            // Hand the promise to rollbar.
            rollbar_1.default.takePromise(name, {}, pr);
            // Return the promise so that callers will get the result of the command.
            return pr;
        });
    }
    context.subscriptions.push(vscode.debug.registerDebugAdapterDescriptorFactory("cmake", new debugAdapterNamedPipeServerDescriptorFactory_1.DebugAdapterNamedPipeServerDescriptorFactory()));
    context.subscriptions.push(vscode.debug.registerDebugConfigurationProvider("cmake", new debugConfigurationProvider_1.DebugConfigurationProvider()));
    context.subscriptions.push(vscode.debug.registerDebugConfigurationProvider("cmake", new debugConfigurationProvider_1.DynamicDebugConfigurationProvider(), vscode.DebugConfigurationProviderTriggerKind.Dynamic));
    // List of functions that will be bound commands
    const funs = [
        'activeFolderName',
        'activeFolderPath',
        'activeConfigurePresetName',
        'activeBuildPresetName',
        'activeTestPresetName',
        'activePackagePresetName',
        'activeWorkflowPresetName',
        "useCMakePresets",
        "openCMakePresets",
        'addConfigurePreset',
        'addBuildPreset',
        'addTestPreset',
        'addPackagePreset',
        'addWorkflowPreset',
        'selectConfigurePreset',
        'viewConfigureSettings',
        'selectBuildPreset',
        'viewBuildSettings',
        'selectTestPreset',
        'viewTestSettings',
        'selectPackagePreset',
        'selectWorkflowPreset',
        'selectActiveFolder',
        'editKits',
        'scanForKits',
        'scanForCompilers',
        'selectKit',
        'setKitByName',
        'setConfigurePreset',
        'setBuildPreset',
        'setTestPreset',
        'setPackagePreset',
        'setWorkflowPreset',
        'build',
        'showBuildCommand',
        'buildAll',
        'buildWithTarget',
        'setVariant',
        'setVariantAll',
        'install',
        'installAll',
        'editCache',
        'clean',
        'cleanAll',
        'cleanConfigure',
        'cleanConfigureWithDebugger',
        'cleanConfigureAll',
        'cleanConfigureAllWithDebugger',
        'cleanRebuild',
        'cleanRebuildAll',
        'configure',
        'configureWithDebugger',
        'showConfigureCommand',
        'configureAll',
        'configureAllWithDebugger',
        'editCacheUI',
        'ctest',
        'ctestAll',
        'cpack',
        'cpackAll',
        'workflow',
        'workflowAll',
        'revealTestExplorer',
        'refreshTests',
        'refreshTestsAll',
        'stop',
        'stopAll',
        'quickStart',
        'launchTargetPath',
        'launchTargetDirectory',
        'launchTargetFilename',
        'getLaunchTargetPath',
        'getLaunchTargetDirectory',
        'getLaunchTargetFilename',
        'buildTargetName',
        'buildKit',
        'buildType',
        'buildDirectory',
        'executableTargets',
        'debugTarget',
        'debugTargetAll',
        'launchTarget',
        'launchTargetAll',
        'selectLaunchTarget',
        'setDefaultTarget',
        'resetState',
        'openSettings',
        'viewLog',
        'logDiagnostics',
        'compileFile',
        'selectWorkspace',
        'tasksBuildCommand',
        'hideLaunchCommand',
        'hideDebugCommand',
        'hideBuildCommand'
        // 'toggleCoverageDecorations', // XXX: Should coverage decorations be revived?
    ];
    // Register the functions before the extension is done loading so that fast
    // fingers won't cause "unregistered command" errors while CMake Tools starts
    // up. The command wrapper will await on the extension promise.
    (0, util_1.reportProgress)(localize(59, null), progress);
    for (const key of funs) {
        log.trace(localize(60, null, `cmake.${key}`));
        context.subscriptions.push(register(key));
    }
    if (util.isTestMode()) {
        log.trace(localize(61, null));
        context.subscriptions.push(vscode.commands.registerCommand('cmake.getSettingsChangePromise', () => (0, config_1.getSettingsChangePromise)()));
    }
    context.subscriptions.push(...[
        // Special commands that don't require logging or separate error handling
        vscode.commands.registerCommand('cmake.outline.configureAll', () => (0, util_1.runCommand)('configureAll')),
        // add parameters that give a more specific configureTrigger
        vscode.commands.registerCommand('cmake.outline.configureAllWithDebugger', () => (0, util_1.runCommand)('configureAllWithDebugger', cmakeProject_1.ConfigureTrigger.projectOutlineConfigureAllWithDebugger)),
        vscode.commands.registerCommand('cmake.outline.buildAll', () => (0, util_1.runCommand)('buildAll')),
        vscode.commands.registerCommand('cmake.outline.stopAll', () => (0, util_1.runCommand)('stopAll')),
        vscode.commands.registerCommand('cmake.outline.cleanAll', () => (0, util_1.runCommand)('cleanAll')),
        vscode.commands.registerCommand('cmake.outline.cleanConfigureAll', () => (0, util_1.runCommand)('cleanConfigureAll')),
        vscode.commands.registerCommand('cmake.outline.cleanConfigureAllWithDebugger', () => (0, util_1.runCommand)('cleanConfigureAllWithDebugger', cmakeProject_1.ConfigureTrigger.projectOutlineCleanConfigureAllWithDebugger)),
        vscode.commands.registerCommand('cmake.outline.editCacheUI', () => (0, util_1.runCommand)('editCacheUI')),
        vscode.commands.registerCommand('cmake.outline.cleanRebuildAll', () => (0, util_1.runCommand)('cleanRebuildAll')),
        // Commands for outline items
        vscode.commands.registerCommand('cmake.outline.configure', async (what) => {
            if (what instanceof projectOutline_1.ProjectNode) {
                await (0, util_1.runCommand)('configure', what.folder, false, what.sourceDirectory);
            }
            else if (what instanceof projectOutline_1.SourceFileNode) {
                await (0, util_1.runCommand)('configure', what.folder, false, what.sourcePath);
            }
        }),
        vscode.commands.registerCommand('cmake.outline.configureWithDebugger', async (what) => {
            await (0, util_1.runCommand)('configureWithDebugger', what.folder, what.sourcePath, cmakeProject_1.ConfigureTrigger.projectOutlineConfigureWithDebugger);
        }),
        vscode.commands.registerCommand('cmake.outline.build', (what) => (0, util_1.runCommand)('build', what.folder, "all", what.sourceDirectory)),
        vscode.commands.registerCommand('cmake.outline.clean', (what) => (0, util_1.runCommand)('build', what.folder, "clean", what.sourceDirectory)),
        vscode.commands.registerCommand('cmake.outline.buildTarget', (what) => (0, util_1.runCommand)('build', what.folder, what.name, what.sourceDir)),
        vscode.commands.registerCommand('cmake.outline.runUtilityTarget', (what) => (0, util_1.runCommand)('build', what.folder, what.name, what.sourceDir)),
        vscode.commands.registerCommand('cmake.outline.debugTarget', (what) => (0, util_1.runCommand)('debugTarget', what.folder, what.name, what.sourceDir)),
        vscode.commands.registerCommand('cmake.outline.launchTarget', (what) => (0, util_1.runCommand)('launchTarget', what.folder, what.name, what.sourceDir)),
        vscode.commands.registerCommand('cmake.outline.setDefaultTarget', (what) => (0, util_1.runCommand)('setDefaultTarget', what.folder, what.name, what.sourceDir)),
        vscode.commands.registerCommand('cmake.outline.setLaunchTarget', (what) => (0, util_1.runCommand)('selectLaunchTarget', what.folder, what.name, what.sourceDir)),
        vscode.commands.registerCommand('cmake.outline.revealInCMakeLists', (what) => what.openInCMakeLists()),
        vscode.commands.registerCommand('cmake.outline.compileFile', (what) => (0, util_1.runCommand)('compileFile', what.filePath)),
        // vscode.commands.registerCommand('cmake.outline.selectWorkspace', (what: WorkspaceFolderNode) => runCommand('selectWorkspace', what.wsFolder))
        vscode.commands.registerCommand('cmake.outline.selectWorkspace', (what) => (0, util_1.runCommand)('selectWorkspace', what.wsFolder)),
        // Notification of active project change (e.g. when cmake.sourceDirectory changes)
        vscode.commands.registerCommand('cmake.statusbar.update', () => exports.extensionManager === null || exports.extensionManager === void 0 ? void 0 : exports.extensionManager.updateStatusBarForActiveProjectChange())
    ]);
    return { getApi: (version) => {
            // Since our API is backwards compatible, we can make our version number match that which was requested.
            if (version === api.Version.v1 || version === api.Version.v2) {
                ext.api.version = version;
            }
            return ext.api;
        }
    };
}
class SchemaProvider {
    async provideTextDocumentContent(uri) {
        console.assert(uri.path[0] === '/', "A preceeding slash is expected on schema uri path");
        const fileName = uri.path.substr(1);
        const locale = util.getLocaleId();
        let localizedFilePath = path.join(util.thisExtensionPath(), "dist/schema/", locale, fileName);
        const fileExists = await util.checkFileExists(localizedFilePath);
        if (!fileExists) {
            localizedFilePath = path.join(util.thisExtensionPath(), fileName);
        }
        return pr_1.fs.readFile(localizedFilePath, "utf8");
    }
}
/**
 * Starts up the extension.
 * @param context The extension context
 * @returns A promise that will resolve when the extension is ready for use
 */
async function activate(context) {
    // CMakeTools versions newer or equal to #1.2 should not coexist with older versions
    // because the publisher changed (from vector-of-bool into ms-vscode),
    // causing many undesired behaviors (duplicate operations, registrations for UI elements, etc...)
    const oldCMakeToolsExtension = vscode.extensions.getExtension('vector-of-bool.cmake-tools');
    if (oldCMakeToolsExtension) {
        await vscode.window.showWarningMessage(localize(62, null));
    }
    if (vscode.workspace.getConfiguration('cmake').get('showOptionsMovedNotification')) {
        void vscode.window.showInformationMessage(localize(63, null), localize(64, null), localize(65, null)).then(async (selection) => {
            if (selection !== undefined) {
                if (selection === localize(66, null)) {
                    await vscode.commands.executeCommand('workbench.action.openSettings', 'cmake.options');
                }
                else if (selection === localize(67, null)) {
                    await vscode.workspace.getConfiguration('cmake').update('showOptionsMovedNotification', false, vscode.ConfigurationTarget.Global);
                }
            }
        });
    }
    // Start with a partial feature set view. The first valid CMake project will cause a switch to full feature set.
    await enableFullFeatureSet(false);
    // Register a protocol handler to serve localized schemas
    vscode.workspace.registerTextDocumentContentProvider('cmake-tools-schema', new SchemaProvider());
    await setContextAndStore("inCMakeProject", true);
    taskProvider = vscode.tasks.registerTaskProvider(cmakeTaskProvider_1.CMakeTaskProvider.CMakeScriptType, cmakeTaskProvider_1.cmakeTaskProvider);
    // Load a new extension manager
    exports.extensionManager = await ExtensionManager.create(context);
    await exports.extensionManager.init();
    // need the extensionManager to be initialized for this.
    pinnedCommands = new pinnedCommands_1.PinnedCommands(exports.extensionManager.getWorkspaceConfig());
    return setup(context);
}
exports.activate = activate;
// Enable all or part of the CMake Tools palette commands
// and show or hide the buttons in the status bar, according to the boolean.
// The scope of this is the whole workspace.
async function enableFullFeatureSet(fullFeatureSet) {
    await setContextAndStore("cmake:enableFullFeatureSet", fullFeatureSet);
    exports.extensionManager === null || exports.extensionManager === void 0 ? void 0 : exports.extensionManager.showStatusBar(fullFeatureSet);
}
exports.enableFullFeatureSet = enableFullFeatureSet;
function getActiveProject() {
    return exports.extensionManager === null || exports.extensionManager === void 0 ? void 0 : exports.extensionManager.getActiveProject();
}
exports.getActiveProject = getActiveProject;
async function setContextAndStore(key, value) {
    await util.setContextValue(key, value);
    exports.extensionManager === null || exports.extensionManager === void 0 ? void 0 : exports.extensionManager.updateContextValues(key, value);
}
exports.setContextAndStore = setContextAndStore;
function getExtensionActiveCommands() {
    return exports.extensionManager ? exports.extensionManager.extensionActiveCommands : [];
}
exports.getExtensionActiveCommands = getExtensionActiveCommands;
function getExtensionLocalizedStrings() {
    return exports.extensionManager ? exports.extensionManager.extensionLocalizedStrings : {};
}
exports.getExtensionLocalizedStrings = getExtensionLocalizedStrings;
function onExtensionActiveCommandsChanged(listener, thisObject) {
    exports.extensionManager === null || exports.extensionManager === void 0 ? void 0 : exports.extensionManager.onExtensionActiveCommandsChanged(listener, thisObject);
}
exports.onExtensionActiveCommandsChanged = onExtensionActiveCommandsChanged;
// This method updates the full/partial view state.
// (by analyzing the valid state of its CMakeLists.txt)
// and also calculates the impact on the whole workspace.
// It is called whenever a project folder goes through a relevant event:
// sourceDirectory change, CMakeLists.txt creation/move/deletion.
async function updateFullFeatureSet() {
    if (exports.extensionManager) {
        await enableFullFeatureSet(exports.extensionManager.workspaceHasAtLeastOneProject());
    }
    else {
        // This shouldn't normally happen (not finding a cmake project or not having a valid extension manager)
        // but just in case, disable full feature set.
        log.info(`We don't have an extension manager created yet. ` +
            `Feature set including CMake Tools commands palette is disabled.`);
        await enableFullFeatureSet(false);
    }
}
exports.updateFullFeatureSet = updateFullFeatureSet;
// this method is called when your extension is deactivated.
async function deactivate() {
    log.debug(localize(68, null));
    if (exports.extensionManager) {
        await exports.extensionManager.asyncDispose();
    }
    if (taskProvider) {
        taskProvider.dispose();
    }
}
exports.deactivate = deactivate;
function getStatusBar() {
    if (exports.extensionManager) {
        return exports.extensionManager.getStatusBar();
    }
}
exports.getStatusBar = getStatusBar;


/***/ }),

/***/ 41108:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/**
 * Module for querying MS Visual Studio
 */ /** */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.varsForVSInstallation = exports.getVcVarsBatScript = exports.filterVSInstallationsByMsvcToolset = exports.enumerateMsvcToolsets = exports.getHostTargetArchString = exports.targetArchFromGeneratorPlatform = exports.vsArchFromGeneratorPlatform = exports.generatorPlatformFromVSArch = exports.compareVersions = exports.vsInstallations = void 0;
const util = __webpack_require__(16182);
const path = __webpack_require__(71017);
const pr_1 = __webpack_require__(72502);
const paths_1 = __webpack_require__(86640);
const environmentVariables_1 = __webpack_require__(40085);
const iconv = __webpack_require__(75170);
const codepages = __webpack_require__(54955);
const logging = __webpack_require__(71067);
const proc = __webpack_require__(3477);
const util_1 = __webpack_require__(16182);
const nls = __webpack_require__(33463);
nls.config({ messageFormat: nls.MessageFormat.bundle, bundleFormat: nls.BundleFormat.standalone })((__webpack_require__(71017).join)(__dirname, 'src\\installs\\visualStudio.ts'));
const localize = nls.loadMessageBundle((__webpack_require__(71017).join)(__dirname, 'src\\installs\\visualStudio.ts'));
const log = logging.createLogger('visual-studio');
let cachedVSInstallations = null;
/**
 * Get a list of all Visual Studio installations available from vswhere.exe.
 * Results are cached for 15 minutes.
 * Will not include older versions. vswhere doesn't seem to list them?
 */
async function vsInstallations() {
    const now = Date.now();
    if (cachedVSInstallations && cachedVSInstallations.queryTime && (now - cachedVSInstallations.queryTime) < 900000) {
        // If less than 15 minutes old, cache is considered ok.
        return cachedVSInstallations.installations;
    }
    const installs = [];
    const instanceIds = [];
    const vswhereExe = path.join((0, util_1.thisExtensionPath)(), 'res', 'vswhere.exe');
    const sys32Path = path.join(process.env.WINDIR, 'System32');
    const vswhereArgs = ['/c', `${sys32Path}\\chcp 65001>nul && "${vswhereExe}" -all -format json -utf8 -products * -legacy -prerelease`];
    const vswhereResult = await proc.execute(`${sys32Path}\\cmd.exe`, vswhereArgs, null, { silent: true, encoding: 'utf8', shell: true }).result;
    if (vswhereResult.retc !== 0) {
        log.error(localize(0, null, "vswhere.exe", vswhereResult.stderr));
        return [];
    }
    const vsInstalls = JSON.parse(vswhereResult.stdout);
    for (const inst of vsInstalls) {
        if (instanceIds.indexOf(inst.instanceId) < 0) {
            installs.push(inst);
            instanceIds.push(inst.instanceId);
        }
    }
    cachedVSInstallations = {
        installations: installs,
        queryTime: now
    };
    return installs;
}
exports.vsInstallations = vsInstallations;
function compareVersions(lhs, rhs) {
    const lhsParts = lhs.split('.');
    const rhsParts = rhs.split('.');
    let index = 0;
    for (;; index++) {
        const lhsp = lhsParts[index];
        const rhsp = rhsParts[index];
        if (lhsp && rhsp) {
            if (lhsp === rhsp) {
                continue;
            }
            else {
                return parseInt(lhsp) - parseInt(rhsp);
            }
        }
        else if (lhsp) {
            return 1; // lhsp > rhsp
        }
        else if (rhsp) {
            return -1; // lhsp < rhsp
        }
        else {
            return 0; // lhsp === rhsp
        }
    }
}
exports.compareVersions = compareVersions;
/**
 * Platform arguments for VS Generators
 * Currently, there is a mismatch only between x86 and win32.
 * For example, VS kits x86 and amd64_x86 will generate -A win32
 */
exports.generatorPlatformFromVSArch = {
    x86: 'win32'
};
// The reverse of generatorPlatformFromVSArch
exports.vsArchFromGeneratorPlatform = {
    win32: 'x86'
};
/**
 * Turns 'win32' into 'x86' for target architecture.
 */
function targetArchFromGeneratorPlatform(generatorPlatform) {
    if (!generatorPlatform) {
        return undefined;
    }
    return exports.vsArchFromGeneratorPlatform[generatorPlatform] || generatorPlatform;
}
exports.targetArchFromGeneratorPlatform = targetArchFromGeneratorPlatform;
/**
 * Create the host-target arch specification of a VS install,
 * from the VS kit architecture (host) and generator platform (target).
 * @param hostArch The architecture of the host toolset
 * @param targetArch The architecture of the target
 * @param amd64Alias Whether amd64 is preferred over x64.
 */
function getHostTargetArchString(hostArch, targetArch, amd64Alias = false) {
    // There are cases when we don't want to use the 'x64' alias of the 'amd64' architecture,
    // like for older VS installs, for the VS kit names (for compatibility reasons)
    // or for arm/arm64 specific vcvars scripts.
    if (amd64Alias) {
        if (hostArch === "x64") {
            hostArch = "amd64";
        }
        if (targetArch === "x64") {
            targetArch = "amd64";
        }
    }
    // For arm64, cmake expects 'ARM64' for host toolset parameter, but
    // then we fail the hostArch === targetArch below. This enables us to find
    // all the Host ARM64 toolsets as well as still meet the `host=ARM64` requirement for cmake
    if (hostArch === 'ARM64') {
        hostArch = 'arm64';
    }
    if (!targetArch) {
        targetArch = hostArch;
    }
    // CMake preferred generator platform requires 'win32', while vcvars are still using 'x86'.
    // This function is called only for VS generators, so it is safe to overwrite
    // targetArch with the vcvars naming.
    // In case of any future new mismatches, use the vsArchFromGeneratorPlatform table
    // instead of hard coding for win32 and x86.
    // Currently, there is no need of a similar overwrite operation on hostArch,
    // because CMake host target does not have the same name mismatch with VS.
    targetArch = targetArchFromGeneratorPlatform(targetArch);
    return (hostArch === targetArch) ? hostArch : `${hostArch}_${targetArch}`;
}
exports.getHostTargetArchString = getHostTargetArchString;
// Gets the MSVC toolsets installed for a given VS install.
async function enumerateMsvcToolsets(vsInstallRoot, vsVersion) {
    const version = parseInt(vsVersion);
    if (version < 15) {
        return [`${version}.0`];
    }
    else {
        const toolsetDir = path.join(vsInstallRoot, 'VC\\Tools\\MSVC');
        if (await pr_1.fs.exists(toolsetDir)) {
            const dirContents = await pr_1.fs.readdir(toolsetDir, { 'withFileTypes': true });
            // Only the toolsets should be this directory (each in their own directories), but filter out anything else just in case.
            // Sort in descending order, so if searching with a 1- or 2-component version (e.g. 14.27) we'll choose the latest version first
            return dirContents.filter(item => item.isDirectory()).map(dir => dir.name)
                .sort((a, b) => util.compareVersions(a, b)).reverse();
        }
    }
    return undefined;
}
exports.enumerateMsvcToolsets = enumerateMsvcToolsets;
// Filters the given vsInstalls to those which have the given toolset.
function filterVSInstallationsByMsvcToolset(vsInstalls, toolsetVersion) {
    return vsInstalls.filter(async (vs) => {
        const availableToolsets = await enumerateMsvcToolsets(vs.installationPath, vs.installationVersion);
        return availableToolsets === null || availableToolsets === void 0 ? void 0 : availableToolsets.find(t => t.startsWith(toolsetVersion));
    });
}
exports.filterVSInstallationsByMsvcToolset = filterVSInstallationsByMsvcToolset;
/*
 * List of environment variables required for Visual C++ to run as expected for
 * a VS installation.
 * The diff of vcvarsall.bat output env and system env:
    DevEnvDir=C:\Program Files (x86)\Microsoft Visual Studio 14.0\Common7\IDE\
    Framework40Version=v4.0
    FrameworkDir=C:\Windows\Microsoft.NET\Framework\
    FrameworkDIR32=C:\Windows\Microsoft.NET\Framework\
    FrameworkVersion=v4.0.30319
    FrameworkVersion32=v4.0.30319
    INCLUDE=C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\INCLUDE;C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\ATLMFC\INCLUDE;C:\Program Files (x86)\Windows Kits\10\include\10.0.14393.0\ucrt;C:\Program Files (x86)\Windows Kits\NETFXSDK\4.6.1\include\um;C:\Program Files (x86)\Windows Kits\10\include\10.0.14393.0\shared;C:\Program Files (x86)\Windows Kits\10\include\10.0.14393.0\um;C:\Program Files (x86)\Windows Kits\10\include\10.0.14393.0\winrt;
    LIB=C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\LIB\ARM;C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\ATLMFC\LIB\ARM;C:\Program Files (x86)\Windows Kits\10\lib\10.0.14393.0\ucrt\ARM;C:\Program Files (x86)\Windows Kits\NETFXSDK\4.6.1\lib\um\ARM;C:\Program Files (x86)\Windows Kits\10\lib\10.0.14393.0\um\ARM;
    LIBPATH=C:\Windows\Microsoft.NET\Framework\v4.0.30319;C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\LIB\ARM;C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\ATLMFC\LIB\ARM;C:\Program Files (x86)\Windows Kits\10\UnionMetadata;C:\Program Files (x86)\Windows Kits\10\References;\Microsoft.VCLibs\14.0\References\CommonConfiguration\neutral;
    NETFXSDKDir=C:\Program Files (x86)\Windows Kits\NETFXSDK\4.6.1\
    Path=C:\Program Files (x86)\Microsoft Visual Studio 14.0\Common7\IDE\CommonExtensions\Microsoft\TestWindow;C:\Program Files (x86)\MSBuild\14.0\bin;C:\Program Files (x86)\Microsoft Visual Studio 14.0\Common7\IDE\;C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\BIN\x86_ARM;C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\BIN;C:\Program Files (x86)\Microsoft Visual Studio 14.0\Common7\Tools;C:\Windows\Microsoft.NET\Framework\v4.0.30319;C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\VCPackages;C:\Program Files (x86)\HTML Help Workshop;C:\Program Files (x86)\Microsoft Visual Studio 14.0\Team Tools\Performance Tools;C:\Program Files (x86)\Windows Kits\10\bin\x86;C:\Program Files (x86)\Microsoft SDKs\Windows\v10.0A\bin\NETFX 4.6.1 Tools\;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files\Microsoft VS Code\bin;C:\Program Files\CMake\bin;C:\Program Files\Git\cmd;C:\Program Files\TortoiseGit\bin;C:\Program Files (x86)\Windows Kits\10\Windows Performance Toolkit\
    Platform=ARM
    UCRTVersion=10.0.14393.0
    UniversalCRTSdkDir=C:\Program Files (x86)\Windows Kits\10\
    user_inputversion=10.0.14393.0
    VCINSTALLDIR=C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\
    VisualStudioVersion=14.0
    VSINSTALLDIR=C:\Program Files (x86)\Microsoft Visual Studio 14.0\
    WindowsLibPath=C:\Program Files (x86)\Windows Kits\10\UnionMetadata;C:\Program Files (x86)\Windows Kits\10\References
    WindowsSdkDir=C:\Program Files (x86)\Windows Kits\10\
    WindowsSDKLibVersion=10.0.14393.0\
    WindowsSDKVersion=10.0.14393.0\
    WindowsSDK_ExecutablePath_x64=C:\Program Files (x86)\Microsoft SDKs\Windows\v10.0A\bin\NETFX 4.6.1 Tools\x64\
    WindowsSDK_ExecutablePath_x86=C:\Program Files (x86)\Microsoft SDKs\Windows\v10.0A\bin\NETFX 4.6.1 Tools\
 *
 */
const msvcEnvVars = [
    /* These is the diff of vcvarsall.bat generated env and original system env */
    'DevEnvDir',
    'Framework40Version',
    'FrameworkDir',
    'FrameworkDIR32',
    'FrameworkDIR64',
    'FrameworkVersion',
    'FrameworkVersion32',
    'FrameworkVersion64',
    'INCLUDE',
    'LIB',
    'LIBPATH',
    'NETFXSDKDir',
    'Path',
    //'Platform', - disabled as it's currently unnecessary and causes some projects to fail to build
    'UCRTVersion',
    'UniversalCRTSdkDir',
    'user_inputversion',
    'VCIDEInstallDir',
    'VCINSTALLDIR',
    //'VCToolsInstallDir', - disabled temporarily as it breaks downlevel toolset selection
    'VCToolsRedistDir',
    //'VCToolsVersion', - disabled temporarily as it breaks downlevel toolset selection
    'VisualStudioVersion',
    'VSINSTALLDIR',
    'WindowsLibPath',
    'WindowsSdkBinPath',
    'WindowsSdkDir',
    'WindowsSDKLibVersion',
    'WindowsSDKVersion',
    'WindowsSDK_ExecutablePath_x64',
    'WindowsSDK_ExecutablePath_x86',
    /* These are special also need to be cached */
    'CL',
    '_CL_',
    'LINK',
    '_LINK_',
    'TMP',
    'UCRTCONTEXTROOT',
    'VCTARGETSPATH'
];
/**
 * Get the environment variables corresponding to a VS dev batch file.
 * For reference this is vcvarsall.bat -? (from 16.11.8)
 * Syntax:
 *     vcvarsall.bat [arch] [platform_type] [winsdk_version] [-vcvars_ver=vc_version] [-vcvars_spectre_libs=spectre_mode]
 * where :
 *     [arch]: x86 | amd64 | x86_amd64 | x86_arm | x86_arm64 | amd64_x86 | amd64_arm | amd64_arm64
 *     [platform_type]: {empty} | store | uwp
 *     [winsdk_version] : full Windows 10 SDK number (e.g. 10.0.10240.0) or "8.1" to use the Windows 8.1 SDK.
 *     [vc_version] : {none} for latest installed VC++ compiler toolset |
 *                    "14.0" for VC++ 2015 Compiler Toolset |
 *                    "14.xx" for the latest 14.xx.yyyyy toolset installed (e.g. "14.11") |
 *                    "14.xx.yyyyy" for a specific full version number (e.g. "14.11.25503")
 *     [spectre_mode] : {none} for libraries without spectre mitigations |
 *                      "spectre" for libraries with spectre mitigations
 * @param hostArch Host arch used to find the proper Windows SDK path
 * @param devBat Path to a VS environment batch file
 * @param args List of arguments to pass to the batch file
 */
async function collectDevBatVars(hostArch, devBat, args, majorVersion, commonDir) {
    var _a, _b, _c, _d;
    const fname = Math.random().toString() + '.bat';
    const batFileName = `vs-cmt-${fname}`;
    const envFileName = batFileName + '.env';
    const bat = [
        `@echo off`,
        `cd /d "%~dp0"`,
        `set "VS${majorVersion}0COMNTOOLS=${commonDir}"`,
        `set "INCLUDE="`,
        `call "${devBat}" ${args.join(' ')}`,
        `setlocal enableextensions enabledelayedexpansion`,
        `cd /d "%~dp0"` /* Switch back to original drive */
    ];
    for (const envVar of msvcEnvVars) {
        bat.push(`if DEFINED ${envVar} echo ${envVar} := %${envVar}% >> ${envFileName}`);
    }
    // writeFile and unlink don't need quotes (they work just fine with an unquoted path with space)
    // but they might fail sometimes if quotes are present, so remove for now any surrounding quotes
    // that may have been defined by the user (the command prompt experience makes it very likely
    // for the user to use quotes when defining an environment variable with a space containing path).
    let tmpDir = paths_1.default.tmpDir;
    if (!tmpDir) {
        console.log(`TEMP dir is not set. ${devBat} will not run.`);
        return;
    }
    tmpDir = tmpDir.trim();
    if (tmpDir.startsWith('"') && tmpDir.endsWith('"')) {
        tmpDir = tmpDir.substring(1, tmpDir.length - 1);
    }
    const batPath = path.join(tmpDir, batFileName);
    const envPath = path.join(tmpDir, envFileName);
    try {
        await pr_1.fs.unlink(envPath);
    }
    catch (error) { }
    const batContent = bat.join('\r\n');
    await pr_1.fs.writeFile(batPath, batContent);
    const outputEncoding = await codepages.getWindowsCodepage();
    const execOption = {
        shell: false,
        silent: true,
        overrideLocale: false,
        outputEncoding: outputEncoding
    };
    // Script file path will be quoted when passed as args
    const result = await proc.execute('cmd.exe', ['/c', batPath], null, execOption).result;
    await pr_1.fs.unlink(batPath);
    const output = (result.stdout) ? result.stdout + (result.stderr || '') : result.stderr;
    let env = '';
    try {
        /* When the bat running failed, envPath would not exist */
        const binEnv = await pr_1.fs.readFile(envPath);
        env = iconv.decode(binEnv, outputEncoding);
        await pr_1.fs.unlink(envPath);
    }
    catch (error) {
        log.error(error);
    }
    if (!env) {
        env = '';
    }
    const vars = env.split('\n').map(l => l.trim()).filter(l => l.length !== 0).reduce((acc, line) => {
        const mat = /(\w+) := ?(.*)/.exec(line);
        if (mat) {
            acc[mat[1]] = mat[2];
        }
        else {
            log.error(localize(1, null, line));
        }
        return acc;
    }, environmentVariables_1.EnvironmentUtils.create());
    const includeEnv = (_a = vars['INCLUDE']) !== null && _a !== void 0 ? _a : '';
    if (includeEnv === '') {
        log.error(localize(2, null, devBat, args.join(' '), env, batContent, output));
        return;
    }
    let WindowsSDKVersionParsed = {
        major: 0,
        minor: 0,
        patch: 0
    };
    const WindowsSDKVersion = (_b = vars['WindowsSDKVersion']) !== null && _b !== void 0 ? _b : '0.0.0';
    try {
        WindowsSDKVersionParsed = util.parseVersion(WindowsSDKVersion);
    }
    catch (err) {
        log.error(`Parse '${WindowsSDKVersion}' failed`);
    }
    if (util.compareVersion(WindowsSDKVersionParsed, { major: 10, minor: 0, patch: 14393 }) >= 0) {
        const WindowsSdkDir = (_c = vars['WindowsSdkDir']) !== null && _c !== void 0 ? _c : '';
        const existPath = (_d = vars['PATH']) !== null && _d !== void 0 ? _d : '';
        const oldWinSdkBinPath = path.join(WindowsSdkDir, 'bin', hostArch);
        const newWinSdkBinPath = path.join(WindowsSdkDir, 'bin', WindowsSDKVersion, hostArch);
        const newWinSdkBinPathExist = await pr_1.fs.exists(newWinSdkBinPath);
        if (newWinSdkBinPathExist &&
            existPath !== '' &&
            existPath.toLowerCase().indexOf(newWinSdkBinPath.toLowerCase()) < 0) {
            log.info(localize(3, null, oldWinSdkBinPath, newWinSdkBinPath, devBat));
            vars['PATH'] = `${newWinSdkBinPath};${existPath}`;
        }
    }
    log.debug(localize(4, null, devBat, args.join(' '), JSON.stringify(vars)));
    return vars;
}
/**
 * Gets the full path to the vcvars*.bat script for the given VS installation and host/target architecture.
 * If not found it means the toolset architecture is not supported for this installation.
 * @param vsInstall The VS installation.
 * @param hostArch The desired toolset host architecture.
 * @param targetArch The desired toolset target architecture.
 * @returns Path to vcvars*.bat script or null if not found.
 */
async function getVcVarsBatScript(vsInstall, hostArch, targetArch) {
    const majorVersion = parseInt(vsInstall.installationVersion);
    let vcVarsScript = 'vcvarsall.bat';
    if (targetArch === "arm" || targetArch === "arm64") {
        // The arm(64) vcvars filename for x64 hosted toolset is using the 'amd64' alias.
        vcVarsScript = `vcvars${getHostTargetArchString(hostArch, targetArch, true)}.bat`;
    }
    let devBatFolder = path.join(vsInstall.installationPath, 'VC', 'Auxiliary', 'Build');
    if (majorVersion < 15) {
        devBatFolder = path.join(vsInstall.installationPath, 'VC');
    }
    const devBat = path.join(devBatFolder, vcVarsScript);
    // The presence of vcvars[hostArch][targetArch].bat indicates whether targetArch is included
    // in the given VS installation.
    if (!await pr_1.fs.exists(devBat)) {
        return null;
    }
    else {
        return devBat;
    }
}
exports.getVcVarsBatScript = getVcVarsBatScript;
/**
 * Extracts environment variables from vcvarsall.bat.
 * @param inst The installation to extract variables from
 * @param hostArch The toolset host architecture
 * @param targetArch The toolset target architecture. If unspecified this defaults to `hostArch`
 * @param toolsetVersion The toolset version. If specified `inst` is assumed to have this toolset installed.
 */
async function varsForVSInstallation(inst, hostArch, targetArch, toolsetVersion) {
    log.trace(`varsForVSInstallation path:'${inst.installationPath}' version:${inst.installationVersion} host arch:${hostArch} - target arch:${targetArch}`);
    const commonDir = path.join(inst.installationPath, 'Common7', 'Tools');
    const majorVersion = parseInt(inst.installationVersion);
    const devbat = await getVcVarsBatScript(inst, hostArch, targetArch);
    if (!devbat) {
        return null;
    }
    const devBatArgs = [getHostTargetArchString(hostArch, targetArch, majorVersion < 15)];
    if (toolsetVersion && majorVersion >= 15) {
        devBatArgs.push(`-vcvars_ver=${toolsetVersion}`);
    }
    const variables = await collectDevBatVars(hostArch, devbat, devBatArgs, majorVersion, commonDir);
    if (!variables) {
        return null;
    }
    else {
        // This is a very *hacky* and sub-optimal solution, but it
        // works for now. This *helps* CMake make the right decision
        // when you have the release and pre-release edition of the same
        // VS version installed. I don't really know why or what causes
        // this issue, but this here seems to work. It basically just sets
        // the VS{vs_version_number}COMNTOOLS environment variable to contain
        // the path to the Common7 directory.
        const vsVersion = variables['VISUALSTUDIOVERSION'];
        if (vsVersion) {
            variables[`VS${vsVersion.replace('.', '')}COMNTOOLS`] = commonDir;
        }
        // For Ninja and Makefile generators, CMake searches for some compilers
        // before it checks for cl.exe. We can force CMake to check cl.exe first by
        // setting the CC and CXX environment variables when we want to do a
        // configure.
        variables['CC'] = 'cl.exe';
        variables['CXX'] = 'cl.exe';
        if (paths_1.default.ninjaPath) {
            let envPATH = variables['PATH'];
            if (undefined !== envPATH) {
                const envPaths = envPATH.split(';');
                const ninjaPath = path.dirname(paths_1.default.ninjaPath);
                const ninjaPathBase = envPaths.find(path => path === ninjaPath);
                if (undefined === ninjaPathBase) {
                    envPATH = envPATH.concat(';' + ninjaPath);
                    variables['PATH'] = envPATH;
                }
            }
        }
        return variables;
    }
}
exports.varsForVSInstallation = varsForVSInstallation;


/***/ }),

/***/ 18679:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/**
 * Module for controlling and working with Kits.
 */ /** */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.kitChangeNeedsClean = exports.getAdditionalKits = exports.kitsForWorkspaceDirectory = exports.kitsPathForWorkspaceFolder = exports.kitsPathForWorkspaceDirectoryPath = exports.readKitsFile = exports.descriptionForKit = exports.scanForKitsIfNeeded = exports.scanForKits = exports.findCLCompilerPath = exports.effectiveKitEnvironment = exports.getVSKitEnvironment = exports.scanForClangForMSVCKits = exports.scanForVSKits = exports.getShellScriptEnvironment = exports.MSVC_HOST_ARCHES = exports.vsDisplayName = exports.vsVersionName = exports.scanDirForCompilerKits = exports.kitIfCompiler = exports.getKitDetect = exports.getCompilerVersion = exports.OLD_USER_KITS_FILEPATH = exports.USER_KITS_FILEPATH = exports.SpecialKitsCount = exports.SpecialKits = void 0;
const rollbar_1 = __webpack_require__(58543);
const util = __webpack_require__(16182);
const json5 = __webpack_require__(12311);
const path = __webpack_require__(71017);
const vscode = __webpack_require__(89496);
const kitsController = __webpack_require__(61145);
const expand = __webpack_require__(77504);
const visualStudio_1 = __webpack_require__(41108);
const logging = __webpack_require__(71067);
const paths_1 = __webpack_require__(86640);
const pr_1 = __webpack_require__(72502);
const proc = __webpack_require__(3477);
const schema_1 = __webpack_require__(11806);
const triple_1 = __webpack_require__(94208);
const util_1 = __webpack_require__(16182);
const nls = __webpack_require__(33463);
const environmentVariables_1 = __webpack_require__(40085);
const cmakeExecutable_1 = __webpack_require__(87630);
nls.config({ messageFormat: nls.MessageFormat.bundle, bundleFormat: nls.BundleFormat.standalone })((__webpack_require__(71017).join)(__dirname, 'src\\kit.ts'));
const localize = nls.loadMessageBundle((__webpack_require__(71017).join)(__dirname, 'src\\kit.ts'));
const log = logging.createLogger('kit');
/**
 * Special kit types and names
 */
var SpecialKits;
(function (SpecialKits) {
    SpecialKits["ScanForKits"] = "__scanforkits__";
    SpecialKits["Unspecified"] = "__unspec__";
})(SpecialKits = exports.SpecialKits || (exports.SpecialKits = {}));
exports.SpecialKitsCount = 2;
/**
 * The path to the user-local kits file.
 */
exports.USER_KITS_FILEPATH = path.join(paths_1.default.dataDir, 'cmake-tools-kits.json');
/**
 * The old path where kits were stored. Upgraded in 1.1.3
 */
exports.OLD_USER_KITS_FILEPATH = path.join(process.platform === 'win32' ? paths_1.default.roamingDataDir : paths_1.default.dataDir, 'cmake-tools.json');
async function getCompilerVersion(vendor, binPath, pr) {
    log.debug(localize(0, null, vendor, binPath));
    if (pr) {
        pr.report({ message: localize(1, null, vendor, binPath) });
    }
    const exec = await proc.execute(binPath, ['-v'], undefined, { overrideLocale: true, timeout: 60000 }).result;
    if (exec.retc !== 0 && !exec.stderr) {
        log.debug(localize(2, null, vendor, exec.retc, binPath));
        return null;
    }
    let version_re;
    let version_match_index;
    if (vendor === 'Clang') {
        version_re = /^(?:Apple LLVM|.*clang) version ([^\s-]+)(?:[\s-]|$)/mgi;
        version_match_index = 1;
    }
    else {
        version_re = /^gcc(-| )version (.*?) .*/mgi;
        version_match_index = 2;
    }
    let target;
    let version = "";
    let fullVersion = "";
    const lines = exec.stderr.trim().split('\n');
    for (const line of lines) {
        const version_match = version_re.exec(line);
        if (version_match !== null && version === '') {
            version = version_match[version_match_index];
            fullVersion = line;
        }
        const target_triple_match = (0, triple_1.findTargetTriple)(line);
        if (target_triple_match !== null) {
            target = (0, triple_1.parseTargetTriple)(target_triple_match);
        }
    }
    if (version === '' || target === undefined) {
        log.debug(localize(3, null, vendor, `"${binPath} -v"`, version, exec.stderr));
        return null;
    }
    const thread_model_mat = /Thread model:\s+(.*)/.exec(exec.stderr);
    let threadModel;
    if (thread_model_mat) {
        threadModel = thread_model_mat[1];
    }
    const install_dir_mat = /InstalledDir:\s+(.*)/.exec(exec.stderr);
    let installedDir;
    if (install_dir_mat && vendor === 'Clang') {
        installedDir = install_dir_mat[1];
    }
    let detectedName = `${vendor} ${version} ${target.triple}`;
    if (isMsys(binPath)) {
        // Add the MSYS environment to the name, so that we can distinguish between different MSYS environments
        const msysEnvDirName = path.dirname(path.dirname(binPath));
        detectedName += ` (${path.basename(msysEnvDirName)})`;
    }
    log.debug(localize(4, null, vendor, binPath));
    return {
        vendor,
        detectedName,
        fullVersion,
        version,
        target,
        threadModel,
        installedDir
    };
}
exports.getCompilerVersion = getCompilerVersion;
async function getKitDetect(kit) {
    var _a, _b, _c, _d;
    const c_bin = (_a = kit === null || kit === void 0 ? void 0 : kit.compilers) === null || _a === void 0 ? void 0 : _a.C;
    /* Special handling of visualStudio */
    if (kit.visualStudio) {
        const vs = await getVSInstallForKit(kit);
        if (!vs) {
            return kit;
        }
        let version = null;
        if (c_bin) {
            version = await getCompilerVersion('Clang', c_bin);
        }
        let targetArch = (_d = (_c = (_b = kit.preferredGenerator) === null || _b === void 0 ? void 0 : _b.platform) !== null && _c !== void 0 ? _c : kit.visualStudioArchitecture) !== null && _d !== void 0 ? _d : 'i686';
        if (targetArch === 'win32') {
            targetArch = 'i686';
        }
        const triple = `${targetArch}-pc-windows-msvc`;
        let versionCompiler = vs.installationVersion;
        let vendor;
        if (version !== null) {
            vendor = 'Clang';
            versionCompiler = version.version;
        }
        else {
            vendor = `MSVC`;
        }
        return {
            vendor,
            triple,
            version: versionCompiler,
            versionRuntime: vs.installationVersion
        };
    }
    else {
        let vendor;
        if (kit.name.startsWith('GCC ')) {
            vendor = 'GCC';
        }
        else if (kit.name.startsWith('Clang ')) {
            vendor = 'Clang';
        }
        if (vendor === undefined) {
            return kit;
        }
        let version = null;
        if (c_bin) {
            version = await getCompilerVersion(vendor, c_bin);
        }
        if (!version) {
            return kit;
        }
        return {
            vendor,
            triple: (0, triple_1.computeTargetTriple)(version.target),
            version: version.version,
            versionRuntime: version.version
        };
    }
}
exports.getKitDetect = getKitDetect;
function isMsys(bin) {
    const isWin32 = process.platform === 'win32';
    const isMsys = isWin32 && bin.toLowerCase().includes('msys');
    return isMsys;
}
function isMingw(bin) {
    const isWin32 = process.platform === 'win32';
    const isMingw = isWin32 && (bin.toLowerCase().includes('mingw') ||
        isMsys(bin));
    return isMingw;
}
async function asMingwKit(bin, kit) {
    const binParentPath = path.dirname(bin);
    const mingwMakePath = path.join(binParentPath, 'mingw32-make.exe');
    const mingwMakeExists = await pr_1.fs.exists(mingwMakePath);
    // During a scan, binParentPath must be a directory already in the PATH.
    // Therefore, we will assume that MinGW will remain in the user's PATH
    // and do not need to record the current state of PATH (leave it to the
    // user to rescan later or specify an explicit path to MinGW if this
    // changes).  Additionally, caching the current state of PATH can cause
    // complications on later invocation when using the kit environment
    // because its PATH will take precedence.  If a user makes changes to
    // their PATH later without rescanning for kits, then the kit's cached
    // PATH will clobber the actual current PATH.  We will, however, record
    // the MinGW path in case we want to use it later.
    const ENV_PATH = `${binParentPath}`;
    kit.environmentVariables = { CMT_MINGW_PATH: ENV_PATH };
    if (mingwMakeExists) {
        // Check for working mingw32-make
        const execMake = await proc.execute(mingwMakePath, ['-v'], null, { environment: { PATH: ENV_PATH }, timeout: 30000 }).result;
        if (execMake.retc !== 0) {
            log.debug(localize(5, null, "\"-v\"", bin));
        }
        else {
            kit.preferredGenerator = { name: 'MinGW Makefiles' };
        }
    }
    return kit;
}
/**
 * Convert a binary (by path) to a CompilerKit. This checks if the named binary
 * is a GCC or Clang compiler and gets its version. If it is not a compiler,
 * returns `null`.
 * @param bin Path to a binary
 * @param isTrusted True iff the binary is in a trusted path. Default true.
 * @returns A CompilerKit, or null if `bin` is not a known compiler
 */
async function kitIfCompiler(bin, isTrusted = true, pr) {
    var _a, _b;
    const fname = path.basename(bin);
    // Check by filename what the compiler might be. This is just heuristic.
    const gcc_regex = /^((\w+-)*)gcc(-\d+(\.\d+(\.\d+)?)?)?(\.exe)?$/;
    const clang_regex = /^clang(-\d+(\.\d+(\.\d+)?)?)?(\.exe)?$/;
    const clang_cl_regex = /^clang\-cl(-\d+(\.\d+(\.\d+)?)?)?(\.exe)?$/;
    const gcc_res = gcc_regex.exec(fname);
    const clang_res = clang_regex.exec(fname);
    const clang_cl_res = clang_cl_regex.exec(fname);
    if (gcc_res) {
        const version = isTrusted ? await getCompilerVersion('GCC', bin, pr) : null;
        if (isTrusted && version === null) {
            return null;
        }
        const gccCompilers = {};
        const gxx_fname1 = fname.replace(/gcc/, 'g++');
        const gxx_bin1 = path.join(path.dirname(bin), gxx_fname1);
        if (await pr_1.fs.exists(gxx_bin1)) {
            // Names like x86_64-pc-linux-gnu-gcc-11.1.0
            gccCompilers.C = bin;
            // Names like x86_64-pc-linux-gnu-g++-11.1.0
            gccCompilers.CXX = gxx_bin1;
        }
        else {
            const fname2 = fname.replace(/gcc(-\d+(\.\d+(\.\d+)?)?)/, 'gcc');
            const bin2 = path.join(path.dirname(bin), fname2);
            const gxx_fname2 = fname2.replace(/gcc/, 'g++');
            const gxx_bin2 = path.join(path.dirname(bin), gxx_fname2);
            // Ensure the version is match
            const version2 = (isTrusted && await pr_1.fs.exists(bin2)) ? await getCompilerVersion('GCC', bin2, pr) : null;
            const version_is_match = version2 === null ? false : version === null ? false : version2.fullVersion === version.fullVersion;
            // For the kits with only `x86_64-pc-linux-gnu-gcc` provided:
            // We will have bin2 === bin1 because the regex did not make a replacement,
            // then version_match will be true, but no C++ compiler will be found,
            // so we will correctly skip setting the CXX compiler.
            if (version_is_match) {
                // Names like x86_64-pc-linux-gnu-gcc
                gccCompilers.C = bin2;
            }
            else {
                // Names like x86_64-pc-linux-gnu-gcc-11.1.0
                gccCompilers.C = bin;
            }
            if (version_is_match && await pr_1.fs.exists(gxx_bin2)) {
                // Names like x86_64-pc-linux-gnu-g++
                gccCompilers.CXX = gxx_bin2;
            }
        }
        const gccKit = {
            name: (_a = version === null || version === void 0 ? void 0 : version.detectedName) !== null && _a !== void 0 ? _a : localize(6, null),
            compilers: gccCompilers,
            isTrusted
        };
        if (isTrusted && isMingw(bin)) {
            return asMingwKit(bin, gccKit);
        }
        else {
            return gccKit;
        }
    }
    else if (clang_res || clang_cl_res) {
        const version = isTrusted ? await getCompilerVersion('Clang', bin, pr) : null;
        if (isTrusted) {
            if (version === null) {
                return null;
            }
            if (version.target && version.target.triple.includes('msvc') &&
                version.installedDir && version.installedDir.includes("Microsoft Visual Studio")) {
                // Skip MSVC ABI compatible Clang installations (bundled within VS), which will be handled in 'scanForClangForMSVCKits()' later.
                // But still process any Clang installations outside VS (right in Program Files for example), even if their version
                // mentions msvc.
                return null;
            }
            if (version.target && version.target.triple.includes('msvc') && clang_cl_res && isMingw(bin)) {
                // Skip clang-cl.exe from mingw, as it won't work (correct access to MSVC environment is not granted).
                // TODO: handle this case correctly at some point.
                return null;
            }
        }
        const clangCompilers = {};
        const clangxx_fname = clang_cl_res ? fname : fname.replace(/^clang/, 'clang++');
        const clangxx_bin1 = path.join(path.dirname(bin), clangxx_fname);
        log.debug(localize(7, null, bin));
        if (await pr_1.fs.exists(clangxx_bin1)) {
            // Names like clang-13
            clangCompilers.C = bin;
            // Names like clang++-13
            clangCompilers.CXX = clangxx_bin1;
        }
        else {
            const fname2 = clang_cl_res ? fname.replace(/clang\-cl(-\d+(\.\d+(\.\d+)?)?)/, 'clang-cl') : fname.replace(/clang(-\d+(\.\d+(\.\d+)?)?)/, 'clang');
            const bin2 = path.join(path.dirname(bin), fname2);
            const clangxx_fname2 = clang_cl_res ? fname : fname2.replace(/clang/, 'clang++');
            const clangxx_bin2 = path.join(path.dirname(bin), clangxx_fname2);
            // Ensure the version is match
            const version2 = (isTrusted && await pr_1.fs.exists(bin2)) ? await getCompilerVersion('Clang', bin2, pr) : null;
            const version_is_match = version2 === null ? false : version === null ? false : version2.fullVersion === version.fullVersion;
            // For the kits with only `clang` provided:
            // We will have bin2 === bin1 because the regex did not make a replacement,
            // then version_match will be true, but no C++ compiler will be found,
            // so we will correctly skip setting the CXX compiler.
            if (version_is_match) {
                // Names like clang
                clangCompilers.C = bin2;
            }
            else {
                // Names like clang-13
                clangCompilers.C = bin;
            }
            if (version_is_match && await pr_1.fs.exists(clangxx_bin2)) {
                // Names like clang++
                clangCompilers.CXX = clangxx_bin2;
            }
        }
        const clangKit = {
            name: (_b = (clang_cl_res ? version === null || version === void 0 ? void 0 : version.detectedName.replace(/^Clang/, 'Clang-cl') : version === null || version === void 0 ? void 0 : version.detectedName)) !== null && _b !== void 0 ? _b : localize(8, null),
            compilers: clangCompilers,
            isTrusted
        };
        if (isTrusted && isMingw(bin)) {
            return asMingwKit(bin, clangKit);
        }
        else {
            return clangKit;
        }
    }
    else {
        return null;
    }
}
exports.kitIfCompiler = kitIfCompiler;
async function scanDirectory(dir, mapper) {
    if (util.isTestMode() && process.platform === 'win32' && dir.indexOf('AppData') > 0 && dir.indexOf('Local') > 0) {
        // This folder causes problems with tests on Windows.
        log.debug(localize(9, null));
        return [];
    }
    if (!await pr_1.fs.exists(dir)) {
        log.debug(localize(10, null, dir));
        return [];
    }
    log.debug(localize(11, null, dir));
    try {
        const stat = await pr_1.fs.stat(dir);
        if (!stat.isDirectory()) {
            console.log('Skipping scan of non-directory', dir);
            return [];
        }
    }
    catch (ce) {
        const e = ce;
        log.warning(localize(12, null, dir, util.errorToString(e)));
        if (e.code === 'ENOENT') {
            return [];
        }
        throw e;
    }
    // Get files in the directory
    let bins;
    try {
        bins = (await pr_1.fs.readdir(dir)).map(f => path.join(dir, f));
    }
    catch (ce) {
        const e = ce;
        if (e.code === 'EACCES' || e.code === 'EPERM') {
            return [];
        }
        console.log('unexpected file system error');
        console.log(e);
        return [];
    }
    const prs = await Promise.all(bins.map(b => mapper(b)));
    return (0, util_1.dropNulls)(prs);
}
/**
 * Scans a directory for compiler binaries.
 * @param dir Directory containing candidate binaries
 * @param isTrusted True iff the directory is a trusted path. Default true.
 * @returns A list of CompilerKits found
 */
async function scanDirForCompilerKits(dir, isTrusted = true, pr) {
    const kits = await scanDirectory(dir, async (bin) => {
        log.trace(localize(13, null, bin));
        try {
            const kit = await kitIfCompiler(bin, isTrusted, pr);
            if (kit === null || kit === void 0 ? void 0 : kit.compilers) {
                log.trace(`Kit found: ${kit.name}`);
                log.trace(`        C: ${kit.compilers['C']}`);
                log.trace(`      CXX: ${kit.compilers['CXX']}`);
            }
            return kit;
        }
        catch (ce) {
            const e = ce;
            log.warning(localize(14, null, bin, util.errorToString(e)));
            if (e.code === 'EACCES') {
                // The binary may not be executable by this user...
                return null;
            }
            else if (e.code === 'ENOENT') {
                // This will happen on Windows if we try to "execute" a directory
                return null;
            }
            else if (e.code === 'UNKNOWN' && process.platform === 'win32') {
                // This is when file is not executable (in windows)
                return null;
            }
            const stat = await pr_1.fs.stat(bin);
            log.debug('File infos: ', 'Mode', stat.mode, 'isFile', stat.isFile(), 'isDirectory', stat.isDirectory(), 'isSymbolicLink', stat.isSymbolicLink());
            rollbar_1.default.exception(localize(15, null), e, { bin, exception: e.code, stat });
            return null;
        }
    });
    log.debug(localize(16, null, kits.length, dir));
    return kits;
}
exports.scanDirForCompilerKits = scanDirForCompilerKits;
/**
 * Construct the Kit.visualStudio property (legacy)
 *
 * @param inst The VSInstallation to use
 */
function legacyKitVSName(inst) {
    return `VisualStudio.${parseInt(inst.installationVersion)}.0`;
}
/**
 * Construct the Kit.visualStudio property.
 *
 * @param inst The VSInstallation to use
 */
function kitVSName(inst) {
    return `${inst.instanceId}`;
}
/**
 * Construct the Visual Studio version string.
 *
 * @param inst The VSInstallation to use
 */
function vsVersionName(inst) {
    if (!inst.catalog) {
        return inst.instanceId;
    }
    const end = inst.catalog.productDisplayVersion.indexOf('[');
    return end < 0 ? inst.catalog.productDisplayVersion : inst.catalog.productDisplayVersion.substring(0, end - 1);
}
exports.vsVersionName = vsVersionName;
/**
 * Construct the display name (this will be paired with an
 * arch later to construct the Kit.name property).
 *
 * @param inst The VSInstallation to use
 */
function vsDisplayName(inst) {
    if (inst.displayName) {
        if (inst.channelId) {
            const index = inst.channelId.lastIndexOf('.');
            if (index > 0) {
                return `${inst.displayName} ${inst.channelId.substr(index + 1)}`;
            }
        }
        return inst.displayName;
    }
    return inst.instanceId;
}
exports.vsDisplayName = vsDisplayName;
/**
 * Construct the Kit.name property.
 *
 * @param inst The VSInstallation to use
 * @param hostArch The architecture of the toolset host (e.g. x86, x64|amd64)
 * @param targetArch The architecture of the toolset target (e.g. win32|x86, x64|amd64, arm, arm64)
 */
function vsKitName(inst, hostArch, targetArch) {
    // We still keep the amd64 alias for x64, only in the name of the detected VS kits,
    // for compatibility reasons. Switching to 'x64' means leaving
    // orphaned 'amd64' kits around ("Scan for kits" does not delete them yet)
    // and also it may require a new kit selection.
    // VS toolsets paths on disk, vcvarsall.bat parameters and CMake arguments are all x64 now.
    // We can revise later whether to change to 'x64' in the VS kit name as well and how to mitigate it.
    return `${vsDisplayName(inst)} - ${(0, visualStudio_1.getHostTargetArchString)(hostArch, targetArch, true)}`;
}
/**
 * Possible msvc host architectures
 */
exports.MSVC_HOST_ARCHES = ['x86', 'x64'];
/**
 * Gets the environment variables set by a shell script.
 * @param kit The kit to get the environment variables for
 */
async function getShellScriptEnvironment(kit, opts) {
    var _a;
    console.assert(kit.environmentSetupScript);
    const filename = Math.random().toString() + (process.platform === 'win32' ? '.bat' : '.sh');
    const script_filename = `vs-cmt-${filename}`;
    const environment_filename = script_filename + '.env';
    // writeFile and unlink don't need quotes (they work just fine with an unquoted path with space)
    // but they might fail sometimes if quotes are present, so remove for now any surrounding quotes
    // that may have been defined by the user (the command prompt experience makes it very likely
    // for the user to use quotes when defining an environment variable with a space containing path).
    let tmpDir = paths_1.default.tmpDir;
    if (!tmpDir) {
        console.log(`TEMP dir is not set. Shell script "${script_filename}" will not run.`);
        return;
    }
    tmpDir = tmpDir.trim();
    if (tmpDir.startsWith('"') && tmpDir.endsWith('"')) {
        tmpDir = tmpDir.substring(1, tmpDir.length - 1);
    }
    const script_path = path.join(tmpDir, script_filename);
    const environment_path = path.join(tmpDir, environment_filename); // path of temp file in which the script writes the env vars to
    let script = '';
    let run_command = '';
    let environmentSetupScript = (_a = kit.environmentSetupScript) === null || _a === void 0 ? void 0 : _a.trim();
    if (opts) {
        environmentSetupScript = await expand.expandString(environmentSetupScript, opts);
    }
    if (process.platform === 'win32') { // windows
        script += `call "${environmentSetupScript}"\r\n`; // call the user batch script
        script += `set >> "${environment_path}"`; // write env vars to temp file
        // Quote the script file path before running it, in case there are spaces.
        run_command = `call "${script_path}"`;
    }
    else { // non-windows
        script += `source "${environmentSetupScript}"\n`; // run the user shell script
        script += `printenv >> ${environment_path}`; // write env vars to temp file
        run_command = `/bin/bash -c "source ${script_path}"`; // run script in bash to enable bash-builtin commands like 'source'
    }
    try {
        await pr_1.fs.unlink(environment_path); // delete the temp file if it exists
    }
    catch (error) { }
    await pr_1.fs.writeFile(script_path, script); // write batch file
    const res = await proc.execute(run_command, [], null, { shell: true, silent: true }).result; // run script
    await pr_1.fs.unlink(script_path); // delete script file
    const output = (res.stdout) ? res.stdout + (res.stderr || '') : res.stderr;
    let env = '';
    try {
        /* When the script failed, envpath would not exist */
        env = await pr_1.fs.readFile(environment_path, 'utf8');
        await pr_1.fs.unlink(environment_path);
    }
    catch (error) {
        log.error(error);
    }
    if (!env || env === '') {
        console.log(`Error running ${kit.environmentSetupScript} with:`, output);
        return;
    }
    // split and trim env vars, and exclude ${variables}
    const filter = /\$\{.+?\}/;
    const vars = env.split('\n').map(line => line.trim()).filter(line => (line.length !== 0 && !line.match(filter))).reduce((acc, line) => {
        const match = /(\w+)=?(.*)/.exec(line);
        if (match) {
            acc[match[1]] = match[2];
        }
        else {
            log.error(localize(17, null, line));
        }
        return acc;
    }, environmentVariables_1.EnvironmentUtils.create());
    log.debug(localize(18, null, kit.environmentSetupScript, JSON.stringify(vars)));
    return vars;
}
exports.getShellScriptEnvironment = getShellScriptEnvironment;
/**
 * Preferred CMake VS generators by VS version
 */
const VsGenerators = {
    10: 'Visual Studio 10 2010',
    11: 'Visual Studio 11 2012',
    VS120COMNTOOLS: 'Visual Studio 12 2013',
    12: 'Visual Studio 12 2013',
    VS140COMNTOOLS: 'Visual Studio 14 2015',
    14: 'Visual Studio 14 2015',
    15: 'Visual Studio 15 2017',
    16: 'Visual Studio 16 2019',
    17: 'Visual Studio 17 2022'
};
/**
 * Try to get a VSKit from a VS installation and architecture
 * @param inst A VS installation from vswhere
 * @param hostArch The host architecture
 * @param targetArch The target architecture
 */
async function tryCreateNewVCEnvironment(inst, hostArch, targetArch, pr) {
    const name = vsKitName(inst, hostArch, targetArch);
    log.debug(localize(19, null, name));
    if (pr) {
        pr.report({ message: localize(20, null, name) });
    }
    const variables = await (0, visualStudio_1.varsForVSInstallation)(inst, hostArch, targetArch);
    if (!variables) {
        return null;
    }
    const kit = {
        name,
        visualStudio: kitVSName(inst),
        visualStudioArchitecture: hostArch,
        isTrusted: true
    };
    const version = /^(\d+)+./.exec(inst.installationVersion);
    log.debug(localize(21, null));
    log.debug(` DisplayName: ${name}`);
    log.debug(` InstanceId: ${inst.instanceId}`);
    log.debug(` InstallVersion: ${inst.installationVersion}`);
    const majorVersion = parseInt(inst.installationVersion);
    if (version) {
        const generatorName = VsGenerators[version[1]];
        const host = hostArch.toLowerCase().replace(/ /g, "").startsWith("host=") ? hostArch : "host=" + hostArch;
        if (generatorName) {
            log.debug(` ${localize(22, null, generatorName)}`);
            kit.preferredGenerator = {
                name: generatorName,
                platform: visualStudio_1.generatorPlatformFromVSArch[targetArch] || targetArch,
                // CMake generator toolsets support also different versions (via -T version=).
                toolset: majorVersion < 15 ? undefined : host
            };
        }
        log.debug(` ${localize(23, null, generatorName, JSON.stringify(kit.preferredGenerator))}`);
    }
    return kit;
}
/**
 * Scans the system for Visual C++ installations using vswhere
 */
async function scanForVSKits(pr) {
    const installs = await (0, visualStudio_1.vsInstallations)();
    // Exclude ARM64 host checking on x86 and x64 since they cannot act as an arm64 host.
    const hostArches = (util.getHostArchitecture() === 'arm64') ?
        [...exports.MSVC_HOST_ARCHES, 'ARM64'] :
        exports.MSVC_HOST_ARCHES;
    const prs = installs.map(async (inst) => {
        const ret = [];
        const targetArches = ['x86', 'x64', 'arm', 'arm64'];
        const version = util.tryParseVersion(inst.installationVersion);
        // ARM64 support as a host was added in Visual Studio 2022 17.4 and above,
        // so we'll avoid checking it on anything lower.
        const vsVersionSupportsArm64 = ((version === null || version === void 0 ? void 0 : version.major) === 17 && version.minor >= 4) || (version && version.major > 17);
        const sub_prs = [];
        hostArches.forEach(hostArch => {
            if (hostArch === 'ARM64' && !vsVersionSupportsArm64) {
                return;
            }
            targetArches.forEach(targetArch => {
                sub_prs.push(tryCreateNewVCEnvironment(inst, hostArch, targetArch, pr));
            });
        });
        const maybe_kits = await Promise.all(sub_prs);
        maybe_kits.map(k => k ? ret.push(k) : null);
        return ret;
    });
    const vs_kits = await Promise.all(prs);
    return [].concat(...vs_kits);
}
exports.scanForVSKits = scanForVSKits;
async function scanDirForClangForMSVCKits(dir, vsInstalls, cmakePath) {
    const kits = await scanDirectory(dir.path, async (binPath) => {
        const isClangGnuCli = (path.basename(binPath, '.exe') === 'clang');
        const isClangMsvcCli = (path.basename(binPath, '.exe') === 'clang-cl');
        if (!isClangGnuCli && !isClangMsvcCli) {
            return null;
        }
        const version = dir.isTrusted ? await getCompilerVersion('Clang', binPath) : null;
        if (dir.isTrusted && version === null) {
            return null;
        }
        let clang_cli = '(MSVC CLI)';
        // Clang for MSVC ABI with GNU CLI (command line interface) is supported in CMake 3.15.0+
        if (isClangGnuCli) {
            if (cmakePath === undefined) {
                log.info(localize(24, null));
                return null;
            }
            else {
                const cmake_executable = await (0, cmakeExecutable_1.getCMakeExecutableInformation)(cmakePath);
                if (undefined === cmake_executable.version) {
                    return null;
                }
                else {
                    if ((0, util_1.versionLess)(cmake_executable.version, '3.15.0')) {
                        // Could not find a supported CMake version
                        return null;
                    }
                }
            }
            // Found a supported CMake version
            clang_cli = '(GNU CLI)';
        }
        const clangKits = [];
        for (const vs of vsInstalls) {
            const install_name = vsDisplayName(vs);
            const vsArch = ((version === null || version === void 0 ? void 0 : version.target) && version.target.triple.includes('i686-pc')) ? 'x86' : 'x64';
            const archForKitName = vsArch === 'x86' ? 'x86' : 'amd64';
            const clangArchPath = (vsArch === "x64") ? "x64\\" : "";
            const clangKitName = `Clang ${version === null || version === void 0 ? void 0 : version.version} ${clang_cli} for MSVC ${vs.installationVersion} (${install_name} - ${archForKitName})`;
            const clangExists = async () => {
                const exists = binPath.startsWith(`${vs.installationPath}\\VC\\Tools\\Llvm\\${clangArchPath}bin`) && await util.checkFileExists(util.lightNormalizePath(binPath));
                return exists;
            };
            if (isClangGnuCli) {
                if (await clangExists()) {
                    clangKits.push({
                        name: clangKitName,
                        visualStudio: kitVSName(vs),
                        visualStudioArchitecture: vsArch,
                        compilers: {
                            C: binPath,
                            CXX: binPath
                        },
                        isTrusted: dir.isTrusted
                    });
                }
            }
            else {
                const installationVersion = /^(\d+)+./.exec(vs.installationVersion);
                const generatorName = installationVersion ? VsGenerators[installationVersion[1]] : undefined;
                if (generatorName) {
                    if (await clangExists()) {
                        clangKits.push({
                            name: clangKitName,
                            visualStudio: kitVSName(vs),
                            visualStudioArchitecture: vsArch,
                            preferredGenerator: {
                                name: generatorName,
                                platform: visualStudio_1.generatorPlatformFromVSArch[vsArch] || vsArch,
                                toolset: `ClangCL,host=${vsArch}`
                            },
                            compilers: {
                                C: binPath,
                                CXX: binPath
                            },
                            isTrusted: dir.isTrusted
                        });
                    }
                }
            }
        }
        return clangKits;
    });
    return [].concat(...kits);
}
async function scanForClangForMSVCKits(searchPaths, cmakePath) {
    const vs_installs = await (0, visualStudio_1.vsInstallations)();
    const results = searchPaths.map(p => scanDirForClangForMSVCKits(p, vs_installs, cmakePath));
    return results;
}
exports.scanForClangForMSVCKits = scanForClangForMSVCKits;
async function getVSInstallForKit(kit) {
    if (process.platform !== "win32") {
        return undefined;
    }
    console.assert(kit.visualStudio);
    console.assert(kit.visualStudioArchitecture);
    const installs = await (0, visualStudio_1.vsInstallations)();
    const match = (inst) => 
    // old Kit format
    (legacyKitVSName(inst) === kit.visualStudio) ||
        // new Kit format
        (kitVSName(inst) === kit.visualStudio) ||
        // Clang for VS kit format
        (!!kit.compilers && kit.name.indexOf("Clang") >= 0 && kit.name.indexOf(vsDisplayName(inst)) >= 0);
    return installs.find(match);
}
async function getVSKitEnvironment(kit) {
    var _a;
    const requested = await getVSInstallForKit(kit);
    if (!requested) {
        return null;
    }
    return (0, visualStudio_1.varsForVSInstallation)(requested, kit.visualStudioArchitecture, (_a = kit.preferredGenerator) === null || _a === void 0 ? void 0 : _a.platform);
}
exports.getVSKitEnvironment = getVSKitEnvironment;
/**
 * kit.environmentVariables have higher priority, we expand `Environment` with
 * `environmentSetupScript` first, then expand and update `Environment` with`environmentVariables`
 * @param kit The kit for evaluate `Environment`
 * @param opts The expand options for evaluate `Environment`
 * @returns `Environment`
 */
async function effectiveKitEnvironment(kit, opts) {
    var _a, _b;
    let host_env = process.env;
    if (kit.environmentSetupScript) {
        const shell_vars = await getShellScriptEnvironment(kit, opts);
        if (shell_vars) {
            host_env = shell_vars;
        }
    }
    let env = environmentVariables_1.EnvironmentUtils.create(host_env);
    const kit_env = environmentVariables_1.EnvironmentUtils.create(kit.environmentVariables);
    const expandOptions = {
        vars: {},
        envOverride: host_env
    };
    for (const env_var of Object.keys(kit_env)) {
        env[env_var] = await expand.expandString(kit_env[env_var], opts !== null && opts !== void 0 ? opts : expandOptions);
    }
    if (process.platform === 'win32') {
        if (kit.visualStudio && kit.visualStudioArchitecture) {
            const vs_vars = await getVSKitEnvironment(kit);
            env = environmentVariables_1.EnvironmentUtils.merge([env, vs_vars]);
        }
        else {
            const path_list = [];
            const cCompiler = (_a = kit.compilers) === null || _a === void 0 ? void 0 : _a.C;
            /* Force add the compiler executable dir to the PATH env */
            if (cCompiler) {
                path_list.push(path.dirname(cCompiler));
            }
            const mingwPath = env['CMT_MINGW_PATH'];
            if (mingwPath) {
                path_list.push(mingwPath);
            }
            if (env.hasOwnProperty('PATH')) {
                // since mingwPath is at the front of path_list, we shouldn't need to remove other mingw from env['PATH']
                path_list.push((_b = env['PATH']) !== null && _b !== void 0 ? _b : '');
                env['PATH'] = path_list.join(';');
            }
        }
    }
    log.debug(localize(25, null, `'${kit.name}'`, JSON.stringify(env, null, 2)));
    return env;
}
exports.effectiveKitEnvironment = effectiveKitEnvironment;
async function findCLCompilerPath(env) {
    if (!env) {
        return null;
    }
    const path_val = env['PATH'];
    if (!path_val) {
        return null;
    }
    const path_ext = env['PATHEXT'];
    if (!path_ext) {
        return null;
    }
    for (const dir of path_val.split(';')) {
        for (const ext of path_ext.split(';')) {
            const fname = `cl${ext}`;
            const testpath = path.join(dir, fname);
            const stat = await pr_1.fs.tryStat(testpath);
            if (stat && !stat.isDirectory()) {
                return testpath;
            }
        }
    }
    return null;
}
exports.findCLCompilerPath = findCLCompilerPath;
/**
 * Search for Kits available on the platform.
 * @returns A list of Kits.
 */
async function scanForKits(cmakePath, opt) {
    log.debug(localize(26, null));
    const prog = {
        location: vscode.ProgressLocation.Notification,
        title: localize(27, null)
    };
    const untrusted_paths = new Set();
    const result = await vscode.window.withProgress(prog, async (pr) => {
        const isWin32 = process.platform === 'win32';
        pr.report({ message: localize(28, null) });
        // Maps paths to booleans indicating if the path is trusted.
        const scan_paths = new Map();
        function addScanPath(path, trusted, paths) {
            const normalizedPath = util.lightNormalizePath(path);
            const map = paths !== null && paths !== void 0 ? paths : scan_paths;
            map.set(normalizedPath, map.get(normalizedPath) || trusted);
        }
        // Search directories on `PATH` for compiler binaries
        if (process.env.hasOwnProperty('PATH')) {
            if (opt && opt.ignorePath) {
                log.debug(localize(29, null));
            }
            else {
                const sep = isWin32 ? ';' : ':';
                for (const dir of process.env.PATH.split(sep)) {
                    // Directories on PATH are considered trusted
                    addScanPath(dir, true);
                }
            }
        }
        if (opt === null || opt === void 0 ? void 0 : opt.scanDirs) {
            for (const dir of opt.scanDirs) {
                addScanPath(dir, true);
            }
        }
        // Search them all in parallel
        let kit_promises = [];
        // Default installation locations
        paths_1.default.windows.defaultCompilerPaths.LLVM.forEach(p => addScanPath(p.path, p.isTrusted));
        paths_1.default.windows.defaultCompilerPaths.MSYS2.forEach(p => addScanPath(p.path, p.isTrusted));
        const compiler_kits = Array.from(scan_paths).map(path_el => scanDirForCompilerKits(path_el[0], path_el[1], pr));
        kit_promises = kit_promises.concat(compiler_kits);
        if (isWin32) {
            // Prepare clang-cl search paths
            const clang_paths = new Map();
            // LLVM_ROOT environment variable location
            if (process.env.hasOwnProperty('LLVM_ROOT')) {
                const llvm_root = path.normalize(process.env.LLVM_ROOT + "\\bin");
                addScanPath(llvm_root, true, clang_paths);
            }
            // PATH environment variable locations
            scan_paths.forEach((isTrusted, path) => addScanPath(path, isTrusted, clang_paths));
            // LLVM bundled in VS locations
            const vs_installs = await (0, visualStudio_1.vsInstallations)();
            const bundled_clang_paths = [];
            vs_installs.forEach(vs_install => {
                bundled_clang_paths.push(vs_install.installationPath + "\\VC\\Tools\\Llvm\\bin");
                bundled_clang_paths.push(vs_install.installationPath + "\\VC\\Tools\\Llvm\\x64\\bin");
            });
            bundled_clang_paths.forEach(path_el => addScanPath(path_el, true, clang_paths));
            // Scan for kits
            const vs_kits = scanForVSKits(pr);
            kit_promises.push(vs_kits);
            const clang_kits = await scanForClangForMSVCKits(
            // eslint-disable-next-line arrow-body-style
            Array.from(clang_paths).map(([path, isTrusted]) => {
                return { path, isTrusted };
            }), cmakePath);
            kit_promises = kit_promises.concat(clang_kits);
        }
        const arrays = await Promise.all(kit_promises);
        const kits = [].concat(...arrays);
        kits.map(k => log.info(localize(30, null, k.isTrusted ? localize(31, null) : localize(32, null), k.name)));
        scan_paths.forEach((isTrusted, path) => !isTrusted ? untrusted_paths.add(path) : undefined);
        return kits;
    });
    const untrustedKits = result.filter(kit => !kit.isTrusted);
    if (untrustedKits.length > 0) {
        void vscode.window.showWarningMessage(localize(33, null, Array.from(untrusted_paths).toString()), { action: 'yes', title: localize(34, null) }, { action: 'no', title: localize(35, null) }).then(async (action) => {
            if ((action === null || action === void 0 ? void 0 : action.action) === 'yes') {
                const settings = vscode.workspace.getConfiguration('cmake');
                const additionalCompilerSearchDirs = settings.get('additionalCompilerSearchDirs', []);
                additionalCompilerSearchDirs.push(...Array.from(untrusted_paths));
                await settings.update('additionalCompilerSearchDirs', additionalCompilerSearchDirs, vscode.ConfigurationTarget.Global);
                await vscode.commands.executeCommand('cmake.scanForKits');
            }
        });
    }
    return result.filter(kit => kit.isTrusted);
}
exports.scanForKits = scanForKits;
// Rescan if the kits versions (extension context state var versus value defined for this release) don't match.
async function scanForKitsIfNeeded(project) {
    const kitsVersionSaved = project.workspaceContext.state.extensionContext.globalState.get('kitsVersionSaved');
    const kitsVersionCurrent = 2;
    // Scan also when there is no kits version saved in the state.
    if ((!kitsVersionSaved || kitsVersionSaved !== kitsVersionCurrent) && !util.isTestMode() && !kitsController.KitsController.isScanningForKits()) {
        log.info(localize(36, null, kitsVersionSaved, kitsVersionCurrent));
        await kitsController.KitsController.scanForKits(await project.getCMakePathofProject());
        await project.workspaceContext.state.extensionContext.globalState.update('kitsVersionSaved', kitsVersionCurrent);
        return true;
    }
    return false;
}
exports.scanForKitsIfNeeded = scanForKitsIfNeeded;
/**
 * Generates a string description of a kit. This is shown to the user.
 * @param kit The kit to generate a description for
 */
async function descriptionForKit(kit, shortVsName = false) {
    var _a, _b, _c;
    if (kit.description) {
        return kit.description;
    }
    if (kit.toolchainFile) {
        return localize(37, null, kit.toolchainFile);
    }
    if (kit.visualStudio) {
        if (kit.compilers) {
            // Clang for MSVC
            const compilers = Object.keys(kit.compilers).map(k => `${k} = ${kit.compilers[k]}`);
            return localize(38, null, compilers.join(', '));
        }
        else if (shortVsName) {
            const hostTargetArch = (0, visualStudio_1.getHostTargetArchString)(kit.visualStudioArchitecture, (_a = kit.preferredGenerator) === null || _a === void 0 ? void 0 : _a.platform);
            if (kit.preferredGenerator) {
                return localize(39, null, (_b = kit.preferredGenerator) === null || _b === void 0 ? void 0 : _b.name, hostTargetArch);
            }
            else {
                return localize(40, null, hostTargetArch);
            }
        }
        else {
            // MSVC
            const vs_install = await getVSInstallForKit(kit);
            if (vs_install) {
                const hostTargetArch = (0, visualStudio_1.getHostTargetArchString)(kit.visualStudioArchitecture, (_c = kit.preferredGenerator) === null || _c === void 0 ? void 0 : _c.platform);
                return localize(41, null, vsVersionName(vs_install), hostTargetArch);
            }
            return '';
        }
    }
    if (kit.compilers) {
        const compilers = Object.keys(kit.compilers).map(k => `${k} = ${kit.compilers[k]}`);
        return localize(42, null, compilers.join(', '));
    }
    if (kit.name === SpecialKits.ScanForKits) {
        return localize(43, null);
    }
    return localize(44, null);
}
exports.descriptionForKit = descriptionForKit;
async function readKitsFile(filePath, workspaceFolder, expansionOptions) {
    const fileStats = await pr_1.fs.tryStat(filePath);
    if (!fileStats) {
        log.debug(localize(45, null, filePath));
        return [];
    }
    if (!fileStats.isFile()) {
        log.debug(localize(46, null, filePath));
        return [];
    }
    log.debug(localize(47, null, filePath));
    const content_str = await pr_1.fs.readFile(filePath);
    let kits_raw = [];
    try {
        kits_raw = json5.parse(content_str.toLocaleString());
    }
    catch (e) {
        log.error(localize(48, null, path.basename(filePath), util.errorToString(e)));
        return [];
    }
    const validator = await (0, schema_1.loadSchema)('./schemas/kits-schema.json');
    const is_valid = validator(kits_raw);
    if (!is_valid) {
        const errors = validator.errors;
        log.error(localize(49, null, path.basename(filePath), filePath));
        for (const err of errors) {
            log.error(` >> ${err.dataPath}: ${err.message}`);
        }
        return [];
    }
    const kits = kits_raw.map(kit => {
        // Serialized kits are trusted for backwards compatibility if not otherwise specified.
        kit.isTrusted = kit.isTrusted === undefined ? true : kit.isTrusted;
        return kit;
    });
    log.info(localize(50, null, kits.length, filePath));
    const expandedKits = [];
    if (!expansionOptions) {
        expansionOptions = {
            vars: {
                buildKit: '${buildKit}',
                buildType: '${buildType}',
                buildKitVendor: '${buildKitVendor}',
                buildKitTriple: '${buildKitTriple}',
                buildKitVersion: '${buildKitVersion}',
                buildKitHostOs: '${buildKitVendor}',
                buildKitTargetOs: '${buildKitTargetOs}',
                buildKitTargetArch: '${buildKitTargetArch}',
                buildKitVersionMajor: '${buildKitVersionMajor}',
                buildKitVersionMinor: '${buildKitVersionMinor}',
                generator: '${generator}',
                userHome: paths_1.default.userHome,
                workspaceFolder: workspaceFolder ? workspaceFolder : '${workspaceFolder}',
                workspaceFolderBasename: workspaceFolder ? path.basename(workspaceFolder) : '${workspaceFolderBasename}',
                sourceDir: '${sourceDir}',
                workspaceHash: '${workspaceHash}',
                workspaceRoot: workspaceFolder ? workspaceFolder : '${workspaceRoot}',
                workspaceRootFolderName: workspaceFolder ? path.basename(workspaceFolder) : '${workspaceRootFolderName}'
            }
        };
    }
    for (const kit of (0, util_1.dropNulls)(kits)) {
        expansionOptions.vars.buildKit = kit.name;
        if (kit.toolchainFile) {
            kit.toolchainFile = await expand.expandString(kit.toolchainFile, expansionOptions);
        }
        if (kit.compilers) {
            for (const lang in kit.compilers) {
                kit.compilers[lang] = await expand.expandString(kit.compilers[lang], expansionOptions);
            }
        }
        expandedKits.push(kit);
    }
    return expandedKits;
}
exports.readKitsFile = readKitsFile;
/**
 * Get the path to a workspace-specific cmake-kits.json for a given worksapce directory
 * @param dirPath The directory of a workspace
 */
function kitsPathForWorkspaceDirectoryPath(dirPath) {
    return path.join(dirPath, '.vscode/cmake-kits.json');
}
exports.kitsPathForWorkspaceDirectoryPath = kitsPathForWorkspaceDirectoryPath;
/**
 * Get the path to the workspace-specific cmake-kits.json for a given WorkspaceFolder object
 * @param ws The workspace folder
 */
function kitsPathForWorkspaceFolder(ws) {
    return kitsPathForWorkspaceDirectoryPath(ws.uri.fsPath);
}
exports.kitsPathForWorkspaceFolder = kitsPathForWorkspaceFolder;
/**
 * Get the kits declared for the given workspace directory. Looks in `.vscode/cmake-kits.json`.
 * @param workspaceFolder The path to a VSCode workspace directory
 */
function kitsForWorkspaceDirectory(workspaceFolder) {
    const ws_kits_file = path.join(workspaceFolder, '.vscode/cmake-kits.json');
    return readKitsFile(ws_kits_file, workspaceFolder);
}
exports.kitsForWorkspaceDirectory = kitsForWorkspaceDirectory;
/**
 * Get the kits defined by the user in the files pointed by "cmake.additionalKits".
 */
async function getAdditionalKits(project) {
    const opts = await project.getExpansionOptions();
    const expandedAdditionalKitFiles = await project.getExpandedAdditionalKitFiles();
    let additionalKits = [];
    for (const kitFile of expandedAdditionalKitFiles) {
        additionalKits = additionalKits.concat(await readKitsFile(kitFile, project.workspaceContext.folder.uri.fsPath, opts));
    }
    return additionalKits;
}
exports.getAdditionalKits = getAdditionalKits;
function kitChangeNeedsClean(newKit, oldKit) {
    if (!oldKit) {
        // First kit? We never clean
        log.debug(localize(51, null));
        return false;
    }
    const important_params = (k) => ({
        compilers: k.compilers,
        vs: k.visualStudio,
        vsArch: k.visualStudioArchitecture,
        tc: k.toolchainFile,
        preferredGenerator: k.preferredGenerator ? k.preferredGenerator.name : null
    });
    const new_imp = important_params(newKit);
    const old_imp = important_params(oldKit);
    if ((0, util_1.compare)(new_imp, old_imp) !== util_1.Ordering.Equivalent) {
        log.debug(localize(52, null));
        return true;
    }
    else {
        return false;
    }
}
exports.kitChangeNeedsClean = kitChangeNeedsClean;


/***/ }),

/***/ 61145:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.KitsController = exports.KitsReadMode = void 0;
const chokidar = __webpack_require__(88643);
const path = __webpack_require__(71017);
const vscode = __webpack_require__(89496);
const nls = __webpack_require__(33463);
const cmakeProject_1 = __webpack_require__(37874);
const kit_1 = __webpack_require__(18679);
const logging = __webpack_require__(71067);
const paths_1 = __webpack_require__(86640);
const pr_1 = __webpack_require__(72502);
const rollbar_1 = __webpack_require__(58543);
const util_1 = __webpack_require__(16182);
nls.config({ messageFormat: nls.MessageFormat.bundle, bundleFormat: nls.BundleFormat.standalone })((__webpack_require__(71017).join)(__dirname, 'src\\kitsController.ts'));
const localize = nls.loadMessageBundle((__webpack_require__(71017).join)(__dirname, 'src\\kitsController.ts'));
const log = logging.createLogger('kitsController');
var KitsReadMode;
(function (KitsReadMode) {
    KitsReadMode[KitsReadMode["userKits"] = 0] = "userKits";
    KitsReadMode[KitsReadMode["folderKits"] = 1] = "folderKits";
    KitsReadMode[KitsReadMode["allAvailable"] = 2] = "allAvailable";
})(KitsReadMode = exports.KitsReadMode || (exports.KitsReadMode = {}));
// TODO: migrate all kit related things in extension.ts to this class.
class KitsController {
    constructor(project, _kitsWatcher) {
        this.project = project;
        this._kitsWatcher = _kitsWatcher;
        this.folderKits = [];
        this.additionalKits = [];
        this._pickKitCancellationTokenSource = new vscode.CancellationTokenSource();
    }
    static isScanningForKits() {
        return this.checkingHaveKits;
    }
    static async init(project) {
        if (KitsController.userKits.length === 0) {
            // never initialized before
            await KitsController.readUserKits(project);
        }
        const expandedAdditionalKitFiles = await project.getExpandedAdditionalKitFiles();
        const folderKitsFiles = [KitsController._workspaceKitsPath(project.workspaceFolder)].concat(expandedAdditionalKitFiles);
        const kitsWatcher = chokidar.watch(folderKitsFiles, { ignoreInitial: true, followSymlinks: false });
        const kitsController = new KitsController(project, kitsWatcher);
        (0, util_1.chokidarOnAnyChange)(kitsWatcher, _ => rollbar_1.default.takePromise(localize(0, null), {}, kitsController.readKits(KitsReadMode.folderKits)));
        project.workspaceContext.config.onChange('additionalKits', () => kitsController.readKits(KitsReadMode.folderKits));
        await kitsController.readKits(KitsReadMode.folderKits);
        return kitsController;
    }
    dispose() {
        if (this._pickKitCancellationTokenSource) {
            this._pickKitCancellationTokenSource.dispose();
        }
        void this._kitsWatcher.close();
    }
    get availableKits() {
        console.assert(KitsController.length > 0, 'readKits should have been called at least once before.');
        if (this.project.workspaceContext.config.showSystemKits) {
            return KitsController.specialKits.concat(this.folderKits.concat(this.additionalKits.concat(KitsController.userKits)));
        }
        else {
            return KitsController.specialKits.concat(this.folderKits);
        }
    }
    get workspaceFolder() {
        return this.project.workspaceFolder;
    }
    static async readUserKits(project, progress) {
        if (undefined === project) {
            return;
        }
        // Read user kits if we are under userKits/allAvailable read mode, or if userKits is empty (which means userKits are never loaded)
        // Migrate kits from old pre-1.1.3 location
        try {
            if (await pr_1.fs.exists(kit_1.OLD_USER_KITS_FILEPATH) && !await pr_1.fs.exists(kit_1.USER_KITS_FILEPATH)) {
                rollbar_1.default.info(localize(1, null), { from: kit_1.OLD_USER_KITS_FILEPATH, to: kit_1.USER_KITS_FILEPATH });
                await pr_1.fs.mkdir_p(path.dirname(kit_1.USER_KITS_FILEPATH));
                await pr_1.fs.rename(kit_1.OLD_USER_KITS_FILEPATH, kit_1.USER_KITS_FILEPATH);
            }
        }
        catch (e) {
            rollbar_1.default.exception(localize(2, null), e, { from: kit_1.OLD_USER_KITS_FILEPATH, to: kit_1.USER_KITS_FILEPATH });
        }
        // Special kits - include order is important
        KitsController.specialKits = [
            // Spcial __scanforkits__ kit used for invoking the "Scan for kits"
            { name: kit_1.SpecialKits.ScanForKits, isTrusted: true },
            // Special __unspec__ kit for opting-out of kits
            { name: kit_1.SpecialKits.Unspecified, isTrusted: true }
        ];
        // Load user-kits
        (0, util_1.reportProgress)(localize(3, null), progress);
        KitsController.userKits = await (0, kit_1.readKitsFile)(kit_1.USER_KITS_FILEPATH, project.workspaceContext.folder.uri.fsPath, await project.getExpansionOptions());
        // Pruning requires user interaction, so it happens fully async
        KitsController._startPruneOutdatedKitsAsync(await project.getCMakePathofProject());
    }
    /**
     * Load the list of available kits from the filesystem. This will also update the kit loaded into the current backend if applicable.
     */
    async readKits(kitsReadMode = KitsReadMode.allAvailable, progress) {
        if (kitsReadMode === KitsReadMode.userKits || kitsReadMode === KitsReadMode.allAvailable) {
            await KitsController.readUserKits(this.project, progress);
        }
        if (kitsReadMode === KitsReadMode.folderKits || kitsReadMode === KitsReadMode.allAvailable) {
            // Read default folder kits
            this.folderKits = await (0, kit_1.readKitsFile)(KitsController._workspaceKitsPath(this.workspaceFolder), this.project.workspaceContext.folder.uri.fsPath, await this.project.getExpansionOptions());
            // Read additional folder kits
            this.additionalKits = await (0, kit_1.getAdditionalKits)(this.project);
        }
        // If the current kit was selected from the set that is updated with this call to readKits,
        // load it again to ensure it is up to date.
        const current = this.project.activeKit;
        if (current) {
            const searchKits = (kitsReadMode === KitsReadMode.allAvailable) ? this.availableKits :
                (kitsReadMode === KitsReadMode.userKits) ? KitsController.userKits : this.folderKits.concat(this.additionalKits);
            const already_active_kit = searchKits.find(kit => kit.name === current.name);
            if (already_active_kit) {
                await this.setFolderActiveKit(already_active_kit);
            }
        }
    }
    /**
     * The path to the workspace-local kits file, dependent on the path to the
     * active workspace folder.
     */
    static _workspaceKitsPath(folder) {
        return (0, kit_1.kitsPathForWorkspaceFolder)(folder);
    }
    /**
     * Set the current kit for the specified workspace folder
     * @param k The kit
     */
    async setFolderActiveKit(k) {
        const inst = this.project;
        const raw_name = k ? k.name : kit_1.SpecialKits.Unspecified;
        if (inst) {
            // Generate a message that we will show in the progress notification
            let message = '';
            switch (raw_name) {
                case kit_1.SpecialKits.Unspecified:
                    // Empty string/unspec is un-setting the kit:
                    message = localize(4, null);
                    break;
                default:
                    // Everything else is just loading a kit:
                    message = localize(5, null, raw_name);
                    break;
            }
            // Load the kit into the backend
            await vscode.window.withProgress({
                location: vscode.ProgressLocation.Notification,
                title: message
            }, () => inst.setKit(k));
        }
        return raw_name;
    }
    async checkHaveKits() {
        const avail = this.availableKits;
        if (avail.length > kit_1.SpecialKitsCount) {
            // We have kits. Okay.
            return true;
        }
        if (!avail.find(kit => kit.name === kit_1.SpecialKits.Unspecified)) {
            // We should _always_ have the 'UnspecifiedKit'.
            rollbar_1.default.error(localize(6, null, '"SpecialKits.Unspecified"'));
            return false;
        }
        // We don't have any kits defined. Scan for kits
        if (!KitsController.checkingHaveKits) {
            KitsController.checkingHaveKits = true;
            await KitsController.scanForKits(await this.project.getCMakePathofProject());
            KitsController.checkingHaveKits = false;
            return true;
        }
        else {
            rollbar_1.default.error(localize(7, null));
            return false;
        }
    }
    /**
     * Show UI to allow the user to select an active kit
     */
    async selectKit() {
        // Check that we have kits
        const state = await this.checkHaveKits();
        if (!state) {
            return false;
        }
        const avail = this.availableKits;
        log.debug(localize(8, null, avail.length));
        log.debug(localize(9, null));
        // Generate the quickpick items from our known kits
        const getKitName = (kit) => {
            switch (kit.name) {
                case kit_1.SpecialKits.ScanForKits:
                    return `[${localize(10, null)}]`;
                case kit_1.SpecialKits.Unspecified:
                    return `[${localize(11, null)}]`;
                default:
                    return kit.name;
            }
        };
        const item_promises = avail.map(async (kit) => ({
            label: getKitName(kit),
            description: await (0, kit_1.descriptionForKit)(kit),
            kit
        }));
        const items = await Promise.all(item_promises);
        const chosen_kit = await vscode.window.showQuickPick(items, { placeHolder: localize(12, null, this.project.folderName) }, this._pickKitCancellationTokenSource.token);
        this._pickKitCancellationTokenSource.dispose();
        this._pickKitCancellationTokenSource = new vscode.CancellationTokenSource();
        if (chosen_kit === undefined) {
            log.debug(localize(13, null));
            // No selection was made
            return false;
        }
        else {
            if (chosen_kit.kit.name === kit_1.SpecialKits.ScanForKits) {
                await KitsController.scanForKits(await this.project.getCMakePathofProject());
                return false;
            }
            else {
                log.debug(localize(14, null, JSON.stringify(chosen_kit)));
                const kitChanged = chosen_kit.kit !== this.project.activeKit;
                if (kitChanged) {
                    await this.setFolderActiveKit(chosen_kit.kit);
                }
                if (chosen_kit.kit.name !== kit_1.SpecialKits.Unspecified && kitChanged && this.project.workspaceContext.config.automaticReconfigure) {
                    await this.project.configureInternal(cmakeProject_1.ConfigureTrigger.selectKit, [], cmakeProject_1.ConfigureType.Normal);
                }
                return true;
            }
        }
    }
    /**
     * Set the current kit by name of the kit
     */
    async setKitByName(kitName) {
        if (!kitName) {
            kitName = kit_1.SpecialKits.Unspecified;
        }
        const newKit = this.availableKits.find(kit => kit.name === kitName);
        await this.setFolderActiveKit(newKit || null);
        // if we are showing a quickpick menu...
        this._pickKitCancellationTokenSource.cancel();
    }
    /**
     * User-interactive kit pruning:
     *
     * This function will find all user-local kits that identify files that are
     * no longer present (such as compiler binaries), and will show a popup
     * notification to the user requesting an action.
     *
     * This function will not prune kits that have the `keep` field marked `true`
     *
     * If the user chooses to remove the kit, we call `_removeKit()` and erase it
     * from the user-local file.
     *
     * If the user chooses to keep teh kit, we call `_keepKit()` and set the
     * `keep` field on the kit to `true`.
     *
     * Always returns immediately.
     */
    static _startPruneOutdatedKitsAsync(cmakePath) {
        // Iterate over _user_ kits. We don't care about workspace-local kits
        for (const kit of KitsController.userKits) {
            if (kit.keep === true) {
                // Kit is explicitly marked to be kept
                continue;
            }
            if (!kit.compilers) {
                // We only prune kits with a `compilers` field.
                continue;
            }
            const missing_paths_prs = [];
            for (const lang in kit.compilers) {
                const comp_path = kit.compilers[lang];
                // Get a promise that resolve to whether the given path/name exists
                const exists_pr = path.isAbsolute(comp_path)
                    // Absolute path, just check if it exists
                    ? pr_1.fs.exists(comp_path)
                    // Non-absolute. Check on $PATH
                    : paths_1.default.which(comp_path).then(v => v !== null);
                // Add it to the list
                missing_paths_prs.push(exists_pr.then(exists => ({ exists, path: comp_path })));
            }
            const pr = Promise.all(missing_paths_prs).then(async (infos) => {
                const missing = infos.find(i => !i.exists);
                if (!missing) {
                    return;
                }
                const chosen = await vscode.window.showInformationMessage(localize(15, null, `"${kit.name}"`, missing.path), {}, {
                    action: 'remove',
                    title: localize(16, null)
                }, {
                    action: 'keep',
                    title: localize(17, null)
                });
                if (chosen === undefined) {
                    return;
                }
                switch (chosen.action) {
                    case 'keep':
                        return KitsController._keepKit(cmakePath, kit);
                    case 'remove':
                        return KitsController._removeKit(cmakePath, kit);
                }
            });
            rollbar_1.default.takePromise(localize(18, null), { kit }, pr);
        }
    }
    /**
     * Mark a kit to be "kept". This set the `keep` value to `true` and writes
     * re-writes the user kits file.
     * @param kit The kit to mark
     */
    static async _keepKit(cmakePath, kit) {
        const new_kits = KitsController.userKits.map(k => {
            if (k.name === kit.name) {
                return Object.assign(Object.assign({}, k), { keep: true });
            }
            else {
                return k;
            }
        });
        KitsController.userKits = new_kits;
        return KitsController._writeUserKitsFile(cmakePath, new_kits);
    }
    /**
     * Remove a kit from the user-local kits.
     * @param kit The kit to remove
     */
    static async _removeKit(cmakePath, kit) {
        const new_kits = KitsController.userKits.filter(k => k.name !== kit.name);
        KitsController.userKits = new_kits;
        return KitsController._writeUserKitsFile(cmakePath, new_kits);
    }
    /**
     * Write the given kits the the user-local cmake-kits.json file.
     * @param kits The kits to write to the file.
     */
    static async _writeUserKitsFile(cmakePath, kits) {
        log.debug(localize(19, null, kit_1.USER_KITS_FILEPATH));
        // Remove the special kits
        const stripped_kits = kits.filter(kit => ((kit.name !== kit_1.SpecialKits.ScanForKits) &&
            (kit.name !== kit_1.SpecialKits.Unspecified)));
        // Sort the kits by name so they always appear in order in the file.
        const sorted_kits = stripped_kits.sort((a, b) => {
            if (a.name === b.name) {
                return 0;
            }
            else if (a.name < b.name) {
                return -1;
            }
            else {
                return 1;
            }
        });
        // Do the save.
        try {
            log.debug(localize(20, null, kit_1.USER_KITS_FILEPATH));
            // Create the directory where the kits will go
            await pr_1.fs.mkdir_p(path.dirname(kit_1.USER_KITS_FILEPATH));
            // Write the file
            await pr_1.fs.writeFile(kit_1.USER_KITS_FILEPATH, JSON.stringify(sorted_kits, null, 2));
        }
        catch (e) {
            const pr = vscode.window.showErrorMessage(`Failed to write kits file to disk: ${kit_1.USER_KITS_FILEPATH}: ${e.toString()}`, {
                title: localize(21, null),
                do: 'retry'
            }, {
                title: localize(22, null),
                do: 'cancel'
            })
                .then(choice => {
                if (!choice) {
                    return false;
                }
                switch (choice.do) {
                    case 'retry':
                        return KitsController.scanForKits(cmakePath);
                    case 'cancel':
                        return false;
                }
            });
            // Don't block on writing re-trying the write
            rollbar_1.default.takePromise('retry-kit-save-fail', {}, pr);
            return false;
        }
    }
    /**
     * Rescan the system for kits and save them to the user-local kits file.
     * If cmake-tools-kits.json still has kits saved with the old format kit definition
     *     (visualStudio field as "VisualStudio.$(installation version)", as opposed to "$(unique installation id)"),
     * then ask if the user allows them to be deleted from the user-local kits file.
     *
     * If the user answers 'NO' or doesn't answer, nothing needs to be done, even if there is an active kit set,
     * because the extension is able to work with both definitions of a VS kit.
     * In this case, the new cmake-tools-kits.json may have some duplicate kits pointing to the same toolset.
     *
     * If the answer is 'YES' and if there is an active kit selected that is among the ones to be deleted,
     * then the user must also pick a new kit.
     *
     * @returns if any duplicate vs kits are removed.
     */
    static async scanForKits(cmakePath) {
        log.debug(localize(23, null));
        // Do the scan:
        const discovered_kits = await (0, kit_1.scanForKits)(cmakePath, { scanDirs: KitsController.additionalCompilerSearchDirs });
        // The list with the new definition user kits starts with the non VS ones,
        // which do not have any variations in the way they can be defined.
        const new_definition_user_kits = KitsController.userKits.filter(kit => !!!kit.visualStudio);
        // The VS kits saved so far in cmake-tools-kits.json
        const user_vs_kits = KitsController.userKits.filter(kit => !!kit.visualStudio);
        // Separate the VS kits based on old/new definition.
        const old_definition_vs_kits = [];
        user_vs_kits.forEach(kit => {
            if (kit.visualStudio && (kit.visualStudio.startsWith("VisualStudio.15") || kit.visualStudio.startsWith("VisualStudio.16"))) {
                old_definition_vs_kits.push(kit);
            }
            else {
                // The new definition VS kits can complete the final user kits list
                new_definition_user_kits.push(kit);
            }
        });
        let duplicateRemoved = false;
        if (old_definition_vs_kits.length > 1) {
            log.info(localize(24, null));
            const yesButtonTitle = localize(25, null);
            const chosen = await vscode.window.showInformationMessage(localize(26, null), {
                title: yesButtonTitle,
                isCloseAffordance: true
            }, {
                title: localize(27, null),
                isCloseAffordance: true
            });
            if (chosen !== undefined && (chosen.title === yesButtonTitle)) {
                KitsController.userKits = new_definition_user_kits;
                duplicateRemoved = true;
            }
        }
        // Convert the kits into a by-name mapping so that we can restore the ones
        // we know about after the fact.
        // We only save the user-local kits: We don't want to save workspace kits
        // in the user kits file.
        const old_kits_by_name = KitsController.userKits.reduce((acc, kit) => (Object.assign(Object.assign({}, acc), { [kit.name]: kit })), {});
        // Update the new kits we know about.
        const new_kits_by_name = discovered_kits.reduce((acc, kit) => KitsController.isBetterMatch(kit, acc[kit.name]) ? Object.assign(Object.assign({}, acc), { [kit.name]: kit }) : acc, old_kits_by_name);
        const new_kits = Object.keys(new_kits_by_name).map(k => new_kits_by_name[k]);
        KitsController.userKits = new_kits;
        await KitsController._writeUserKitsFile(cmakePath, new_kits);
        KitsController._startPruneOutdatedKitsAsync(cmakePath);
        return duplicateRemoved;
    }
    static isBetterMatch(newKit, existingKit) {
        if (KitsController.isBetterClangCLDefinition(newKit, existingKit)) {
            return true;
        }
        return KitsController.isBetterCompilerMatch(newKit.compilers, existingKit === null || existingKit === void 0 ? void 0 : existingKit.compilers);
    }
    static isBetterClangCLDefinition(newKit, existingKit) {
        var _a, _b;
        if (newKit.name.indexOf('MSVC CLI') >= 0) {
            return ((existingKit === null || existingKit === void 0 ? void 0 : existingKit.visualStudioArchitecture) === 'amd64') ||
                (((_a = existingKit === null || existingKit === void 0 ? void 0 : existingKit.preferredGenerator) === null || _a === void 0 ? void 0 : _a.platform) === 'amd64') ||
                (((_b = existingKit === null || existingKit === void 0 ? void 0 : existingKit.preferredGenerator) === null || _b === void 0 ? void 0 : _b.toolset) !== undefined && existingKit.preferredGenerator.toolset.indexOf('amd64') >= 0);
        }
        return false;
    }
    static isBetterCompilerMatch(newCompilers, existingCompilers) {
        var _a;
        // Try to keep the best match (e.g. compilers for C and CXX exist)
        if (!existingCompilers) {
            return true;
        }
        if (newCompilers) {
            const newLangs = Object.keys(newCompilers);
            const existingLangs = Object.keys(existingCompilers);
            if (newLangs.length > existingLangs.length) {
                return true;
            }
            const path = (_a = process.env["PATH"]) === null || _a === void 0 ? void 0 : _a.split(process.platform === 'win32' ? ';' : ':');
            if (path && newLangs.length === existingLangs.length) {
                // Prioritize compiler paths listed higher in the PATH environment variable.
                for (const p of path) {
                    const newScore = newLangs.reduce((acc, lang) => { var _a; return ((_a = newCompilers[lang]) === null || _a === void 0 ? void 0 : _a.startsWith(p)) ? 1 + acc : acc; }, 0);
                    const existingScore = existingLangs.reduce((acc, lang) => { var _a; return ((_a = existingCompilers[lang]) === null || _a === void 0 ? void 0 : _a.startsWith(p)) ? 1 + acc : acc; }, 0);
                    if (newScore > existingScore) {
                        return true;
                    }
                    else if (existingScore > newScore) {
                        return false;
                    }
                }
            }
        }
        return false;
    }
    ;
}
exports.KitsController = KitsController;
/**
 * The kits available from the user-local kits file
 */
KitsController.userKits = [];
/**
 * The non-Kit entries (scan, unspecified)
 */
KitsController.specialKits = [];
KitsController.checkingHaveKits = false;


/***/ }),

/***/ 71067:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/**
 * Logging utilities
 */ /** */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.showLogFile = exports.createLogger = exports.Logger = exports.logFilePath = exports.channelManager = exports.LogLevel = void 0;
const node_fs = __webpack_require__(57147);
const path = __webpack_require__(71017);
const vscode = __webpack_require__(89496);
const nls = __webpack_require__(33463);
nls.config({ messageFormat: nls.MessageFormat.bundle, bundleFormat: nls.BundleFormat.standalone })((__webpack_require__(71017).join)(__dirname, 'src\\logging.ts'));
const localize = nls.loadMessageBundle((__webpack_require__(71017).join)(__dirname, 'src\\logging.ts'));
/** Logging levels */
var LogLevel;
(function (LogLevel) {
    LogLevel[LogLevel["Trace"] = 0] = "Trace";
    LogLevel[LogLevel["Debug"] = 1] = "Debug";
    LogLevel[LogLevel["Info"] = 2] = "Info";
    LogLevel[LogLevel["Note"] = 3] = "Note";
    LogLevel[LogLevel["Warning"] = 4] = "Warning";
    LogLevel[LogLevel["Error"] = 5] = "Error";
    LogLevel[LogLevel["Fatal"] = 6] = "Fatal";
})(LogLevel = exports.LogLevel || (exports.LogLevel = {}));
/**
 * Get the name of a logging level
 * @param level A logging level
 */
function levelName(level) {
    switch (level) {
        case LogLevel.Trace:
            return 'trace';
        case LogLevel.Debug:
            return 'debug';
        case LogLevel.Info:
            return 'info';
        case LogLevel.Note:
            return 'note';
        case LogLevel.Warning:
            return 'warning';
        case LogLevel.Error:
            return 'error';
        case LogLevel.Fatal:
            return 'fatal';
    }
}
/**
 * Determine if logging is enabled for the given LogLevel
 * @param level The log level to check
 */
function levelEnabled(level) {
    const strlevel = vscode.workspace.getConfiguration('cmake').get('loggingLevel', 'info');
    switch (strlevel) {
        case 'trace':
            return level >= LogLevel.Trace;
        case 'debug':
            return level >= LogLevel.Debug;
        case 'info':
            return level >= LogLevel.Info;
        case 'note':
            return level >= LogLevel.Note;
        case 'warning':
            return level >= LogLevel.Warning;
        case 'error':
            return level >= LogLevel.Error;
        case 'fatal':
            return level >= LogLevel.Fatal;
        default:
            console.error('Invalid logging level in settings.json');
            return true;
    }
}
/**
 * Manages output channels.
 *
 * Ask the output channel manager when you want to get an output channel for a
 * particular name.
 */
class OutputChannelManager {
    constructor() {
        /**
         * Channels that this manager knows about
         */
        this._channels = new Map();
    }
    /**
     * Get the single instance of a channel with the given name. If the channel
     * doesn't exist, it will be created and returned.
     * @param name The name of the channel to obtain
     */
    get(name) {
        const channel = this._channels.get(name);
        if (!channel) {
            const new_channel = vscode.window.createOutputChannel(name);
            this._channels.set(name, new_channel);
            return new_channel;
        }
        return channel;
    }
    /**
     * Dispose all channels created by this manager
     */
    dispose() {
        util.map(this._channels.values(), c => c.dispose());
    }
}
exports.channelManager = new OutputChannelManager();
let _LOGGER;
function logFilePath() {
    return path.join(paths_1.default.dataDir, 'log.txt');
}
exports.logFilePath = logFilePath;
async function _openLogFile() {
    if (!_LOGGER) {
        const fpath = logFilePath();
        await pr_1.fs.mkdir_p(path.dirname(fpath));
        if (await pr_1.fs.exists(fpath)) {
            _LOGGER = node_fs.createWriteStream(fpath, { flags: 'r+' });
        }
        else {
            _LOGGER = node_fs.createWriteStream(fpath, { flags: 'w' });
        }
    }
    return _LOGGER;
}
/**
 * Manages and controls logging
 */
class SingletonLogger {
    constructor() {
        this._logStream = _openLogFile();
    }
    get _channel() {
        return exports.channelManager.get(`CMake/${localize(0, null)}`);
    }
    _log(level, ...args) {
        const trace = vscode.workspace.getConfiguration('cmake').get('enableTraceLogging', false);
        if (level === LogLevel.Trace && !trace) {
            return;
        }
        const user_message = args.map(a => a.toString()).join(' ');
        const prefix = new Date().toISOString() + ` [${levelName(level)}]`;
        const raw_message = `${prefix} ${user_message}`;
        switch (level) {
            case LogLevel.Trace:
            case LogLevel.Debug:
            case LogLevel.Info:
            case LogLevel.Note:
                if (process.env['CMT_QUIET_CONSOLE'] !== '1') {
                    console.info('[CMakeTools]', raw_message);
                }
                break;
            case LogLevel.Warning:
                console.warn('[CMakeTools]', raw_message);
                break;
            case LogLevel.Error:
            case LogLevel.Fatal:
                console.error('[CMakeTools]', raw_message);
                break;
        }
        // Write to the logfile asynchronously.
        this._logStream.then(strm => strm.write(raw_message + '\n')).catch(e => {
            console.error('Unhandled error while writing CMakeTools log file', e);
        });
        // Write to our output channel
        if (levelEnabled(level)) {
            this._channel.appendLine(user_message);
        }
    }
    trace(...args) {
        this._log(LogLevel.Trace, ...args);
    }
    debug(...args) {
        this._log(LogLevel.Debug, ...args);
    }
    info(...args) {
        this._log(LogLevel.Info, ...args);
    }
    note(...args) {
        this._log(LogLevel.Note, ...args);
    }
    warning(...args) {
        this._log(LogLevel.Warning, ...args);
    }
    error(...args) {
        this._log(LogLevel.Error, ...args);
    }
    fatal(...args) {
        this._log(LogLevel.Fatal, ...args);
    }
    clearOutputChannel() {
        this._channel.clear();
    }
    showChannel(preserveFocus) {
        this._channel.show(preserveFocus);
    }
    static instance() {
        if (SingletonLogger._inst === null) {
            SingletonLogger._inst = new SingletonLogger();
        }
        return SingletonLogger._inst;
    }
}
SingletonLogger._inst = null;
class Logger {
    constructor(_tag) {
        this._tag = _tag;
    }
    get tag() {
        return `[${this._tag}]`;
    }
    trace(...args) {
        SingletonLogger.instance().trace(this.tag, ...args);
    }
    debug(...args) {
        SingletonLogger.instance().debug(this.tag, ...args);
    }
    info(...args) {
        SingletonLogger.instance().info(this.tag, ...args);
    }
    note(...args) {
        SingletonLogger.instance().note(this.tag, ...args);
    }
    warning(...args) {
        SingletonLogger.instance().warning(this.tag, ...args);
    }
    error(...args) {
        SingletonLogger.instance().error(this.tag, ...args);
    }
    fatal(...args) {
        SingletonLogger.instance().fatal(this.tag, ...args);
    }
    clearOutputChannel() {
        SingletonLogger.instance().clearOutputChannel();
    }
    showChannel() {
        const reveal_log = vscode.workspace.getConfiguration('cmake').get('revealLog', 'always');
        const should_show = (reveal_log !== 'never');
        const should_focus = (reveal_log === 'focus');
        if (should_show) {
            SingletonLogger.instance().showChannel(!should_focus);
        }
    }
    static logTestName(suite, test) {
        SingletonLogger.instance().info('-----------------------------------------------------------------------');
        SingletonLogger.instance().info(`Beginning test: ${suite !== null && suite !== void 0 ? suite : 'unknown suite'} - ${test !== null && test !== void 0 ? test : 'unknown test'}`);
    }
}
exports.Logger = Logger;
function createLogger(tag) {
    return new Logger(tag);
}
exports.createLogger = createLogger;
async function showLogFile() {
    await vscode.commands.executeCommand('vscode.open', vscode.Uri.file(logFilePath()));
}
exports.showLogFile = showLogFile;
// The imports aren't needed immediately, so we can drop them all the way down
// here since we may have circular imports
const util = __webpack_require__(16182);
const pr_1 = __webpack_require__(72502);
const paths_1 = __webpack_require__(86640);


/***/ }),

/***/ 86640:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/**
 * This module defines important directories and paths to the extension
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
const path = __webpack_require__(71017);
const which = __webpack_require__(18750);
const vscode = __webpack_require__(89496);
const visualStudio_1 = __webpack_require__(41108);
const expand_1 = __webpack_require__(77504);
const pr_1 = __webpack_require__(72502);
const util = __webpack_require__(16182);
class WindowsDefaultCompilerPaths {
    constructor(_env) {
        this._env = _env;
        this._env = _env;
    }
    get LLVM() {
        return [
            this._env.ProgramFiles + "\\LLVM\\bin",
            this._env.ProgramFilesX86 + "\\LLVM\\bin"
        ].map(p => ({ path: p, isTrusted: true }));
    }
    get MSYS2() {
        return [
            paths.windows.SystemDrive + '\\msys64\\mingw32\\bin',
            paths.windows.SystemDrive + '\\msys64\\mingw64\\bin',
            paths.windows.SystemDrive + '\\msys64\\clang32\\bin',
            paths.windows.SystemDrive + '\\msys64\\clang64\\bin',
            paths.windows.SystemDrive + '\\msys64\\clangarm64\\bin',
            paths.windows.SystemDrive + '\\msys64\\ucrt64\\bin'
        ].map(p => ({ path: p, isTrusted: false }));
    }
}
class WindowsEnvironment {
    constructor() {
        this.defaultCompilerPaths = new WindowsDefaultCompilerPaths(this);
    }
    get AppData() {
        if (util.isTestMode()) {
            return path.join(vscode.workspace.workspaceFolders[0].uri.fsPath, '.vscode');
        }
        return process.env['APPDATA'];
    }
    get LocalAppData() {
        if (util.isTestMode()) {
            return path.join(vscode.workspace.workspaceFolders[0].uri.fsPath, '.vscode');
        }
        return process.env['LOCALAPPDATA'];
    }
    get AllUserProfile() {
        return process.env['ProgramData'];
    }
    get ComSpec() {
        let comSpec = process.env['ComSpec'];
        if (undefined === comSpec) {
            comSpec = this.SystemRoot + '\\system32\\cmd.exe';
        }
        return comSpec;
    }
    get HomeDrive() {
        return process.env['HOMEDRIVE'];
    }
    get HomePath() {
        return process.env['HOMEPATH'];
    }
    get ProgramFilesX86() {
        return process.env['ProgramFiles(x86)'];
    }
    get ProgramFiles() {
        return process.env['ProgramFiles'];
    }
    get SystemDrive() {
        return process.env['SystemDrive'];
    }
    get SystemRoot() {
        return process.env['SystemRoot'];
    }
    get Temp() {
        return process.env['TEMP'];
    }
}
/**
 * Directory class.
 */
class Paths {
    constructor() {
        this.windows = new WindowsEnvironment();
    }
    /**
     * The current user's home directory
     */
    get userHome() {
        if (process.platform === 'win32') {
            return path.join(process.env['HOMEDRIVE'] || 'C:', process.env['HOMEPATH'] || 'Users\\Public');
        }
        else {
            return process.env['HOME'] || process.env['PROFILE'];
        }
    }
    /**
     * The user-local data directory. This is where user-specific persistent
     * application data should be stored.
     */
    get userLocalDir() {
        if (util.isTestMode()) {
            return path.join(vscode.workspace.workspaceFolders[0].uri.fsPath, '.vscode');
        }
        if (process.platform === 'win32') {
            return this.windows.LocalAppData;
        }
        else {
            const xdg_dir = process.env['XDG_DATA_HOME'];
            if (xdg_dir) {
                return xdg_dir;
            }
            const home = this.userHome;
            return path.join(home, '.local/share');
        }
    }
    get userRoamingDir() {
        if (process.platform === 'win32') {
            return this.windows.AppData;
        }
        else {
            const xdg_dir = process.env['XDG_CONFIG_HOME'];
            if (xdg_dir) {
                return xdg_dir;
            }
            const home = this.userHome;
            return path.join(home, '.config');
        }
    }
    /**
     * The directory where CMake Tools should store user-specific persistent
     * data.
     */
    get dataDir() {
        return path.join(this.userLocalDir, 'CMakeTools');
    }
    /**
     * The "roaming" directory where CMake Tools stores roaming configuration
     * data.
     */
    get roamingDataDir() {
        return path.join(this.userRoamingDir, 'CMakeTools');
    }
    /**
     * Get the platform-specific temporary directory
     */
    get tmpDir() {
        if (process.platform === 'win32') {
            return this.windows.Temp;
        }
        else {
            return '/tmp';
        }
    }
    get ninjaPath() {
        return this._ninjaPath;
    }
    async which(name) {
        return new Promise(resolve => {
            which(name, (err, resolved) => {
                if (err) {
                    resolve(null);
                }
                else {
                    console.assert(resolved, '`which` didn\'t do what it should have.');
                    resolve(resolved);
                }
            });
        });
    }
    async getCTestPath(wsc, overWriteCMakePathSetting) {
        const ctestPath = await this.expandStringPath(wsc.config.rawCTestPath, wsc);
        if (!ctestPath || ctestPath === 'auto' || overWriteCMakePathSetting) {
            const cmake = await this.getCMakePath(wsc, overWriteCMakePathSetting);
            if (cmake === null) {
                return null;
            }
            else {
                try {
                    // Check if CTest is a sibling executable in the same directory
                    const ctestName = process.platform === 'win32' ? 'ctest.exe' : 'ctest';
                    const ctestSibling = path.join(path.dirname(cmake), ctestName);
                    await pr_1.fs.access(ctestSibling, pr_1.fs.constants.X_OK);
                    return ctestSibling;
                }
                catch (_a) {
                    // The best we can do.
                    return 'ctest';
                }
            }
        }
        else {
            return ctestPath;
        }
    }
    async getCPackPath(wsc, overWriteCMakePathSetting) {
        const cpackPath = await this.expandStringPath(wsc.config.rawCPackPath, wsc);
        if (!cpackPath || cpackPath === 'auto' || overWriteCMakePathSetting) {
            const cmake = await this.getCMakePath(wsc, overWriteCMakePathSetting);
            if (cmake === null) {
                return null;
            }
            else {
                try {
                    // Check if CPack is a sibling executable in the same directory
                    const cpackName = process.platform === 'win32' ? 'cpack.exe' : 'cpack';
                    const cpackSibling = path.join(path.dirname(cmake), cpackName);
                    await pr_1.fs.access(cpackSibling, pr_1.fs.constants.X_OK);
                    return cpackSibling;
                }
                catch (_a) {
                    // The best we can do.
                    return 'cpack';
                }
            }
        }
        else {
            return cpackPath;
        }
    }
    async getCMakePath(wsc, overWriteCMakePathSetting) {
        this._ninjaPath = undefined;
        let raw = overWriteCMakePathSetting;
        if (!raw) {
            raw = await this.expandStringPath(wsc.config.rawCMakePath, wsc);
        }
        if (raw === 'auto' || raw === 'cmake') {
            // We start by searching $PATH for cmake
            const on_path = await this.which('cmake');
            if (on_path) {
                return on_path;
            }
            if (process.platform === 'win32') {
                // We didn't find it on the $PATH. Try some good guesses
                const cmake_relative_path = '\\CMake\\bin\\cmake.exe';
                const default_cmake_paths = [
                    this.windows.ProgramFiles + cmake_relative_path,
                    this.windows.ProgramFilesX86 + cmake_relative_path
                ];
                for (const cmake_path of default_cmake_paths) {
                    if (await pr_1.fs.exists(cmake_path)) {
                        return cmake_path;
                    }
                }
                // Look for bundled CMake executables in Visual Studio install paths
                const bundled_tools_paths = await this.vsCMakePaths();
                if (bundled_tools_paths.cmake) {
                    this._ninjaPath = bundled_tools_paths.ninja;
                    return bundled_tools_paths.cmake;
                }
            }
            return null;
        }
        return raw;
    }
    async expandStringPath(raw_path, wsc) {
        return (0, expand_1.expandString)(raw_path, {
            vars: {
                buildKit: '${buildKit}',
                buildType: '${buildType}',
                buildKitVendor: '${buildKitVendor}',
                buildKitTriple: '${buildKitTriple}',
                buildKitVersion: '${buildKitVersion}',
                buildKitHostOs: '${buildKitVendor}',
                buildKitTargetOs: '${buildKitTargetOs}',
                buildKitTargetArch: '${buildKitTargetArch}',
                buildKitVersionMajor: '${buildKitVersionMajor}',
                buildKitVersionMinor: '${buildKitVersionMinor}',
                generator: '${generator}',
                userHome: this.userHome,
                workspaceFolder: wsc.folder.uri.fsPath,
                workspaceFolderBasename: path.basename(wsc.folder.uri.fsPath),
                sourceDir: '${sourceDir}',
                workspaceHash: util.makeHashString(wsc.folder.uri.fsPath),
                workspaceRoot: wsc.folder.uri.fsPath,
                workspaceRootFolderName: path.basename(wsc.folder.uri.fsPath)
            }
        });
    }
    async vsCMakePaths(preferredInstanceId) {
        const vsCMakePaths = {};
        const vs_installations = await (0, visualStudio_1.vsInstallations)();
        if (vs_installations.length > 0) {
            const bundled_tool_paths = [];
            for (const install of vs_installations) {
                const bundled_tool_path = {
                    cmake: install.installationPath + '\\Common7\\IDE\\CommonExtensions\\Microsoft\\CMake\\CMake\\bin\\cmake.exe',
                    ninja: install.installationPath + '\\Common7\\IDE\\CommonExtensions\\Microsoft\\CMake\\Ninja\\ninja.exe',
                    instanceId: install.instanceId,
                    version: util.parseVersion(install.installationVersion)
                };
                bundled_tool_paths.push(bundled_tool_path);
            }
            bundled_tool_paths.sort((a, b) => {
                if (preferredInstanceId === a.instanceId) {
                    return -1;
                }
                else if (preferredInstanceId === b.instanceId) {
                    return 1;
                }
                return util.versionGreater(a.version, b.version) ? -1 : util.versionEquals(a.version, b.version) ? 0 : 1;
            });
            for (const tool_path of bundled_tool_paths) {
                if (await pr_1.fs.exists(tool_path.cmake)) {
                    // CMake can be still used without Ninja
                    vsCMakePaths.cmake = tool_path.cmake;
                    // Check for Ninja in case it was removed in later VS versions
                    if (await pr_1.fs.exists(tool_path.ninja)) {
                        vsCMakePaths.ninja = tool_path.ninja;
                        // Return the first CMake/Ninja set found
                        break;
                    }
                }
            }
        }
        return vsCMakePaths;
    }
}
const paths = new Paths();
exports["default"] = paths;


/***/ }),

/***/ 21610:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PinnedCommands = void 0;
const vscode = __webpack_require__(89496);
const nls = __webpack_require__(33463);
const extension_1 = __webpack_require__(12406);
const logging = __webpack_require__(71067);
nls.config({ messageFormat: nls.MessageFormat.bundle, bundleFormat: nls.BundleFormat.standalone })((__webpack_require__(71017).join)(__dirname, 'src\\pinnedCommands.ts'));
const localize = nls.loadMessageBundle((__webpack_require__(71017).join)(__dirname, 'src\\pinnedCommands.ts'));
const log = logging.createLogger('pinnedCommands');
class PinnedCommandNode extends vscode.TreeItem {
    constructor(label, command, isVisible) {
        super(label);
        this.collapsibleState = vscode.TreeItemCollapsibleState.None;
        this.tooltip = label;
        this.commandName = command;
        this.isVisible = isVisible;
    }
    getTreeItem() {
        return this;
    }
    async runThisCommand() {
        await vscode.commands.executeCommand(this.commandName);
    }
}
class PinnedCommands {
    constructor(configReader) {
        this.disposables = [];
        this.treeDataProvider = new PinnedCommandsTreeDataProvider(configReader);
        this.disposables.push(...[
            // Commands for projectStatus items
            vscode.commands.registerCommand('cmake.pinnedCommands.add', async () => {
                const chosen = await this.showPinnableCommands();
                if (chosen !== null) {
                    await this.treeDataProvider.addCommand(chosen);
                }
            }),
            vscode.commands.registerCommand('cmake.pinnedCommands.remove', async (what) => {
                await this.treeDataProvider.removeCommand(what);
            }),
            vscode.commands.registerCommand('cmake.pinnedCommands.run', async (what) => {
                await this.treeDataProvider.runCommand(what);
            })
        ]);
    }
    /**
     * Show List of All Commands that can be pinned
     */
    async showPinnableCommands() {
        const localization = (0, extension_1.getExtensionLocalizedStrings)();
        const items = (0, extension_1.getExtensionActiveCommands)().map((x) => ({
            command: x,
            label: localization[`cmake-tools.command.${x}.title`]
        }));
        const chosenItem = await vscode.window.showQuickPick(items, { placeHolder: localize(0, null) });
        if (!chosenItem) {
            log.debug(localize(1, null));
            return null;
        }
        return chosenItem;
    }
    refresh() {
        return this.treeDataProvider.refresh();
    }
    dispose() {
        vscode.Disposable.from(...this.disposables).dispose();
        this.treeDataProvider.dispose();
    }
}
exports.PinnedCommands = PinnedCommands;
class PinnedCommandsTreeDataProvider {
    constructor(configReader) {
        this._onDidChangeTreeData = new vscode.EventEmitter();
        this.pinnedCommands = [];
        this.pinnedCommandsKey = "cmake.pinnedCommands";
        this.isInitialized = false;
        this.treeView = vscode.window.createTreeView('cmake.pinnedCommands', { treeDataProvider: this });
        this._settingsSub = configReader.onChange('pinnedCommands', () => this.doConfigureSettingsChange());
        this.config = vscode.workspace.getConfiguration();
        (0, extension_1.onExtensionActiveCommandsChanged)(this.doConfigureSettingsChange, this);
    }
    get onDidChangeTreeData() {
        return this._onDidChangeTreeData.event;
    }
    async initialize() {
        this.config = vscode.workspace.getConfiguration();
        this.pinnedCommands = []; //reset to empty list.
        if (this.config.has(this.pinnedCommandsKey)) {
            const localization = (0, extension_1.getExtensionLocalizedStrings)();
            const settingsPinnedCommands = this.config.get(this.pinnedCommandsKey);
            const activeCommands = new Set((0, extension_1.getExtensionActiveCommands)());
            for (const commandName of settingsPinnedCommands) {
                const label = localization[`cmake-tools.command.${commandName}.title`];
                if (this.findNode(label) === -1) {
                    // only show commands that are contained in the active commands for the extension.
                    this.pinnedCommands.push(new PinnedCommandNode(label, commandName, activeCommands.has(commandName)));
                }
            }
        }
        this.isInitialized = true;
    }
    async doConfigureSettingsChange() {
        await this.initialize();
        await this.refresh();
    }
    async addCommand(chosen) {
        // first check if it is already in the list of pinned commands.
        if (this.findNode(chosen.label) === -1) {
            const node = new PinnedCommandNode(chosen.label, chosen.command, true);
            this.pinnedCommands.push(node);
            await this.refresh();
            await this.updateSettings();
        }
    }
    findNode(nodeLabel) {
        for (let i = 0; i < this.pinnedCommands.length; i++) {
            if (this.pinnedCommands[i].label === nodeLabel) {
                return i;
            }
        }
        return -1;
    }
    async removeCommand(node) {
        const index = this.findNode(node.label);
        if (index !== -1) {
            this.pinnedCommands.splice(index, 1);
            await this.refresh();
        }
        await this.updateSettings();
    }
    async runCommand(node) {
        await node.runThisCommand();
    }
    getTreeItem(node) {
        return node.getTreeItem();
    }
    async updateSettings() {
        if (this.config) {
            const newValue = this.pinnedCommands.map(x => x.commandName);
            await this.config.update(this.pinnedCommandsKey, newValue, true); // update global
        }
    }
    async refresh() {
        this._onDidChangeTreeData.fire();
    }
    dispose() {
        this.treeView.dispose();
        this._settingsSub.dispose();
    }
    async getChildren() {
        if (!this.isInitialized) {
            await this.initialize();
        }
        return this.pinnedCommands.filter(x => x.isVisible);
    }
}


/***/ }),

/***/ 72502:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/**
 * This module promise-ifies some NodeJS APIs that are frequently used in this
 * ext.
 */ /** */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.fs = void 0;
const util = __webpack_require__(73837);
const promisify = util.promisify;
const fs_ = __webpack_require__(57147);
const fs_walk_1 = __webpack_require__(26533);
const path = __webpack_require__(71017);
const rimraf = __webpack_require__(73844);
const nls = __webpack_require__(33463);
const pLimit = __webpack_require__(97312);
nls.config({ messageFormat: nls.MessageFormat.bundle, bundleFormat: nls.BundleFormat.standalone })((__webpack_require__(71017).join)(__dirname, 'src\\pr.ts'));
const localize = nls.loadMessageBundle((__webpack_require__(71017).join)(__dirname, 'src\\pr.ts'));
// Limits the concurrent async access to the file system to avoid errors such as "EMFILE: too many open files".
const fsAccessLimiter = pLimit(50);
// Wraps fsAccessLimiter around the PromiseLike function while preserving the original type.
function limitify(fn) {
    const wrapper = (...args) => fsAccessLimiter(fn, ...args);
    return wrapper;
}
/**
 * Wrappers for the `fs` module.
 *
 * Also has a few utility functions
 */
var fs;
(function (fs) {
    async function exists(filePath) {
        const stat = await tryStat(filePath);
        return stat !== null;
    }
    fs.exists = exists;
    function existsSync(filePath) {
        return fs_.existsSync(filePath);
    }
    fs.existsSync = existsSync;
    function stripBom(str) {
        if (str.charCodeAt(0) === 0xFEFF) {
            return str.slice(1);
        }
        return str;
    }
    function readFile(filePath, encoding = "utf8") {
        return fsAccessLimiter(() => new Promise((resolve, reject) => {
            fs_.readFile(filePath, encoding, (err, data) => {
                if (err) {
                    reject(err);
                }
                else {
                    resolve(stripBom(data));
                }
            });
        }));
    }
    fs.readFile = readFile;
    fs.constants = fs_.constants;
    fs.access = promisify(fs_.access);
    fs.writeFile = limitify(promisify(fs_.writeFile));
    fs.readdir = promisify(fs_.readdir);
    fs.mkdir = promisify(fs_.mkdir);
    fs.mkdtemp = promisify(fs_.mkdtemp);
    fs.rename = promisify(fs_.rename);
    fs.stat = promisify(fs_.stat);
    fs.walk = promisify(fs_walk_1.walk);
    /**
     * Try and stat() a file/folder. If stat() fails for *any reason*, returns `null`.
     * @param filePath The file to try and stat()
     */
    async function tryStat(filePath) {
        try {
            return await fs.stat(filePath);
        }
        catch (_e) {
            // Don't even bother with the error. Any number of things might have gone
            // wrong. Probably one of: Non-existing file, bad permissions, bad path.
            return null;
        }
    }
    fs.tryStat = tryStat;
    fs.readlink = promisify(fs_.readlink);
    fs.unlink = promisify(fs_.unlink);
    fs.appendFile = limitify(promisify(fs_.appendFile));
    /**
     * Creates a directory and all parent directories recursively. If the file
     * already exists, and is not a directory, just return.
     * @param fspath The directory to create
     */
    async function mkdir_p(fspath) {
        const parent = path.dirname(fspath);
        if (!await exists(parent)) {
            await mkdir_p(parent);
        }
        else {
            if (!(await fs.stat(parent)).isDirectory()) {
                throw new Error(localize(0, null, fspath, parent));
            }
        }
        if (!await exists(fspath)) {
            await fs.mkdir(fspath);
        }
        else {
            if (!(await fs.stat(fspath)).isDirectory()) {
                throw new Error(localize(1, null, fspath));
            }
        }
    }
    fs.mkdir_p = mkdir_p;
    /**
     * Copy a file from one location to another.
     * @param inpath The input file
     * @param outpath The output file
     */
    function copyFile(inpath, outpath) {
        return fsAccessLimiter(() => new Promise((resolve, reject) => {
            const reader = fs_.createReadStream(inpath);
            reader.on('error', e => reject(e));
            reader.on('open', _fd => {
                const writer = fs_.createWriteStream(outpath);
                writer.on('error', e => reject(e));
                writer.on('open', _fd2 => reader.pipe(writer));
                writer.on('close', () => resolve());
            });
        }));
    }
    fs.copyFile = copyFile;
    /**
     * Create a hard link of an existing file
     * @param inPath The existing file path
     * @param outPath The new path to the hard link
     */
    function hardLinkFile(inPath, outPath) {
        return new Promise((resolve, reject) => {
            fs_.link(inPath, outPath, err => {
                if (err) {
                    reject(err);
                }
                else {
                    resolve();
                }
            });
        });
    }
    fs.hardLinkFile = hardLinkFile;
    /**
     * Remove a directory recursively. **DANGER DANGER!**
     * @param dirpath Directory to remove
     */
    function rmdir(dirpath) {
        return new Promise((resolve, reject) => {
            rimraf(dirpath, err => {
                if (err) {
                    reject(err);
                }
                else {
                    resolve();
                }
            });
        });
    }
    fs.rmdir = rmdir;
})(fs = exports.fs || (exports.fs = {}));


/***/ }),

/***/ 10739:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getStringValueFromCacheVar = exports.getValue = exports.configurePresetChangeNeedsClean = exports.packageArgs = exports.testArgs = exports.buildArgs = exports.configureArgs = exports.expandWorkflowPreset = exports.expandPackagePreset = exports.expandTestPreset = exports.expandBuildPreset = exports.expandConfigurePresetForPresets = exports.getToolset = exports.getArchitecture = exports.expandConfigurePreset = exports.expandConditionsForPresets = exports.expandVendorForConfigurePresets = exports.getPresetByName = exports.allWorkflowPresets = exports.userWorkflowPresets = exports.workflowPresets = exports.allPackagePresets = exports.userPackagePresets = exports.packagePresets = exports.allTestPresets = exports.userTestPresets = exports.testPresets = exports.allBuildPresets = exports.userBuildPresets = exports.buildPresets = exports.allConfigurePresets = exports.userConfigurePresets = exports.configurePresets = exports.minCMakeVersion = exports.setUserPresetsFile = exports.setPresetsFile = exports.setOriginalUserPresetsFile = exports.setOriginalPresetsFile = exports.getOriginalUserPresetsFile = exports.getOriginalPresetsFile = exports.defaultWorkflowPreset = exports.defaultPackagePreset = exports.defaultTestPreset = exports.defaultBuildPreset = exports.evaluatePresetCondition = exports.evaluateCondition = void 0;
/* eslint-disable no-unused-expressions */
const nls = __webpack_require__(33463);
const path = __webpack_require__(71017);
const util = __webpack_require__(16182);
const logging = __webpack_require__(71067);
const proc_1 = __webpack_require__(3477);
const expand_1 = __webpack_require__(77504);
const paths_1 = __webpack_require__(86640);
const visualStudio_1 = __webpack_require__(41108);
const environmentVariables_1 = __webpack_require__(40085);
const config_1 = __webpack_require__(62498);
nls.config({ messageFormat: nls.MessageFormat.bundle, bundleFormat: nls.BundleFormat.standalone })((__webpack_require__(71017).join)(__dirname, 'src\\preset.ts'));
const localize = nls.loadMessageBundle((__webpack_require__(71017).join)(__dirname, 'src\\preset.ts'));
const log = logging.createLogger('preset');
class MissingConditionPropertyError extends Error {
    constructor(propertyName, ...params) {
        super(...params);
        this.propertyName = propertyName;
    }
}
class InvalidConditionTypeError extends Error {
    constructor(type, ...params) {
        super(...params);
        this.type = type;
    }
}
function validateConditionProperty(condition, propertyName) {
    const property = condition[propertyName];
    if (property === undefined || property === null) {
        throw new MissingConditionPropertyError(propertyName);
    }
}
function evaluateCondition(condition) {
    validateConditionProperty(condition, 'type');
    switch (condition.type) {
        case 'const':
            validateConditionProperty(condition, 'value');
            return condition.value;
        case 'equals':
        case 'notEquals':
            validateConditionProperty(condition, 'lhs');
            validateConditionProperty(condition, 'rhs');
            const equals = condition.lhs === condition.rhs;
            return condition.type === 'equals' ? equals : !equals;
        case 'inList':
        case 'notInList':
            validateConditionProperty(condition, 'string');
            validateConditionProperty(condition, 'list');
            const inList = condition.list.includes(condition.string);
            return condition.type === 'inList' ? inList : !inList;
        case 'matches':
        case 'notMatches':
            validateConditionProperty(condition, 'string');
            validateConditionProperty(condition, 'regex');
            const regex = new RegExp(condition.regex);
            const matches = regex.test(condition.string);
            return condition.type === 'matches' ? matches : !matches;
        case 'allOf':
            validateConditionProperty(condition, 'conditions');
            return condition.conditions.map((c) => evaluateCondition(c)).reduce((prev, current) => prev && current);
        case 'anyOf':
            validateConditionProperty(condition, 'conditions');
            return condition.conditions.map((c) => evaluateCondition(c)).reduce((prev, current) => prev || current);
        case 'not':
            validateConditionProperty(condition, 'condition');
            return !evaluateCondition(condition.condition);
        default:
            throw new InvalidConditionTypeError(condition.type);
    }
}
exports.evaluateCondition = evaluateCondition;
function evaluateInheritedPresetConditions(preset, allPresets, references) {
    const evaluateParent = (parentName) => {
        const parent = getPresetByName(allPresets, parentName);
        // If the child is not a user preset, the parent should not be a user preset.
        // eslint-disable-next-line @typescript-eslint/tslint/config
        if (parent && !preset.isUserPreset && parent.isUserPreset === true) {
            log.error(localize(0, null, preset.name, parentName));
            return false;
        }
        if (parent && !references.has(parent.name)) {
            parent.__inheritedPresetCondition = evaluatePresetCondition(parent, allPresets, references);
        }
        return parent ? parent.__inheritedPresetCondition : false;
    };
    references.add(preset.name);
    if (preset.inherits) {
        // When looking up inherited presets, default to false if the preset does not exist since this wouldn't
        // be a valid preset to use.
        if (util.isString(preset.inherits)) {
            return evaluateParent(preset.inherits);
        }
        else if (util.isArrayOfString(preset.inherits)) {
            return preset.inherits.every(parentName => evaluateParent(parentName));
        }
        log.error(localize(1, null, preset.name, `\"inherits\": "${preset.inherits}"`));
        return false;
    }
    return true;
}
function evaluatePresetCondition(preset, allPresets, references) {
    const condition = preset.condition;
    if (condition === undefined && !evaluateInheritedPresetConditions(preset, allPresets, references || new Set())) {
        return false;
    }
    if (condition === undefined || condition === null) {
        return true;
    }
    else if (typeof condition === 'boolean') {
        return condition;
    }
    else if (typeof condition === 'object') {
        try {
            return evaluateCondition(condition);
        }
        catch (e) {
            if (e instanceof MissingConditionPropertyError) {
                log.error(localize(2, null, preset.name, `"${e.propertyName}"`));
            }
            else if (e instanceof InvalidConditionTypeError) {
                log.error(localize(3, null, preset.name, `"${e.type}"`));
            }
            else {
                // unexpected error
                throw e;
            }
            return undefined;
        }
    }
    log.error(localize(4, null, preset.name));
    return undefined;
}
exports.evaluatePresetCondition = evaluatePresetCondition;
/**
 * Should NOT cache anything. Need to make a copy if any fields need to be changed.
 */
exports.defaultBuildPreset = {
    name: '__defaultBuildPreset__',
    displayName: localize(5, null),
    description: localize(6, null)
};
/**
 * Should NOT cache anything. Need to make a copy if any fields need to be changed.
 */
exports.defaultTestPreset = {
    name: '__defaultTestPreset__',
    displayName: localize(7, null),
    description: localize(8, null)
};
exports.defaultPackagePreset = {
    name: '__defaultPackagePreset__',
    displayName: localize(9, null),
    description: localize(10, null)
};
exports.defaultWorkflowPreset = {
    name: '__defaultWorkflowPreset__',
    steps: [{ type: "configure", name: "_placeholder_" }],
    displayName: localize(11, null),
    description: localize(12, null)
};
// presetsFiles are stored here because expansions require access to other presets.
// Change event emitters are in presetsController.
// original*PresetsFile's are each used to keep a copy by **value**. They are used to update
// the presets files. non-original's are also used for caching during various expansions.
// Map<fsPath, PresetsFile | undefined>
const originalPresetsFiles = new Map();
const originalUserPresetsFiles = new Map();
const presetsFiles = new Map();
const userPresetsFiles = new Map();
function getOriginalPresetsFile(folder) {
    return originalPresetsFiles.get(folder);
}
exports.getOriginalPresetsFile = getOriginalPresetsFile;
function getOriginalUserPresetsFile(folder) {
    return originalUserPresetsFiles.get(folder);
}
exports.getOriginalUserPresetsFile = getOriginalUserPresetsFile;
function setOriginalPresetsFile(folder, presets) {
    originalPresetsFiles.set(folder, presets);
}
exports.setOriginalPresetsFile = setOriginalPresetsFile;
function setOriginalUserPresetsFile(folder, presets) {
    originalUserPresetsFiles.set(folder, presets);
}
exports.setOriginalUserPresetsFile = setOriginalUserPresetsFile;
function setPresetsFile(folder, presets) {
    presetsFiles.set(folder, presets);
}
exports.setPresetsFile = setPresetsFile;
function setUserPresetsFile(folder, presets) {
    if (presets) {
        if (presets.configurePresets) {
            for (const configPreset of presets.configurePresets) {
                configPreset.isUserPreset = true;
            }
        }
        if (presets.buildPresets) {
            for (const buildPreset of presets.buildPresets) {
                buildPreset.isUserPreset = true;
            }
        }
        if (presets.testPresets) {
            for (const testPreset of presets.testPresets) {
                testPreset.isUserPreset = true;
            }
        }
    }
    userPresetsFiles.set(folder, presets);
}
exports.setUserPresetsFile = setUserPresetsFile;
function minCMakeVersion(folder) {
    var _a, _b;
    const min1 = (_a = presetsFiles.get(folder)) === null || _a === void 0 ? void 0 : _a.cmakeMinimumRequired;
    const min2 = (_b = userPresetsFiles.get(folder)) === null || _b === void 0 ? void 0 : _b.cmakeMinimumRequired;
    if (!min1) {
        return min2;
    }
    if (!min2) {
        return min1;
    }
    // The combined minimum version is the higher version of the two
    return util.versionLess(min1, min2) ? min2 : min1;
}
exports.minCMakeVersion = minCMakeVersion;
function configurePresets(folder) {
    var _a;
    return ((_a = presetsFiles.get(folder)) === null || _a === void 0 ? void 0 : _a.configurePresets) || [];
}
exports.configurePresets = configurePresets;
function userConfigurePresets(folder) {
    var _a;
    return ((_a = userPresetsFiles.get(folder)) === null || _a === void 0 ? void 0 : _a.configurePresets) || [];
}
exports.userConfigurePresets = userConfigurePresets;
/**
 * Don't use this function if you need to keep any changes in the presets
 */
function allConfigurePresets(folder) {
    return configurePresets(folder).concat(userConfigurePresets(folder));
}
exports.allConfigurePresets = allConfigurePresets;
function buildPresets(folder) {
    var _a;
    return ((_a = presetsFiles.get(folder)) === null || _a === void 0 ? void 0 : _a.buildPresets) || [];
}
exports.buildPresets = buildPresets;
function userBuildPresets(folder) {
    var _a;
    return ((_a = userPresetsFiles.get(folder)) === null || _a === void 0 ? void 0 : _a.buildPresets) || [];
}
exports.userBuildPresets = userBuildPresets;
/**
 * Don't use this function if you need to keep any changes in the presets
 */
function allBuildPresets(folder) {
    return buildPresets(folder).concat(userBuildPresets(folder));
}
exports.allBuildPresets = allBuildPresets;
function testPresets(folder) {
    var _a;
    return ((_a = presetsFiles.get(folder)) === null || _a === void 0 ? void 0 : _a.testPresets) || [];
}
exports.testPresets = testPresets;
function userTestPresets(folder) {
    var _a;
    return ((_a = userPresetsFiles.get(folder)) === null || _a === void 0 ? void 0 : _a.testPresets) || [];
}
exports.userTestPresets = userTestPresets;
/**
 * Don't use this function if you need to keep any changes in the presets
 */
function allTestPresets(folder) {
    return testPresets(folder).concat(userTestPresets(folder));
}
exports.allTestPresets = allTestPresets;
function packagePresets(folder) {
    var _a;
    return ((_a = presetsFiles.get(folder)) === null || _a === void 0 ? void 0 : _a.packagePresets) || [];
}
exports.packagePresets = packagePresets;
function userPackagePresets(folder) {
    var _a;
    return ((_a = userPresetsFiles.get(folder)) === null || _a === void 0 ? void 0 : _a.packagePresets) || [];
}
exports.userPackagePresets = userPackagePresets;
/**
* Don't use this function if you need to keep any changes in the presets
*/
function allPackagePresets(folder) {
    return packagePresets(folder).concat(userPackagePresets(folder));
}
exports.allPackagePresets = allPackagePresets;
function workflowPresets(folder) {
    var _a;
    return ((_a = presetsFiles.get(folder)) === null || _a === void 0 ? void 0 : _a.workflowPresets) || [];
}
exports.workflowPresets = workflowPresets;
function userWorkflowPresets(folder) {
    var _a;
    return ((_a = userPresetsFiles.get(folder)) === null || _a === void 0 ? void 0 : _a.workflowPresets) || [];
}
exports.userWorkflowPresets = userWorkflowPresets;
/**
* Don't use this function if you need to keep any changes in the presets
*/
function allWorkflowPresets(folder) {
    return workflowPresets(folder).concat(userWorkflowPresets(folder));
}
exports.allWorkflowPresets = allWorkflowPresets;
function getPresetByName(presets, name) {
    var _a;
    return (_a = presets.find(preset => preset.name === name)) !== null && _a !== void 0 ? _a : null;
}
exports.getPresetByName = getPresetByName;
function isInheritable(key) {
    return key !== 'name' && key !== 'hidden' && key !== 'inherits' && key !== 'description' && key !== 'displayName';
}
/**
 * Shallow copy if a key in base doesn't exist in target
 */
function merge(target, base) {
    Object.keys(base).forEach(key => {
        const field = key;
        if (!target.hasOwnProperty(field)) {
            target[field] = base[field];
        }
    });
}
/**
 * Used for both expandConfigurePreset and expandVendorForConfigurePreset
 * Map<fsPath, Set<referencedPresets>>
 */
const referencedConfigurePresets = new Map();
/**
 * This is actually a very limited version of expandConfigurePreset.
 * Build/test presets currently don't need this, but We could extend this
 * to work with build/test presets in the future.
 * Use expandVendorPreset if other fields are needed.
 * They should NOT be used together.
 * They should Not call each other.
 */
function expandVendorForConfigurePresets(folder) {
    for (const preset of configurePresets(folder)) {
        getVendorForConfigurePreset(folder, preset.name);
    }
    for (const preset of userConfigurePresets(folder)) {
        getVendorForConfigurePreset(folder, preset.name);
    }
}
exports.expandVendorForConfigurePresets = expandVendorForConfigurePresets;
function getVendorForConfigurePreset(folder, name) {
    const refs = referencedConfigurePresets.get(folder);
    if (!refs) {
        referencedConfigurePresets.set(folder, new Set());
    }
    else {
        refs.clear();
    }
    return getVendorForConfigurePresetImpl(folder, name);
}
function getVendorForConfigurePresetImpl(folder, name, allowUserPreset = false) {
    let preset = getPresetByName(configurePresets(folder), name);
    if (preset) {
        return getVendorForConfigurePresetHelper(folder, preset);
    }
    if (allowUserPreset) {
        preset = getPresetByName(userConfigurePresets(folder), name);
        if (preset) {
            return getVendorForConfigurePresetHelper(folder, preset, true);
        }
    }
    return null;
}
function getVendorForConfigurePresetHelper(folder, preset, allowUserPreset = false) {
    if (preset.__expanded) {
        return preset.vendor || null;
    }
    const refs = referencedConfigurePresets.get(folder);
    if (refs.has(preset.name)) {
        // Referenced this preset before, but it doesn't have a configure preset. This is a circular inheritance.
        log.error(localize(13, null, preset.name));
        return null;
    }
    refs.add(preset.name);
    preset.vendor = preset.vendor || {};
    if (preset.inherits) {
        if (util.isString(preset.inherits)) {
            preset.inherits = [preset.inherits];
        }
        for (const parent of preset.inherits) {
            const parentVendor = getVendorForConfigurePresetImpl(folder, parent, allowUserPreset);
            if (parentVendor) {
                for (const key in parentVendor) {
                    if (preset.vendor[key] === undefined) {
                        preset.vendor[key] = parentVendor[key];
                    }
                }
            }
        }
    }
    return preset.vendor || null;
}
async function getExpansionOptions(workspaceFolder, sourceDir, preset) {
    const generator = 'generator' in preset
        ? preset.generator
        : ('__generator' in preset ? preset.__generator : undefined);
    const expansionOpts = {
        vars: {
            generator: generator || 'null',
            workspaceFolder,
            workspaceFolderBasename: path.basename(workspaceFolder),
            workspaceHash: util.makeHashString(workspaceFolder),
            workspaceRoot: workspaceFolder,
            workspaceRootFolderName: path.dirname(workspaceFolder),
            userHome: paths_1.default.userHome,
            sourceDir,
            sourceParentDir: path.dirname(sourceDir),
            sourceDirName: path.basename(sourceDir),
            presetName: preset.name
        },
        envOverride: preset.environment,
        recursive: true,
        // Don't support commands since expansion might be called on activation. If there is
        // an extension depending on us, and there is a command in this extension is invoked,
        // this would be a deadlock. This could be avoided but at a huge cost.
        doNotSupportCommands: true
    };
    if (preset.__file && preset.__file.version >= 3) {
        expansionOpts.vars['hostSystemName'] = await util.getHostSystemNameMemo();
    }
    if (preset.__file && preset.__file.version >= 4) {
        expansionOpts.vars['fileDir'] = path.dirname(preset.__file.__path);
    }
    if (preset.__file && preset.__file.version >= 5) {
        expansionOpts.vars['pathListSep'] = path.delimiter;
    }
    return expansionOpts;
}
async function expandCondition(condition, expansionOpts) {
    if (util.isNullOrUndefined(condition)) {
        return undefined;
    }
    if (util.isBoolean(condition)) {
        return condition;
    }
    if (condition.type) {
        const result = { type: condition.type };
        if (condition.lhs) {
            result.lhs = await (0, expand_1.expandString)(condition.lhs, expansionOpts);
        }
        if (condition.rhs) {
            result.rhs = await (0, expand_1.expandString)(condition.rhs, expansionOpts);
        }
        if (condition.string) {
            result.string = await (0, expand_1.expandString)(condition.string, expansionOpts);
        }
        if (condition.list) {
            result.list = [];
            for (const value of condition.list) {
                result.list.push(await (0, expand_1.expandString)(value, expansionOpts));
            }
        }
        if (condition.condition) {
            const expanded = await expandCondition(condition.condition, expansionOpts);
            if (!util.isBoolean(expanded)) {
                result.condition = expanded;
            }
        }
        if (condition.conditions) {
            result.conditions = [];
            for (const value of condition.conditions) {
                const expanded = await expandCondition(value, expansionOpts);
                if (expanded && !util.isBoolean(expanded)) {
                    result.conditions.push(expanded);
                }
            }
        }
        merge(result, condition); // Copy the remaining fields;
        return result;
    }
    return undefined;
}
async function expandConditionsForPresets(folder, sourceDir) {
    for (const preset of allConfigurePresets(folder)) {
        if (preset.condition) {
            const opts = await getExpansionOptions('${workspaceFolder}', sourceDir, preset);
            preset.condition = await expandCondition(preset.condition, opts);
        }
    }
    for (const preset of allBuildPresets(folder)) {
        if (preset.condition) {
            const opts = await getExpansionOptions('${workspaceFolder}', sourceDir, preset);
            preset.condition = await expandCondition(preset.condition, opts);
        }
    }
    for (const preset of allTestPresets(folder)) {
        if (preset.condition) {
            const opts = await getExpansionOptions('${workspaceFolder}', sourceDir, preset);
            preset.condition = await expandCondition(preset.condition, opts);
        }
    }
}
exports.expandConditionsForPresets = expandConditionsForPresets;
async function expandConfigurePreset(folder, name, workspaceFolder, sourceDir, allowUserPreset = false) {
    var _a, _b, _c, _d;
    const refs = referencedConfigurePresets.get(folder);
    if (!refs) {
        referencedConfigurePresets.set(folder, new Set());
    }
    else {
        refs.clear();
    }
    const preset = await expandConfigurePresetImpl(folder, name, workspaceFolder, sourceDir, allowUserPreset);
    if (!preset) {
        return null;
    }
    // Expand strings under the context of current preset
    const expandedPreset = { name };
    const expansionOpts = await getExpansionOptions(workspaceFolder, sourceDir, preset);
    preset.environment = environmentVariables_1.EnvironmentUtils.mergePreserveNull([process.env, preset.environment]);
    // Expand environment vars first since other fields may refer to them
    if (preset.environment) {
        expandedPreset.environment = environmentVariables_1.EnvironmentUtils.createPreserveNull();
        for (const key in preset.environment) {
            if (preset.environment[key]) {
                expandedPreset.environment[key] = await (0, expand_1.expandString)(preset.environment[key], expansionOpts);
            }
        }
    }
    expansionOpts.envOverride = expandedPreset.environment;
    if (preset.__file && preset.__file.version >= 3) {
        // For presets v3+ binaryDir is optional, but cmake-tools needs a value. Default to something reasonable.
        if (!preset.binaryDir) {
            const defaultValue = '${sourceDir}/out/build/${presetName}';
            log.debug(localize(14, null, preset.name, `"${defaultValue}"`));
            preset.binaryDir = defaultValue;
        }
    }
    // Expand other fields
    if (preset.binaryDir) {
        expandedPreset.binaryDir = util.lightNormalizePath(await (0, expand_1.expandString)(preset.binaryDir, expansionOpts));
        if (!path.isAbsolute(expandedPreset.binaryDir)) {
            expandedPreset.binaryDir = util.resolvePath(expandedPreset.binaryDir, sourceDir);
        }
    }
    if (preset.cmakeExecutable) {
        expandedPreset.cmakeExecutable = util.lightNormalizePath(await (0, expand_1.expandString)(preset.cmakeExecutable, expansionOpts));
    }
    if (preset.installDir) {
        expandedPreset.installDir = util.lightNormalizePath(await (0, expand_1.expandString)(preset.installDir, expansionOpts));
    }
    if (preset.toolchainFile) {
        expandedPreset.toolchainFile = util.lightNormalizePath(await (0, expand_1.expandString)(preset.toolchainFile, expansionOpts));
    }
    if (preset.cacheVariables) {
        expandedPreset.cacheVariables = {};
        for (const cacheVarName in preset.cacheVariables) {
            const cacheVar = preset.cacheVariables[cacheVarName];
            if (typeof cacheVar === 'boolean') {
                expandedPreset.cacheVariables[cacheVarName] = cacheVar;
            }
            else if (cacheVar || cacheVar === "") {
                if (util.isString(cacheVar)) {
                    expandedPreset.cacheVariables[cacheVarName] = await (0, expand_1.expandString)(cacheVar, expansionOpts);
                }
                else if (util.isString(cacheVar.value)) {
                    expandedPreset.cacheVariables[cacheVarName] = { type: cacheVar.type, value: await (0, expand_1.expandString)(cacheVar.value, expansionOpts) };
                }
                else {
                    expandedPreset.cacheVariables[cacheVarName] = { type: cacheVar.type, value: cacheVar.value };
                }
            }
        }
    }
    if (preset.condition) {
        expandedPreset.condition = await expandCondition(expandedPreset.condition, expansionOpts);
    }
    // Other fields can be copied by reference for simplicity
    merge(expandedPreset, preset);
    let compilerEnv = environmentVariables_1.EnvironmentUtils.createPreserveNull();
    // [Windows Only] If CMAKE_CXX_COMPILER or CMAKE_C_COMPILER is set as cl, clang, clang-cl, clang-cpp and clang++,
    // but they are not on PATH, then set the env automatically.
    if (process.platform === 'win32') {
        if (preset.cacheVariables) {
            const cxxCompiler = (_a = getStringValueFromCacheVar(preset.cacheVariables['CMAKE_CXX_COMPILER'])) === null || _a === void 0 ? void 0 : _a.toLowerCase();
            const cCompiler = (_b = getStringValueFromCacheVar(preset.cacheVariables['CMAKE_C_COMPILER'])) === null || _b === void 0 ? void 0 : _b.toLowerCase();
            // The env variables for the supported compilers are the same.
            const compilerName = util.isSupportedCompiler(cxxCompiler) || util.isSupportedCompiler(cCompiler);
            // find where.exe using process.env since we're on windows.
            let whereExecutable;
            // assume in this call that it exists
            const whereOutput = await (0, proc_1.execute)('where.exe', ['where.exe'], null, {
                environment: process.env,
                silent: true,
                encoding: 'utf-8',
                shell: true
            }).result;
            // now we have a valid where.exe
            if (whereOutput.stdout) {
                const locations = whereOutput.stdout.split('\r\n');
                if (locations.length > 0) {
                    whereExecutable = locations[0];
                }
            }
            if (compilerName && whereExecutable) {
                const compilerLocation = await (0, proc_1.execute)(whereExecutable, [compilerName], null, {
                    environment: environmentVariables_1.EnvironmentUtils.create(expandedPreset.environment),
                    silent: true,
                    encoding: 'utf8',
                    shell: true
                }).result;
                if (!compilerLocation.stdout) {
                    // Not on PATH, need to set env
                    const arch = getArchitecture(preset);
                    const toolset = getToolset(preset);
                    // Get version info for all VS instances.
                    const vsInstalls = await (0, visualStudio_1.vsInstallations)();
                    // The VS installation to grab developer environment from.
                    let vsInstall;
                    // VS generators starting with Visual Studio 15 2017 support CMAKE_GENERATOR_INSTANCE.
                    // If supported, we should respect this value when defined. If not defined, we should
                    // set it to ensure CMake chooses the same VS instance as we use here.
                    // Note that if the user sets this in a toolchain file we won't know about it,
                    // which could cause configuration to fail. However the user can workaround this by launching
                    // vscode from the dev prompt of their desired instance.
                    // https://cmake.org/cmake/help/latest/variable/CMAKE_GENERATOR_INSTANCE.html
                    let vsGeneratorVersion;
                    const matches = (_c = preset.generator) === null || _c === void 0 ? void 0 : _c.match(/Visual Studio (?<version>\d+)/);
                    if (matches && ((_d = matches.groups) === null || _d === void 0 ? void 0 : _d.version)) {
                        vsGeneratorVersion = parseInt(matches.groups.version);
                        const useCMakeGeneratorInstance = !isNaN(vsGeneratorVersion) && vsGeneratorVersion >= 15;
                        const cmakeGeneratorInstance = getStringValueFromCacheVar(preset.cacheVariables['CMAKE_GENERATOR_INSTANCE']);
                        if (useCMakeGeneratorInstance && cmakeGeneratorInstance) {
                            const cmakeGeneratorInstanceNormalized = path.normalize(cmakeGeneratorInstance);
                            vsInstall = vsInstalls.find((vs) => vs.installationPath
                                && path.normalize(vs.installationPath) === cmakeGeneratorInstanceNormalized);
                            if (!vsInstall) {
                                log.warning(localize(15, null, preset.name, `CMAKE_GENERATOR_INSTANCE="${cmakeGeneratorInstance}"`));
                            }
                        }
                    }
                    // If VS instance wasn't chosen using CMAKE_GENERATOR_INSTANCE, look up a matching instance
                    // that supports the specified toolset.
                    if (!vsInstall) {
                        // sort VS installs in order of descending version. This ensures we choose the latest supported install first.
                        vsInstalls.sort((a, b) => -(0, visualStudio_1.compareVersions)(a.installationVersion, b.installationVersion));
                        for (const vs of vsInstalls) {
                            // Check for existence of vcvars script to determine whether desired host/target architecture is supported.
                            // toolset.host will be set by getToolset.
                            if (await (0, visualStudio_1.getVcVarsBatScript)(vs, toolset.host, arch)) {
                                // If a toolset version is specified then check to make sure this vs instance has it installed.
                                if (toolset.version) {
                                    const availableToolsets = await (0, visualStudio_1.enumerateMsvcToolsets)(vs.installationPath, vs.installationVersion);
                                    // forcing non-null due to false positive (toolset.version is checked in conditional)
                                    if (availableToolsets === null || availableToolsets === void 0 ? void 0 : availableToolsets.find(t => t.startsWith(toolset.version))) {
                                        vsInstall = vs;
                                        break;
                                    }
                                }
                                else if (!vsGeneratorVersion || vs.installationVersion.startsWith(vsGeneratorVersion.toString())) {
                                    // If no toolset version specified then choose the latest VS instance for the given generator
                                    vsInstall = vs;
                                    break;
                                }
                            }
                        }
                    }
                    if (!vsInstall) {
                        log.error(localize(16, null, preset.name, `"${compilerName}.exe"`, toolset.version ? `"${toolset.version},${toolset.host}"` : `"${toolset.host}"`, `"${arch}"`));
                    }
                    else {
                        log.info(localize(17, null, vsInstall.instanceId, vsInstall.installationVersion, `"${vsInstall.installationPath}"`));
                        const vsEnv = await (0, visualStudio_1.varsForVSInstallation)(vsInstall, toolset.host, arch, toolset.version);
                        compilerEnv = vsEnv !== null && vsEnv !== void 0 ? vsEnv : environmentVariables_1.EnvironmentUtils.create();
                        // if ninja isn't on path, try to look for it in a VS install
                        const ninjaLoc = await (0, proc_1.execute)(whereExecutable, ['ninja'], null, {
                            environment: environmentVariables_1.EnvironmentUtils.create(expandedPreset.environment),
                            silent: true,
                            encoding: 'utf8',
                            shell: true
                        }).result;
                        if (!ninjaLoc.stdout) {
                            const vsCMakePaths = await paths_1.default.vsCMakePaths(vsInstall.instanceId);
                            if (vsCMakePaths.ninja) {
                                log.warning(localize(18, null, vsCMakePaths.ninja));
                                compilerEnv['PATH'] = `${path.dirname(vsCMakePaths.ninja)};${compilerEnv['PATH']}`;
                            }
                        }
                        expandedPreset.environment = environmentVariables_1.EnvironmentUtils.mergePreserveNull([expandedPreset.environment, compilerEnv]);
                    }
                }
            }
        }
    }
    return expandedPreset;
}
exports.expandConfigurePreset = expandConfigurePreset;
function getArchitecture(preset) {
    if (util.isString(preset.architecture)) {
        return preset.architecture;
    }
    else if (preset.architecture && preset.architecture.value) {
        return preset.architecture.value;
    }
    log.warning(localize(19, null, preset.name));
    return 'x86';
}
exports.getArchitecture = getArchitecture;
function getToolset(preset) {
    let result;
    if (util.isString(preset.toolset)) {
        result = parseToolset(preset.toolset);
    }
    else if (preset.toolset && util.isString(preset.toolset.value)) {
        result = parseToolset(preset.toolset.value);
    }
    const noToolsetArchWarning = localize(20, null, preset.name, '"host=x86"');
    if (result) {
        if (result.name === 'x86' || result.name === 'x64') {
            log.warning(localize(21, null, preset.name, `"${result.name}"`, `"host=${result.name}"`));
        }
        if (!result.host) {
            log.warning(noToolsetArchWarning);
            result.host = 'x86';
        }
        if (!result.version && result.name !== latestToolsetName) {
            log.warning(localize(22, null, preset.name));
        }
    }
    else {
        log.warning(noToolsetArchWarning);
        result = { host: 'x86' };
    }
    return result;
}
exports.getToolset = getToolset;
const toolsetToVersion = {
    'v100': '10.0',
    'v110': '11.0',
    'v120': '12.0',
    'v140': '14.0',
    'v141': '14.16',
    'v142': '14.29'
    // don't include the latest version - the compiler version changes frequently and it will be picked by default anyway.
    // NOTE: the latest toolset name (below) should be kept up to date.
};
const latestToolsetName = 'v143';
// We don't support all of these options for Kit lookup right now, but might in the future.
function parseToolset(toolset) {
    const toolsetOptions = toolset.split(',');
    const result = {};
    for (const option of toolsetOptions) {
        if (option.indexOf('=') < 0) {
            const version = toolsetToVersion[option];
            if (version) {
                result.version = version;
            }
            else {
                result.name = option;
            }
        }
        else {
            const keyValue = option.split('=');
            switch (keyValue[0].toLowerCase()) {
                case 'cuda':
                    result.cuda = keyValue[1];
                    break;
                case 'host':
                    result.host = keyValue[1];
                    break;
                case 'version':
                    result.version = keyValue[1];
                    break;
                case 'vctargetspath':
                    result.VCTargetsPath = keyValue[1];
                    break;
                default:
                    log.warning(localize(23, null, option));
                    break;
            }
        }
    }
    return result;
}
async function expandConfigurePresetImpl(folder, name, workspaceFolder, sourceDir, allowUserPreset = false) {
    let preset = getPresetByName(configurePresets(folder), name);
    if (preset) {
        return expandConfigurePresetHelper(folder, preset, workspaceFolder, sourceDir);
    }
    if (allowUserPreset) {
        preset = getPresetByName(userConfigurePresets(folder), name);
        if (preset) {
            return expandConfigurePresetHelper(folder, preset, workspaceFolder, sourceDir, true);
        }
    }
    log.error(localize(24, null, name));
    return null;
}
async function expandConfigurePresetHelper(folder, preset, workspaceFolder, sourceDir, allowUserPreset = false) {
    if (preset.__expanded) {
        return preset;
    }
    if (preset.__file && preset.__file.version <= 2) {
        // toolchainFile and installDir added in presets v3
        if (preset.toolchainFile) {
            log.error(localize(25, null, preset.name, '"toolchainFile"'));
            return null;
        }
        if (preset.installDir) {
            log.error(localize(26, null, preset.name, '"installDir"'));
            return null;
        }
    }
    const refs = referencedConfigurePresets.get(folder);
    if (refs.has(preset.name) && !preset.__expanded) {
        // Referenced this preset before, but it still hasn't been expanded. So this is a circular inheritance.
        log.error(localize(27, null, preset.name));
        return null;
    }
    refs.add(preset.name);
    // Init env and cacheVar to empty if not specified to avoid null checks later
    if (!preset.environment) {
        preset.environment = environmentVariables_1.EnvironmentUtils.createPreserveNull();
    }
    if (!preset.cacheVariables) {
        preset.cacheVariables = {};
    }
    // Expand inherits
    let inheritedEnv = environmentVariables_1.EnvironmentUtils.createPreserveNull();
    if (preset.inherits) {
        if (util.isString(preset.inherits)) {
            preset.inherits = [preset.inherits];
        }
        for (const parentName of preset.inherits) {
            const parent = await expandConfigurePresetImpl(folder, parentName, workspaceFolder, sourceDir, allowUserPreset);
            if (parent) {
                // Inherit environment
                inheritedEnv = environmentVariables_1.EnvironmentUtils.mergePreserveNull([parent.environment, inheritedEnv]);
                // Inherit cache vars
                for (const name in parent.cacheVariables) {
                    if (preset.cacheVariables[name] === undefined) {
                        preset.cacheVariables[name] = parent.cacheVariables[name];
                    }
                }
                // Inherit other fields
                let key;
                for (key in parent) {
                    if (isInheritable(key) && preset[key] === undefined) {
                        // 'as never' to bypass type check
                        preset[key] = parent[key];
                    }
                }
            }
        }
    }
    preset.environment = environmentVariables_1.EnvironmentUtils.mergePreserveNull([inheritedEnv, preset.environment]);
    preset.__expanded = true;
    return preset;
}
// Used for both getConfigurePreset and expandBuildPreset.
// Map<fsPath, Set<referencedPresets>>
const referencedBuildPresets = new Map();
/**
 * This is actually a very limited version of expandBuildPreset/expandTestPreset.
 * Use expandBuildPreset/expandTestPreset if other fields are needed.
 * They should NOT be used together.
 * They should Not call each other.
 */
function expandConfigurePresetForPresets(folder, presetType) {
    if (presetType === 'build') {
        for (const preset of buildPresets(folder)) {
            getConfigurePresetForPreset(folder, preset.name, presetType);
        }
        for (const preset of userBuildPresets(folder)) {
            getConfigurePresetForPreset(folder, preset.name, presetType, true);
        }
    }
    else if (presetType === 'test') {
        for (const preset of testPresets(folder)) {
            getConfigurePresetForPreset(folder, preset.name, presetType);
        }
        for (const preset of userTestPresets(folder)) {
            getConfigurePresetForPreset(folder, preset.name, presetType, true);
        }
    }
    else if (presetType === 'package') {
        for (const preset of packagePresets(folder)) {
            getConfigurePresetForPreset(folder, preset.name, presetType);
        }
        for (const preset of userPackagePresets(folder)) {
            getConfigurePresetForPreset(folder, preset.name, presetType, true);
        }
    }
    else if (presetType === 'workflow') {
        for (const preset of workflowPresets(folder)) {
            getConfigurePresetForPreset(folder, preset.name, presetType);
        }
        for (const preset of userWorkflowPresets(folder)) {
            getConfigurePresetForPreset(folder, preset.name, presetType, true);
        }
    }
}
exports.expandConfigurePresetForPresets = expandConfigurePresetForPresets;
function getConfigurePresetForPreset(folder, name, presetType, allowUserPreset = false) {
    if (presetType === 'build') {
        const refs = referencedBuildPresets.get(folder);
        if (!refs) {
            referencedBuildPresets.set(folder, new Set());
        }
        else {
            refs.clear();
        }
    }
    else if (presetType === 'test') {
        const refs = referencedTestPresets.get(folder);
        if (!refs) {
            referencedTestPresets.set(folder, new Set());
        }
        else {
            refs.clear();
        }
    }
    else if (presetType === 'package') {
        const refs = referencedPackagePresets.get(folder);
        if (!refs) {
            referencedPackagePresets.set(folder, new Set());
        }
        else {
            refs.clear();
        }
    }
    else if (presetType === 'workflow') {
        const refs = referencedWorkflowPresets.get(folder);
        if (!refs) {
            referencedWorkflowPresets.set(folder, new Set());
        }
        else {
            refs.clear();
        }
    }
    return getConfigurePresetForPresetImpl(folder, name, presetType, allowUserPreset);
}
function getConfigurePresetForPresetImpl(folder, name, presetType, allowUserPreset = false) {
    let preset = null;
    if (presetType === 'build') {
        preset = getPresetByName(buildPresets(folder), name);
    }
    else if (presetType === 'test') {
        preset = getPresetByName(testPresets(folder), name);
    }
    else if (presetType === 'package') {
        preset = getPresetByName(packagePresets(folder), name);
    }
    else if (presetType === 'workflow') {
        preset = getPresetByName(workflowPresets(folder), name);
    }
    if (preset) {
        return getConfigurePresetForPresetHelper(folder, preset, presetType);
    }
    if (allowUserPreset) {
        if (presetType === 'build') {
            preset = getPresetByName(userBuildPresets(folder), name);
        }
        else {
            preset = getPresetByName(userTestPresets(folder), name);
        }
        if (preset) {
            return getConfigurePresetForPresetHelper(folder, preset, presetType, true);
        }
    }
    return null;
}
function getConfigurePresetForPresetHelper(folder, preset, presetType, allowUserPreset = false) {
    if (preset.configurePreset) {
        return preset.configurePreset;
    }
    if (preset.__expanded) {
        return preset.configurePreset || null;
    }
    if (presetType === 'build') {
        const refs = referencedBuildPresets.get(folder);
        if (refs.has(preset.name)) {
            // Referenced this preset before, but it doesn't have a configure preset. This is a circular inheritance.
            log.error(localize(28, null, preset.name));
            return null;
        }
        refs.add(preset.name);
    }
    else if (presetType === 'test') {
        const refs = referencedTestPresets.get(folder);
        if (refs.has(preset.name)) {
            log.error(localize(29, null, preset.name));
            return null;
        }
        refs.add(preset.name);
    }
    else if (presetType === 'package') {
        const refs = referencedPackagePresets.get(folder);
        if (refs.has(preset.name)) {
            log.error(localize(30, null, preset.name));
            return null;
        }
        refs.add(preset.name);
    }
    else if (presetType === 'workflow') {
        const refs = referencedWorkflowPresets.get(folder);
        if (refs.has(preset.name)) {
            log.error(localize(31, null, preset.name));
            return null;
        }
        refs.add(preset.name);
    }
    if (preset.inherits) {
        if (util.isString(preset.inherits)) {
            preset.inherits = [preset.inherits];
        }
        for (const parent of preset.inherits) {
            const parentConfigurePreset = getConfigurePresetForPresetImpl(folder, parent, presetType, allowUserPreset);
            if (parentConfigurePreset) {
                preset.configurePreset = parentConfigurePreset;
                return parentConfigurePreset;
            }
        }
    }
    return null;
}
async function expandBuildPreset(folder, name, workspaceFolder, sourceDir, parallelJobs, preferredGeneratorName, allowUserPreset = false, configurePreset) {
    const refs = referencedBuildPresets.get(folder);
    if (!refs) {
        referencedBuildPresets.set(folder, new Set());
    }
    else {
        refs.clear();
    }
    const preset = await expandBuildPresetImpl(folder, name, workspaceFolder, sourceDir, parallelJobs, preferredGeneratorName, allowUserPreset, configurePreset);
    if (!preset) {
        return null;
    }
    // Expand strings under the context of current preset
    const expandedPreset = { name };
    const expansionOpts = await getExpansionOptions(workspaceFolder, sourceDir, preset);
    // Expand environment vars first since other fields may refer to them
    if (preset.environment) {
        expandedPreset.environment = environmentVariables_1.EnvironmentUtils.createPreserveNull();
        for (const key in preset.environment) {
            if (preset.environment[key]) {
                expandedPreset.environment[key] = await (0, expand_1.expandString)(preset.environment[key], expansionOpts);
            }
        }
    }
    expansionOpts.envOverride = expandedPreset.environment;
    // Expand other fields
    if (preset.targets) {
        if (util.isString(preset.targets)) {
            expandedPreset.targets = await (0, expand_1.expandString)(preset.targets, expansionOpts);
        }
        else {
            expandedPreset.targets = [];
            for (let index = 0; index < preset.targets.length; index++) {
                expandedPreset.targets[index] = await (0, expand_1.expandString)(preset.targets[index], expansionOpts);
            }
        }
    }
    if (preset.nativeToolOptions) {
        expandedPreset.nativeToolOptions = [];
        for (let index = 0; index < preset.nativeToolOptions.length; index++) {
            expandedPreset.nativeToolOptions[index] = await (0, expand_1.expandString)(preset.nativeToolOptions[index], expansionOpts);
        }
    }
    // Other fields can be copied by reference for simplicity
    merge(expandedPreset, preset);
    return expandedPreset;
}
exports.expandBuildPreset = expandBuildPreset;
async function expandBuildPresetImpl(folder, name, workspaceFolder, sourceDir, parallelJobs, preferredGeneratorName, allowUserPreset = false, configurePreset) {
    let preset = getPresetByName(buildPresets(folder), name);
    if (preset) {
        return expandBuildPresetHelper(folder, preset, workspaceFolder, sourceDir, parallelJobs, preferredGeneratorName);
    }
    if (allowUserPreset) {
        preset = getPresetByName(userBuildPresets(folder), name);
        if (preset) {
            return expandBuildPresetHelper(folder, preset, workspaceFolder, sourceDir, parallelJobs, preferredGeneratorName, true);
        }
    }
    if (name === exports.defaultBuildPreset.name) {
        // Construct the default build preset every time since it should NOT be cached
        preset = {
            name: exports.defaultBuildPreset.name,
            displayName: exports.defaultBuildPreset.displayName,
            description: exports.defaultBuildPreset.description,
            jobs: parallelJobs || (0, config_1.defaultNumJobs)(),
            configurePreset
        };
        return expandBuildPresetHelper(folder, preset, workspaceFolder, sourceDir, parallelJobs, preferredGeneratorName, true);
    }
    log.error(localize(32, null, name));
    return null;
}
async function expandBuildPresetHelper(folder, preset, workspaceFolder, sourceDir, parallelJobs, preferredGeneratorName, allowUserPreset = false) {
    if (preset.__expanded) {
        return preset;
    }
    const refs = referencedBuildPresets.get(folder);
    if (refs.has(preset.name) && !preset.__expanded) {
        // Referenced this preset before, but it still hasn't been expanded. So this is a circular inheritance.
        // Notice that we check !preset.__expanded here but not in getConfigurePresetForBuildPresetHelper because
        // multiple parents could all point to the same parent.
        log.error(localize(33, null, preset.name));
        return null;
    }
    refs.add(preset.name);
    // Init env to empty if not specified to avoid null checks later
    if (!preset.environment) {
        preset.environment = environmentVariables_1.EnvironmentUtils.createPreserveNull();
    }
    let inheritedEnv = environmentVariables_1.EnvironmentUtils.createPreserveNull();
    // Expand inherits
    if (preset.inherits) {
        if (util.isString(preset.inherits)) {
            preset.inherits = [preset.inherits];
        }
        for (const parentName of preset.inherits) {
            const parent = await expandBuildPresetImpl(folder, parentName, workspaceFolder, sourceDir, parallelJobs, preferredGeneratorName, allowUserPreset);
            if (parent) {
                // Inherit environment
                inheritedEnv = environmentVariables_1.EnvironmentUtils.mergePreserveNull([parent.environment, inheritedEnv]);
                // Inherit other fields
                let key;
                for (key in parent) {
                    if (isInheritable(key) && preset[key] === undefined) {
                        // 'as never' to bypass type check
                        preset[key] = parent[key];
                    }
                }
            }
        }
    }
    // Expand configure preset. Evaluate this after inherits since it may come from parents
    if (preset.configurePreset) {
        const configurePreset = await expandConfigurePreset(folder, preset.configurePreset, workspaceFolder, sourceDir, allowUserPreset);
        if (configurePreset) {
            preset.__binaryDir = configurePreset.binaryDir;
            preset.__generator = configurePreset.generator;
            if (preset.inheritConfigureEnvironment !== false) { // Check false explicitly since defaults to true
                inheritedEnv = environmentVariables_1.EnvironmentUtils.mergePreserveNull([inheritedEnv, configurePreset.environment]);
            }
        }
        else {
            return null;
        }
    }
    preset.environment = environmentVariables_1.EnvironmentUtils.mergePreserveNull([process.env, inheritedEnv, preset.environment]);
    preset.__expanded = true;
    return preset;
}
// Map<fsPath, Set<referencedPresets>>
const referencedTestPresets = new Map();
async function expandTestPreset(folder, name, workspaceFolder, sourceDir, preferredGeneratorName, allowUserPreset = false, configurePreset) {
    var _a, _b, _c;
    const refs = referencedTestPresets.get(folder);
    if (!refs) {
        referencedTestPresets.set(folder, new Set());
    }
    else {
        refs.clear();
    }
    const preset = await expandTestPresetImpl(folder, name, workspaceFolder, sourceDir, preferredGeneratorName, allowUserPreset, configurePreset);
    if (!preset) {
        return null;
    }
    const expandedPreset = { name };
    const expansionOpts = await getExpansionOptions(workspaceFolder, sourceDir, preset);
    // Expand environment vars first since other fields may refer to them
    if (preset.environment) {
        expandedPreset.environment = environmentVariables_1.EnvironmentUtils.createPreserveNull();
        for (const key in preset.environment) {
            if (preset.environment[key]) {
                expandedPreset.environment[key] = await (0, expand_1.expandString)(preset.environment[key], expansionOpts);
            }
        }
    }
    expansionOpts.envOverride = expandedPreset.environment;
    // Expand other fields
    if (preset.overwriteConfigurationFile) {
        expandedPreset.overwriteConfigurationFile = [];
        for (let index = 0; index < preset.overwriteConfigurationFile.length; index++) {
            expandedPreset.overwriteConfigurationFile[index] = await (0, expand_1.expandString)(preset.overwriteConfigurationFile[index], expansionOpts);
        }
    }
    if ((_a = preset.output) === null || _a === void 0 ? void 0 : _a.outputLogFile) {
        expandedPreset.output = { outputLogFile: util.lightNormalizePath(await (0, expand_1.expandString)(preset.output.outputLogFile, expansionOpts)) };
        merge(expandedPreset.output, preset.output);
    }
    if ((_b = preset.output) === null || _b === void 0 ? void 0 : _b.outputJUnitFile) {
        expandedPreset.output = { outputJUnitFile: util.lightNormalizePath(await (0, expand_1.expandString)(preset.output.outputJUnitFile, expansionOpts)) };
        merge(expandedPreset.output, preset.output);
    }
    if (preset.filter) {
        expandedPreset.filter = {};
        if (preset.filter.include) {
            expandedPreset.filter.include = {};
            if (preset.filter.include.name) {
                expandedPreset.filter.include.name = await (0, expand_1.expandString)(preset.filter.include.name, expansionOpts);
            }
            if (util.isString(preset.filter.include.index)) {
                expandedPreset.filter.include.index = await (0, expand_1.expandString)(preset.filter.include.index, expansionOpts);
            }
            merge(expandedPreset.filter.include, preset.filter.include);
        }
        if (preset.filter.exclude) {
            expandedPreset.filter.exclude = {};
            if (preset.filter.exclude.label) {
                expandedPreset.filter.exclude.label = await (0, expand_1.expandString)(preset.filter.exclude.label, expansionOpts);
            }
            if (preset.filter.exclude.name) {
                expandedPreset.filter.exclude.name = await (0, expand_1.expandString)(preset.filter.exclude.name, expansionOpts);
            }
            if (preset.filter.exclude.fixtures) {
                expandedPreset.filter.exclude.fixtures = {};
                if (preset.filter.exclude.fixtures.any) {
                    expandedPreset.filter.exclude.fixtures.any = await (0, expand_1.expandString)(preset.filter.exclude.fixtures.any, expansionOpts);
                }
                if (preset.filter.exclude.fixtures.setup) {
                    expandedPreset.filter.exclude.fixtures.setup = await (0, expand_1.expandString)(preset.filter.exclude.fixtures.setup, expansionOpts);
                }
                if (preset.filter.exclude.fixtures.cleanup) {
                    expandedPreset.filter.exclude.fixtures.cleanup = await (0, expand_1.expandString)(preset.filter.exclude.fixtures.cleanup, expansionOpts);
                }
                merge(expandedPreset.filter.exclude.fixtures, preset.filter.exclude.fixtures);
            }
            merge(expandedPreset.filter.exclude, preset.filter.exclude);
        }
        merge(expandedPreset.filter, preset.filter);
    }
    if ((_c = preset.execution) === null || _c === void 0 ? void 0 : _c.resourceSpecFile) {
        expandedPreset.execution = { resourceSpecFile: util.lightNormalizePath(await (0, expand_1.expandString)(preset.execution.resourceSpecFile, expansionOpts)) };
        merge(expandedPreset.execution, preset.execution);
    }
    merge(expandedPreset, preset);
    return expandedPreset;
}
exports.expandTestPreset = expandTestPreset;
async function expandTestPresetImpl(folder, name, workspaceFolder, sourceDir, preferredGeneratorName, allowUserPreset = false, configurePreset) {
    let preset = getPresetByName(testPresets(folder), name);
    if (preset) {
        return expandTestPresetHelper(folder, preset, workspaceFolder, sourceDir, preferredGeneratorName);
    }
    if (allowUserPreset) {
        preset = getPresetByName(userTestPresets(folder), name);
        if (preset) {
            return expandTestPresetHelper(folder, preset, workspaceFolder, sourceDir, preferredGeneratorName, true);
        }
    }
    if (name === exports.defaultTestPreset.name) {
        // Construct the default test preset every time since it should NOT be cached
        preset = {
            name: exports.defaultTestPreset.name,
            displayName: exports.defaultTestPreset.displayName,
            description: exports.defaultTestPreset.description,
            configurePreset
        };
        return expandTestPresetHelper(folder, preset, workspaceFolder, sourceDir, preferredGeneratorName, true);
    }
    log.error(localize(34, null, name));
    return null;
}
async function expandTestPresetHelper(folder, preset, workspaceFolder, sourceDir, preferredGeneratorName, allowUserPreset = false) {
    if (preset.__expanded) {
        return preset;
    }
    const refs = referencedTestPresets.get(folder);
    if (refs.has(preset.name) && !preset.__expanded) {
        // Referenced this preset before, but it still hasn't been expanded. So this is a circular inheritance.
        log.error(localize(35, null, preset.name));
        return null;
    }
    refs.add(preset.name);
    // Init env to empty if not specified to avoid null checks later
    if (!preset.environment) {
        preset.environment = environmentVariables_1.EnvironmentUtils.createPreserveNull();
    }
    let inheritedEnv = environmentVariables_1.EnvironmentUtils.createPreserveNull();
    // Expand inherits
    if (preset.inherits) {
        if (util.isString(preset.inherits)) {
            preset.inherits = [preset.inherits];
        }
        for (const parentName of preset.inherits) {
            const parent = await expandTestPresetImpl(folder, parentName, workspaceFolder, sourceDir, preferredGeneratorName, allowUserPreset);
            if (parent) {
                // Inherit environment
                inheritedEnv = environmentVariables_1.EnvironmentUtils.mergePreserveNull([parent.environment, inheritedEnv]);
                // Inherit other fields
                let key;
                for (key in parent) {
                    if (isInheritable(key) && preset[key] === undefined) {
                        // 'as never' to bypass type check
                        preset[key] = parent[key];
                    }
                }
            }
        }
    }
    // Expand configure preset. Evaluate this after inherits since it may come from parents
    if (preset.configurePreset) {
        const configurePreset = await expandConfigurePreset(folder, preset.configurePreset, workspaceFolder, sourceDir, allowUserPreset);
        if (configurePreset) {
            preset.__binaryDir = configurePreset.binaryDir;
            preset.__generator = configurePreset.generator;
            if (preset.inheritConfigureEnvironment !== false) { // Check false explicitly since defaults to true
                inheritedEnv = environmentVariables_1.EnvironmentUtils.mergePreserveNull([inheritedEnv, configurePreset.environment]);
            }
        }
        else {
            return null;
        }
    }
    preset.environment = environmentVariables_1.EnvironmentUtils.mergePreserveNull([process.env, inheritedEnv, preset.environment]);
    preset.__expanded = true;
    return preset;
}
// Map<fsPath, Set<referencedPresets>>
const referencedPackagePresets = new Map();
async function expandPackagePreset(folder, name, workspaceFolder, sourceDir, preferredGeneratorName, allowUserPreset = false, configurePreset) {
    const refs = referencedPackagePresets.get(folder);
    if (!refs) {
        referencedPackagePresets.set(folder, new Set());
    }
    else {
        refs.clear();
    }
    const preset = await expandPackagePresetImpl(folder, name, workspaceFolder, sourceDir, preferredGeneratorName, allowUserPreset, configurePreset);
    if (!preset) {
        return null;
    }
    const expandedPreset = { name };
    const expansionOpts = await getExpansionOptions(workspaceFolder, sourceDir, preset);
    // Expand environment vars first since other fields may refer to them
    if (preset.environment) {
        expandedPreset.environment = environmentVariables_1.EnvironmentUtils.createPreserveNull();
        for (const key in preset.environment) {
            if (preset.environment[key]) {
                expandedPreset.environment[key] = await (0, expand_1.expandString)(preset.environment[key], expansionOpts);
            }
        }
    }
    expansionOpts.envOverride = expandedPreset.environment;
    // According to CMake docs, no other fields support macro expansion in a package preset.
    merge(expandedPreset, preset);
    return expandedPreset;
}
exports.expandPackagePreset = expandPackagePreset;
async function expandPackagePresetImpl(folder, name, workspaceFolder, sourceDir, preferredGeneratorName, allowUserPreset = false, configurePreset) {
    let preset = getPresetByName(packagePresets(folder), name);
    if (preset) {
        return expandPackagePresetHelper(folder, preset, workspaceFolder, sourceDir, preferredGeneratorName);
    }
    if (allowUserPreset) {
        preset = getPresetByName(userPackagePresets(folder), name);
        if (preset) {
            return expandPackagePresetHelper(folder, preset, workspaceFolder, sourceDir, preferredGeneratorName, true);
        }
    }
    if (name === exports.defaultPackagePreset.name) {
        // Construct the default package preset every time since it should NOT be cached
        preset = {
            name: exports.defaultPackagePreset.name,
            displayName: exports.defaultPackagePreset.displayName,
            description: exports.defaultPackagePreset.description,
            configurePreset
        };
        return expandPackagePresetHelper(folder, preset, workspaceFolder, sourceDir, preferredGeneratorName, true);
    }
    log.error(localize(36, null, name));
    return null;
}
async function expandPackagePresetHelper(folder, preset, workspaceFolder, sourceDir, preferredGeneratorName, allowUserPreset = false) {
    if (preset.__expanded) {
        return preset;
    }
    const refs = referencedPackagePresets.get(folder);
    if (refs.has(preset.name) && !preset.__expanded) {
        // Referenced this preset before, but it still hasn't been expanded. So this is a circular inheritance.
        log.error(localize(37, null, preset.name));
        return null;
    }
    refs.add(preset.name);
    // Init env to empty if not specified to avoid null checks later
    if (!preset.environment) {
        preset.environment = environmentVariables_1.EnvironmentUtils.createPreserveNull();
    }
    let inheritedEnv = environmentVariables_1.EnvironmentUtils.createPreserveNull();
    // Expand inherits
    if (preset.inherits) {
        if (util.isString(preset.inherits)) {
            preset.inherits = [preset.inherits];
        }
        for (const parentName of preset.inherits) {
            const parent = await expandPackagePresetImpl(folder, parentName, workspaceFolder, sourceDir, preferredGeneratorName, allowUserPreset);
            if (parent) {
                // Inherit environment
                inheritedEnv = environmentVariables_1.EnvironmentUtils.mergePreserveNull([parent.environment, inheritedEnv]);
                // Inherit other fields
                let key;
                for (key in parent) {
                    if (isInheritable(key) && preset[key] === undefined) {
                        // 'as never' to bypass type check
                        preset[key] = parent[key];
                    }
                }
            }
        }
    }
    // Expand configure preset. Evaluate this after inherits since it may come from parents
    if (preset.configurePreset) {
        const configurePreset = await expandConfigurePreset(folder, preset.configurePreset, workspaceFolder, sourceDir, allowUserPreset);
        if (configurePreset) {
            preset.__binaryDir = configurePreset.binaryDir;
            preset.__generator = configurePreset.generator;
            if (preset.inheritConfigureEnvironment !== false) { // Check false explicitly since defaults to true
                inheritedEnv = environmentVariables_1.EnvironmentUtils.mergePreserveNull([inheritedEnv, configurePreset.environment]);
            }
        }
        else {
            return null;
        }
    }
    preset.environment = environmentVariables_1.EnvironmentUtils.mergePreserveNull([process.env, inheritedEnv, preset.environment]);
    preset.__expanded = true;
    return preset;
}
// Map<fsPath, Set<referencedPresets>>
const referencedWorkflowPresets = new Map();
async function expandWorkflowPreset(folder, name, workspaceFolder, sourceDir, preferredGeneratorName, allowUserPreset = false, configurePreset) {
    const refs = referencedWorkflowPresets.get(folder);
    if (!refs) {
        referencedWorkflowPresets.set(folder, new Set());
    }
    else {
        refs.clear();
    }
    const preset = await expandWorkflowPresetImpl(folder, name, workspaceFolder, sourceDir, preferredGeneratorName, allowUserPreset, configurePreset);
    if (!preset) {
        return null;
    }
    const expandedPreset = { name, steps: [{ type: "configure", name: "_placeholder_" }] };
    const expansionOpts = await getExpansionOptions(workspaceFolder, sourceDir, preset);
    // Expand environment vars first since other fields may refer to them
    if (preset.environment) {
        expandedPreset.environment = environmentVariables_1.EnvironmentUtils.createPreserveNull();
        for (const key in preset.environment) {
            if (preset.environment[key]) {
                expandedPreset.environment[key] = await (0, expand_1.expandString)(preset.environment[key], expansionOpts);
            }
        }
    }
    expansionOpts.envOverride = expandedPreset.environment;
    // According to CMake docs, no other fields support macro expansion in a workflow preset.
    merge(expandedPreset, preset);
    expandedPreset.steps = preset.steps;
    return expandedPreset;
}
exports.expandWorkflowPreset = expandWorkflowPreset;
async function expandWorkflowPresetImpl(folder, name, workspaceFolder, sourceDir, preferredGeneratorName, allowUserPreset = false, configurePreset) {
    let preset = getPresetByName(workflowPresets(folder), name);
    if (preset) {
        return expandWorkflowPresetHelper(folder, preset, workspaceFolder, sourceDir, preferredGeneratorName);
    }
    if (allowUserPreset) {
        preset = getPresetByName(userWorkflowPresets(folder), name);
        if (preset) {
            return expandWorkflowPresetHelper(folder, preset, workspaceFolder, sourceDir, preferredGeneratorName, true);
        }
    }
    if (name === exports.defaultWorkflowPreset.name) {
        // Construct the default workflow preset every time since it should NOT be cached
        preset = {
            name: exports.defaultWorkflowPreset.name,
            displayName: exports.defaultWorkflowPreset.displayName,
            description: exports.defaultWorkflowPreset.description,
            steps: [
                {
                    type: "Configure",
                    name: configurePreset ? configurePreset : "_placeholder_configure_preset_"
                }
            ]
        };
        return expandWorkflowPresetHelper(folder, preset, workspaceFolder, sourceDir, preferredGeneratorName, true);
    }
    log.error(localize(38, null, name));
    return null;
}
async function expandWorkflowPresetHelper(folder, preset, workspaceFolder, sourceDir, preferredGeneratorName, allowUserPreset = false) {
    if (preset.__expanded) {
        return preset;
    }
    const refs = referencedWorkflowPresets.get(folder);
    if (refs.has(preset.name) && !preset.__expanded) {
        // Referenced this preset before, but it still hasn't been expanded. So this is a circular inheritance.
        log.error(localize(39, null, preset.name));
        return null;
    }
    refs.add(preset.name);
    // Init env to empty if not specified to avoid null checks later
    if (!preset.environment) {
        preset.environment = environmentVariables_1.EnvironmentUtils.createPreserveNull();
    }
    let inheritedEnv = environmentVariables_1.EnvironmentUtils.createPreserveNull();
    // Expand inherits
    if (preset.inherits) {
        if (util.isString(preset.inherits)) {
            preset.inherits = [preset.inherits];
        }
        for (const parentName of preset.inherits) {
            const parent = await expandWorkflowPresetImpl(folder, parentName, workspaceFolder, sourceDir, preferredGeneratorName, allowUserPreset);
            if (parent) {
                // Inherit environment
                inheritedEnv = environmentVariables_1.EnvironmentUtils.mergePreserveNull([parent.environment, inheritedEnv]);
                // Inherit other fields
                let key;
                for (key in parent) {
                    if (isInheritable(key) && preset[key] === undefined) {
                        // 'as never' to bypass type check
                        preset[key] = parent[key];
                    }
                }
            }
        }
    }
    // Expand configure preset. Evaluate this after inherits since it may come from parents
    const workflowConfigurePreset = preset.steps[0].name;
    if (workflowConfigurePreset) {
        const configurePreset = await expandConfigurePreset(folder, workflowConfigurePreset, workspaceFolder, sourceDir, allowUserPreset);
        if (configurePreset) {
            // The below is critical when the workflow step0 configure preset is different than the
            // configure preset selected for the project.
            // Something that occurs during the usual configure of the project does not happen
            // when we configure on the fly and temporary for step0.
            for (const step of preset.steps) {
                switch (step.type) {
                    case "build":
                        const buildStepPr = getPresetByName(allBuildPresets(folder), step.name);
                        if (buildStepPr) {
                            buildStepPr.__binaryDir = configurePreset.binaryDir;
                            buildStepPr.__generator = configurePreset.generator;
                        }
                        break;
                    case "test":
                        const testStepPr = getPresetByName(allTestPresets(folder), step.name);
                        if (testStepPr) {
                            testStepPr.__binaryDir = configurePreset.binaryDir;
                            testStepPr.__generator = configurePreset.generator;
                        }
                        break;
                    case "package":
                        const packageStepPr = getPresetByName(allPackagePresets(folder), step.name);
                        if (packageStepPr) {
                            packageStepPr.__binaryDir = configurePreset.binaryDir;
                            packageStepPr.__generator = configurePreset.generator;
                        }
                        break;
                }
            }
            ;
        }
        else {
            return null;
        }
    }
    preset.environment = environmentVariables_1.EnvironmentUtils.mergePreserveNull([process.env, inheritedEnv, preset.environment]);
    preset.__expanded = true;
    return preset;
}
function configureArgs(preset) {
    const result = [];
    // CacheVariables
    if (preset.cacheVariables) {
        util.objectPairs(preset.cacheVariables).forEach(([key, value]) => {
            if (util.isString(value) || typeof value === 'boolean') {
                result.push(`-D${key}=${value}`);
            }
            else if (value) {
                result.push(`-D${key}:${value.type}=${value.value}`);
            }
        });
    }
    if (preset.toolchainFile) {
        result.push(`-DCMAKE_TOOLCHAIN_FILE=${preset.toolchainFile}`);
    }
    if (preset.installDir) {
        result.push(`-DCMAKE_INSTALL_PREFIX=${preset.installDir}`);
    }
    // Warnings
    if (preset.warnings) {
        if (preset.warnings.dev !== undefined) {
            result.push(preset.warnings.dev ? '-Wdev' : '-Wno-dev');
        }
        if (preset.warnings.deprecated !== undefined) {
            result.push(preset.warnings.deprecated ? '-Wdeprecated' : '-Wno-deprecated');
        }
        preset.warnings.uninitialized && result.push('--warn-uninitialized');
        preset.warnings.unusedCli === false && result.push('--no-warn-unused-cli');
        preset.warnings.systemVars && result.push('--check-system-vars');
    }
    // Errors
    if (preset.errors) {
        if (preset.errors.dev !== undefined) {
            result.push(preset.errors.dev ? '-Werror=dev' : '-Wno-error=dev');
        }
        if (preset.errors.deprecated !== undefined) {
            result.push(preset.errors.deprecated ? '-Werror=deprecated' : '-Wno-error=deprecated');
        }
    }
    // Debug
    if (preset.debug) {
        preset.debug.output && result.push('--debug-output');
        preset.debug.tryCompile && result.push('--debug-trycompile');
        preset.debug.find && result.push('--debug-find');
    }
    return result;
}
exports.configureArgs = configureArgs;
function buildArgs(preset, tempOverrideArgs, tempOverrideBuildToolArgs) {
    const result = [];
    preset.__binaryDir && result.push('--build', preset.__binaryDir);
    preset.jobs && result.push('--parallel', preset.jobs.toString());
    preset.configuration && result.push('--config', preset.configuration);
    preset.cleanFirst && result.push('--clean-first');
    preset.verbose && result.push('--verbose');
    if (util.isString(preset.__targets)) {
        result.push('--target', preset.__targets);
    }
    else if (util.isArrayOfString(preset.__targets)) {
        result.push('--target', ...preset.__targets);
    }
    tempOverrideArgs && result.push(...tempOverrideArgs);
    preset.nativeToolOptions && result.push('--', ...preset.nativeToolOptions);
    tempOverrideBuildToolArgs && result.push(...tempOverrideBuildToolArgs);
    return result;
}
exports.buildArgs = buildArgs;
function testArgs(preset) {
    var _a, _b, _c, _d, _e;
    const result = [];
    preset.configuration && result.push('--build-config', preset.configuration);
    if (preset.overwriteConfigurationFile) {
        for (const config of preset.overwriteConfigurationFile) {
            result.push('--overwrite', config);
        }
    }
    // Output
    if (preset.output) {
        preset.output.shortProgress && result.push('--progress');
        preset.output.verbosity === 'verbose' && result.push('--verbose');
        preset.output.verbosity === 'extra' && result.push('--extra-verbose');
        preset.output.debug && result.push('--debug');
        preset.output.outputOnFailure && result.push('--output-on-failure');
        preset.output.quiet && result.push('--quiet');
        preset.output.outputLogFile && result.push('--output-log', preset.output.outputLogFile);
        preset.output.outputJUnitFile && result.push('--output-junit', preset.output.outputJUnitFile);
        preset.output.labelSummary === false && result.push('--no-label-summary');
        preset.output.subprojectSummary === false && result.push('--no-subproject-summary');
        preset.output.maxPassedTestOutputSize && result.push('--test-output-size-passed', preset.output.maxPassedTestOutputSize.toString());
        preset.output.maxFailedTestOutputSize && result.push('--test-output-size-failed', preset.output.maxFailedTestOutputSize.toString());
        preset.output.testOutputTruncation && result.push('--test-output-truncation', preset.output.testOutputTruncation.toString());
        preset.output.maxTestNameWidth && result.push('--max-width', preset.output.maxTestNameWidth.toString());
    }
    // Filter
    if ((_a = preset.filter) === null || _a === void 0 ? void 0 : _a.include) {
        preset.filter.include.name && result.push('--tests-regex', preset.filter.include.name);
        preset.filter.include.label && result.push('--label-regex', preset.filter.include.label);
        preset.filter.include.useUnion && result.push('--union');
        if (preset.filter.include.index) {
            if (util.isString(preset.filter.include.index)) {
                result.push('--tests-information', preset.filter.include.index);
            }
            else {
                const start = preset.filter.include.index.start || '';
                const end = preset.filter.include.index.end || '';
                const stride = preset.filter.include.index.stride || '';
                const specificTests = preset.filter.include.index.specificTests ? `,${preset.filter.include.index.specificTests.join(',')}` : '';
                result.push(`--tests-information ${start},${end},${stride}${specificTests}`);
            }
        }
    }
    if ((_b = preset.filter) === null || _b === void 0 ? void 0 : _b.exclude) {
        preset.filter.exclude.name && result.push('--exclude-regex', preset.filter.exclude.name);
        preset.filter.exclude.label && result.push('--label-exclude', preset.filter.exclude.label);
        ((_c = preset.filter.exclude.fixtures) === null || _c === void 0 ? void 0 : _c.any) && result.push('--fixture-exclude-any', preset.filter.exclude.fixtures.any);
        ((_d = preset.filter.exclude.fixtures) === null || _d === void 0 ? void 0 : _d.setup) && result.push('--fixture-exclude-setup', preset.filter.exclude.fixtures.setup);
        ((_e = preset.filter.exclude.fixtures) === null || _e === void 0 ? void 0 : _e.cleanup) && result.push('--fixture-exclude-cleanup', preset.filter.exclude.fixtures.cleanup);
    }
    if (preset.execution) {
        preset.execution.stopOnFailure && result.push('--stop-on-failure');
        preset.execution.enableFailover && result.push('-F');
        preset.execution.jobs && result.push('--parallel', preset.execution.jobs.toString());
        preset.execution.resourceSpecFile && result.push('--resource-spec-file', preset.execution.resourceSpecFile);
        preset.execution.testLoad && result.push('--test-load', preset.execution.testLoad.toString());
        preset.execution.showOnly && result.push('--show-only', preset.execution.showOnly);
        preset.execution.repeat && result.push(`--repeat ${preset.execution.repeat.mode}:${preset.execution.repeat.count}`);
        preset.execution.interactiveDebugging && result.push('--interactive-debug-mode 1');
        preset.execution.interactiveDebugging === false && result.push('--interactive-debug-mode 0');
        preset.execution.scheduleRandom && result.push('--schedule-random');
        preset.execution.timeout && result.push('--timeout', preset.execution.timeout.toString());
        preset.execution.noTestsAction && preset.execution.noTestsAction !== 'default' && result.push('--no-tests=' + preset.execution.noTestsAction);
    }
    return result;
}
exports.testArgs = testArgs;
function packageArgs(preset) {
    var _a, _b;
    const result = [];
    // -C semicolon;separated;list;of;configurations;to;pack
    const configurations = (_a = preset.configurations) === null || _a === void 0 ? void 0 : _a.join(";");
    configurations && result.push(`-C ${configurations}`); // should this be 2 args or 1 with space in between -C and configurations list?
    // -G semicolon;separated;list;of;generators;used
    const generators = (_b = preset.generators) === null || _b === void 0 ? void 0 : _b.join(";");
    generators && result.push(`-G ${generators}`); // should this be 2 args or 1 with space in between -G and generators list?
    // cpack variables: -D var=val
    if (preset.variables) {
        util.objectPairs(preset.variables).forEach(([key, value]) => {
            result.push(`-D ${key}=${value}`);
        });
    }
    preset.configFile && result.push('--config', preset.configFile);
    preset.packageName && result.push('-P', preset.packageName);
    preset.packageVersion && result.push('-R', preset.packageVersion);
    preset.packageDirectory && result.push('-B', preset.packageDirectory);
    // Output
    if (preset.output) {
        preset.output.verbose && result.push('-V');
        preset.output.debug && result.push('--debug');
    }
    return result;
}
exports.packageArgs = packageArgs;
function configurePresetChangeNeedsClean(newPreset, oldPreset) {
    if (!oldPreset) {
        // First configure preset? We never clean
        log.debug(localize(40, null));
        return false;
    }
    const important_params = (preset) => ({
        preferredGenerator: preset.generator
    });
    const new_imp = important_params(newPreset);
    const old_imp = important_params(oldPreset);
    if (util.compare(new_imp, old_imp) !== util.Ordering.Equivalent) {
        log.debug(localize(41, null));
        return true;
    }
    else {
        return false;
    }
}
exports.configurePresetChangeNeedsClean = configurePresetChangeNeedsClean;
function getValue(value) {
    if (util.isString(value)) {
        return value;
    }
    else if (value.strategy === 'set') {
        return value.value;
    }
}
exports.getValue = getValue;
function getStringValueFromCacheVar(variable) {
    if (util.isString(variable)) {
        return variable;
    }
    else if (variable && typeof variable === 'object') {
        return util.isString(variable.value) ? variable.value : null;
    }
    return null;
}
exports.getStringValueFromCacheVar = getStringValueFromCacheVar;
;


/***/ }),

/***/ 84464:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PresetsController = void 0;
const chokidar = __webpack_require__(88643);
const path = __webpack_require__(71017);
const vscode = __webpack_require__(89496);
const nls = __webpack_require__(33463);
const cmakeProject_1 = __webpack_require__(37874);
const logging = __webpack_require__(71067);
const pr_1 = __webpack_require__(72502);
const preset = __webpack_require__(10739);
const util = __webpack_require__(16182);
const rollbar_1 = __webpack_require__(58543);
const expand_1 = __webpack_require__(77504);
const paths_1 = __webpack_require__(86640);
const kitsController_1 = __webpack_require__(61145);
const kit_1 = __webpack_require__(18679);
const visualStudio_1 = __webpack_require__(41108);
const schema_1 = __webpack_require__(11806);
const json5 = __webpack_require__(12311);
nls.config({ messageFormat: nls.MessageFormat.bundle, bundleFormat: nls.BundleFormat.standalone })((__webpack_require__(71017).join)(__dirname, 'src\\presetsController.ts'));
const localize = nls.loadMessageBundle((__webpack_require__(71017).join)(__dirname, 'src\\presetsController.ts'));
const log = logging.createLogger('presetController');
class PresetsController {
    constructor(project, _kitsController, isMultiProject) {
        this.project = project;
        this._kitsController = _kitsController;
        this.isMultiProject = isMultiProject;
        this._sourceDir = '';
        this._presetsFileExists = false;
        this._userPresetsFileExists = false;
        this._isChangingPresets = false;
        this._referencedFiles = [];
        this._presetsChangedEmitter = new vscode.EventEmitter();
        this._userPresetsChangedEmitter = new vscode.EventEmitter();
        this._setPresetsFile = (folder, presetsFile) => {
            preset.setPresetsFile(folder, presetsFile);
            this._presetsChangedEmitter.fire(presetsFile);
        };
        this._setUserPresetsFile = (folder, presetsFile) => {
            preset.setUserPresetsFile(folder, presetsFile);
            this._userPresetsChangedEmitter.fire(presetsFile);
        };
        this._setOriginalPresetsFile = (folder, presetsFile) => {
            preset.setOriginalPresetsFile(folder, presetsFile);
        };
        this._setOriginalUserPresetsFile = (folder, presetsFile) => {
            preset.setOriginalUserPresetsFile(folder, presetsFile);
        };
    }
    static async init(project, kitsController, isMultiProject) {
        const presetsController = new PresetsController(project, kitsController, isMultiProject);
        const expandSourceDir = async (dir) => {
            const workspaceFolder = project.workspaceFolder.uri.fsPath;
            const expansionOpts = {
                vars: {
                    workspaceFolder,
                    workspaceFolderBasename: path.basename(workspaceFolder),
                    workspaceHash: util.makeHashString(workspaceFolder),
                    workspaceRoot: workspaceFolder,
                    workspaceRootFolderName: path.dirname(workspaceFolder),
                    userHome: paths_1.default.userHome,
                    // Following fields are not supported for sourceDir expansion
                    generator: '${generator}',
                    sourceDir: '${sourceDir}',
                    sourceParentDir: '${sourceParentDir}',
                    sourceDirName: '${sourceDirName}',
                    presetName: '${presetName}'
                }
            };
            return util.normalizeAndVerifySourceDir(dir, expansionOpts);
        };
        presetsController._sourceDir = await expandSourceDir(project.sourceDir);
        // We explicitly read presets file here, instead of on the initialization of the file watcher. Otherwise
        // there might be timing issues, since listeners are invoked async.
        await presetsController.reapplyPresets();
        await presetsController.watchPresetsChange();
        project.workspaceContext.config.onChange('allowCommentsInPresetsFile', async () => {
            await presetsController.reapplyPresets();
            vscode.workspace.textDocuments.forEach(doc => {
                const fileName = path.basename(doc.uri.fsPath);
                if (fileName === 'CMakePresets.json' || fileName === 'CMakeUserPresets.json') {
                    if (project.workspaceContext.config.allowCommentsInPresetsFile) {
                        void vscode.languages.setTextDocumentLanguage(doc, 'jsonc');
                    }
                    else {
                        void vscode.languages.setTextDocumentLanguage(doc, 'json');
                    }
                }
            });
        });
        project.workspaceContext.config.onChange('allowUnsupportedPresetsVersions', async () => {
            await presetsController.reapplyPresets();
        });
        return presetsController;
    }
    get presetsPath() {
        return path.join(this._sourceDir, 'CMakePresets.json');
    }
    get userPresetsPath() {
        return path.join(this._sourceDir, 'CMakeUserPresets.json');
    }
    get workspaceFolder() {
        return this.project.workspaceFolder;
    }
    get folderPath() {
        return this.project.folderPath;
    }
    get folderName() {
        return this.project.folderName;
    }
    get presetsFileExist() {
        return this._presetsFileExists || this._userPresetsFileExists;
    }
    /**
     * Call configurePresets, buildPresets, testPresets, packagePresets or workflowPresets to get the latest presets when thie event is fired.
     */
    onPresetsChanged(listener) {
        return this._presetsChangedEmitter.event(listener);
    }
    /**
     * Call configurePresets, buildPresets, testPresets, packagePresets or workflowPresets to get the latest presets when thie event is fired.
     */
    onUserPresetsChanged(listener) {
        return this._userPresetsChangedEmitter.event(listener);
    }
    async resetPresetsFile(file, setPresetsFile, setOriginalPresetsFile, fileExistCallback, referencedFiles) {
        const presetsFileBuffer = await this.readPresetsFile(file);
        // There might be a better location for this, but for now this is the best one...
        fileExistCallback(Boolean(presetsFileBuffer));
        // Record the file as referenced, even if the file does not exist.
        referencedFiles.add(file);
        let presetsFile = await this.parsePresetsFile(presetsFileBuffer, file);
        if (presetsFile) {
            // Parse again so we automatically have a copy by value
            setOriginalPresetsFile(this.folderPath, await this.parsePresetsFile(presetsFileBuffer, file));
        }
        else {
            setOriginalPresetsFile(this.folderPath, undefined);
        }
        presetsFile = await this.validatePresetsFile(presetsFile, file);
        // Private fields must be set after validation, otherwise validation would fail.
        this.populatePrivatePresetsFields(presetsFile, file);
        await this.mergeIncludeFiles(presetsFile, presetsFile, file, referencedFiles);
        // TODO: more validation (or move some of the per file validation here when all entries are merged.
        // Like unresolved preset reference or duplicates).
        setPresetsFile(this.folderPath, presetsFile);
    }
    // Need to reapply presets every time presets changed since the binary dir or cmake path could change
    // (need to clean or reload driver)
    async reapplyPresets() {
        const referencedFiles = new Set();
        // Reset all changes due to expansion since parents could change
        await this.resetPresetsFile(this.presetsPath, this._setPresetsFile, this._setOriginalPresetsFile, exists => this._presetsFileExists = exists, referencedFiles);
        await this.resetPresetsFile(this.userPresetsPath, this._setUserPresetsFile, this._setOriginalUserPresetsFile, exists => this._userPresetsFileExists = exists, referencedFiles);
        this._referencedFiles = Array.from(referencedFiles);
        this.project.minCMakeVersion = preset.minCMakeVersion(this.folderPath);
        if (this.project.configurePreset) {
            await this.setConfigurePreset(this.project.configurePreset.name);
        }
        // Don't need to set build/test presets here since they are reapplied in setConfigurePreset
    }
    showNameInputBox() {
        return vscode.window.showInputBox({ placeHolder: localize(0, null) });
    }
    getOsName() {
        const platmap = {
            win32: 'Windows',
            darwin: 'macOS',
            linux: 'Linux'
        };
        return platmap[process.platform];
    }
    async addConfigurePreset() {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
        let SpecialOptions;
        (function (SpecialOptions) {
            SpecialOptions["CreateFromCompilers"] = "__createFromCompilers__";
            SpecialOptions["InheritConfigurationPreset"] = "__inheritConfigurationPreset__";
            SpecialOptions["ToolchainFile"] = "__toolchainFile__";
            SpecialOptions["Custom"] = "__custom__";
        })(SpecialOptions || (SpecialOptions = {}));
        const items = [];
        if (preset.configurePresets(this.folderPath).length > 0) {
            items.push({
                name: SpecialOptions.InheritConfigurationPreset,
                label: localize(1, null),
                description: localize(2, null)
            });
        }
        items.push({
            name: SpecialOptions.ToolchainFile,
            label: localize(3, null),
            description: localize(4, null)
        }, {
            name: SpecialOptions.Custom,
            label: localize(5, null),
            description: localize(6, null)
        }, {
            name: SpecialOptions.CreateFromCompilers,
            label: localize(7, null),
            description: localize(8, null)
        });
        const chosenItem = await vscode.window.showQuickPick(items, { placeHolder: localize(9, null, this.folderName) });
        if (!chosenItem) {
            log.debug(localize(10, null));
            return false;
        }
        else {
            let newPreset;
            let isMultiConfigGenerator = false;
            switch (chosenItem.name) {
                case SpecialOptions.CreateFromCompilers: {
                    // Check that we have kits
                    if (!await this._kitsController.checkHaveKits()) {
                        return false;
                    }
                    const allKits = this._kitsController.availableKits;
                    // Filter VS based on generators, for example:
                    // VS 2019 Release x86, VS 2019 Preview x86, and VS 2017 Release x86
                    // will be filtered to
                    // VS 2019 x86, VS 2017 x86
                    // Remove toolchain kits
                    const filteredKits = [];
                    for (const kit of allKits) {
                        if (kit.toolchainFile || kit.name === kit_1.SpecialKits.Unspecified) {
                            continue;
                        }
                        let duplicate = false;
                        if (kit.visualStudio && !kit.compilers) {
                            for (const filteredKit of filteredKits) {
                                if (((_a = filteredKit.preferredGenerator) === null || _a === void 0 ? void 0 : _a.name) === ((_b = kit.preferredGenerator) === null || _b === void 0 ? void 0 : _b.name) &&
                                    ((_c = filteredKit.preferredGenerator) === null || _c === void 0 ? void 0 : _c.platform) === ((_d = kit.preferredGenerator) === null || _d === void 0 ? void 0 : _d.platform) &&
                                    ((_e = filteredKit.preferredGenerator) === null || _e === void 0 ? void 0 : _e.toolset) === ((_f = kit.preferredGenerator) === null || _f === void 0 ? void 0 : _f.toolset)) {
                                    // Found same generator in the filtered list
                                    duplicate = true;
                                    break;
                                }
                            }
                        }
                        if (!duplicate) {
                            filteredKits.push(kit);
                        }
                    }
                    log.debug(localize(11, null, filteredKits.length));
                    log.debug(localize(12, null));
                    // Generate the quickpick items from our known kits
                    const getKitName = (kit) => {
                        var _a, _b;
                        if (kit.name === kit_1.SpecialKits.ScanForKits) {
                            return `[${localize(13, null)}]`;
                        }
                        else if (kit.visualStudio && !kit.compilers) {
                            const hostTargetArch = (0, visualStudio_1.getHostTargetArchString)(kit.visualStudioArchitecture, (_a = kit.preferredGenerator) === null || _a === void 0 ? void 0 : _a.platform);
                            return `${(((_b = kit.preferredGenerator) === null || _b === void 0 ? void 0 : _b.name) || 'Visual Studio')} ${hostTargetArch}`;
                        }
                        else {
                            return kit.name;
                        }
                    };
                    const item_promises = filteredKits.map(async (kit) => ({
                        label: getKitName(kit),
                        description: await (0, kit_1.descriptionForKit)(kit, true),
                        kit
                    }));
                    const quickPickItems = await Promise.all(item_promises);
                    const chosen_kit = await vscode.window.showQuickPick(quickPickItems, { placeHolder: localize(14, null, this.folderName) });
                    if (chosen_kit === undefined) {
                        log.debug(localize(15, null));
                        // No selection was made
                        return false;
                    }
                    else {
                        if (chosen_kit.kit.name === kit_1.SpecialKits.ScanForKits) {
                            await kitsController_1.KitsController.scanForKits(await this.project.getCMakePathofProject());
                            return false;
                        }
                        else {
                            log.debug(localize(16, null, JSON.stringify(chosen_kit)));
                            const generator = (_g = chosen_kit.kit.preferredGenerator) === null || _g === void 0 ? void 0 : _g.name;
                            const cacheVariables = {
                                CMAKE_INSTALL_PREFIX: '${sourceDir}/out/install/${presetName}',
                                CMAKE_C_COMPILER: ((_h = chosen_kit.kit.compilers) === null || _h === void 0 ? void 0 : _h['C']) || (chosen_kit.kit.visualStudio ? 'cl.exe' : undefined),
                                CMAKE_CXX_COMPILER: ((_j = chosen_kit.kit.compilers) === null || _j === void 0 ? void 0 : _j['CXX']) || (chosen_kit.kit.visualStudio ? 'cl.exe' : undefined)
                            };
                            if (util.isString(cacheVariables['CMAKE_C_COMPILER'])) {
                                cacheVariables['CMAKE_C_COMPILER'] = cacheVariables['CMAKE_C_COMPILER'].replace(/\\/g, '/');
                            }
                            if (util.isString(cacheVariables['CMAKE_CXX_COMPILER'])) {
                                cacheVariables['CMAKE_CXX_COMPILER'] = cacheVariables['CMAKE_CXX_COMPILER'].replace(/\\/g, '/');
                            }
                            isMultiConfigGenerator = util.isMultiConfGeneratorFast(generator);
                            if (!isMultiConfigGenerator) {
                                cacheVariables['CMAKE_BUILD_TYPE'] = 'Debug';
                            }
                            newPreset = {
                                name: '__placeholder__',
                                displayName: chosen_kit.kit.name,
                                description: chosen_kit.description,
                                generator,
                                toolset: (_k = chosen_kit.kit.preferredGenerator) === null || _k === void 0 ? void 0 : _k.toolset,
                                architecture: (_l = chosen_kit.kit.preferredGenerator) === null || _l === void 0 ? void 0 : _l.platform,
                                binaryDir: '${sourceDir}/out/build/${presetName}',
                                cacheVariables
                            };
                        }
                    }
                    break;
                }
                case SpecialOptions.InheritConfigurationPreset: {
                    const placeHolder = localize(17, null);
                    const presets = preset.configurePresets(this.folderPath);
                    const inherits = await this.selectAnyPreset(presets, presets, { placeHolder, canPickMany: true });
                    newPreset = { name: '__placeholder__', description: '', displayName: '', inherits };
                    break;
                }
                case SpecialOptions.ToolchainFile: {
                    newPreset = {
                        name: '__placeholder__',
                        displayName: `Configure preset using toolchain file`,
                        description: 'Sets Ninja generator, build and install directory',
                        generator: 'Ninja',
                        binaryDir: '${sourceDir}/out/build/${presetName}',
                        cacheVariables: {
                            CMAKE_BUILD_TYPE: 'Debug',
                            CMAKE_TOOLCHAIN_FILE: '',
                            CMAKE_INSTALL_PREFIX: '${sourceDir}/out/install/${presetName}'
                        }
                    };
                    break;
                }
                case SpecialOptions.Custom: {
                    newPreset = {
                        name: '__placeholder__',
                        displayName: `Custom configure preset`,
                        description: 'Sets Ninja generator, build and install directory',
                        generator: 'Ninja',
                        binaryDir: '${sourceDir}/out/build/${presetName}',
                        cacheVariables: {
                            CMAKE_BUILD_TYPE: 'Debug',
                            CMAKE_INSTALL_PREFIX: '${sourceDir}/out/install/${presetName}'
                        }
                    };
                    break;
                }
                default:
                    // Shouldn't reach here
                    break;
            }
            if (newPreset) {
                const name = await this.showNameInputBox();
                if (!name) {
                    return false;
                }
                newPreset.name = name;
                await this.addPresetAddUpdate(newPreset, 'configurePresets');
                if (isMultiConfigGenerator) {
                    // Ensure that we update our local copies of the PresetsFile so that adding the build preset happens as expected.
                    await this.reapplyPresets();
                    const buildPreset = {
                        name: `${newPreset.name}-debug`,
                        displayName: `${newPreset.displayName} - Debug`,
                        configurePreset: newPreset.name,
                        configuration: 'Debug'
                    };
                    await this.addPresetAddUpdate(buildPreset, 'buildPresets');
                }
            }
            return true;
        }
    }
    async handleNoConfigurePresets() {
        const yes = localize(18, null);
        const no = localize(19, null);
        const result = await vscode.window.showWarningMessage(localize(20, null), yes, no);
        if (result === yes) {
            return this.addConfigurePreset();
        }
        else {
            log.error(localize(21, null));
            return false;
        }
    }
    async addBuildPreset() {
        if (preset.configurePresets(this.folderPath).length === 0) {
            return this.handleNoConfigurePresets();
        }
        let SpecialOptions;
        (function (SpecialOptions) {
            SpecialOptions["CreateFromConfigurationPreset"] = "__createFromConfigurationPreset__";
            SpecialOptions["InheritBuildPreset"] = "__inheritBuildPreset__";
            SpecialOptions["Custom"] = "__custom__";
        })(SpecialOptions || (SpecialOptions = {}));
        const items = [{
                name: SpecialOptions.CreateFromConfigurationPreset,
                label: localize(22, null),
                description: localize(23, null)
            }];
        if (preset.buildPresets(this.folderPath).length > 0) {
            items.push({
                name: SpecialOptions.InheritBuildPreset,
                label: localize(24, null),
                description: localize(25, null)
            });
        }
        items.push({
            name: SpecialOptions.Custom,
            label: localize(26, null),
            description: localize(27, null)
        });
        const chosenItem = await vscode.window.showQuickPick(items, { placeHolder: localize(28, null, this.folderName) });
        if (!chosenItem) {
            log.debug(localize(29, null));
            return false;
        }
        else {
            let newPreset;
            switch (chosenItem.name) {
                case SpecialOptions.CreateFromConfigurationPreset: {
                    const placeHolder = localize(30, null);
                    const presets = preset.configurePresets(this.folderPath);
                    const configurePreset = await this.selectNonHiddenPreset(presets, presets, { placeHolder });
                    newPreset = { name: '__placeholder__', description: '', displayName: '', configurePreset };
                    break;
                }
                case SpecialOptions.InheritBuildPreset: {
                    const placeHolder = localize(31, null);
                    const presets = preset.buildPresets(this.folderPath);
                    const inherits = await this.selectAnyPreset(presets, presets, { placeHolder, canPickMany: true });
                    newPreset = { name: '__placeholder__', description: '', displayName: '', inherits };
                    break;
                }
                case SpecialOptions.Custom: {
                    newPreset = { name: '__placeholder__', description: '', displayName: '' };
                    break;
                }
                default:
                    break;
            }
            if (newPreset) {
                const name = await this.showNameInputBox();
                if (!name) {
                    return false;
                }
                newPreset.name = name;
                await this.addPresetAddUpdate(newPreset, 'buildPresets');
            }
            return true;
        }
    }
    async addTestPreset() {
        if (preset.configurePresets(this.folderPath).length === 0) {
            return this.handleNoConfigurePresets();
        }
        let SpecialOptions;
        (function (SpecialOptions) {
            SpecialOptions["CreateFromConfigurationPreset"] = "__createFromConfigurationPreset__";
            SpecialOptions["InheritTestPreset"] = "__inheritTestPreset__";
            SpecialOptions["Custom"] = "__custom__";
        })(SpecialOptions || (SpecialOptions = {}));
        const items = [{
                name: SpecialOptions.CreateFromConfigurationPreset,
                label: localize(32, null),
                description: localize(33, null)
            }];
        if (preset.testPresets(this.folderPath).length > 0) {
            items.push({
                name: SpecialOptions.InheritTestPreset,
                label: localize(34, null),
                description: localize(35, null)
            });
        }
        items.push({
            name: SpecialOptions.Custom,
            label: localize(36, null),
            description: localize(37, null)
        });
        const chosenItem = await vscode.window.showQuickPick(items, { placeHolder: localize(38, null, this.folderName) });
        if (!chosenItem) {
            log.debug(localize(39, null));
            return false;
        }
        else {
            let newPreset;
            switch (chosenItem.name) {
                case SpecialOptions.CreateFromConfigurationPreset: {
                    const placeHolder = localize(40, null);
                    const presets = preset.configurePresets(this.folderPath);
                    const configurePreset = await this.selectNonHiddenPreset(presets, presets, { placeHolder });
                    newPreset = { name: '__placeholder__', description: '', displayName: '', configurePreset };
                    break;
                }
                case SpecialOptions.InheritTestPreset: {
                    const placeHolder = localize(41, null);
                    const presets = preset.testPresets(this.folderPath);
                    const inherits = await this.selectAnyPreset(presets, presets, { placeHolder, canPickMany: true });
                    newPreset = { name: '__placeholder__', description: '', displayName: '', inherits };
                    break;
                }
                case SpecialOptions.Custom: {
                    newPreset = { name: '__placeholder__', description: '', displayName: '' };
                    break;
                }
                default:
                    break;
            }
            if (newPreset) {
                const name = await this.showNameInputBox();
                if (!name) {
                    return false;
                }
                newPreset.name = name;
                await this.addPresetAddUpdate(newPreset, 'testPresets');
            }
            return true;
        }
    }
    async addPackagePreset() {
        if (preset.configurePresets(this.folderPath).length === 0) {
            return this.handleNoConfigurePresets();
        }
        let SpecialOptions;
        (function (SpecialOptions) {
            SpecialOptions["CreateFromConfigurationPreset"] = "__createFromConfigurationPreset__";
            SpecialOptions["InheritPackagePreset"] = "__inheritPackagePreset__";
            SpecialOptions["Custom"] = "__custom__";
        })(SpecialOptions || (SpecialOptions = {}));
        const items = [{
                name: SpecialOptions.CreateFromConfigurationPreset,
                label: localize(42, null),
                description: localize(43, null)
            }];
        if (preset.packagePresets(this.folderPath).length > 0) {
            items.push({
                name: SpecialOptions.InheritPackagePreset,
                label: localize(44, null),
                description: localize(45, null)
            });
        }
        items.push({
            name: SpecialOptions.Custom,
            label: localize(46, null),
            description: localize(47, null)
        });
        const chosenItem = await vscode.window.showQuickPick(items, { placeHolder: localize(48, null, this.folderName) });
        if (!chosenItem) {
            log.debug(localize(49, null));
            return false;
        }
        else {
            let newPreset;
            switch (chosenItem.name) {
                case SpecialOptions.CreateFromConfigurationPreset: {
                    const placeHolder = localize(50, null);
                    const presets = preset.configurePresets(this.folderPath);
                    const configurePreset = await this.selectNonHiddenPreset(presets, presets, { placeHolder });
                    newPreset = { name: '__placeholder__', description: '', displayName: '', configurePreset };
                    break;
                }
                case SpecialOptions.InheritPackagePreset: {
                    const placeHolder = localize(51, null);
                    const presets = preset.packagePresets(this.folderPath);
                    const inherits = await this.selectAnyPreset(presets, presets, { placeHolder, canPickMany: true });
                    newPreset = { name: '__placeholder__', description: '', displayName: '', inherits };
                    break;
                }
                case SpecialOptions.Custom: {
                    newPreset = { name: '__placeholder__', description: '', displayName: '' };
                    break;
                }
                default:
                    break;
            }
            if (newPreset) {
                const name = await this.showNameInputBox();
                if (!name) {
                    return false;
                }
                newPreset.name = name;
                await this.addPresetAddUpdate(newPreset, 'packagePresets');
            }
            return true;
        }
    }
    async addWorkflowPreset() {
        if (preset.configurePresets(this.folderPath).length === 0) {
            return this.handleNoConfigurePresets();
        }
        let SpecialOptions;
        (function (SpecialOptions) {
            // Will create a new workflow preset only with the first step of "configure" type
            SpecialOptions["CreateFromConfigurationPreset"] = "__createFromConfigurationPreset__";
            // This is not the usual "inheritance" that applies to all other types of presets,
            // but only a convenient way of authoring a new preset from the content of another,
            // instead of a plain copy-paste in the presets file.
            // Also, inheritance can happen from multiple bases while this "create from" can start
            // from only one base.
            SpecialOptions["CreateFromWorkflowPreset"] = "__createFromWorkflowPreset__";
            SpecialOptions["Custom"] = "__custom__";
        })(SpecialOptions || (SpecialOptions = {}));
        const items = [{
                name: SpecialOptions.CreateFromConfigurationPreset,
                label: localize(52, null),
                description: localize(53, null)
            }];
        if (preset.workflowPresets(this.folderPath).length > 0) {
            items.push({
                name: SpecialOptions.CreateFromWorkflowPreset,
                label: localize(54, null),
                description: localize(55, null)
            });
        }
        items.push({
            name: SpecialOptions.Custom,
            label: localize(56, null),
            description: localize(57, null)
        });
        const chosenItem = await vscode.window.showQuickPick(items, { placeHolder: localize(58, null, this.folderName) });
        if (!chosenItem) {
            log.debug(localize(59, null));
            return false;
        }
        else {
            let newPreset;
            switch (chosenItem.name) {
                case SpecialOptions.CreateFromConfigurationPreset: {
                    const placeHolder = localize(60, null);
                    const presets = preset.configurePresets(this.folderPath);
                    const configurePreset = await this.selectNonHiddenPreset(presets, presets, { placeHolder });
                    if (configurePreset) {
                        newPreset = { name: '__placeholder__', description: '', displayName: '',
                            steps: [{ type: "configure", name: configurePreset }] };
                    }
                    break;
                }
                case SpecialOptions.CreateFromWorkflowPreset: {
                    const placeHolder = localize(61, null);
                    const presets = preset.workflowPresets(this.folderPath);
                    const workflowBasePresetName = await this.selectNonHiddenPreset(presets, presets, { placeHolder, canPickMany: false });
                    const workflowBasePreset = presets.find(pr => pr.name === workflowBasePresetName);
                    newPreset = { name: '__placeholder__', description: '', displayName: '', steps: (workflowBasePreset === null || workflowBasePreset === void 0 ? void 0 : workflowBasePreset.steps) || [{ type: "configure", name: "_placeholder_" }] };
                    break;
                }
                case SpecialOptions.Custom: {
                    newPreset = { name: '__placeholder__', description: '', displayName: '', steps: [{ type: "configure", name: "_placeholder_" }] };
                    break;
                }
                default:
                    break;
            }
            if (newPreset) {
                const name = await this.showNameInputBox();
                if (!name) {
                    return false;
                }
                newPreset.name = name;
                await this.addPresetAddUpdate(newPreset, 'workflowPresets');
            }
            return true;
        }
    }
    // Returns the name of preset selected from the list of non-hidden presets.
    async selectNonHiddenPreset(candidates, allPresets, options) {
        return this.selectPreset(candidates, allPresets, options, false);
    }
    // Returns the name of preset selected from the list of all hidden/non-hidden presets.
    async selectAnyPreset(candidates, allPresets, options) {
        return this.selectPreset(candidates, allPresets, options, true);
    }
    async selectPreset(candidates, allPresets, options, showHiddenPresets) {
        const presetsPool = showHiddenPresets ? candidates : candidates.filter(_preset => !_preset.hidden && preset.evaluatePresetCondition(_preset, allPresets));
        const items = presetsPool.map(_preset => ({
            label: _preset.displayName || _preset.name,
            description: _preset.description,
            preset: _preset.name
        }));
        items.push({
            label: localize(62, null),
            preset: PresetsController._addPreset
        });
        const chosenPresets = await vscode.window.showQuickPick(items, options);
        if (util.isArray(chosenPresets)) {
            return chosenPresets.map(_preset => _preset.preset);
        }
        return chosenPresets === null || chosenPresets === void 0 ? void 0 : chosenPresets.preset;
    }
    async getAllConfigurePresets() {
        preset.expandVendorForConfigurePresets(this.folderPath);
        await preset.expandConditionsForPresets(this.folderPath, this._sourceDir);
        return preset.configurePresets(this.folderPath).concat(preset.userConfigurePresets(this.folderPath));
    }
    async selectConfigurePreset() {
        var _a;
        const allPresets = await this.getAllConfigurePresets();
        const presets = allPresets.filter(_preset => {
            var _a, _b;
            const supportedHost = (_b = (_a = _preset.vendor) === null || _a === void 0 ? void 0 : _a['microsoft.com/VisualStudioSettings/CMake/1.0']) === null || _b === void 0 ? void 0 : _b.hostOS;
            const osName = this.getOsName();
            if (supportedHost) {
                if (util.isString(supportedHost)) {
                    return supportedHost === osName;
                }
                else {
                    return supportedHost.includes(osName);
                }
            }
            else {
                return true;
            }
        });
        log.debug(localize(63, null, presets.length));
        log.debug(localize(64, null));
        const placeHolder = localize(65, null, this.folderName);
        const chosenPreset = await this.selectNonHiddenPreset(presets, allPresets, { placeHolder });
        if (!chosenPreset) {
            log.debug(localize(66, null));
            return false;
        }
        else if (chosenPreset === ((_a = this.project.configurePreset) === null || _a === void 0 ? void 0 : _a.name)) {
            return true;
        }
        else {
            const addPreset = chosenPreset === PresetsController._addPreset;
            if (addPreset) {
                await this.addConfigurePreset();
            }
            else {
                log.debug(localize(67, null, JSON.stringify(chosenPreset)));
                await this.setConfigurePreset(chosenPreset);
            }
            if (this.project.workspaceContext.config.automaticReconfigure) {
                await this.project.configureInternal(cmakeProject_1.ConfigureTrigger.selectConfigurePreset, [], cmakeProject_1.ConfigureType.Normal);
            }
            return !addPreset;
        }
    }
    async setConfigurePreset(presetName) {
        if (this._isChangingPresets) {
            log.error(localize(68, null));
            return;
        }
        this._isChangingPresets = true;
        // Load the configure preset into the backend
        await vscode.window.withProgress({
            location: vscode.ProgressLocation.Notification,
            title: localize(69, null, presetName)
        }, () => this.project.setConfigurePreset(presetName));
        await vscode.window.withProgress({
            location: vscode.ProgressLocation.Notification,
            title: localize(70, null)
        }, async () => {
            var _a;
            const configurePreset = (_a = this.project.configurePreset) === null || _a === void 0 ? void 0 : _a.name;
            const buildPreset = configurePreset ? this.project.workspaceContext.state.getBuildPresetName(this.project.folderName, configurePreset, this.isMultiProject) : undefined;
            const testPreset = configurePreset ? this.project.workspaceContext.state.getTestPresetName(this.project.folderName, configurePreset, this.isMultiProject) : undefined;
            const packagePreset = configurePreset ? this.project.workspaceContext.state.getPackagePresetName(this.project.folderName, configurePreset, this.isMultiProject) : undefined;
            const workflowPreset = configurePreset ? this.project.workspaceContext.state.getWorkflowPresetName(this.project.folderName, configurePreset, this.isMultiProject) : undefined;
            if (buildPreset) {
                await this.setBuildPreset(buildPreset, true /*needToCheckConfigurePreset*/, false /*checkChangingPreset*/);
            }
            if (!buildPreset || !this.project.buildPreset) {
                await this.guessBuildPreset();
            }
            if (testPreset) {
                await this.setTestPreset(testPreset, true /*needToCheckConfigurePreset*/, false /*checkChangingPreset*/);
            }
            if (!testPreset || !this.project.testPreset) {
                await this.guessTestPreset();
            }
            if (packagePreset) {
                await this.setPackagePreset(packagePreset, true /*needToCheckConfigurePreset*/, false /*checkChangingPreset*/);
            }
            if (!packagePreset || !this.project.packagePreset) {
                await this.guessPackagePreset();
            }
            if (workflowPreset) {
                await this.setWorkflowPreset(workflowPreset, true /*needToCheckConfigurePreset*/, false /*checkChangingPreset*/);
            }
            if (!workflowPreset || !this.project.workflowPreset) {
                await this.guessWorkflowPreset();
            }
        });
        this._isChangingPresets = false;
    }
    async guessBuildPreset() {
        var _a, _b;
        const selectedConfigurePreset = (_a = this.project.configurePreset) === null || _a === void 0 ? void 0 : _a.name;
        let currentBuildPreset;
        if (selectedConfigurePreset) {
            preset.expandConfigurePresetForPresets(this.folderPath, 'build');
            const buildPresets = preset.allBuildPresets(this.folderPath);
            for (const buildPreset of buildPresets) {
                // Set active build preset as the first valid build preset matches the selected configure preset
                if (buildPreset.configurePreset === selectedConfigurePreset && !buildPreset.hidden) {
                    await this.setBuildPreset(buildPreset.name, false /*needToCheckConfigurePreset*/, false /*checkChangingPreset*/);
                    currentBuildPreset = (_b = this.project.buildPreset) === null || _b === void 0 ? void 0 : _b.name;
                }
                if (currentBuildPreset) {
                    break;
                }
            }
        }
        if (!currentBuildPreset) {
            // No valid buid preset matches the selected configure preset
            await this.setBuildPreset(preset.defaultBuildPreset.name, false /*needToCheckConfigurePreset*/, false /*checkChangingPreset*/);
        }
    }
    async guessTestPreset() {
        var _a, _b;
        const selectedConfigurePreset = (_a = this.project.configurePreset) === null || _a === void 0 ? void 0 : _a.name;
        let currentTestPreset;
        if (selectedConfigurePreset) {
            preset.expandConfigurePresetForPresets(this.folderPath, 'test');
            const testPresets = preset.allTestPresets(this.folderPath);
            for (const testPreset of testPresets) {
                // Set active test preset as the first valid test preset matches the selected configure preset
                if (testPreset.configurePreset === selectedConfigurePreset && !testPreset.hidden) {
                    await this.setTestPreset(testPreset.name, false /*needToCheckConfigurePreset*/, false /*checkChangingPreset*/);
                    currentTestPreset = (_b = this.project.testPreset) === null || _b === void 0 ? void 0 : _b.name;
                }
                if (currentTestPreset) {
                    break;
                }
            }
        }
        if (!currentTestPreset) {
            // No valid test preset matches the selected configure preset
            await this.setTestPreset(preset.defaultTestPreset.name, false /*needToCheckConfigurePreset*/, false /*checkChangingPreset*/);
        }
    }
    async guessPackagePreset() {
        var _a, _b;
        const selectedConfigurePreset = (_a = this.project.configurePreset) === null || _a === void 0 ? void 0 : _a.name;
        let currentPackagePreset;
        if (selectedConfigurePreset) {
            preset.expandConfigurePresetForPresets(this.folderPath, 'package');
            const packagePresets = preset.allPackagePresets(this.folderPath);
            for (const packagePreset of packagePresets) {
                // Set active package preset as the first valid package preset matches the selected configure preset
                if (packagePreset.configurePreset === selectedConfigurePreset && !packagePreset.hidden) {
                    await this.setPackagePreset(packagePreset.name, false /*needToCheckConfigurePreset*/, false /*checkChangingPreset*/);
                    currentPackagePreset = (_b = this.project.packagePreset) === null || _b === void 0 ? void 0 : _b.name;
                }
                if (currentPackagePreset) {
                    break;
                }
            }
        }
        if (!currentPackagePreset) {
            // No valid buid preset matches the selected configure preset
            await this.setPackagePreset(preset.defaultPackagePreset.name, false /*needToCheckConfigurePreset*/, false /*checkChangingPreset*/);
        }
    }
    async guessWorkflowPreset() {
        var _a, _b;
        const selectedConfigurePreset = (_a = this.project.configurePreset) === null || _a === void 0 ? void 0 : _a.name;
        let currentWorkflowPreset;
        if (selectedConfigurePreset) {
            preset.expandConfigurePresetForPresets(this.folderPath, 'workflow');
            const workflowPresets = preset.allWorkflowPresets(this.folderPath);
            for (const workflowPreset of workflowPresets) {
                // Set active workflow preset as the first valid workflow preset (matching the selected configure preset is not a requirement as for the other presets types)
                if (!workflowPreset.hidden) {
                    await this.setWorkflowPreset(workflowPreset.name, false /*needToCheckConfigurePreset*/, false /*checkChangingPreset*/);
                    currentWorkflowPreset = (_b = this.project.workflowPreset) === null || _b === void 0 ? void 0 : _b.name;
                }
                if (currentWorkflowPreset) {
                    break;
                }
            }
        }
        if (!currentWorkflowPreset) {
            // No valid workflow preset matches the selected configure preset
            await this.setWorkflowPreset(preset.defaultWorkflowPreset.name, false /*needToCheckConfigurePreset*/, false /*checkChangingPreset*/);
        }
    }
    async checkConfigurePreset() {
        const selectedConfigurePreset = this.project.configurePreset;
        if (!selectedConfigurePreset) {
            const message_noConfigurePreset = localize(71, null);
            const option_selectConfigurePreset = localize(72, null);
            const option_later = localize(73, null);
            const result = await vscode.window.showErrorMessage(message_noConfigurePreset, option_selectConfigurePreset, option_later);
            if (result === option_selectConfigurePreset && await vscode.commands.executeCommand('cmake.selectConfigurePreset')) {
                return this.project.configurePreset;
            }
        }
        return selectedConfigurePreset;
    }
    async checkBuildPreset() {
        const selectedBuildPreset = this.project.buildPreset;
        if (!selectedBuildPreset) {
            const message_noBuildPreset = localize(74, null);
            const option_selectBuildPreset = localize(75, null);
            const option_later = localize(76, null);
            const result = await vscode.window.showErrorMessage(message_noBuildPreset, option_selectBuildPreset, option_later);
            if (result === option_selectBuildPreset && await vscode.commands.executeCommand('cmake.selectBuildPreset')) {
                return this.project.buildPreset;
            }
        }
        return selectedBuildPreset;
    }
    async selectBuildPreset() {
        var _a;
        // configure preset required
        const selectedConfigurePreset = await this.checkConfigurePreset();
        if (!selectedConfigurePreset) {
            return false;
        }
        preset.expandConfigurePresetForPresets(this.folderPath, 'build');
        await preset.expandConditionsForPresets(this.folderPath, this._sourceDir);
        const allPresets = preset.buildPresets(this.folderPath).concat(preset.userBuildPresets(this.folderPath));
        const presets = allPresets.filter(_preset => this.checkCompatibility(selectedConfigurePreset, _preset).buildPresetCompatible);
        presets.push(preset.defaultBuildPreset);
        log.debug(localize(77, null, presets.length));
        log.debug(localize(78, null));
        const placeHolder = localize(79, null, this.folderName);
        const chosenPreset = await this.selectNonHiddenPreset(presets, allPresets, { placeHolder });
        if (!chosenPreset) {
            log.debug(localize(80, null));
            return false;
        }
        else if (chosenPreset === ((_a = this.project.buildPreset) === null || _a === void 0 ? void 0 : _a.name)) {
            return true;
        }
        else if (chosenPreset === '__addPreset__') {
            await this.addBuildPreset();
            return false;
        }
        else {
            log.debug(localize(81, null, JSON.stringify(chosenPreset)));
            await this.setBuildPreset(chosenPreset, false);
            return true;
        }
    }
    async setBuildPreset(presetName, needToCheckConfigurePreset = true, checkChangingPreset = true) {
        if (checkChangingPreset) {
            if (this._isChangingPresets) {
                return;
            }
            this._isChangingPresets = true;
        }
        if (needToCheckConfigurePreset && presetName !== preset.defaultBuildPreset.name) {
            preset.expandConfigurePresetForPresets(this.folderPath, 'build');
            const _preset = preset.getPresetByName(preset.allBuildPresets(this.folderPath), presetName);
            const compatibility = this.checkCompatibility(this.project.configurePreset, _preset, this.project.testPreset, this.project.packagePreset, this.project.workflowPreset);
            if (!compatibility.buildPresetCompatible) {
                log.warning(localize(82, null, presetName));
                await vscode.window.withProgress({
                    location: vscode.ProgressLocation.Notification,
                    title: localize(83, null)
                }, () => this.project.setBuildPreset(null));
                if (checkChangingPreset) {
                    this._isChangingPresets = false;
                }
                return;
            }
            if (!compatibility.testPresetCompatible) {
                await vscode.window.withProgress({
                    location: vscode.ProgressLocation.Notification,
                    title: localize(84, null)
                }, () => this.project.setTestPreset(null));
                // Not sure we need to do the same for package/workflow build
            }
        }
        // Load the build preset into the backend
        await vscode.window.withProgress({
            location: vscode.ProgressLocation.Notification,
            title: localize(85, null, presetName)
        }, () => this.project.setBuildPreset(presetName));
        if (checkChangingPreset) {
            this._isChangingPresets = false;
        }
    }
    checkCompatibility(configurePreset, buildPreset, testPreset, packagePreset, workflowPreset) {
        var _a, _b, _c, _d;
        let testPresetCompatible = true;
        let buildPresetCompatible = true;
        let packagePresetCompatible = true;
        let workflowPresetCompatible = true;
        // We only check compatibility when we are setting the build, test, package or workflow preset.
        // Except for workflow presets, we need to exclude the hidden presets.
        if (testPreset) {
            if (testPreset.hidden) {
                testPresetCompatible = false;
            }
            else {
                const configMatches = testPreset.configurePreset === (configurePreset === null || configurePreset === void 0 ? void 0 : configurePreset.name);
                let buildTypeMatches = (buildPreset === null || buildPreset === void 0 ? void 0 : buildPreset.configuration) === testPreset.configuration;
                if (!buildTypeMatches) {
                    if (util.isMultiConfGeneratorFast(configurePreset === null || configurePreset === void 0 ? void 0 : configurePreset.generator)) {
                        const buildType = (buildPreset === null || buildPreset === void 0 ? void 0 : buildPreset.configuration) || ((_c = (_b = (_a = configurePreset === null || configurePreset === void 0 ? void 0 : configurePreset.cacheVariables) === null || _a === void 0 ? void 0 : _a['CMAKE_CONFIGURATION_TYPES']) === null || _b === void 0 ? void 0 : _b.toString().split(';')) === null || _c === void 0 ? void 0 : _c[0]) || 'Debug';
                        buildTypeMatches = testPreset.configuration === buildType || testPreset.configuration === undefined;
                    }
                    else {
                        const buildType = ((_d = configurePreset === null || configurePreset === void 0 ? void 0 : configurePreset.cacheVariables) === null || _d === void 0 ? void 0 : _d['CMAKE_BUILD_TYPE']) || 'Debug';
                        buildTypeMatches = buildPreset === undefined || testPreset.configuration === buildType || testPreset.configuration === undefined;
                    }
                }
                testPresetCompatible = configMatches && buildTypeMatches;
            }
        }
        if (buildPreset) {
            buildPresetCompatible = ((configurePreset === null || configurePreset === void 0 ? void 0 : configurePreset.name) === buildPreset.configurePreset) && !buildPreset.hidden;
        }
        if (packagePreset) {
            packagePresetCompatible = ((configurePreset === null || configurePreset === void 0 ? void 0 : configurePreset.name) === packagePreset.configurePreset) && !packagePreset.hidden;
            // we might need build type matches here as well as test preset checks, also in other places where I ommitted because I thought is not needed
        }
        // For a workflow preset, the step0 configure may be different than the current configure of the project,
        // but all the workflow steps that follow should have the same configure preset as the one mentioned in step0.
        if (workflowPreset) {
            const temp = workflowPreset.steps.find(st => {
                var _a, _b, _c, _d;
                let stepConfigurePreset;
                switch (st.type) {
                    case "configure":
                        stepConfigurePreset = (_a = preset.getPresetByName(preset.allConfigurePresets(this.folderPath), st.name)) === null || _a === void 0 ? void 0 : _a.name;
                        break;
                    case "build":
                        stepConfigurePreset = (_b = preset.getPresetByName(preset.allBuildPresets(this.folderPath), st.name)) === null || _b === void 0 ? void 0 : _b.configurePreset;
                        break;
                    case "test":
                        stepConfigurePreset = (_c = preset.getPresetByName(preset.allTestPresets(this.folderPath), st.name)) === null || _c === void 0 ? void 0 : _c.configurePreset;
                        break;
                    case "package":
                        stepConfigurePreset = (_d = preset.getPresetByName(preset.allPackagePresets(this.folderPath), st.name)) === null || _d === void 0 ? void 0 : _d.configurePreset;
                        break;
                }
                if (stepConfigurePreset !== workflowPreset.steps[0].name) {
                    return true;
                }
            });
            workflowPresetCompatible = (temp === undefined);
        }
        return { buildPresetCompatible, testPresetCompatible, packagePresetCompatible, workflowPresetCompatible };
    }
    async selectTestPreset() {
        var _a;
        // configure preset required
        const selectedConfigurePreset = await this.checkConfigurePreset();
        if (!selectedConfigurePreset) {
            return false;
        }
        const selectedBuildPreset = await this.checkBuildPreset();
        if (!selectedBuildPreset) {
            return false;
        }
        preset.expandConfigurePresetForPresets(this.folderPath, 'test');
        await preset.expandConditionsForPresets(this.folderPath, this._sourceDir);
        const allPresets = preset.testPresets(this.folderPath).concat(preset.userTestPresets(this.folderPath));
        const presets = allPresets.filter(_preset => this.checkCompatibility(selectedConfigurePreset, selectedBuildPreset, _preset).testPresetCompatible);
        presets.push(preset.defaultTestPreset);
        log.debug(localize(86, null, presets.length));
        const placeHolder = localize(87, null, this.folderName);
        const chosenPreset = await this.selectNonHiddenPreset(presets, allPresets, { placeHolder });
        if (!chosenPreset) {
            log.debug(localize(88, null));
            return false;
        }
        else if (chosenPreset === ((_a = this.project.testPreset) === null || _a === void 0 ? void 0 : _a.name)) {
            return true;
        }
        else if (chosenPreset === '__addPreset__') {
            await this.addTestPreset();
            return false;
        }
        else {
            log.debug(localize(89, null, JSON.stringify(chosenPreset)));
            await this.setTestPreset(chosenPreset, false);
            await vscode.commands.executeCommand('cmake.refreshTests', this.workspaceFolder);
            return true;
        }
    }
    async setTestPreset(presetName, needToCheckConfigurePreset = true, checkChangingPreset = true) {
        if (presetName) {
            if (checkChangingPreset) {
                if (this._isChangingPresets) {
                    return;
                }
                this._isChangingPresets = true;
            }
            if (needToCheckConfigurePreset && presetName !== preset.defaultTestPreset.name) {
                preset.expandConfigurePresetForPresets(this.folderPath, 'test');
                const _preset = preset.getPresetByName(preset.allTestPresets(this.folderPath), presetName);
                const compatibility = this.checkCompatibility(this.project.configurePreset, this.project.buildPreset, _preset);
                if (!compatibility.testPresetCompatible) {
                    log.warning(localize(90, null, `'${presetName}'`));
                    await vscode.window.withProgress({
                        location: vscode.ProgressLocation.Notification,
                        title: localize(91, null)
                    }, () => this.project.setTestPreset(null));
                    if (checkChangingPreset) {
                        this._isChangingPresets = false;
                    }
                    return;
                }
            }
            // Load the test preset into the backend
            await vscode.window.withProgress({
                location: vscode.ProgressLocation.Notification,
                title: localize(92, null, presetName)
            }, () => this.project.setTestPreset(presetName));
            if (checkChangingPreset) {
                this._isChangingPresets = false;
            }
        }
        else {
            await vscode.window.withProgress({
                location: vscode.ProgressLocation.Notification,
                title: localize(93, null)
            }, () => this.project.setTestPreset(null));
        }
    }
    //----
    async selectPackagePreset() {
        var _a;
        // configure preset required
        const selectedConfigurePreset = await this.checkConfigurePreset();
        if (!selectedConfigurePreset) {
            return false;
        }
        // Do we need this check for package preset?
        const selectedBuildPreset = await this.checkBuildPreset();
        if (!selectedBuildPreset) {
            return false;
        }
        preset.expandConfigurePresetForPresets(this.folderPath, 'package');
        await preset.expandConditionsForPresets(this.folderPath, this._sourceDir);
        const allPresets = preset.packagePresets(this.folderPath).concat(preset.userPackagePresets(this.folderPath));
        const presets = allPresets.filter(_preset => this.checkCompatibility(selectedConfigurePreset, selectedBuildPreset, this.project.testPreset, _preset).packagePresetCompatible);
        presets.push(preset.defaultPackagePreset);
        log.debug(localize(94, null, presets.length));
        const placeHolder = localize(95, null, this.folderName);
        const chosenPreset = await this.selectNonHiddenPreset(presets, allPresets, { placeHolder });
        if (!chosenPreset) {
            log.debug(localize(96, null));
            return false;
        }
        else if (chosenPreset === ((_a = this.project.packagePreset) === null || _a === void 0 ? void 0 : _a.name)) {
            return true;
        }
        else if (chosenPreset === '__addPreset__') {
            await this.addPackagePreset();
            return false;
        }
        else {
            log.debug(localize(97, null, JSON.stringify(chosenPreset)));
            await this.setPackagePreset(chosenPreset, false);
            return true;
        }
    }
    async setPackagePreset(presetName, needToCheckConfigurePreset = true, checkChangingPreset = true) {
        if (presetName) {
            if (checkChangingPreset) {
                if (this._isChangingPresets) {
                    return;
                }
                this._isChangingPresets = true;
            }
            if (needToCheckConfigurePreset && presetName !== preset.defaultPackagePreset.name) {
                preset.expandConfigurePresetForPresets(this.folderPath, 'package');
                const _preset = preset.getPresetByName(preset.allPackagePresets(this.folderPath), presetName);
                const compatibility = this.checkCompatibility(this.project.configurePreset, this.project.buildPreset, this.project.testPreset, _preset);
                if (!compatibility.packagePresetCompatible) {
                    log.warning(localize(98, null, `'${presetName}'`));
                    await vscode.window.withProgress({
                        location: vscode.ProgressLocation.Notification,
                        title: localize(99, null)
                    }, () => this.project.setPackagePreset(null));
                    if (checkChangingPreset) {
                        this._isChangingPresets = false;
                    }
                    return;
                }
            }
            // Load the package preset into the backend
            await vscode.window.withProgress({
                location: vscode.ProgressLocation.Notification,
                title: localize(100, null, presetName)
            }, () => this.project.setPackagePreset(presetName));
            if (checkChangingPreset) {
                this._isChangingPresets = false;
            }
        }
        else {
            await vscode.window.withProgress({
                location: vscode.ProgressLocation.Notification,
                title: localize(101, null)
            }, () => this.project.setPackagePreset(null));
        }
    }
    async selectWorkflowPreset() {
        // No configure nor build preset compatibility requirement.
        // The only consistency workflows need are the steps to be associated with the same configure preset,
        // which to be the same as in step0. This is verified by CMakePresets.json validation in validatePresetsFile.
        var _a;
        preset.expandConfigurePresetForPresets(this.folderPath, 'workflow');
        await preset.expandConditionsForPresets(this.folderPath, this._sourceDir);
        const allPresets = preset.workflowPresets(this.folderPath).concat(preset.userWorkflowPresets(this.folderPath));
        allPresets.push(preset.defaultWorkflowPreset);
        log.debug(localize(102, null, allPresets.length));
        const placeHolder = localize(103, null, this.folderName);
        const chosenPreset = await this.selectNonHiddenPreset(allPresets, allPresets, { placeHolder });
        if (!chosenPreset) {
            log.debug(localize(104, null));
            return false;
        }
        else if (chosenPreset === ((_a = this.project.workflowPreset) === null || _a === void 0 ? void 0 : _a.name)) {
            return true;
        }
        else if (chosenPreset === '__addPreset__') {
            await this.addWorkflowPreset();
            return false;
        }
        else {
            log.debug(localize(105, null, JSON.stringify(chosenPreset)));
            await this.setWorkflowPreset(chosenPreset, false);
            return true;
        }
    }
    async setWorkflowPreset(presetName, needToCheckConfigurePreset = true, checkChangingPreset = true) {
        if (presetName) {
            if (checkChangingPreset) {
                if (this._isChangingPresets) {
                    return;
                }
                this._isChangingPresets = true;
            }
            if (needToCheckConfigurePreset && presetName !== preset.defaultWorkflowPreset.name) {
                preset.expandConfigurePresetForPresets(this.folderPath, 'workflow');
                const _preset = preset.getPresetByName(preset.allWorkflowPresets(this.folderPath), presetName);
                const compatibility = this.checkCompatibility(this.project.configurePreset, this.project.buildPreset, this.project.testPreset, this.project.packagePreset, _preset);
                if (!compatibility.workflowPresetCompatible) {
                    log.warning(localize(106, null, `'${presetName}'`));
                    await vscode.window.withProgress({
                        location: vscode.ProgressLocation.Notification,
                        title: localize(107, null)
                    }, () => this.project.setWorkflowPreset(null));
                    if (checkChangingPreset) {
                        this._isChangingPresets = false;
                    }
                    return;
                }
            }
            // Load the workflow preset into the backend
            await vscode.window.withProgress({
                location: vscode.ProgressLocation.Notification,
                title: localize(108, null, presetName)
            }, () => this.project.setWorkflowPreset(presetName));
            if (checkChangingPreset) {
                this._isChangingPresets = false;
            }
        }
        else {
            await vscode.window.withProgress({
                location: vscode.ProgressLocation.Notification,
                title: localize(109, null)
            }, () => this.project.setWorkflowPreset(null));
        }
    }
    //-----
    async openCMakePresets() {
        if (!await pr_1.fs.exists(this.presetsPath)) {
            return this.updatePresetsFile({ version: 2 });
        }
        else {
            return vscode.window.showTextDocument(vscode.Uri.file(this.presetsPath));
        }
    }
    async openCMakeUserPresets() {
        if (!await pr_1.fs.exists(this.userPresetsPath)) {
            return this.updatePresetsFile({ version: 2 }, true);
        }
        else {
            return vscode.window.showTextDocument(vscode.Uri.file(this.userPresetsPath));
        }
    }
    async readPresetsFile(file) {
        if (!await pr_1.fs.exists(file)) {
            return undefined;
        }
        log.debug(localize(110, null, file));
        return pr_1.fs.readFile(file);
    }
    async parsePresetsFile(fileContent, file) {
        if (!fileContent) {
            return undefined;
        }
        let presetsFile;
        try {
            if (this.project.workspaceContext.config.allowCommentsInPresetsFile) {
                presetsFile = json5.parse(fileContent.toLocaleString());
            }
            else {
                presetsFile = JSON.parse(fileContent.toLocaleString());
            }
        }
        catch (e) {
            log.error(localize(111, null, path.basename(file), util.errorToString(e)));
            return undefined;
        }
        return presetsFile;
    }
    populatePrivatePresetsFields(presetsFile, file) {
        if (!presetsFile) {
            return;
        }
        presetsFile.__path = file;
        const setFile = (presets) => {
            if (presets) {
                for (const preset of presets) {
                    preset.__file = presetsFile;
                }
            }
        };
        setFile(presetsFile.configurePresets);
        setFile(presetsFile.buildPresets);
        setFile(presetsFile.testPresets);
        setFile(presetsFile.workflowPresets);
        setFile(presetsFile.packagePresets);
    }
    async mergeIncludeFiles(rootPresetsFile, presetsFile, file, referencedFiles) {
        if (!rootPresetsFile || !presetsFile || !presetsFile.include) {
            return;
        }
        // Merge the includes in reverse order so that the final presets order is correct
        for (let i = presetsFile.include.length - 1; i >= 0; i--) {
            const rawInclude = presetsFile.include[i];
            const includePath = presetsFile.version >= 7 ?
                // Version 7 and later support $penv{} expansions in include paths
                (0, expand_1.substituteAll)(rawInclude, (0, expand_1.getParentEnvSubstitutions)(rawInclude, new Map())).result :
                rawInclude;
            const fullIncludePath = path.normalize(path.resolve(path.dirname(file), includePath));
            // Do not include files more than once
            if (referencedFiles.has(fullIncludePath)) {
                continue;
            }
            // Record the file as referenced, even if the file does not exist.
            referencedFiles.add(fullIncludePath);
            const includeFileBuffer = await this.readPresetsFile(fullIncludePath);
            if (!includeFileBuffer) {
                log.error(localize(112, null, fullIncludePath));
                continue;
            }
            let includeFile = await this.parsePresetsFile(includeFileBuffer, fullIncludePath);
            includeFile = await this.validatePresetsFile(includeFile, fullIncludePath);
            if (!includeFile) {
                continue;
            }
            // Private fields must be set after validation, otherwise validation would fail.
            this.populatePrivatePresetsFields(includeFile, fullIncludePath);
            if (includeFile.cmakeMinimumRequired) {
                if (!rootPresetsFile.cmakeMinimumRequired || util.versionLess(rootPresetsFile.cmakeMinimumRequired, includeFile.cmakeMinimumRequired)) {
                    rootPresetsFile.cmakeMinimumRequired = includeFile.cmakeMinimumRequired;
                }
            }
            if (includeFile.configurePresets) {
                rootPresetsFile.configurePresets = includeFile.configurePresets.concat(rootPresetsFile.configurePresets || []);
            }
            if (includeFile.buildPresets) {
                rootPresetsFile.buildPresets = includeFile.buildPresets.concat(rootPresetsFile.buildPresets || []);
            }
            if (includeFile.testPresets) {
                rootPresetsFile.testPresets = includeFile.testPresets.concat(rootPresetsFile.testPresets || []);
            }
            if (includeFile.packagePresets) {
                rootPresetsFile.packagePresets = includeFile.packagePresets.concat(rootPresetsFile.packagePresets || []);
            }
            if (includeFile.workflowPresets) {
                rootPresetsFile.workflowPresets = includeFile.workflowPresets.concat(rootPresetsFile.workflowPresets || []);
            }
            // Recursively merge included files
            await this.mergeIncludeFiles(rootPresetsFile, includeFile, fullIncludePath, referencedFiles);
        }
    }
    async validatePresetsFile(presetsFile, file) {
        var _a, _b, _c, _d, _e, _f;
        if (!presetsFile) {
            return undefined;
        }
        log.info(localize(113, null, file));
        let schemaFile;
        const maxSupportedVersion = 6;
        const validationErrorsAreWarnings = presetsFile.version > maxSupportedVersion && this.project.workspaceContext.config.allowUnsupportedPresetsVersions;
        if (presetsFile.version < 2) {
            await this.showPresetsFileVersionError(file);
            return undefined;
        }
        else if (presetsFile.version === 2) {
            schemaFile = './schemas/CMakePresets-schema.json';
        }
        else if (presetsFile.version === 3) {
            schemaFile = './schemas/CMakePresets-v3-schema.json';
        }
        else if (presetsFile.version === 4) {
            schemaFile = './schemas/CMakePresets-v4-schema.json';
        }
        else if (presetsFile.version === 5) {
            schemaFile = './schemas/CMakePresets-v5-schema.json';
        }
        else {
            schemaFile = './schemas/CMakePresets-v6-schema.json';
        }
        const validator = await (0, schema_1.loadSchema)(schemaFile);
        const is_valid = validator(presetsFile);
        if (!is_valid) {
            const showErrors = (logFunc) => {
                const errors = validator.errors;
                logFunc(localize(114, null, file, maxSupportedVersion));
                for (const err of errors) {
                    if (err.params && 'additionalProperty' in err.params) {
                        logFunc(` >> ${err.dataPath}: ${err.message}: ${err.params.additionalProperty}`);
                    }
                    else {
                        logFunc(` >> ${err.dataPath}: ${err.message}`);
                    }
                }
            };
            if (validationErrorsAreWarnings) {
                showErrors(x => log.warning(x));
                return presetsFile;
            }
            else {
                showErrors(x => log.error(x));
                log.error(localize(115, null, "'cmake.allowUnsupportedPresetsVersions'"));
                return undefined;
            }
        }
        for (const pr of (presetsFile === null || presetsFile === void 0 ? void 0 : presetsFile.buildPresets) || []) {
            const dupe = (_a = presetsFile === null || presetsFile === void 0 ? void 0 : presetsFile.buildPresets) === null || _a === void 0 ? void 0 : _a.find(p => (pr.name === p.name && p !== pr));
            if (dupe) {
                log.error(localize(116, null, pr.name));
                return undefined;
            }
        }
        for (const pr of (presetsFile === null || presetsFile === void 0 ? void 0 : presetsFile.testPresets) || []) {
            const dupe = (_b = presetsFile === null || presetsFile === void 0 ? void 0 : presetsFile.testPresets) === null || _b === void 0 ? void 0 : _b.find(p => (pr.name === p.name && p !== pr));
            if (dupe) {
                log.error(localize(117, null, pr.name));
                return undefined;
            }
        }
        for (const pr of (presetsFile === null || presetsFile === void 0 ? void 0 : presetsFile.packagePresets) || []) {
            const dupe = (_c = presetsFile === null || presetsFile === void 0 ? void 0 : presetsFile.packagePresets) === null || _c === void 0 ? void 0 : _c.find(p => (pr.name === p.name && p !== pr));
            if (dupe) {
                log.error(localize(118, null, pr.name));
                return undefined;
            }
        }
        for (const pr of (presetsFile === null || presetsFile === void 0 ? void 0 : presetsFile.workflowPresets) || []) {
            const dupe = (_d = presetsFile === null || presetsFile === void 0 ? void 0 : presetsFile.workflowPresets) === null || _d === void 0 ? void 0 : _d.find(p => (pr.name === p.name && p !== pr));
            if (dupe) {
                log.error(localize(119, null, pr.name));
                return undefined;
            }
        }
        let allBuildTestPackagePresets = presetsFile.buildPresets || [];
        allBuildTestPackagePresets = allBuildTestPackagePresets.concat(presetsFile.testPresets || []);
        allBuildTestPackagePresets = allBuildTestPackagePresets.concat(presetsFile.packagePresets || []);
        for (const pr of allBuildTestPackagePresets) {
            const cfgPr = (_e = presetsFile.configurePresets) === null || _e === void 0 ? void 0 : _e.find(prs => (prs.name === pr.configurePreset));
            if (pr.configurePreset && !cfgPr) {
                log.error(localize(120, null, pr.configurePreset, pr.name));
                return undefined;
            }
        }
        for (const pr of presetsFile.workflowPresets || []) {
            if (pr.steps.length < 1 || pr.steps[0].type !== "configure") {
                log.error(localize(121, null, pr.name));
                return undefined;
            }
            const cfgPr = (_f = presetsFile.configurePresets) === null || _f === void 0 ? void 0 : _f.find(prs => (prs.name === pr.steps[0].name));
            if (!cfgPr) {
                log.error(localize(122, null, pr.steps[0].name, pr.name));
                return undefined;
            }
            for (const step of pr.steps) {
                let searchInPresets;
                switch (step.type) {
                    case "configure":
                        searchInPresets = presetsFile.configurePresets;
                        break;
                    case "build":
                        searchInPresets = presetsFile.buildPresets;
                        break;
                    case "test":
                        searchInPresets = presetsFile.testPresets;
                        break;
                    case "package":
                        searchInPresets = presetsFile.packagePresets;
                        break;
                }
                const refPr = searchInPresets === null || searchInPresets === void 0 ? void 0 : searchInPresets.find(prs => (prs.name === step.name));
                if (!refPr) {
                    log.error(localize(123, null, step.type, step.name, pr.name));
                    return undefined;
                }
                if (step.type === "configure" && step !== pr.steps[0]) {
                    log.error(localize(124, null, pr.name, step.name, pr.steps[0].name));
                    return undefined;
                }
            }
        }
        log.info(localize(125, null, file));
        return presetsFile;
    }
    async showPresetsFileVersionError(file) {
        const useKitsVars = localize(126, null);
        const changePresets = localize(127, null);
        const result = await vscode.window.showErrorMessage(localize(128, null), useKitsVars, changePresets);
        if (result === useKitsVars) {
            void vscode.workspace.getConfiguration('cmake', this.workspaceFolder.uri).update('useCMakePresets', 'never');
        }
        else {
            await vscode.workspace.openTextDocument(vscode.Uri.file(file));
        }
    }
    // Note: in case anyone want to change this, presetType must match the corresponding key in presets.json files
    async addPresetAddUpdate(newPreset, presetType) {
        const originalPresetsFile = preset.getOriginalPresetsFile(this.folderPath) || { version: 2 };
        if (!originalPresetsFile[presetType]) {
            originalPresetsFile[presetType] = [];
        }
        switch (presetType) {
            case "configurePresets":
            case "buildPresets":
            case "testPresets":
            case "packagePresets":
                originalPresetsFile[presetType].push(newPreset);
                break;
            case "workflowPresets":
                originalPresetsFile[presetType].push(newPreset);
                break;
        }
        await this.updatePresetsFile(originalPresetsFile);
    }
    getIndentationSettings() {
        const config = vscode.workspace.getConfiguration('editor', this.workspaceFolder.uri);
        let tabSize = config.get('tabSize');
        tabSize = (tabSize === undefined) ? 4 : tabSize;
        let insertSpaces = config.get('insertSpaces');
        insertSpaces = (insertSpaces === undefined) ? true : insertSpaces;
        return { insertSpaces, tabSize };
    }
    async updatePresetsFile(presetsFile, isUserPresets = false) {
        const presetsFilePath = isUserPresets ? this.userPresetsPath : this.presetsPath;
        const indent = this.getIndentationSettings();
        try {
            await pr_1.fs.writeFile(presetsFilePath, JSON.stringify(presetsFile, null, indent.insertSpaces ? indent.tabSize : '\t'));
        }
        catch (e) {
            rollbar_1.default.exception(localize(129, null, presetsFilePath), e);
            return;
        }
        return vscode.window.showTextDocument(vscode.Uri.file(presetsFilePath));
    }
    async watchPresetsChange() {
        if (this._presetsWatcher) {
            this._presetsWatcher.close().then(() => { }, () => { });
        }
        const handler = () => {
            void this.reapplyPresets();
        };
        this._presetsWatcher = chokidar.watch(this._referencedFiles, { ignoreInitial: true })
            .on('add', handler)
            .on('change', handler)
            .on('unlink', handler);
    }
    ;
    dispose() {
        if (this._presetsWatcher) {
            this._presetsWatcher.close().then(() => { }, () => { });
        }
        if (this._sourceDirChangedSub) {
            this._sourceDirChangedSub.dispose();
        }
    }
}
exports.PresetsController = PresetsController;
PresetsController._addPreset = '__addPreset__';


/***/ }),

/***/ 3477:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* eslint-disable no-unused-expressions */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.execute = exports.buildCmdStr = void 0;
/**
 * Wrappers and utilities around the NodeJS `child_process` module.
 */
const proc = __webpack_require__(32081);
const iconv = __webpack_require__(75170);
const logging_1 = __webpack_require__(71067);
const rollbar_1 = __webpack_require__(58543);
const util = __webpack_require__(16182);
const nls = __webpack_require__(33463);
const environmentVariables_1 = __webpack_require__(40085);
nls.config({ messageFormat: nls.MessageFormat.bundle, bundleFormat: nls.BundleFormat.standalone })((__webpack_require__(71017).join)(__dirname, 'src\\proc.ts'));
const localize = nls.loadMessageBundle((__webpack_require__(71017).join)(__dirname, 'src\\proc.ts'));
const log = (0, logging_1.createLogger)('proc');
function buildCmdStr(command, args) {
    let cmdarr = [command];
    if (args) {
        cmdarr = cmdarr.concat(args);
    }
    return cmdarr.map(a => /[ \n\r\f;\t]/.test(a) ? `"${a}"` : a).join(' ');
}
exports.buildCmdStr = buildCmdStr;
/**
 * Execute a command and return the result
 * @param command The binary to execute
 * @param args The arguments to pass to the binary
 * @param outputConsumer An output consumer for the command execution
 * @param options Additional execution options
 *
 * @note Output from the command is accumulated into a single buffer: Commands
 * which produce a lot of output should be careful about memory constraints.
 */
function execute(command, args, outputConsumer, options) {
    var _a;
    if (!options) {
        options = {};
    }
    const localeOverride = environmentVariables_1.EnvironmentUtils.create({
        LANG: "C",
        LC_ALL: "C"
    });
    const final_env = environmentVariables_1.EnvironmentUtils.merge([
        process.env,
        options.environment,
        options.overrideLocale ? localeOverride : {}
    ]);
    const cmdstr = buildCmdStr(command, args);
    if (options && options.silent !== true) {
        log.info(// We do simple quoting of arguments with spaces.
        // This is only shown to the user,
        // and doesn't have to be 100% correct.
        localize(0, null, cmdstr));
        if (options.environment) {
            log.debug(localize(1, null, JSON.stringify(final_env)));
        }
    }
    const spawn_opts = {
        env: final_env,
        shell: !!options.shell
    };
    if ((options === null || options === void 0 ? void 0 : options.cwd) !== undefined) {
        util.createDirIfNotExistsSync(options.cwd);
        spawn_opts.cwd = options.cwd;
    }
    if (options === null || options === void 0 ? void 0 : options.timeout) {
        spawn_opts.timeout = options.timeout;
    }
    let child;
    // Since we won't be sending anything to this process, close its stdin.
    spawn_opts.stdio = ['ignore', 'pipe', 'pipe'];
    try {
        child = proc.spawn(command, args !== null && args !== void 0 ? args : [], spawn_opts);
    }
    catch (_b) {
        child = undefined;
    }
    if (!child) {
        return {
            child: undefined,
            result: Promise.resolve({
                retc: -1,
                stdout: "",
                stderr: ""
            })
        };
    }
    if (options.encoding) {
        (_a = child.stdout) === null || _a === void 0 ? void 0 : _a.setEncoding(options.encoding);
    }
    const encoding = options.outputEncoding && iconv.encodingExists(options.outputEncoding) ? options.outputEncoding : 'utf8';
    const accumulate = (str1, str2) => {
        try {
            return str1 + str2;
        }
        catch (_a) {
            // If the resulting string is longer than can be represented by `string.length`, an exception will be thrown.
            // Don't accumulate any more content at this point.
            return str1;
        }
    };
    const result = new Promise(resolve => {
        var _a, _b;
        let stdout_acc = '';
        let line_acc = '';
        let stderr_acc = '';
        let stderr_line_acc = '';
        child === null || child === void 0 ? void 0 : child.on('error', err => {
            log.warning(localize(2, null, `${cmdstr}`, `${err}`));
        });
        child === null || child === void 0 ? void 0 : child.on('exit', (code, signal) => {
            if (code !== 0) {
                if (signal !== null && signal !== undefined) {
                    log.warning(localize(3, null, `${cmdstr}`, `${code}`, `${signal}`));
                }
                else {
                    log.warning(localize(4, null, `${cmdstr}`, `${code}`));
                }
            }
        });
        (_a = child === null || child === void 0 ? void 0 : child.stdout) === null || _a === void 0 ? void 0 : _a.on('data', (data) => {
            rollbar_1.default.invoke(localize(5, null, "\"data\""), { data, command, args }, () => {
                const str = iconv.decode(Buffer.from(data), encoding);
                const lines = str.split('\n').map(l => l.endsWith('\r') ? l.substr(0, l.length - 1) : l);
                while (lines.length > 1) {
                    line_acc = accumulate(line_acc, lines[0]);
                    if (outputConsumer) {
                        outputConsumer.output(line_acc);
                    }
                    else if (util.isTestMode()) {
                        log.info(line_acc);
                    }
                    line_acc = '';
                    // Erase the first line from the list
                    lines.splice(0, 1);
                }
                console.assert(lines.length, 'Invalid lines', JSON.stringify(lines));
                line_acc = accumulate(line_acc, lines[0]);
                stdout_acc = accumulate(stdout_acc, str);
            });
        });
        (_b = child === null || child === void 0 ? void 0 : child.stderr) === null || _b === void 0 ? void 0 : _b.on('data', (data) => {
            rollbar_1.default.invoke(localize(6, null, "\"data\""), { data, command, args }, () => {
                const str = iconv.decode(Buffer.from(data), encoding);
                const lines = str.split('\n').map(l => l.endsWith('\r') ? l.substr(0, l.length - 1) : l);
                while (lines.length > 1) {
                    stderr_line_acc = accumulate(stderr_line_acc, lines[0]);
                    if (outputConsumer) {
                        outputConsumer.error(stderr_line_acc);
                    }
                    else if (util.isTestMode() && stderr_line_acc) {
                        log.info(stderr_line_acc);
                    }
                    stderr_line_acc = '';
                    // Erase the first line from the list
                    lines.splice(0, 1);
                }
                console.assert(lines.length, 'Invalid lines', JSON.stringify(lines));
                stderr_line_acc = accumulate(stderr_line_acc, lines[0]);
                stderr_acc = accumulate(stderr_acc, str);
            });
        });
        // The 'close' event is emitted after a process has ended and the stdio streams of a child process have been closed.
        // This is distinct from the 'exit' event, since multiple processes might share the same stdio streams.
        // The 'close' event will always emit after 'exit' was already emitted, or 'error' if the child failed to spawn.
        child === null || child === void 0 ? void 0 : child.on('close', retc => {
            try {
                rollbar_1.default.invoke(localize(7, null, "\"close\""), { line_acc, stderr_line_acc, command, retc }, () => {
                    if (line_acc && outputConsumer) {
                        outputConsumer.output(line_acc);
                    }
                    if (stderr_line_acc && outputConsumer) {
                        outputConsumer.error(stderr_line_acc);
                    }
                    resolve({ retc, stdout: stdout_acc, stderr: stderr_acc });
                });
            }
            catch (e) {
                resolve({ retc, stdout: stdout_acc, stderr: stderr_acc });
            }
        });
    });
    return { child, result };
}
exports.execute = execute;


/***/ }),

/***/ 99854:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ProjectController = void 0;
/**
 * Class for managing CMake projects
 */
const vscode = __webpack_require__(89496);
const nls = __webpack_require__(33463);
const util = __webpack_require__(16182);
const logging = __webpack_require__(71067);
const cmakeProject_1 = __webpack_require__(37874);
const rollbar_1 = __webpack_require__(58543);
const util_1 = __webpack_require__(16182);
const drivers_1 = __webpack_require__(70271);
const workspace_1 = __webpack_require__(67810);
const state_1 = __webpack_require__(57053);
const extension_1 = __webpack_require__(12406);
const telemetry = __webpack_require__(21818);
const prop_1 = __webpack_require__(88822);
const extension_2 = __webpack_require__(12406);
const ext = __webpack_require__(12406);
nls.config({ messageFormat: nls.MessageFormat.bundle, bundleFormat: nls.BundleFormat.standalone })((__webpack_require__(71017).join)(__dirname, 'src\\projectController.ts'));
const localize = nls.loadMessageBundle((__webpack_require__(71017).join)(__dirname, 'src\\projectController.ts'));
const log = logging.createLogger('workspace');
class ProjectController {
    constructor(extensionContext, projectStatus) {
        this.extensionContext = extensionContext;
        this.projectStatus = projectStatus;
        this.folderToProjectsMap = new Map();
        this.sourceDirectorySub = new Map();
        this.buildDirectorySub = new Map();
        this.installPrefixSub = new Map();
        this.useCMakePresetsSub = new Map();
        this.hideDebugButtonSub = new Map();
        this.beforeAddFolderEmitter = new vscode.EventEmitter();
        this.afterAddFolderEmitter = new vscode.EventEmitter();
        this.beforeRemoveFolderEmitter = new vscode.EventEmitter();
        this.afterRemoveFolderEmitter = new vscode.EventEmitter();
        this.subscriptions = [
            this.beforeAddFolderEmitter,
            this.afterAddFolderEmitter,
            this.beforeRemoveFolderEmitter,
            this.afterRemoveFolderEmitter
        ];
        // Subscription on active project
        this.targetNameSub = new util_1.DummyDisposable();
        this.variantNameSub = new util_1.DummyDisposable();
        this.launchTargetSub = new util_1.DummyDisposable();
        this.ctestEnabledSub = new util_1.DummyDisposable();
        this.activeConfigurePresetSub = new util_1.DummyDisposable();
        this.activeBuildPresetSub = new util_1.DummyDisposable();
        this.activeTestPresetSub = new util_1.DummyDisposable();
        this.activePackagePresetSub = new util_1.DummyDisposable();
        this.activeWorkflowPresetSub = new util_1.DummyDisposable();
        this.isBusySub = new util_1.DummyDisposable();
        this.projectSubscriptions = [
            this.targetNameSub,
            this.variantNameSub,
            this.launchTargetSub,
            this.ctestEnabledSub,
            this.activeConfigurePresetSub,
            this.activeBuildPresetSub,
            this.activeTestPresetSub,
            this.activePackagePresetSub,
            this.activeWorkflowPresetSub,
            this.isBusySub
        ];
        this.subscriptions = [
            vscode.workspace.onDidChangeWorkspaceFolders(e => rollbar_1.default.invokeAsync(localize(0, null), () => this.doWorkspaceFolderChange(e))),
            vscode.workspace.onDidOpenTextDocument((textDocument) => this.doOpenTextDocument(textDocument)),
            vscode.workspace.onDidSaveTextDocument((textDocument) => this.doSaveTextDocument(textDocument)),
            vscode.workspace.onDidRenameFiles(this.onDidRenameFiles, this)
        ];
    }
    get onBeforeAddFolder() {
        return this.beforeAddFolderEmitter.event;
    }
    get onAfterAddFolder() {
        return this.afterAddFolderEmitter.event;
    }
    get onBeforeRemoveFolder() {
        return this.beforeRemoveFolderEmitter.event;
    }
    get onAfterRemoveFolder() {
        return this.afterRemoveFolderEmitter.event;
    }
    /**
     * The path of the folder of the active CMakeProject instance
     */
    get activeFolderPath() {
        var _a;
        return (_a = this.activeProject) === null || _a === void 0 ? void 0 : _a.folderPath;
    }
    /**
     * The name of the folder of the active CMakeProject instance
     */
    get activeFolderName() {
        var _a;
        return (_a = this.activeProject) === null || _a === void 0 ? void 0 : _a.folderName;
    }
    async updateActiveProject(workspaceFolder, openEditor, options) {
        const projects = this.getProjectsForWorkspaceFolder(workspaceFolder);
        if (projects && projects.length > 0) {
            if (openEditor) {
                for (const project of projects) {
                    if (util.isFileInsideFolder(openEditor.document.uri, project.folderPath)) {
                        await this.setActiveProject(project, options);
                        break;
                    }
                }
                if (!this.activeProject) {
                    if (util.isFileInsideFolder(openEditor.document.uri, projects[0].workspaceFolder.uri.fsPath)) {
                        await this.setActiveProject(projects[0], options);
                    }
                }
                // If active project is found, return.
                if (this.activeProject) {
                    return;
                }
            }
            else {
                // Set a default active project.
                await this.setActiveProject(projects[0], options);
                return;
            }
        }
        await this.setActiveProject(undefined);
    }
    async setActiveProject(project, options) {
        this.activeProject = project;
        void this.updateUsePresetsState(this.activeProject);
        await this.projectStatus.updateActiveProject(project, options);
        await this.setupProjectSubscriptions(project);
    }
    async setupProjectSubscriptions(project) {
        (0, util_1.disposeAll)(this.projectSubscriptions);
        if (!project) {
            this.targetNameSub = new util_1.DummyDisposable();
            this.variantNameSub = new util_1.DummyDisposable();
            this.launchTargetSub = new util_1.DummyDisposable();
            this.ctestEnabledSub = new util_1.DummyDisposable();
            this.activeConfigurePresetSub = new util_1.DummyDisposable();
            this.activeBuildPresetSub = new util_1.DummyDisposable();
            this.activeTestPresetSub = new util_1.DummyDisposable();
            this.activePackagePresetSub = new util_1.DummyDisposable();
            this.activeWorkflowPresetSub = new util_1.DummyDisposable();
            this.isBusySub = new util_1.DummyDisposable();
        }
        else {
            this.targetNameSub = project.onTargetNameChanged(prop_1.FireNow, () => void this.projectStatus.refresh());
            this.variantNameSub = project.onActiveVariantNameChanged(prop_1.FireNow, () => void this.projectStatus.refresh());
            this.launchTargetSub = project.onLaunchTargetNameChanged(prop_1.FireNow, () => void this.projectStatus.refresh());
            this.ctestEnabledSub = project.onCTestEnabledChanged(prop_1.FireNow, () => void this.projectStatus.refresh());
            this.activeConfigurePresetSub = project.onActiveConfigurePresetChanged(prop_1.FireNow, () => void this.projectStatus.refresh());
            this.activeBuildPresetSub = project.onActiveBuildPresetChanged(prop_1.FireNow, () => void this.projectStatus.refresh());
            this.activeTestPresetSub = project.onActiveTestPresetChanged(prop_1.FireNow, () => void this.projectStatus.refresh());
            this.activePackagePresetSub = project.onActivePackagePresetChanged(prop_1.FireNow, () => void this.projectStatus.refresh());
            this.activeWorkflowPresetSub = project.onActiveWorkflowPresetChanged(prop_1.FireNow, () => void this.projectStatus.refresh());
            this.isBusySub = project.onIsBusyChanged(prop_1.FireNow, (isBusy) => void this.projectStatus.setIsBusy(isBusy));
            await (0, extension_2.setContextAndStore)(ext.hideBuildCommandKey, project.hideBuildButton);
            await (0, extension_2.setContextAndStore)(ext.hideDebugCommandKey, project.hideDebugButton);
            await (0, extension_2.setContextAndStore)(ext.hideLaunchCommandKey, project.hideLaunchButton);
        }
    }
    getActiveCMakeProject() {
        return this.activeProject;
    }
    // Number of workspace folders
    get numOfWorkspaceFolders() {
        return this.folderToProjectsMap.size;
    }
    get numOfProjects() {
        return this.getAllCMakeProjects().length;
    }
    getNumOfValidProjects() {
        let count = 0;
        for (const project of this.getAllCMakeProjects()) {
            count += project.hasCMakeLists() ? 1 : 0;
        }
        return count;
    }
    get hasMultipleProjects() {
        return this.numOfProjects > 1;
    }
    get hasMultipleProjectsInOneFolder() {
        for (const projects of this.folderToProjectsMap.values()) {
            if (projects && projects.length > 1) {
                return true;
            }
        }
        return false;
    }
    get hasMultipleRoots() {
        return this.numOfWorkspaceFolders > 1;
    }
    async dispose() {
        (0, util_1.disposeAll)(this.subscriptions);
        (0, util_1.disposeAll)(this.projectSubscriptions);
        // Dispose of each CMakeProject we have loaded.
        for (const project of this.getAllCMakeProjects()) {
            await project.asyncDispose();
        }
        if (this.projectStatus) {
            this.projectStatus.dispose();
        }
    }
    /**
     * Get the all CMakeWorkspaceFolder instance associated with the given workspace folder, or undefined
     * @param ws The workspace folder to search, or array of command and workspace path
     */
    getProjectsForWorkspaceFolder(ws) {
        if (ws) {
            if (util.isArrayOfString(ws)) {
                return this.folderToProjectsMap.get(ws[ws.length - 1]);
            }
            else if (util.isWorkspaceFolder(ws)) {
                const folder = ws;
                return this.folderToProjectsMap.get(folder.uri.fsPath);
            }
        }
        return undefined;
    }
    async getProjectForFolder(folder) {
        const sourceDir = util.platformNormalizePath(await util.normalizeAndVerifySourceDir(folder, drivers_1.CMakeDriver.sourceDirExpansionOptions(folder)));
        const allCMakeProjects = this.getAllCMakeProjects();
        for (const project of allCMakeProjects) {
            if (util.platformNormalizePath(project.sourceDir) === sourceDir ||
                util.platformNormalizePath(project.workspaceFolder.uri.fsPath) === sourceDir) {
                return project;
            }
        }
        return undefined;
    }
    getAllCMakeProjects() {
        let allCMakeProjects = [];
        allCMakeProjects = allCMakeProjects.concat(...this.folderToProjectsMap.values());
        return allCMakeProjects;
    }
    /**
     * Load all the folders currently open in VSCode
     */
    async loadAllProjects() {
        this.getAllCMakeProjects().forEach(project => project.dispose());
        this.folderToProjectsMap.clear();
        if (vscode.workspace.workspaceFolders) {
            for (const folder of vscode.workspace.workspaceFolders) {
                await this.addFolder(folder);
            }
        }
    }
    /**
     * Load a new CMakeProject for the given workspace folder and remember it.
     * @param folder The workspace folder to load for
     * @param projectController Required for test explorer to work properly. Setting as optional to avoid breaking tests.
     */
    static async createCMakeProjectsForWorkspaceFolder(workspaceContext, projectController) {
        const sourceDirectories = workspaceContext.config.sourceDirectory;
        const isMultiProjectFolder = (sourceDirectories.length > 1);
        const projects = [];
        for (const source of sourceDirectories) {
            projects.push(await cmakeProject_1.default.create(workspaceContext, source, projectController, isMultiProjectFolder));
        }
        await ProjectController.checkBuildDirectories(workspaceContext.config, workspaceContext.folder);
        return projects;
    }
    static async checkBuildDirectories(config, workspaceFolder) {
        const sourceDirectories = config.sourceDirectory;
        if (sourceDirectories.length <= 1) {
            return;
        }
        const unresolvedBuildDirectory = config.buildDirectory(sourceDirectories.length > 1);
        if (unresolvedBuildDirectory.includes("${sourceDirectory}") || unresolvedBuildDirectory.includes("${sourceDir}")) {
            return;
        }
        else {
            const sameBinaryDir = localize(1, null);
            const mayCauseProblems = localize(2, null);
            log.warning(sameBinaryDir);
            log.warning(mayCauseProblems);
            log.warning(localize(3, null, workspaceFolder.uri.fsPath));
            log.warning(localize(4, null, "'cmake.buildDirectory'", "'${sourceDirectory}'"));
            log.warning(localize(5, null));
            const moreInfo = localize(6, null);
            if (!ProjectController.duplicateMessageShown) {
                // Don't await this because it may never return.
                void vscode.window.showInformationMessage(`${sameBinaryDir} ${mayCauseProblems}`, moreInfo).then(response => {
                    if (response === moreInfo) {
                        log.showChannel();
                    }
                });
                ProjectController.duplicateMessageShown = true;
            }
        }
    }
    useCMakePresetsForFolder(folder) {
        const cmakeProjects = this.getProjectsForWorkspaceFolder(folder);
        if (cmakeProjects && cmakeProjects.length > 0) {
            return cmakeProjects[0].useCMakePresets;
        }
        return false;
    }
    /**
     * Create a new instance of the backend to support the given workspace folder.
     * The given folder *must not* already be loaded.
     * @param folder The workspace folder to load for
     * @returns The newly created CMakeProject backend for the given folder
     */
    async addFolder(folder) {
        this.beforeAddFolderEmitter.fire(folder);
        let projects = this.getProjectsForWorkspaceFolder(folder);
        if (projects) {
            rollbar_1.default.error(localize(7, null), { wsUri: folder.uri.toString() });
        }
        else {
            // Load for the workspace.
            const workspaceContext = workspace_1.DirectoryContext.createForDirectory(folder, new state_1.StateManager(this.extensionContext, folder));
            projects = await ProjectController.createCMakeProjectsForWorkspaceFolder(workspaceContext, this);
            this.folderToProjectsMap.set(folder.uri.fsPath, projects);
            const config = workspaceContext.config;
            if (config) {
                this.sourceDirectorySub.set(folder, config.onChange('sourceDirectory', async (sourceDirectories) => this.doSourceDirectoryChange(folder, sourceDirectories, config.options)));
                this.buildDirectorySub.set(folder, config.onChange('buildDirectory', async () => this.refreshDriverSettings(config, folder)));
                this.installPrefixSub.set(folder, config.onChange('installPrefix', async () => this.refreshDriverSettings(config, folder)));
                this.useCMakePresetsSub.set(folder, config.onChange('useCMakePresets', async (useCMakePresets) => this.doUseCMakePresetsChange(folder, useCMakePresets)));
                this.hideDebugButtonSub.set(folder, config.onChange('options', async (options) => this.doStatusChange(folder, options)));
            }
        }
        this.afterAddFolderEmitter.fire({ folder: folder, projects: projects });
        return projects;
    }
    /**
     * Remove knowledge of the given workspace folder. Disposes of the CMakeProject
     * instance associated with the workspace.
     * @param folder The workspace to remove for
     */
    async removeFolder(folder) {
        var _a, _b, _c, _d;
        const cmakeProjects = this.getProjectsForWorkspaceFolder(folder);
        if (!cmakeProjects) {
            // CMake Tools should always be aware of all workspace folders. If we
            // somehow missed one, that's a bug
            rollbar_1.default.error(localize(8, null), { wsUri: folder.uri.toString() });
            // Keep the UI running, just don't remove this instance.
            return;
        }
        // Drop the instance from our table. Forget about it.
        this.folderToProjectsMap.delete(folder.uri.fsPath);
        // Finally, dispose of the CMake Tools now that the workspace is gone.
        for (const project of cmakeProjects) {
            project.dispose();
        }
        void ((_a = this.sourceDirectorySub.get(folder)) === null || _a === void 0 ? void 0 : _a.dispose());
        this.sourceDirectorySub.delete(folder);
        void ((_b = this.buildDirectorySub.get(folder)) === null || _b === void 0 ? void 0 : _b.dispose());
        this.buildDirectorySub.delete(folder);
        void ((_c = this.installPrefixSub.get(folder)) === null || _c === void 0 ? void 0 : _c.dispose());
        this.installPrefixSub.delete(folder);
        void ((_d = this.useCMakePresetsSub.get(folder)) === null || _d === void 0 ? void 0 : _d.dispose());
        this.useCMakePresetsSub.delete(folder);
    }
    async doSourceDirectoryChange(folder, value, options) {
        var _a;
        let sourceDirectories = [];
        if (typeof (value) === 'string') {
            sourceDirectories = [value];
        }
        else if (value instanceof Array) {
            sourceDirectories = value;
        }
        // Normalize the paths.
        for (let i = 0; i < sourceDirectories.length; i++) {
            sourceDirectories[i] = await util.normalizeAndVerifySourceDir(sourceDirectories[i], drivers_1.CMakeDriver.sourceDirExpansionOptions(folder.uri.fsPath));
        }
        const projects = this.getProjectsForWorkspaceFolder(folder);
        if (projects) {
            // Try to preserve the active project.
            // If there's a transition between multi-project and single-project, we need to dispose all the projects.
            let activeProjectPath;
            const multiProjectChange = (sourceDirectories.length > 1) !== (projects.length > 1);
            // Remove projects.
            for (let i = projects.length - 1; i >= 0; i--) {
                if (!multiProjectChange && sourceDirectories.indexOf(projects[i].sourceDir) !== -1) {
                    sourceDirectories.splice(sourceDirectories.indexOf(projects[i].sourceDir), 1);
                }
                else {
                    if (((_a = this.activeProject) === null || _a === void 0 ? void 0 : _a.sourceDir) === projects[i].sourceDir) {
                        activeProjectPath = projects[i].sourceDir;
                    }
                    projects[i].dispose();
                    projects.splice(i, 1);
                }
            }
            // Add projects.
            const workspaceContext = workspace_1.DirectoryContext.createForDirectory(folder, new state_1.StateManager(this.extensionContext, folder));
            for (let i = 0; i < sourceDirectories.length; i++) {
                const cmakeProject = await cmakeProject_1.default.create(workspaceContext, sourceDirectories[i], this, sourceDirectories.length > 1);
                if (activeProjectPath === cmakeProject.sourceDir) {
                    await this.setActiveProject(cmakeProject, options);
                    activeProjectPath = undefined;
                }
                projects.push(cmakeProject);
            }
            await ProjectController.checkBuildDirectories(workspaceContext.config, folder);
            if (activeProjectPath !== undefined) {
                // Active project is no longer available. Pick a different one.
                await this.setActiveProject(projects.length > 0 ? projects[0] : undefined, options);
            }
            // Update the map.
            this.folderToProjectsMap.set(folder.uri.fsPath, projects);
            if (multiProjectChange || activeProjectPath !== undefined) {
                // There's no way to reach into the extension manager and update the status bar, so we exposed a hidden command
                // to referesh it.
                void vscode.commands.executeCommand('cmake.statusbar.update');
            }
        }
    }
    async refreshDriverSettings(config, folder) {
        const projects = this.getProjectsForWorkspaceFolder(folder);
        if (projects) {
            for (const project of projects) {
                const driver = await project.getCMakeDriverInstance();
                await (driver === null || driver === void 0 ? void 0 : driver.refreshSettings());
            }
            await ProjectController.checkBuildDirectories(config, folder);
        }
    }
    async doUseCMakePresetsChange(folder, useCMakePresets) {
        const projects = this.getProjectsForWorkspaceFolder(folder);
        if (projects) {
            for (const project of projects) {
                await project.doUseCMakePresetsChange(useCMakePresets);
            }
        }
        if (this.activeProject) {
            await this.updateUsePresetsState(this.activeProject);
        }
    }
    async doStatusChange(folder, options) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;
        const projects = this.getProjectsForWorkspaceFolder(folder);
        if (projects) {
            for (const project of projects) {
                project.doStatusChange(options);
            }
        }
        await this.projectStatus.doStatusChange(options);
        await (0, extension_2.setContextAndStore)(ext.hideBuildCommandKey, (((_b = (_a = options.advanced) === null || _a === void 0 ? void 0 : _a.build) === null || _b === void 0 ? void 0 : _b.statusBarVisibility) === "hidden" && ((_d = (_c = options === null || options === void 0 ? void 0 : options.advanced) === null || _c === void 0 ? void 0 : _c.build) === null || _d === void 0 ? void 0 : _d.projectStatusVisibility) === "hidden") ? true : false);
        await (0, extension_2.setContextAndStore)(ext.hideDebugCommandKey, (((_f = (_e = options.advanced) === null || _e === void 0 ? void 0 : _e.debug) === null || _f === void 0 ? void 0 : _f.statusBarVisibility) === "hidden" && ((_h = (_g = options === null || options === void 0 ? void 0 : options.advanced) === null || _g === void 0 ? void 0 : _g.debug) === null || _h === void 0 ? void 0 : _h.projectStatusVisibility) === "hidden") ? true : false);
        await (0, extension_2.setContextAndStore)(ext.hideLaunchCommandKey, (((_k = (_j = options.advanced) === null || _j === void 0 ? void 0 : _j.launch) === null || _k === void 0 ? void 0 : _k.statusBarVisibility) === "hidden" && ((_m = (_l = options === null || options === void 0 ? void 0 : options.advanced) === null || _l === void 0 ? void 0 : _l.launch) === null || _m === void 0 ? void 0 : _m.projectStatusVisibility) === "hidden") ? true : false);
    }
    async hideBuildButton(isHidden) {
        // Doesn't hide the button in the Side Bar because there are no space-saving issues there vs status bar
        // await projectStatus.hideBuildButton(isHidden);
        await (0, extension_2.setContextAndStore)(ext.hideBuildCommandKey, isHidden);
    }
    async hideDebugButton(isHidden) {
        // Doesn't hide the button in the Side Bar because there are no space-saving issues there vs status bar
        // await projectStatus.hideDebugButton(isHidden);
        await (0, extension_2.setContextAndStore)(ext.hideDebugCommandKey, isHidden);
    }
    async hideLaunchButton(isHidden) {
        // Doesn't hide the button in the Side Bar because there are no space-saving issues there vs status bar
        // await projectStatus.hideLaunchButton(isHidden);
        await (0, extension_2.setContextAndStore)(ext.hideLaunchCommandKey, isHidden);
    }
    async updateUsePresetsState(project) {
        const state = (project === null || project === void 0 ? void 0 : project.useCMakePresets) || false;
        await (0, extension_2.setContextAndStore)('useCMakePresets', state);
        await this.projectStatus.refresh();
        const statusBar = (0, extension_1.getStatusBar)();
        if (statusBar) {
            statusBar.useCMakePresets(state);
        }
    }
    /**
     * Handle workspace change event.
     * @param event Workspace change event
     */
    async doWorkspaceFolderChange(event) {
        // Un-register each CMake Tools we have loaded for each removed workspace
        for (const folder of event.removed) {
            const cmakeProjects = this.getProjectsForWorkspaceFolder(folder);
            if (cmakeProjects) {
                this.beforeRemoveFolderEmitter.fire(cmakeProjects);
            }
            await this.removeFolder(folder);
            this.afterRemoveFolderEmitter.fire(folder);
        }
        // Load a new CMake Tools instance for each folder that has been added.
        for (const folder of event.added) {
            await this.addFolder(folder);
        }
    }
    async doOpenTextDocument(textDocument) {
        const filePath = textDocument.uri.fsPath.toLowerCase();
        if (filePath.endsWith("cmakelists.txt") || filePath.endsWith(".cmake")) {
            telemetry.logEvent("cmakeFileOpen");
        }
    }
    async doSaveTextDocument(textDocument) {
        await this.doCMakeFileChangeReconfigure(textDocument.uri);
    }
    async onDidRenameFiles(renamedFileEvt) {
        for (const file of renamedFileEvt.files) {
            const filePath = file.newUri.fsPath.toLowerCase();
            if (filePath.endsWith("cmakelists.txt")) {
                await this.doCMakeFileChangeReconfigure(file.newUri);
            }
        }
    }
    async doCMakeFileChangeReconfigure(uri) {
        const activeProject = this.getActiveCMakeProject();
        if (activeProject) {
            const isFileInsideActiveProject = util.isFileInsideFolder(uri, activeProject.isMultiProjectFolder ? activeProject.folderPath : activeProject.workspaceFolder.uri.fsPath);
            // A save of settings.json triggers the doSave event (doSaveTextDocument or onDidRenameFile)
            // before the settings update event (onDidChangeConfiguration).
            // If the user updates cmakePath, the below doCMakeFileChangeReconfigure will operate on the old value.
            // Very soon cmakePath is going to be updated and all will work correctly but until then,
            // one example of annoying and incorrect behavior is to display the "not found cmake" error message again,
            // (it is called eventually below) after the user corrects its setting value.
            // There is no need to call doCMakeFileChangeReconfigure for a settings.json file, safe to skip.
            if (isFileInsideActiveProject && !uri.fsPath.endsWith("settings.json")) {
                await activeProject.doCMakeFileChangeReconfigure(uri);
            }
            await activeProject.sendFileTypeTelemetry(uri);
        }
    }
    [Symbol.iterator]() {
        return this.folderToProjectsMap.values();
    }
}
exports.ProjectController = ProjectController;
ProjectController.duplicateMessageShown = false;


/***/ }),

/***/ 19981:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ProjectOutline = exports.WorkspaceFolderNode = exports.ProjectNode = exports.TargetNode = exports.SourceFileNode = exports.DirectoryNode = void 0;
const path = __webpack_require__(71017);
const vscode = __webpack_require__(89496);
const nls = __webpack_require__(33463);
const rollbar_1 = __webpack_require__(58543);
const util_1 = __webpack_require__(16182);
nls.config({ messageFormat: nls.MessageFormat.bundle, bundleFormat: nls.BundleFormat.standalone })((__webpack_require__(71017).join)(__dirname, 'src\\projectOutline.ts'));
const localize = nls.loadMessageBundle((__webpack_require__(71017).join)(__dirname, 'src\\projectOutline.ts'));
/**
 * Base class of nodes in all tree nodes
 */
class BaseNode {
    constructor(id) {
        this.id = id;
    }
}
/**
 * Add an item to a PathedTree at the given path. Updates intermediate branches
 * as necessary.
 * @param tree The tree to update
 * @param itemPath The path to the item to add
 * @param item The item which will be added
 */
function addToTree(tree, itemPath, item) {
    const elems = (0, util_1.splitPath)(itemPath);
    for (const el of elems) {
        let subtree = tree.children.find(n => n.pathPart === el);
        if (!subtree) {
            subtree = {
                pathPart: el,
                children: [],
                items: []
            };
            tree.children.push(subtree);
        }
        tree = subtree;
    }
    tree.items.push(item);
}
/**
 * Collapse elements in the tree which contain only one child tree.
 * @param tree The tree to collapse
 */
function collapseTreeInplace(tree) {
    const new_children = [];
    for (let child of tree.children) {
        while (child.children.length === 1 && child.items.length === 0) {
            const subchild = child.children[0];
            child = {
                pathPart: path.join(child.pathPart, subchild.pathPart),
                items: subchild.items,
                children: subchild.children
            };
        }
        collapseTreeInplace(child);
        new_children.push(child);
    }
    tree.children = new_children;
}
/**
 * Get the path to an icon for the given type of CMake target.
 * @param type The type of target
 */
function iconForTargetType(type) {
    switch (type) {
        case 'EXECUTABLE':
            return 'file-binary';
        case 'MODULE_LIBRARY':
        case 'SHARED_LIBRARY':
        case 'OBJECT_LIBRARY':
        case 'INTERFACE_LIBRARY':
        case 'STATIC_LIBRARY':
            return 'library';
        case 'UTILITY':
            return 'tools';
    }
}
function sortStringForType(type) {
    switch (type) {
        case 'EXECUTABLE':
            return 'aaa';
        case 'MODULE_LIBRARY':
        case 'SHARED_LIBRARY':
        case 'STATIC_LIBRARY':
            return 'baa';
        case 'UTILITY':
            return 'caa';
        case 'OBJECT_LIBRARY':
            return 'daa';
        case 'INTERFACE_LIBRARY':
            return 'eaa';
    }
}
class DirectoryNode extends BaseNode {
    constructor(prefix, parent, pathPart) {
        super(`${prefix}${path.sep}${path.normalize(pathPart)}`);
        this.prefix = prefix;
        this.parent = parent;
        this.pathPart = pathPart;
        this._subdirs = new Map();
        this._leaves = new Map();
    }
    getOrderTuple() {
        return [this.id];
    }
    get fsPath() {
        return path.join(this.parent, this.pathPart);
    }
    getChildren() {
        const ret = [];
        const subdirs = [...this._subdirs.values()].sort((a, b) => a.pathPart.localeCompare(b.pathPart));
        ret.push(...subdirs);
        const leaves = [...this._leaves.values()].sort((a, b) => (0, util_1.lexicographicalCompare)(a.getOrderTuple(), b.getOrderTuple()));
        ret.push(...leaves);
        return ret;
    }
    getTreeItem() {
        const item = new vscode.TreeItem(this.pathPart, vscode.TreeItemCollapsibleState.Collapsed);
        item.resourceUri = vscode.Uri.file(this.fsPath);
        item.id = this.id;
        return item;
    }
    update(opts) {
        const new_subdirs = new Map();
        const new_leaves = new Map();
        let did_update = false;
        for (const new_subdir of opts.tree.children) {
            let existing = this._subdirs.get(new_subdir.pathPart);
            if (!existing) {
                existing = new DirectoryNode(this.id, this.fsPath, new_subdir.pathPart);
                did_update = true;
            }
            existing.update(Object.assign(Object.assign({}, opts), { tree: new_subdir }));
            new_subdirs.set(new_subdir.pathPart, existing);
        }
        for (const new_leaf of opts.tree.items) {
            let existing = this._leaves.get(new_leaf.name);
            if (!existing) {
                existing = opts.create(new_leaf);
                did_update = true;
            }
            else {
                opts.update(existing, new_leaf);
            }
            new_leaves.set(new_leaf.name, existing);
        }
        if (new_subdirs.size !== this._subdirs.size) {
            // We added/removed nodes
            did_update = true;
        }
        if (new_leaves.size !== this._leaves.size) {
            // We added/removed leaves
            did_update = true;
        }
        this._subdirs = new_subdirs;
        this._leaves = new_leaves;
        if (did_update) {
            opts.context.nodesToUpdate.push(this);
        }
    }
}
exports.DirectoryNode = DirectoryNode;
class SourceFileNode extends BaseNode {
    constructor(prefix, folder, sourcePath, filePath, _language) {
        // id: {prefix}::filename:directory of file relative to Target
        super(`${prefix}::${path.basename(filePath)}:${path.relative(sourcePath, path.dirname(filePath))}`);
        this.prefix = prefix;
        this.folder = folder;
        this.sourcePath = sourcePath;
        this.filePath = filePath;
        this._language = _language;
    }
    get name() {
        return path.basename(this.filePath);
    }
    getChildren() {
        return [];
    }
    getOrderTuple() {
        return [this.name];
    }
    getTreeItem() {
        const item = new vscode.TreeItem(path.basename(this.filePath));
        item.id = this.id;
        item.resourceUri = vscode.Uri.file(this.filePath);
        const name = this.name.toLowerCase();
        const cml = name === "cmakelists.txt";
        const is_compilable = ['CXX', 'C'].indexOf(this._language || '') !== -1;
        item.contextValue = ['nodeType=file', `compilable=${is_compilable}`, `cmakelists=${cml}`].join(',');
        item.command = {
            title: localize(0, null),
            command: 'vscode.open',
            arguments: [item.resourceUri]
        };
        return item;
    }
}
exports.SourceFileNode = SourceFileNode;
class TargetNode extends BaseNode {
    constructor(prefix, projectName, cm, folder) {
        // id: {prefix}::target_name:artifact_name:target_path
        super(`${prefix}::${cm.name || ''}:${cm.fullName || ''}:${cm.sourceDirectory || ''}`);
        this.prefix = prefix;
        this.projectName = projectName;
        this.folder = folder;
        this._fullName = '';
        this._type = 'UTILITY';
        this._isDefault = false;
        this._isLaunch = false;
        this._fsPath = '';
        this.name = cm.name;
        this.sourceDir = cm.sourceDirectory || '';
        this._rootDir = new DirectoryNode(this.id, this.sourceDir, '');
    }
    getOrderTuple() {
        return [sortStringForType(this._type), this.name];
    }
    getChildren() {
        return this._rootDir.getChildren();
    }
    getTreeItem() {
        try {
            const item = new vscode.TreeItem(this.name);
            if (this.getChildren().length) {
                item.collapsibleState = vscode.TreeItemCollapsibleState.Collapsed;
            }
            if (this._isDefault) {
                item.label += ' 🔨';
            }
            if (this._isLaunch) {
                item.label += ' 🚀';
            }
            if (this._fullName !== this.name && this._fullName) {
                item.label += ` [${this._fullName}]`;
            }
            if (this._type === 'INTERFACE_LIBRARY') {
                item.label += ` — ${localize(1, null)}`;
            }
            else if (this._type === 'UTILITY') {
                item.label += ` — ${localize(2, null)}`;
            }
            else if (this._type === 'OBJECT_LIBRARY') {
                item.label += ` — ${localize(3, null)}`;
            }
            item.resourceUri = vscode.Uri.file(this._fsPath);
            item.tooltip = localize(4, null, this.name);
            if (this._isLaunch) {
                item.tooltip += ` [${localize(5, null)}]`;
            }
            if (this._isDefault) {
                item.tooltip += ` [${localize(6, null)}]`;
            }
            item.iconPath = new vscode.ThemeIcon(iconForTargetType(this._type));
            item.id = this.id;
            const canBuild = this._type !== 'INTERFACE_LIBRARY' && this._type !== 'UTILITY' && this._type !== 'OBJECT_LIBRARY';
            const canRun = this._type === 'UTILITY';
            item.contextValue = [
                `nodeType=target`,
                `isDefault=${this._isDefault}`,
                `isLaunch=${this._isLaunch}`,
                `type=${this._type}`,
                `canBuild=${canBuild}`,
                `canRun=${canRun}`
            ].join(',');
            return item;
        }
        catch (e) {
            debugger;
            return new vscode.TreeItem(`${this.name} (${localize(7, null)})`);
        }
    }
    update(cm, ctx) {
        console.assert(this.name === cm.name);
        console.assert(this.sourceDir === (cm.sourceDirectory || ''));
        let did_update = this._fullName !== (cm.fullName || '');
        this._fullName = cm.fullName || '';
        const old_fspath = this._fsPath;
        if (cm.artifacts && cm.artifacts.length) {
            this._fsPath = path.normalize(cm.artifacts[0]);
        }
        else {
            this._fsPath = cm.fullName || '';
        }
        did_update = did_update || old_fspath !== this._fsPath;
        did_update = did_update || (this._type !== cm.type);
        this._type = cm.type;
        const new_is_default = !!ctx.defaultTarget && this.name === ctx.defaultTarget;
        did_update = did_update || new_is_default !== this._isDefault;
        this._isDefault = new_is_default;
        const new_is_launch = this.name === ctx.launchTargetName;
        did_update = did_update || new_is_launch !== this._isLaunch;
        this._isLaunch = new_is_launch;
        const tree = {
            pathPart: this.sourceDir,
            items: [],
            children: []
        };
        for (const grp of cm.fileGroups || []) {
            for (let src of grp.sources) {
                if (!path.isAbsolute(src)) {
                    src = path.join(this.sourceDir, src);
                }
                const src_dir = path.dirname(src);
                const relpath = path.relative(this.sourceDir, src_dir);
                addToTree(tree, relpath, new SourceFileNode(this.id, this.folder, this.sourceDir, src, grp.language));
            }
        }
        addToTree(tree, '', new SourceFileNode(this.id, this.folder, this.sourceDir, path.join(this.sourceDir, 'CMakeLists.txt')));
        collapseTreeInplace(tree);
        this._rootDir.update({
            tree,
            context: ctx,
            update: (_src, _cm) => { },
            create: newNode => newNode
        });
    }
    async openInCMakeLists() {
        const cml_path = path.join(this.sourceDir, 'CMakeLists.txt');
        const doc = await vscode.workspace.openTextDocument(cml_path);
        const editor = await vscode.window.showTextDocument(doc);
        const doc_text = doc.getText();
        const regex = new RegExp(`(add_|ADD_)\\w+\\([\\s\\n]*?${this.name}[\\s\\n\\)]`, 'g');
        const offset = doc_text.search(regex);
        if (offset >= 0) {
            const pos = doc.positionAt(offset);
            editor.revealRange(new vscode.Range(pos, pos.translate(2)));
            editor.selection = new vscode.Selection(pos, pos);
        }
    }
}
exports.TargetNode = TargetNode;
class ProjectNode extends BaseNode {
    constructor(name, folder, sourceDirectory) {
        // id: project_name:project_directory
        super(`${name}:${sourceDirectory}`);
        this.name = name;
        this.folder = folder;
        this.sourceDirectory = sourceDirectory;
        this._rootDir = new DirectoryNode(this.id, '', '');
    }
    getOrderTuple() {
        return [this.sourceDirectory, this.name];
    }
    getChildren() {
        return this._rootDir.getChildren();
    }
    getTreeItem() {
        const item = new vscode.TreeItem(this.name, vscode.TreeItemCollapsibleState.Expanded);
        if (this.getChildren().length === 0) {
            item.label += ` — (${localize(8, null)})`;
        }
        item.tooltip = `${this.name}\n${this.sourceDirectory}`;
        item.contextValue = 'nodeType=project';
        return item;
    }
    update(pr, ctx) {
        if (pr.name !== this.name) {
            rollbar_1.default.error(localize(9, null), { newName: pr.name, oldName: this.name });
        }
        const tree = {
            pathPart: '',
            children: [],
            items: []
        };
        for (const target of pr.targets) {
            const srcdir = target.sourceDirectory || '';
            const relpath = path.relative(pr.sourceDirectory, srcdir);
            addToTree(tree, relpath, target);
        }
        collapseTreeInplace(tree);
        this._rootDir.update({
            tree,
            context: ctx,
            update: (tgt, cm) => tgt.update(cm, ctx),
            create: cm => {
                const node = new TargetNode(this.id, this.name, cm, this.folder);
                node.update(cm, ctx);
                return node;
            }
        });
        // const target_tree = mapTreeItems(tree, target => TargetNode.fromCodeModel(pr.name, target));
        // this._rootDir = DirectoryNode.fromSimpleTree(pr.name, pr.sourceDirectory, target_tree);
    }
}
exports.ProjectNode = ProjectNode;
class WorkspaceFolderNode extends BaseNode {
    constructor(wsFolder) {
        super(`wsf/${wsFolder.uri.fsPath}`);
        this.wsFolder = wsFolder;
        this._active = false;
        this._projects = new Map();
    }
    setActive(active) {
        this._active = active;
    }
    getOrderTuple() {
        return [this.id];
    }
    getTreeItem() {
        const item = new vscode.TreeItem(this.wsFolder.uri.fsPath, vscode.TreeItemCollapsibleState.Expanded);
        item.iconPath = vscode.ThemeIcon.Folder;
        item.id = this.wsFolder.uri.fsPath;
        let description;
        if (this._active) {
            description = localize(10, null);
        }
        else {
            description = localize(11, null);
        }
        item.description = `[${description}]`;
        item.contextValue = ['nodeType=workspace', `selected=${this._active}`].join(',');
        return item;
    }
    getNode(cmakeProject, modelProjectName) {
        var _a;
        return (_a = this._projects.get(cmakeProject.folderPath)) === null || _a === void 0 ? void 0 : _a.get(modelProjectName);
    }
    setNode(cmakeProject, modelProjectName, node) {
        let sub_map = this._projects.get(cmakeProject.folderPath);
        if (!sub_map) {
            sub_map = new Map();
            this._projects.set(cmakeProject.folderPath, sub_map);
        }
        return sub_map.set(modelProjectName, node);
    }
    removeNodes(cmakeProject) {
        this._projects.delete(cmakeProject.folderPath);
    }
    updateCodeModel(cmakeProject, model, ctx) {
        if (!model || model.configurations.length < 1) {
            this.removeNodes(cmakeProject);
            ctx.nodesToUpdate.push(this);
            return;
        }
        for (const modelProj of model.configurations[0].projects) {
            let item = this.getNode(cmakeProject, modelProj.name);
            if (!item) {
                item = new ProjectNode(modelProj.name, this.wsFolder, cmakeProject.folderPath);
                this.setNode(cmakeProject, modelProj.name, item);
            }
            item.update(modelProj, ctx);
        }
    }
    getChildren() {
        const children = [];
        for (const sub_map of this._projects.values()) {
            children.push(...sub_map.values());
        }
        return children.sort((a, b) => (0, util_1.lexicographicalCompare)(a.getOrderTuple(), b.getOrderTuple()));
    }
}
exports.WorkspaceFolderNode = WorkspaceFolderNode;
class ProjectOutline {
    constructor() {
        this._changeEvent = new vscode.EventEmitter();
        this._folders = new Map();
    }
    get onDidChangeTreeData() {
        return this._changeEvent.event;
    }
    addAllCurrentFolders() {
        for (const wsf of vscode.workspace.workspaceFolders || []) {
            this._folders.set(wsf.uri.fsPath, new WorkspaceFolderNode(wsf));
        }
    }
    addFolder(folder) {
        this._folders.set(folder.uri.fsPath, new WorkspaceFolderNode(folder));
        this._changeEvent.fire(null);
    }
    removeFolder(folder) {
        this._folders.delete(folder.uri.fsPath);
        this._changeEvent.fire(null);
    }
    updateCodeModel(cmakeProject, model) {
        const folder = cmakeProject.workspaceContext.folder;
        let existing = this._folders.get(folder.uri.fsPath);
        if (!existing) {
            rollbar_1.default.error(localize(12, null));
            // That's an error, but we can keep going otherwise.
            existing = new WorkspaceFolderNode(folder);
            this._folders.set(folder.uri.fsPath, existing);
        }
        const updates = [];
        existing.updateCodeModel(cmakeProject, model, {
            defaultTarget: cmakeProject.defaultBuildTarget || undefined,
            launchTargetName: cmakeProject.launchTargetName,
            nodesToUpdate: updates,
            folder
        });
        this._changeEvent.fire(null);
    }
    getChildren(node) {
        try {
            if (node) {
                return node.getChildren();
            }
            // Request for root nodes
            if (this._folders.size === 1) {
                for (const folder of this._folders.values()) {
                    return folder.getChildren();
                }
            }
            return [...this._folders.values()];
        }
        catch (e) {
            rollbar_1.default.error(localize(13, null));
            return [];
        }
    }
    // TODO: project outline needs to be able to select a project in a multi-project folder. #2823
    setActiveFolder(folderPath) {
        if (!folderPath) {
            return;
        }
        const current_node = this._selected_workspace;
        const new_node = this._folders.get(folderPath);
        if (current_node) {
            current_node.setActive(false);
            this._changeEvent.fire(current_node);
        }
        if (new_node) {
            new_node.setActive(true);
            this._changeEvent.fire(new_node);
        }
        this._selected_workspace = new_node;
    }
    async getTreeItem(node) {
        return node.getTreeItem();
    }
}
exports.ProjectOutline = ProjectOutline;


/***/ }),

/***/ 42398:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ProjectStatus = exports.treeDataProvider = void 0;
const vscode = __webpack_require__(89496);
const nls = __webpack_require__(33463);
const preset = __webpack_require__(10739);
const util_1 = __webpack_require__(16182);
const config_1 = __webpack_require__(62498);
nls.config({ messageFormat: nls.MessageFormat.bundle, bundleFormat: nls.BundleFormat.standalone })((__webpack_require__(71017).join)(__dirname, 'src\\projectStatus.ts'));
const localize = nls.loadMessageBundle((__webpack_require__(71017).join)(__dirname, 'src\\projectStatus.ts'));
const noKitSelected = localize(0, null);
const noConfigPresetSelected = localize(1, null);
const noBuildPresetSelected = localize(2, null);
const noTestPresetSelected = localize(3, null);
const noPackagePresetSelected = localize(4, null);
const noWorkflowPresetSelected = localize(5, null);
class ProjectStatus {
    constructor() {
        this.disposables = [];
        exports.treeDataProvider = new TreeDataProvider();
        this.disposables.push(...[
            // Commands for projectStatus items
            vscode.commands.registerCommand('cmake.projectStatus.stop', async (_node) => {
                await (0, util_1.runCommand)('stop');
            }),
            vscode.commands.registerCommand('cmake.projectStatus.cleanConfigure', async (_node) => {
                await (0, util_1.runCommand)('cleanConfigure');
                await this.refresh();
            }),
            vscode.commands.registerCommand('cmake.projectStatus.openSettings', async (_node) => {
                await (0, util_1.runCommand)('openSettings');
            }),
            vscode.commands.registerCommand('cmake.projectStatus.openVisibilitySettings', async (_node) => {
                await this.openVisibilitySettings();
            }),
            vscode.commands.registerCommand('cmake.projectStatus.selectKit', async (_node) => {
                await (0, util_1.runCommand)('selectKit');
                await this.refresh();
            }),
            vscode.commands.registerCommand('cmake.projectStatus.selectConfigurePreset', async (node) => {
                await (0, util_1.runCommand)('selectConfigurePreset');
                await this.refresh(node);
            }),
            vscode.commands.registerCommand('cmake.projectStatus.viewConfigureSettings', async (_node) => {
                await (0, util_1.runCommand)('viewConfigureSettings');
            }),
            vscode.commands.registerCommand('cmake.projectStatus.configure', async (_node) => {
                void (0, util_1.runCommand)('configure');
            }),
            vscode.commands.registerCommand('cmake.projectStatus.setVariant', async (node) => {
                await (0, util_1.runCommand)('setVariant');
                await this.refresh(node);
            }),
            vscode.commands.registerCommand('cmake.projectStatus.build', async (_node) => {
                void (0, util_1.runCommand)('build');
            }),
            vscode.commands.registerCommand('cmake.projectStatus.setDefaultTarget', async (node) => {
                await (0, util_1.runCommand)('setDefaultTarget');
                await this.refresh(node);
            }),
            vscode.commands.registerCommand('cmake.projectStatus.selectBuildPreset', async (node) => {
                await (0, util_1.runCommand)('selectBuildPreset');
                await this.refresh(node);
            }),
            vscode.commands.registerCommand('cmake.projectStatus.viewBuildSettings', async (_node) => {
                await (0, util_1.runCommand)('viewBuildSettings');
            }),
            vscode.commands.registerCommand('cmake.projectStatus.ctest', async (_node) => {
                void (0, util_1.runCommand)('ctest');
            }),
            vscode.commands.registerCommand('cmake.projectStatus.cpack', async (_node) => {
                void (0, util_1.runCommand)('cpack');
            }),
            vscode.commands.registerCommand('cmake.projectStatus.workflow', async (_node) => {
                void (0, util_1.runCommand)('workflow');
            }),
            vscode.commands.registerCommand('cmake.projectStatus.setTestTarget', async (_node) => {
                // Do nothing
            }),
            vscode.commands.registerCommand('cmake.projectStatus.selectTestPreset', async (node) => {
                await (0, util_1.runCommand)('selectTestPreset');
                await this.refresh(node);
            }),
            vscode.commands.registerCommand('cmake.projectStatus.viewTestSettings', async (_node) => {
                await (0, util_1.runCommand)('viewTestSettings');
            }),
            vscode.commands.registerCommand('cmake.projectStatus.selectPackagePreset', async (node) => {
                await (0, util_1.runCommand)('selectPackagePreset');
                await this.refresh(node);
            }),
            vscode.commands.registerCommand('cmake.projectStatus.selectWorkflowPreset', async (node) => {
                await (0, util_1.runCommand)('selectWorkflowPreset');
                await this.refresh(node);
            }),
            vscode.commands.registerCommand('cmake.projectStatus.debugTarget', async (_node) => {
                await (0, util_1.runCommand)('debugTarget');
            }),
            vscode.commands.registerCommand('cmake.projectStatus.setDebugTarget', async (node) => {
                await (0, util_1.runCommand)('selectLaunchTarget');
                await this.refresh(node);
            }),
            vscode.commands.registerCommand('cmake.projectStatus.launchTarget', async (_node) => {
                await (0, util_1.runCommand)('launchTarget');
            }),
            vscode.commands.registerCommand('cmake.projectStatus.setLaunchTarget', async (node) => {
                await (0, util_1.runCommand)('selectLaunchTarget');
                await this.refresh(node);
            }),
            vscode.commands.registerCommand('cmake.projectStatus.selectActiveProject', async () => {
                await (0, util_1.runCommand)('selectActiveFolder');
                await this.refresh();
            }),
            vscode.commands.registerCommand('cmake.projectStatus.update', async () => {
                await this.refresh();
            })
        ]);
    }
    async openVisibilitySettings() {
        await vscode.commands.executeCommand('workbench.action.openSettingsJson', { revealSetting: { key: 'cmake.options.advanced' } });
    }
    async updateActiveProject(cmakeProject, options) {
        // Update Active Project
        await exports.treeDataProvider.updateActiveProject(cmakeProject, options);
    }
    refresh(node) {
        return exports.treeDataProvider.refresh(node);
    }
    clear() {
        return exports.treeDataProvider.clear();
    }
    dispose() {
        vscode.Disposable.from(...this.disposables).dispose();
        exports.treeDataProvider.dispose();
    }
    async hideBuildButton(isHidden) {
        await exports.treeDataProvider.hideBuildButton(isHidden);
    }
    async hideDebugButton(isHidden) {
        await exports.treeDataProvider.hideDebugButton(isHidden);
    }
    async hideLaunchButton(isHidden) {
        await exports.treeDataProvider.hideLaunchButton(isHidden);
    }
    async setIsBusy(isBusy) {
        await exports.treeDataProvider.setIsBusy(isBusy);
    }
    async doStatusChange(options) {
        await exports.treeDataProvider.doStatusChange(options);
    }
}
exports.ProjectStatus = ProjectStatus;
class TreeDataProvider {
    constructor() {
        this._onDidChangeTreeData = new vscode.EventEmitter();
        this.isFolderButtonHidden = false;
        this.isConfigButtonHidden = false;
        this.isBuildButtonHidden = false;
        this.isTestButtonHidden = false;
        this.isPackageButtonHidden = false;
        this.isWorkflowButtonHidden = false;
        this.isDebugButtonHidden = false;
        this.isLaunchButtonHidden = false;
        this.isBusy = false;
        this.treeView = vscode.window.createTreeView('cmake.projectStatus', { treeDataProvider: this });
    }
    get onDidChangeTreeData() {
        return this._onDidChangeTreeData.event;
    }
    get cmakeProject() {
        return this.activeCMakeProject;
    }
    async updateActiveProject(cmakeProject, options) {
        // Use project to create the tree
        if (cmakeProject) {
            this.activeCMakeProject = cmakeProject;
            await this.doStatusChange(options);
        }
        else {
            this.isConfigButtonHidden = false;
            this.isFolderButtonHidden = false;
            this.isBuildButtonHidden = false;
            this.isTestButtonHidden = false;
            this.isPackageButtonHidden = false;
            this.isWorkflowButtonHidden = false;
            this.isDebugButtonHidden = false;
            this.isLaunchButtonHidden = false;
        }
        await this.refresh();
    }
    async refreshNode(node) {
        if (node) {
            await node.refresh();
            this._onDidChangeTreeData.fire(node);
        }
    }
    async refreshConfigNode() {
        await this.refreshNode(this.configNode);
    }
    async refreshBuildNode() {
        await this.refreshNode(this.buildNode);
    }
    async refreshTestNode() {
        await this.refreshNode(this.testNode);
    }
    async refreshPackageNode() {
        await this.refreshNode(this.packageNode);
    }
    async refreshWorkflowNode() {
        await this.refreshNode(this.workflowNode);
    }
    async refresh(node) {
        if (node) {
            await node.refresh();
            this._onDidChangeTreeData.fire(node);
        }
        else {
            this._onDidChangeTreeData.fire(undefined);
        }
    }
    clear() {
        this.activeCMakeProject = undefined;
        return this.refresh();
    }
    dispose() {
        this.treeView.dispose();
    }
    getTreeItem(node) {
        return node.getTreeItem();
    }
    async getChildren(node) {
        var _a;
        if (node) {
            return node.getChildren();
        }
        else {
            // Initializing the tree for the first time
            const nodes = [];
            if (!this.isFolderButtonHidden) {
                const folderNode = new FolderNode();
                await folderNode.initialize();
                if (this.isBusy) {
                    folderNode.convertToStopCommand();
                }
                nodes.push(folderNode);
            }
            if (!this.isConfigButtonHidden) {
                const configNode = new ConfigNode();
                this.configNode = configNode;
                await configNode.initialize();
                if (this.isBusy) {
                    configNode.convertToStopCommand();
                }
                nodes.push(configNode);
            }
            if (!this.isBuildButtonHidden) {
                const buildNode = new BuildNode();
                this.buildNode = buildNode;
                await buildNode.initialize();
                if (this.isBusy) {
                    buildNode.convertToStopCommand();
                }
                nodes.push(buildNode);
            }
            if (!this.isTestButtonHidden) {
                const testNode = new TestNode();
                this.testNode = testNode;
                await testNode.initialize();
                if (this.isBusy) {
                    testNode.convertToStopCommand();
                }
                nodes.push(testNode);
            }
            if ((_a = this.cmakeProject) === null || _a === void 0 ? void 0 : _a.useCMakePresets) {
                if (!this.isPackageButtonHidden) {
                    const packageNode = new PackageNode();
                    this.packageNode = packageNode;
                    await packageNode.initialize();
                    if (this.isBusy) {
                        packageNode.convertToStopCommand();
                    }
                    nodes.push(packageNode);
                }
                if (!this.isWorkflowButtonHidden) {
                    const workflowNode = new WorkflowNode();
                    this.workflowNode = workflowNode;
                    await workflowNode.initialize();
                    if (this.isBusy) {
                        workflowNode.convertToStopCommand();
                    }
                    nodes.push(workflowNode);
                }
            }
            if (!this.isDebugButtonHidden) {
                const debugNode = new DebugNode();
                await debugNode.initialize();
                if (this.isBusy) {
                    debugNode.convertToStopCommand();
                }
                nodes.push(debugNode);
            }
            if (!this.isLaunchButtonHidden) {
                const launchNode = new LaunchNode();
                await launchNode.initialize();
                if (this.isBusy) {
                    launchNode.convertToStopCommand();
                }
                nodes.push(launchNode);
            }
            return nodes;
        }
    }
    // TODO: get rid of undefined?
    async doStatusChange(options) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r;
        let didChange = false;
        if (this.activeCMakeProject) {
            const folderVisibility = ((_b = (_a = options === null || options === void 0 ? void 0 : options.advanced) === null || _a === void 0 ? void 0 : _a.folder) === null || _b === void 0 ? void 0 : _b.projectStatusVisibility) !== "hidden";
            if (folderVisibility === this.isFolderButtonHidden) {
                didChange = true;
                this.isFolderButtonHidden = !folderVisibility;
            }
            const configureVisibility = ((_d = (_c = options === null || options === void 0 ? void 0 : options.advanced) === null || _c === void 0 ? void 0 : _c.configure) === null || _d === void 0 ? void 0 : _d.projectStatusVisibility) !== "hidden";
            if (configureVisibility === this.isConfigButtonHidden) {
                didChange = true;
                this.isConfigButtonHidden = !configureVisibility;
            }
            const buildVisibility = ((_f = (_e = options === null || options === void 0 ? void 0 : options.advanced) === null || _e === void 0 ? void 0 : _e.build) === null || _f === void 0 ? void 0 : _f.projectStatusVisibility) !== "hidden";
            if (buildVisibility === this.isBuildButtonHidden) {
                didChange = true;
                this.isBuildButtonHidden = !buildVisibility;
            }
            const testVisibility = ((_h = (_g = options === null || options === void 0 ? void 0 : options.advanced) === null || _g === void 0 ? void 0 : _g.ctest) === null || _h === void 0 ? void 0 : _h.projectStatusVisibility) !== "hidden";
            if (testVisibility === this.isTestButtonHidden) {
                didChange = true;
                this.isTestButtonHidden = !testVisibility;
            }
            const packageVisibility = ((_k = (_j = options === null || options === void 0 ? void 0 : options.advanced) === null || _j === void 0 ? void 0 : _j.cpack) === null || _k === void 0 ? void 0 : _k.projectStatusVisibility) !== "hidden";
            if (packageVisibility === this.isPackageButtonHidden) {
                didChange = true;
                this.isPackageButtonHidden = !packageVisibility;
            }
            const workflowVisibility = ((_m = (_l = options === null || options === void 0 ? void 0 : options.advanced) === null || _l === void 0 ? void 0 : _l.workflow) === null || _m === void 0 ? void 0 : _m.projectStatusVisibility) !== "hidden";
            if (workflowVisibility === this.isWorkflowButtonHidden) {
                didChange = true;
                this.isWorkflowButtonHidden = !workflowVisibility;
            }
            const debugVisibility = ((_p = (_o = options === null || options === void 0 ? void 0 : options.advanced) === null || _o === void 0 ? void 0 : _o.debug) === null || _p === void 0 ? void 0 : _p.projectStatusVisibility) !== "hidden";
            if (debugVisibility === this.isDebugButtonHidden) {
                didChange = tru